<?xml version="1.0" encoding="UTF-8"?>
<!--
doc/src/sgml/ref/create_policy.sgml
PostgreSQL documentation
-->

<refentry id="sql-createpolicy">
 <indexterm zone="sql-createpolicy">
  <primary>CREATE POLICY</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE POLICY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Commandes du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE POLICY</refname>
  <refpurpose>définir un niveau de politique de sécurité pour une table</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE POLICY <replaceable class="parameter">nom</replaceable> ON <replaceable class="parameter">nom_table</replaceable>
    [ AS { PERMISSIVE | RESTRICTIVE } ]
    [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
    [ TO { <replaceable class="parameter">nom_role</replaceable> | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
    [ USING ( <replaceable class="parameter">expression_USING</replaceable> ) ]
    [ WITH CHECK ( <replaceable class="parameter">expression_CHECK</replaceable> ) ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   La commande <command>CREATE POLICY</command> définit un nouveau niveau
   de politique de sécurité pour une table.
   Notez que le niveau de politique de sécurité doit être actif pour la
   table.
   Les politiques de sécurité créées peuvent être appliquées en
   utilisant la commande suivante&nbsp;:
   <command>ALTER TABLE ... ENABLE ROW LEVEL SECURITY</command>
  </para>

  <para>
    Une politique (<foreignphrase>policy</foreignphrase> dans la version
    originale de la documentation) valide l'autorisation de sélectionner
    (instruction SELECT), insérer (instruction INSERT), mettre à jour
    (instruction UPDATE) ou supprimer (instruction DELETE) des lignes qui
    correspondent à l'expression concordante d'une politique particulière.
    Une expression spécifiée avec <literal>USING</literal>
    sera vérifiée par rapport aux lignes existantes dans la table,
    tandis qu'une expression spécifiée avec <literal>WITH CHECK</literal> sera
    vérifiée sur les nouvelles lignes crées par <literal>INSERT</literal> ou
    <literal>UPDATE</literal>

    Lorsqu'une expression définie dans <literal>USING</literal> renvoie true
    pour une ligne donnée, alors cette ligne est visible pour l'utilisateur.
    Dans le cas contraire, cette ligne reste invisible.

    Lorsqu'une expression définie dans <literal>WITH CHECK</literal> renvoie
    true pour une ligne, alors cette ligne est insérée. Par contre, si elle
    renvoie false ou NULL, cela génère une erreur.
  </para>

  <para>
   Pour les commandes <command>INSERT</command> et <command>UPDATE</command>,
   les expressions définies dans <literal>WITH CHECK</literal> sont
   appliquées après l'activation du trigger <literal>BEFORE</literal>
   et avant qu'aucune modification de données n'ait réellement été
   effectuée.

   Un trigger <literal>BEFORE ROW</literal> peut éventuellement
   modifier les données à insérer, influençant ainsi le résultat de la
   politique de sécurité.

   Les expressions définies dans <literal>WITH CHECK</literal> sont forcées avant
   toutes les autres contraintes.
  </para>

  <para>
    Les noms de politique s'entendent par table. De ce fait, un même nom
	de politique peut être utilisé pour différentes tables et avoir une
	définition différente, adaptée à la table en question.
  </para>

  <para>
   Les politiques peuvent être appliquées pour des commandes ou rôles
   spécifiques.
   Par défaut, une nouvelle politique créée sera appliquée à toutes les
   commandes et pour tous les rôles à moins qu'autre chose ne soit
   spécifié.

   Si plusieurs politiques sont applicables à une requête donnée, elles seront
   combinées en utilisant OR (bien que les politiques <literal>ON CONFLICT
   DO UPDATE</literal> et <literal>INSERT</literal> ne soient pas
   combinées de cette manière mais sont plutôt appliquées comme demandé
   à chaque étape de l'exécution <literal>ON CONFLICT</literal>).
  </para>

  <para>
   Pour les commandes qui ont simultanément les politiques
   <literal>USING</literal> et <literal>WITH CHECK</literal>
   (<literal>ALL</literal> et <literal>UPDATE</literal>),
   s'il n'y a pas de politique <literal>WITH CHECK</literal> définie, alors
   la politique <literal>USING</literal> sera utilisée pour les lignes
   visibles (cas normal d'utilisation de <literal>USING</literal>),
   et pour les lignes qui obtiendront l'autorisation d'être ajoutées
   (cas <literal>WITH CHECK</literal> ).
  </para>

  <para>
   Si un niveau de sécurité est activé pour une table mais qu'aucune
   politique (policy) n'est applicable, une politique <quote>default
   deny</quote> est utilisée, plus aucune ligne n'est alors visible ou
   modifiable.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
	  Nom de la politique à créer. Chaque nom de politique doit
	  être unique au sein d'une table.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_table</replaceable></term>
    <listitem>
     <para>
     Le nom (optionnellement qualifié par le schéma) de la table à
     laquelle s'applique la politique.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PERMISSIVE</literal></term>
    <listitem>
     <para>
      Spécifie que la politique doit être crée comme une politique permissive.
      Toutes les politiques permissives qui s'appliquent à une requête donnée
      seront combinée ensemble en utilisant l'opérateur booléen « OR ».  En
      créant des politiques permissives, les administrateurs peuvent ajouter
      des enregistrements à l'ensemble qui sera accédé.  Les politiques sont
      permissives par défaut.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICTIVE</literal></term>
    <listitem>
     <para>
      Spécifie que la politique doit être crée comme une politique restrictive.
      Toutes les politiques permissives qui s'appliquent à une requête donnée
      seront combinée ensemble en utilisant l'opérateur booléen « AND ».  En
      créant des politiques restrictives, les administrateurs peuvent retirer
      des enregistrements de l'ensemble qui sera accédé puisque toutes les
      politiques restrictives doivent $etre passée pour chaque enregistrement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">commande</replaceable></term>
    <listitem>
     <para>
      La commande à laquelle la politique s'applique.
      Les options valides sont les suivantes&nbsp;:
      <command>ALL</command>, <command>SELECT</command>,
      <command>INSERT</command>, <command>UPDATE</command>,
      et <command>DELETE</command>.
      <command>ALL</command> est la valeur par défaut.
      Vous verrez par la suite comment sont appliquées les spécificités
      de chaque option.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_role</replaceable></term>
    <listitem>
     <para>
	  Le ou les role(s) auxquels les politiques sont appliquées.
	  Par défaut, c'est le pseudo-rôle <literal>PUBLIC</literal>, qui applique
	  les politiques à tous les rôles.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression_USING</replaceable></term>
    <listitem>
     <para>
	  Toute expression <acronym>SQL</acronym> conditionnelle
	  (autrement dit, renvoyant une donnée de type <type>boolean</type>).
      L'expression conditionnelle ne peut pas contenir de fonction
      d'agrégat ou de fenêtrage (window).
      Si le niveau de politique de sécurité est activé, cette expression
      sera ajoutée aux requêtes exécutées sur la table.
      Les lignes pour lesquelles l'expression renvoie true seront
      visibles.
      Toute ligne pour laquelle l'expression renvoie false
      ou NULL sera invisible pour l'utilisateur (avec <command>SELECT</command>)
      et ne sera pas modifiable (avec <command>UPDATE</command> ou
      <command>DELETE</command>).
      Ces lignes seront supprimées sans qu'aucune erreur ou notification
      ne soit rapportée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression_CHECK</replaceable></term>
    <listitem>
     <para>
	  Toute expression <acronym>SQL</acronym> conditionnelle
	  (autrement dit, renvoyant une donnée de type <type>boolean</type>).
      L'expression conditionnelle ne peut pas contenir de fonction d'agrégat
      ou de fenêtrage (window).
      Si le niveau de politique de sécurité est activé, cette expression
      sera utilisée dans les requêtes contenant <command>INSERT</command>
      et <command>UPDATE</command>.
      Seules les lignes pour lesquelles l'expression est évaluée à true
      seront autorisée à être modifiées.
      Une erreur sera générée si l'évalutation de la condition de la
      commande UPDATE ou INSERT renvoie false ou NULL pour n'importe quel
      enregistrement parmi l'ensemble des résultats.
      Notez que <replaceable class="parameter">expression_CHECK</replaceable>
      est évaluée sur le futur contenu de la ligne, et non pas sur le contenu
      d'origine.
    </para>
    </listitem>
   </varlistentry>

  </variablelist>

 <refsect2>
   <title>Politique par commande</title>

   <variablelist>

     <varlistentry id="sql-createpolicy-all">
      <term><literal>ALL</literal></term>
      <listitem>
       <para>
		 Utiliser <literal>ALL</literal> pour une politique signifie
		 qu'elle s'appliquera pour toutes les commandes, peu importe
		 le type de commande.

         Si une politique <literal>ALL</literal> existe et que des politiques
         spécifiques supplémentaires existent, alors leur résultat sera
         combinée avec une opération booléenne OR, et c'est le résultat de
         cette opération qui sera appliqué.
         Le comportement est identique lorsque les politiques se chevauchent.

         Pour terminer, les politiques <literal>ALL</literal> seront
         appliquées pour la partie extraction et pour la partie
         modification de la requête, en utilisant l'expression définie
         dans <literal>USING</literal> pour les deux cas si seule la
         partie <literal>USING</literal> est définie.
       </para>

       <para>
		 Par exemple, si une requête <literal>UPDATE</literal> est
		 exécutée, alors la politique <literal>ALL</literal> sera applicable
		 sur les lignes à modifier que la commande <literal>UPDATE</literal>
     sera capable de sélectionner (en appliquant l'expression
		 définie dans <literal>USING</literal>) mais aussi sur le
		 résultat des lignes modifiées, pour vérifier s'il est autorisé
		 de les ajouter à la table (en appliquant l'expression définie
		 dans <literal>WITH CHECK</literal> si elle est définie, et
         sinon en appliquant l'expression définie dans <literal>USING
         </literal>).

         Si une <command>INSERT</command> ou <command>UPDATE</command>
         essaie d'ajouter des lignes à une table et est bloquée par
         l'expression définie dans <literal>WITH CHECK</literal> de la
         politique <literal>ALL</literal>, l'ensemble de la commande est
         annulé.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="sql-createpolicy-select">
      <term><literal>SELECT</literal></term>
      <listitem>
       <para>
		 Utiliser <literal>SELECT</literal> dans une politique signifie
		 que cette politique s'appliquera à toutes les requêtes
		 <literal>SELECT</literal> ainsi qu'à toute vérification du
		 droit <literal>SELECT</literal> nécessaire sur
		 la table pour laquelle la politique est définie.

         Concernant les requêtes <literal>SELECT</literal>, le résultat
         sera composé uniquement des lignes qui auront passé la politique
         <literal>SELECT</literal>

         Pour les requêtes qui demandent des droits, telles que les
         commandes d'<literal>UPDATE</literal>, elles verront uniquement
         dans le résultat les lignes qui auront été autorisés par la politique
         <literal>SELECT</literal>

         Une politique <literal>SELECT</literal> ne peut pas avoir une
         expression définie dans <literal>WITH CHECK</literal> qui ne
         s'applique que dans le cas où des enregistrements sont
         récupérés depuis la table.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="sql-createpolicy-insert">
      <term><literal>INSERT</literal></term>
      <listitem>
       <para>
         Utiliser <literal>INSERT</literal> dans une politique signifie
		 que cette politique s'appliquera à toutes les requêtes
     <literal>INSERT</literal>
		 Les lignes à insérer qui ne passent pas la politique renvoient une
		 erreur de violation de politique, et l'ensemble <literal>INSERT</literal>
     de la commande est annulé.
         Une politique <literal>INSERT</literal> ne peut pas avoir une
         expression définie dans <literal>USING</literal> qui ne
         s'applique que dans les cas où des enregistrements sont ajoutés
         à la table.

       </para>
       <para>
         Notez que la commande <literal>INSERT</literal> avec
         <literal>ON CONFLICT DO UPDATE</literal> vérifie la politique
         <literal>INSERT</literal> avec l'expression définie dans
         <literal>WITH CHECK</literal> uniquement pour les lignes ajoutées
         à la table par la commande <literal>INSERT</literal> .
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="sql-createpolicy-update">
      <term><literal>UPDATE</literal></term>
      <listitem>
       <para>
		 Utiliser <literal>UPDATE</literal> dans une politique signifie
		 que cette politique s'appliquera à toutes les requêtes
		 <literal>UPDATE</literal> (ou accessoirement aux clauses
		 <literal>ON CONFLICT DO UPDATE</literal> de la commande
		 <literal>INSERT</literal>).

		 Puisque la commande <literal>UPDATE</literal> implique de
		 récupérer un enregistrement existant puis d'en modifier une
		 partie (voire ne rien modifier), la politique <literal>UPDATE</literal>
		 accepte les expressions définies dans <literal>USING</literal>
		 mais aussi dans <literal>WITH CHECK</literal>

		  L'expression définie dans <literal>USING</literal> déterminera
		  sur quelle selection d'enregistrements la commande <literal>
		  UPDATE</literal> est capable de travailler tandis que
		  l'expression définie dans <literal>WITH CHECK</literal>
		  déterminera les enregistrements qui pourront être modifiés et
		  réinjectés dans la table.
       </para>

       <para>

         Lorsqu'une commande <literal>UPDATE</literal> est utilisée avec une
         clause <literal>WHERE</literal> ou <literal>RETURNING</literal>, les
         droits de <literal>SELECT</literal> sont nécessaires sur la table à
         mettre à jour. De ce fait, le résultat des politiques sur
         <literal>SELECT</literal> et <literal>ALL</literal> seront combinées
         avec une opération booléenne OR si les politiques
         <literal>SELECT</literal> se chevauchent et sinon avec une opération
         booléenne AND sur la clause <literal>USING</literal> appliquée par la
         politique définie pour <literal>UPDATE</literal>.

         Donc, pour qu'un utilisateur soit capable de mettre à jour des
         lignes spécifiques, cet utilisateur doit avoir accès aux lignes
         protégées par les politiques <literal>SELECT</literal> ou
         <literal>ALL</literal> et les lignes doivent être autorisées à
         être mises à jour par la politique <literal>UPDATE</literal>
         utilisant l'expression définie dans <literal>USING</literal>
       </para>

       <para>
		 Si une seule ligne à mettre à jour ne remplit pas les
		 conditions pour être autorisée par l'expression spécifiée dans
		 <literal>WITH CHECK</literal>, une erreur sera générée, et
		 l'ensemble de la commande est annulé.
		 S'il n'y a que l'expression spécifiée dans <literal>USING</literal>
     qui a été définie alors c'est cette expression qui
		 sera utilisée pour vérifier les cas <literal>USING</literal> et
		 <literal>WITH CHECK</literal>
       </para>

       <para>
         Notez toutefois que, dans le cas d'une commande
         <literal>INSERT</literal> avec <literal>ON CONFLICT DO
         UPDATE</literal>, la politique <literal>UPDATE</literal> avec une
         expression définie dans <literal>USING</literal> sera toujours
         appliquée comme une expression définie dans <literal>WITH
         CHECK</literal>.

         Cette policy doit systématiquement être appliquée lorsque la branche
         <literal>UPDATE</literal> est empruntée.
         Toutes les lignes existantes doivent nécessairement être
         autorisées par les policy (<literal>SELECT</literal> ou
         <literal>ALL</literal>)en utilisant la ou les expressions définies dans
         <literal>USING</literal> (combinées avec OR) qui sont toujours
         appliquées comme une ou des expression(s) définie(s) dans
         <literal>WITH CHECK</literal> dans ce contexte.
         (La branche <literal>UPDATE</literal> ne sera <emphasis>jamais
         </emphasis> ignorée sans que cela génère une erreur.)
         Pour terminer, la dernière ligne insérée dans la table doit
         passer toutes les contraintes définies dans<literal>WITH CHECK
         </literal> qu'un simple <literal>UPDATE</literal> devrait de
         toutes façons satisfaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="sql-createpolicy-delete">
      <term><literal>DELETE</literal></term>
      <listitem>
       <para>
     	 Utiliser <literal>DELETE</literal> dans une politique signifie
		 que cette politique s'appliquera à toutes les requêtes
		 <literal>DELETE</literal>.
		 Seules les lignes autorisées par cette politique seront
		 visibles à une commande <literal>DELETE</literal>
		 Il peut y avoir des lignes visibles retournées par la commande
		 <literal>SELECT</literal> qui ne sont pas candidates à la
		 suppression si elles ne sont pas validées par l'expression
		 définie dans la clause <literal>USING</literal> de la politique
		 <literal>DELETE</literal>
       </para>

       <para>
         Lorsqu'une commande <literal>DELETE</literal> est utilisée
         avec une clause <literal>WHERE</literal> ou une clause
         <literal>RETURNING</literal>, les droits sur <literal>SELECT</literal>
         sont nécessaires sur la table à mettre à jour,
         De ce fait, les résultats des politiques sur <literal>SELECT</literal> et
         <literal>ALL</literal> seront combinées avec une opération booléenne AND (avec un OR
         si les politiques <literal>SELECT</literal>sse chevauchent) sur la
         clause <literal>USING</literal> appliquée par la policy définie
         pour <literal>DELETE</literal>.
         Pour qu'un utilisateur soit capable de mettre à jour des
         lignes spécifiques, cet utilisateur doit avoir accès aux lignes
         protégées par les politiques <literal>SELECT</literal> ou
         <literal>ALL</literal> et les lignes doivent être autorisées à
         être mise à jour par la politique <literal>DELETE</literal>
         utilisant l'expression définie dans <literal>USING</literal>
       </para>

       <para>
         Une politique <literal>DELETE</literal> ne peut pas avoir
         d'expression définie dans <literal>WITH CHECK</literal> puisque
         cette politique ne s'applique qu'à des enregistrements qui vont être
         supprimés de la table. Il n'y a donc pas de nouvelles lignes
         à vérifier.
       </para>
      </listitem>
     </varlistentry>

   </variablelist>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Vous devez être le propriétaire de la table pour laquelle vous souhaitez
   creéer ou modifier des politiques.
  </para>

  <para>
   Tandis que les politiques sont appliquées pour les requêtes
   accédant explicitement aux tables de la base de données, elles ne sont
   pas appliquées lorsque le système réalise des vérfications internes
   d'integrité	sur le référentiel ou pour la validation des contraintes.
   Ce qui signifie qu'il y a des manières indirectes de determiner si une
   valeur donnée existe.

   Par exemple, si vous essayez d'insérer un doublon dans une colonne
   clé primaire, ou qui possède une contrainte d'unicité.
   Si l'insertion échoue alors l'utilisateur peut inférer que la valeur
   existe déjà. (dans cet exemple, il est entendu que l'utilisateur est
   soumis à une politique de sécurité lui permettant d'insérer
   des enregistrements qu'il n'est néanmoins pas autorisé à consulter)

   Un autre exemple, si un utilisateur est autorisé à insérer dans une
   table qui en référence une autre, une table cachée.
   Son existence peut être determinée par l'utilisateur en insérant
   une valeur dans la table, la réussite indiquerait que la valeur existe
   dans la table référencée.

   Ces problèmes peuvent être résolus en vérifiant minutieusement les
   politiques de façon à ce que les utilisateurs ne puissent pas insérer,
   supprimer, ou mettre à jour des enregistrements qui pourraient
   récupérer des valeurs qu'ils ne devraient pas pouvoir consulter, ou
   en utilisant un générateur de valeur (par exemple clés substituées) à la
   place de clés à signification externe.
  </para>

  <para>
   Veuillez noter qu'il doit y avoir au moins une politique permissive pour
   autoriser l'accès aux enregistrements avant que les politiques restrictives
   puissent être efficacement utilisées pour réduire cet accès.  Si seules des
   politiques restrictives existent, alors aucun enregistrement ne sera
   accessible.  Quand un mélange de politiques permissives et restrictives est
   présent, un enregistrement est seulement accessible si au moins une des
   politiques permissives est passée, en plus de toutes les politiques
   restrictives.
  </para>

  <para>
	En général le système va appliquer des conditions filtrantes en
	se servant de politiques de sécurité pour prioriser les conditions
	apparaissant dans les requêtes utilisateur. Ceci afin d'éviter
	d'exposer par inadvertance des données protégées à certaines
	fonctions utilisateurs qui pourraient ne pas être dignes de
	confiance.
	Les fonctions et opérateurs, taggués <literal>LEAKPROOF</literal>
	par le système (ou l'administrateur système) seront évaluées
	avant les expressions des politiques et seront considérées comme
	digne de confiance.
  </para>

  <para>
   Comme les expressions de politique s'appliquent directement à la requête
   d'un utilisateur, elles seront lancées avec les droits de cet
   utilisateur pendant toute la durée de la requête.
   De ce fait, un utilisateur qui utilise une politique donnée doit pouvoir
   accéder à toutes les tables et fonctions référencées dans
   l'expression de vérification, sinon il recevra une erreur du type
   <quote>permission denied</quote> en essayant d'accéder à une référence dont le niveau de
   sécurité est activé. Cependant, ceci ne modifie pas le fonctionnement
   des vues.
   Comme avec les requêtes classiques et leurs vues, les vérifications
   des autorisations et politiques des tables référencées par la vue
   utilisent les droits du propriétaire de la vue, ainsi les politiques
   s'appliquent sur le propriétaire de la la vue.
  </para>

  <para>
   Des commentaires supplémentaires et des exemples pratiques peuvent
   être trouvés ici&nbsp;: <xref linkend="ddl-rowsecurity"/>.
  </para>

 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>CREATE POLICY</command> est une extension
   <productname>PostgreSQL</productname>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterpolicy"/></member>
   <member><xref linkend="sql-droppolicy"/></member>
   <member><xref linkend="sql-altertable"/></member>
  </simplelist>
 </refsect1>

</refentry>

