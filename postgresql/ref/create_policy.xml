<?xml version="1.0" encoding="UTF-8"?>
<!--
doc/src/sgml/ref/create_policy.sgml
PostgreSQL documentation
-->

<refentry id="sql-createpolicy">
 <indexterm zone="sql-createpolicy">
  <primary>CREATE POLICY</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle>CREATE POLICY</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Commandes du langage</refmiscinfo>
 </refmeta>
 
 <refnamediv>
  <refname>CREATE POLICY</refname>
  <refpurpose>définir un niveau de politique de sécurité pour une table</refpurpose>
 </refnamediv>
 
 <refsynopsisdiv>
  <synopsis>
CREATE POLICY <replaceable class="parameter">nom</replaceable> ON <replaceable class="parameter">nom_table</replaceable>
    [ AS { PERMISSIVE | RESTRICTIVE } ]
    [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
    [ TO { <replaceable class="parameter">nom_role</replaceable> | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
    [ USING ( <replaceable class="parameter">expression_USING</replaceable> ) ]
    [ WITH CHECK ( <replaceable class="parameter">expression_CHECK</replaceable> ) ]
  </synopsis>
 </refsynopsisdiv>
 
 <refsect1>
  <title>Description</title>
  
  <para>
   La commande <command>CREATE POLICY</command> définit un nouveau niveau
   de politique de sécurité pour une table.
   Notez que le niveau de politique de sécurité doit être actif pour la
   table.
   Les politiques de sécurité créées peuvent être appliquées en
   utilisant la commande suivante&nbsp;:
   <command>ALTER TABLE ... ENABLE ROW LEVEL SECURITY</command>
  </para>
  
  <para>
   Une politique (<foreignphrase>policy</foreignphrase> dans la version
   originale de la documentation) valide l'autorisation de sélectionner
   (instruction SELECT), insérer (instruction INSERT), mettre à jour
   (instruction UPDATE) ou supprimer (instruction DELETE) des lignes qui
   correspondent à l'expression concordante d'une politique particulière.
   Une expression spécifiée avec <literal>USING</literal>
   sera vérifiée par rapport aux lignes existantes dans la table,
   tandis qu'une expression spécifiée avec <literal>WITH CHECK</literal> sera
   vérifiée sur les nouvelles lignes crées par <literal>INSERT</literal> ou
   <literal>UPDATE</literal>
   
   Lorsqu'une expression définie dans <literal>USING</literal> renvoie true
   pour une ligne donnée, alors cette ligne est visible pour l'utilisateur.
   Dans le cas contraire, cette ligne reste invisible.
   
   Lorsqu'une expression définie dans <literal>WITH CHECK</literal> renvoie
   true pour une ligne, alors cette ligne est insérée. Par contre, si elle
   renvoie false ou NULL, cela génère une erreur.
  </para>
  
  <para>
   Pour les commandes <command>INSERT</command> et <command>UPDATE</command>,
   les expressions définies dans <literal>WITH CHECK</literal> sont
   appliquées après l'activation du trigger <literal>BEFORE</literal>
   et avant qu'aucune modification de données n'ait réellement été
   effectuée.
   
   Un trigger <literal>BEFORE ROW</literal> peut éventuellement
   modifier les données à insérer, influençant ainsi le résultat de la
   politique de sécurité.
   
   Les expressions définies dans <literal>WITH CHECK</literal> sont forcées avant
   toutes les autres contraintes.
  </para>
  
  <para>
   Les noms de politique s'entendent par table. De ce fait, un même nom
   de politique peut être utilisé pour différentes tables et avoir une
   définition différente, adaptée à la table en question.
  </para>
  
  <para>
   Les politiques peuvent être appliquées pour des commandes ou rôles
   spécifiques.
   Par défaut, une nouvelle politique créée sera appliquée à toutes les
   commandes et pour tous les rôles à moins qu'autre chose ne soit
   spécifié. Plusieurs politiques peuvent s'appliquer à une seule
   commande&nbsp;; voir ci-dessous pour plus de détails. <xref
   linkend="sql-createpolicy-summary"/> résume la façon dont s'appliquent les
   différents types de politique aux commandes spécifiques.
  </para>
  
  <para>
   Pour les politiques qui ont simultanément les expressions
   <literal>USING</literal> et <literal>WITH CHECK</literal>
   (<literal>ALL</literal> et <literal>UPDATE</literal>),
   s'il n'y a pas d'expression <literal>WITH CHECK</literal> définie, alors
   l'expression <literal>USING</literal> sera utilisée pour déterminer les lignes
   visibles (cas normal d'utilisation de <literal>USING</literal>),
   et les lignes qui obtiendront l'autorisation d'être ajoutées
   (cas <literal>WITH CHECK</literal> ).
  </para>
  
  <para>
   Si un niveau de sécurité est activé pour une table mais qu'aucune
   politique (policy) n'est applicable, une politique <quote>default
    deny</quote> est utilisée, plus aucune ligne n'est alors visible ou
   modifiable.
  </para>
 </refsect1>
 
 <refsect1>
  <title>Paramètres</title>
  
  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Nom de la politique à créer. Chaque nom de politique doit
      être unique au sein d'une table.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><replaceable class="parameter">nom_table</replaceable></term>
    <listitem>
     <para>
      Le nom (optionnellement qualifié par le schéma) de la table à
      laquelle s'applique la politique.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>PERMISSIVE</literal></term>
    <listitem>
     <para>
      Spécifie que la politique doit être crée comme une politique permissive.
      Toutes les politiques permissives qui s'appliquent à une requête donnée
      seront combinée ensemble en utilisant l'opérateur booléen <quote>OR</quote>.  En
      créant des politiques permissives, les administrateurs peuvent ajouter
      des enregistrements à l'ensemble qui sera accédé.  Les politiques sont
      permissives par défaut.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal>RESTRICTIVE</literal></term>
    <listitem>
     <para>
      Spécifie que la politique doit être crée comme une politique restrictive.
      Toutes les politiques permissives qui s'appliquent à une requête donnée
      seront combinée ensemble en utilisant l'opérateur booléen <quote>AND</quote>.  En
      créant des politiques restrictives, les administrateurs peuvent retirer
      des enregistrements de l'ensemble qui sera accédé puisque toutes les
      politiques restrictives doivent être passées pour chaque enregistrement.
     </para>
     
     <para>
      Il est nécessaire d'avoir au moins une politique permissive pour
      autoriser l'accès aux enregistrements avant que les politiques
      restrictives ne puissent être utilisées pour réduire cet accès. Si
      seules des politiques restrictives existent, alors aucun enregistrement
      ne sera accessible. Quand un mixe de politiques permissives et
      restrictives est présent, un enregistrement n'est accessible que si au
      moins une politique permissive passe, en plus de toutes les politiques
      restrictives.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><replaceable class="parameter">commande</replaceable></term>
    <listitem>
     <para>
      La commande à laquelle la politique s'applique.
      Les options valides sont les suivantes&nbsp;:
      <command>ALL</command>, <command>SELECT</command>,
      <command>INSERT</command>, <command>UPDATE</command>,
      et <command>DELETE</command>.
      <command>ALL</command> est la valeur par défaut.
      Vous verrez par la suite comment sont appliquées les spécificités
      de chaque option.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><replaceable class="parameter">nom_role</replaceable></term>
    <listitem>
     <para>
      Le ou les role(s) auxquels les politiques sont appliquées.
      Par défaut, c'est le pseudo-rôle <literal>PUBLIC</literal>, qui applique
      les politiques à tous les rôles.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><replaceable class="parameter">expression_USING</replaceable></term>
    <listitem>
     <para>
      Toute expression <acronym>SQL</acronym> conditionnelle
      (autrement dit, renvoyant une donnée de type <type>boolean</type>).
      L'expression conditionnelle ne peut pas contenir de fonction
      d'agrégat ou de fenêtrage (window).
      Si le niveau de politique de sécurité est activé, cette expression
      sera ajoutée aux requêtes exécutées sur la table.
      Les lignes pour lesquelles l'expression renvoie true seront
      visibles.
      Toute ligne pour laquelle l'expression renvoie false
      ou NULL sera invisible pour l'utilisateur (avec <command>SELECT</command>)
      et ne sera pas modifiable (avec <command>UPDATE</command> ou
      <command>DELETE</command>).
      Ces lignes seront supprimées sans qu'aucune erreur ou notification
      ne soit rapportée.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><replaceable class="parameter">expression_CHECK</replaceable></term>
    <listitem>
     <para>
      Toute expression <acronym>SQL</acronym> conditionnelle
      (autrement dit, renvoyant une donnée de type <type>boolean</type>).
      L'expression conditionnelle ne peut pas contenir de fonction d'agrégat
      ou de fenêtrage (window).
      Si le niveau de politique de sécurité est activé, cette expression
      sera utilisée dans les requêtes contenant <command>INSERT</command>
      et <command>UPDATE</command>.
      Seules les lignes pour lesquelles l'expression est évaluée à true
      seront autorisée à être modifiées.
      Une erreur sera générée si l'évaluation de la condition de la
      commande UPDATE ou INSERT renvoie false ou NULL pour n'importe quel
      enregistrement parmi l'ensemble des résultats.
      Notez que <replaceable class="parameter">expression_CHECK</replaceable>
      est évaluée sur le futur contenu de la ligne, et non pas sur le contenu
      d'origine.
     </para>
    </listitem>
   </varlistentry>
   
  </variablelist>
  
  <refsect2>
   <title>Politique par commande</title>
   
   <variablelist>
    
    <varlistentry id="sql-createpolicy-all">
     <term><literal>ALL</literal></term>
     <listitem>
      <para>
       Utiliser <literal>ALL</literal> pour une politique signifie qu'elle
       s'appliquera pour toutes les commandes, peu importe le type de
       commande. Si une politique <literal>ALL</literal> existe et que des
       politiques spécifiques supplémentaires existent, alors leur résultat
       sera appliqué. Pour terminer, les politiques <literal>ALL</literal>
       seront appliquées pour la partie extraction et pour la partie
       modification de la requête, en utilisant l'expression définie dans
       <literal>USING</literal> pour les deux cas si seule la partie
       <literal>USING</literal> est définie.
      </para>
      
      <para>
       Par exemple, si une requête <literal>UPDATE</literal> est
       exécutée, alors la politique <literal>ALL</literal> sera applicable
       sur les lignes à modifier que la commande <literal>UPDATE</literal>
       sera capable de sélectionner (en appliquant l'expression
       définie dans <literal>USING</literal>) mais aussi sur le
       résultat des lignes modifiées, pour vérifier s'il est autorisé
       de les ajouter à la table (en appliquant l'expression définie
       dans <literal>WITH CHECK</literal> si elle est définie, et
       sinon en appliquant l'expression définie dans <literal>USING
       </literal>).
       
       Si une <command>INSERT</command> ou <command>UPDATE</command>
       essaie d'ajouter des lignes à une table et est bloquée par
       l'expression définie dans <literal>WITH CHECK</literal> de la
       politique <literal>ALL</literal>, l'ensemble de la commande est
       annulé.
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry id="sql-createpolicy-select">
     <term><literal>SELECT</literal></term>
     <listitem>
      <para>
       Utiliser <literal>SELECT</literal> dans une politique signifie
       que cette politique s'appliquera à toutes les requêtes
       <literal>SELECT</literal> ainsi qu'à toute vérification du
       droit <literal>SELECT</literal> nécessaire sur
       la table pour laquelle la politique est définie.
       
       Concernant les requêtes <literal>SELECT</literal>, le résultat
       sera composé uniquement des lignes qui auront passé la politique
       <literal>SELECT</literal>
       
       Pour les requêtes qui demandent des droits, telles que les
       commandes d'<literal>UPDATE</literal>, elles verront uniquement
       dans le résultat les lignes qui auront été autorisés par la politique
       <literal>SELECT</literal>
       
       Une politique <literal>SELECT</literal> ne peut pas avoir une
       expression définie dans <literal>WITH CHECK</literal> qui ne
       s'applique que dans le cas où des enregistrements sont
       récupérés depuis la table.
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry id="sql-createpolicy-insert">
     <term><literal>INSERT</literal></term>
     <listitem>
      <para>
       Utiliser <literal>INSERT</literal> dans une politique signifie
       que cette politique s'appliquera à toutes les requêtes
       <literal>INSERT</literal>
       Les lignes à insérer qui ne passent pas la politique renvoient une
       erreur de violation de politique, et l'ensemble <literal>INSERT</literal>
       de la commande est annulé.
       Une politique <literal>INSERT</literal> ne peut pas avoir une
       expression définie dans <literal>USING</literal> qui ne
       s'applique que dans les cas où des enregistrements sont ajoutés
       à la table.
       
      </para>
      <para>
       Notez que la commande <literal>INSERT</literal> avec
       <literal>ON CONFLICT DO UPDATE</literal> vérifie la politique
       <literal>INSERT</literal> avec l'expression définie dans
       <literal>WITH CHECK</literal> uniquement pour les lignes ajoutées
       à la table par la commande <literal>INSERT</literal> .
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry id="sql-createpolicy-update">
     <term><literal>UPDATE</literal></term>
     <listitem>
      <para>
       Utiliser <literal>UPDATE</literal> dans une politique signifie
       que cette politique s'appliquera à toutes les requêtes
       <literal>UPDATE</literal>, <literal>SELECT FOR UPDATE</literal>
       et <literal>SELECT FOR SHARE</literal>, ainsi qu'aux clauses
       <literal>ON CONFLICT DO UPDATE</literal> de la commande
       <literal>INSERT</literal>.
       
       Puisque la commande <literal>UPDATE</literal> implique de
       récupérer un enregistrement existant et le replacer avec un
       nouvel enregistrement modifié, la politique <literal>UPDATE</literal>
       accepte les expressions définies dans <literal>USING</literal>
       mais aussi dans <literal>WITH CHECK</literal>
       
       L'expression définie dans <literal>USING</literal> déterminera
       sur quelle selection d'enregistrements la commande <literal>
        UPDATE</literal> est capable de travailler tandis que
       l'expression définie dans <literal>WITH CHECK</literal>
       déterminera les enregistrements qui pourront être modifiés et
       réinjectés dans la table.
      </para>
      
      <para>
       Si une seule ligne à mettre à jour ne remplit pas les
       conditions pour être autorisée par l'expression spécifiée dans
       <literal>WITH CHECK</literal>, une erreur sera générée, et
       l'ensemble de la commande est annulé.
       S'il n'y a que l'expression spécifiée dans <literal>USING</literal>
       qui a été définie alors c'est cette expression qui
       sera utilisée pour vérifier les cas <literal>USING</literal> et
       <literal>WITH CHECK</literal>
      </para>
      
      <para>
       Typiquement, une commande <literal>UPDATE</literal> a aussi besoin de
       lire les données des colonnes de la relation mise à jour (par exemple
       dans une clause <literal>WHERE</literal> ou dans une clause
       <literal>RETURNING</literal> ou dans une expression du côté droit de
       la clause <literal>SET</literal>). Dans ce cas, les droits
       <literal>SELECT</literal> sont aussi requis sur la relation en cours
       de mise à jour, et les politiques <literal>SELECT</literal> ou
       <literal>ALL</literal> seront appliquées en plus des politiques
       <literal>UPDATE</literal>. De ce fait, l'utilisateur doit avoir accès
       aux lignes en cours de mise à jour via une politique
       <literal>SELECT</literal> ou <literal>ALL</literal> en plus d'avoir le
       droit de mettre à jour la ligne via une politique
       <literal>UPDATE</literal> ou <literal>ALL</literal>.
      </para>
      
      <para>
       Quand une commande <literal>INSERT</literal> a une clause
       supplémentaire <literal>ON CONFLICT DO UPDATE</literal>, si le chemin
       <literal>UPDATE</literal> est pris, la ligne à mettre à jour est tout
       d'abord vérifiée avec les expressions <literal>USING</literal> de
       toute politique <literal>UPDATE</literal>, puis la nouvelle ligne mise
       à jour est vérifiée avec les expressions <literal>WITH
        CHECK</literal>. Néanmoins, notez que, contrairement à une commande
       <literal>UPDATE</literal> autonome, si la ligne existante ne passe pas
       les expressions <literal>USING</literal>, une erreur sera levée (le
       chemin <literal>UPDATE</literal> ne sera <emphasis>jamais</emphasis>
       évité silencieusement).
      </para>
     </listitem>
    </varlistentry>
    
    <varlistentry id="sql-createpolicy-delete">
     <term><literal>DELETE</literal></term>
     <listitem>
      <para>
       Utiliser <literal>DELETE</literal> dans une politique signifie
       que cette politique s'appliquera à toutes les requêtes
       <literal>DELETE</literal>.
       Seules les lignes autorisées par cette politique seront
       visibles à une commande <literal>DELETE</literal>
       Il peut y avoir des lignes visibles retournées par la commande
       <literal>SELECT</literal> qui ne sont pas candidates à la
       suppression si elles ne sont pas validées par l'expression
       définie dans la clause <literal>USING</literal> de la politique
       <literal>DELETE</literal>
      </para>
      
      <para>
       In most cases a <literal>DELETE</literal> command also needs to read
       data from columns in the relation that it is deleting from (e.g.,
       in a <literal>WHERE</literal> clause or a
       <literal>RETURNING</literal> clause). In this case,
       <literal>SELECT</literal> rights are also required on the relation,
       and the appropriate <literal>SELECT</literal> or
       <literal>ALL</literal> policies will be applied in addition to
       the <literal>DELETE</literal> policies.  Thus the user must have
       access to the row(s) being deleted through a <literal>SELECT</literal>
       or <literal>ALL</literal> policy in addition to being granted
       permission to delete the row(s) via a <literal>DELETE</literal> or
       <literal>ALL</literal> policy.
      </para>
      
      <para>
       Une politique <literal>DELETE</literal> ne peut pas avoir
       d'expression définie dans <literal>WITH CHECK</literal> puisque
       cette politique ne s'applique qu'à des enregistrements qui vont être
       supprimés de la table. Il n'y a donc pas de nouvelles lignes
       à vérifier.
      </para>
     </listitem>
    </varlistentry>
    
   </variablelist>
   
   <table id="sql-createpolicy-summary">
    <title>Politiques appliquées par type de commande</title>
    <tgroup cols="6">
     <colspec colnum="4" colname="update-using"/>
     <colspec colnum="5" colname="update-check"/>
     <spanspec namest="update-using" nameend="update-check" spanname="update"/>
     <thead>
      <row>
       <entry morerows="1">Command</entry>
       <entry><literal>Politique SELECT/ALL</literal></entry>
       <entry><literal>Politique INSERT/ALL</literal></entry>
       <entry spanname="update"><literal>Politique UPDATE/ALL</literal></entry>
       <entry><literal>Politique DELETE/ALL</literal></entry>
      </row>
      <row>
       <entry><literal>Expression USING</literal></entry>
       <entry><literal>Expression WITH CHECK</literal></entry>
       <entry><literal>Expression USING</literal></entry>
       <entry><literal>Expression WITH CHECK</literal></entry>
       <entry><literal>Expression USING</literal></entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><command>SELECT</command></entry>
       <entry>Ligne existante</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>SELECT FOR UPDATE/SHARE</command></entry>
       <entry>Ligne existante</entry>
       <entry>&mdash;</entry>
       <entry>Ligne existante</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>INSERT</command></entry>
       <entry>&mdash;</entry>
       <entry>Nouvelle ligne</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>INSERT ... RETURNING</command></entry>
       <entry>
        Nouvelle ligne <footnote id="rls-select-priv">
         <para>
          Si l'accès en lecture est requis pour une ligne nouvelle ou
          existante (par exemple, une clause <literal>WHERE</literal> ou
          <literal>RETURNING</literal> qui fait référence aux colonnes de la
          relation).
         </para>
        </footnote>
       </entry>
       <entry>Nouvelle ligne</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>UPDATE</command></entry>
       <entry>
        Lignes nouvelles et existantes <footnoteref linkend="rls-select-priv"/>
       </entry>
       <entry>&mdash;</entry>
       <entry>Ligne existante</entry>
       <entry>Nouvelle ligne</entry>
       <entry>&mdash;</entry>
      </row>
      <row>
       <entry><command>DELETE</command></entry>
       <entry>
        Ligne existante <footnoteref linkend="rls-select-priv"/>
       </entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>&mdash;</entry>
       <entry>Ligne existante</entry>
      </row>
      <row>
       <entry><command>ON CONFLICT DO UPDATE</command></entry>
       <entry>Lignes nouvelles et existantes</entry>
       <entry>&mdash;</entry>
       <entry>Ligne existante</entry>
       <entry>Nouvelle ligne</entry>
       <entry>&mdash;</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   
  </refsect2>
  
  <refsect2>
   <title>Application de plusieurs politiques</title>
   
   <para>
    Quand plusieurs politiques de différents types de commande s'appliquent à
    la même commande (par exemple, des politiques <literal>SELECT</literal> et
    <literal>UPDATE</literal> appliquées à une commande
    <literal>UPDATE</literal>), alors l'utilisateur doit avoir les deux types
    de droits (par exemple, le droit de sélectionner les lignes de la relation
    ainsi que le droit de les mettre à jour). De ce fait, les expressions pour
    un type de politique sont combinées pour l'autre type de politique en
    utilisant l'opérateur <literal>AND</literal>.
   </para>
   
   <para>
    Quand plusieurs politiques du même type de commande s'appliquent à la même
    commande, alors il doit exister au moins une politique
    <literal>PERMISSIVE</literal> donnant accès à la relation, et toutes les
    politiques <literal>RESTRICTIVE</literal> doivent passer. De ce fait,
    toutes les expressions de politique <literal>PERMISSIVE</literal> sont
    combinées en utilisant <literal>OR</literal>, toutes les expressions de
    politique <literal>RESTRICTIVE</literal> sont combinées en utilisant
    <literal>AND</literal>, et les résultats sont combinés en utilisant
    <literal>AND</literal>. S'il n'y a pas de politiques
    <literal>PERMISSIVE</literal>, alors l'accès est refusé.
   </para>
   
   <para>
    Notez que, pour combiner les différentes politiques, les politiques
    <literal>ALL</literal> sont traitées comme ayant le même type que tout
    autre type de politique appliquée.
   </para>
   
   <para>
    Par exemple, dans une commande <literal>UPDATE</literal> nécessitant des
    droits pour <literal>SELECT</literal> et <literal>UPDATE</literal>, si
    plusieurs politiques de chaque type sont applicables, elles seront
    combinées ainsi&nbsp;:
    
    <programlisting>
<replaceable>expression</replaceable> from RESTRICTIVE SELECT/ALL politique 1
AND
<replaceable>expression</replaceable> from RESTRICTIVE SELECT/ALL politique 2
AND
...
AND
(
  <replaceable>expression</replaceable> from PERMISSIVE SELECT/ALL politique 1
  OR
  <replaceable>expression</replaceable> from PERMISSIVE SELECT/ALL politique 2
  OR
  ...
)
AND
<replaceable>expression</replaceable> from RESTRICTIVE UPDATE/ALL politique 1
AND
<replaceable>expression</replaceable> from RESTRICTIVE UPDATE/ALL politique 2
AND
...
AND
(
  <replaceable>expression</replaceable> from PERMISSIVE UPDATE/ALL politique 1
  OR
  <replaceable>expression</replaceable> from PERMISSIVE UPDATE/ALL politique 2
  OR
  ...
)
    </programlisting>
   </para>
   
  </refsect2>
 </refsect1>
 
 <refsect1>
  <title>Notes</title>
  
  <para>
   Vous devez être le propriétaire de la table pour laquelle vous souhaitez
   creéer ou modifier des politiques.
  </para>
  
  <para>
   Tandis que les politiques sont appliquées pour les requêtes
   accédant explicitement aux tables de la base de données, elles ne sont
   pas appliquées lorsque le système réalise des vérifications internes
   d'intégrité sur le référentiel ou pour la validation des contraintes.
   Ce qui signifie qu'il y a des manières indirectes de déterminer si une
   valeur donnée existe.
   
   Par exemple, si vous essayez d'insérer un doublon dans une colonne
   clé primaire, ou qui possède une contrainte d'unicité.
   Si l'insertion échoue alors l'utilisateur peut inférer que la valeur
   existe déjà. (dans cet exemple, il est entendu que l'utilisateur est
   soumis à une politique de sécurité lui permettant d'insérer
   des enregistrements qu'il n'est néanmoins pas autorisé à consulter)
   
   Un autre exemple, si un utilisateur est autorisé à insérer dans une
   table qui en référence une autre, une table cachée.
   Son existence peut être déterminée par l'utilisateur en insérant
   une valeur dans la table, la réussite indiquerait que la valeur existe
   dans la table référencée.
   
   Ces problèmes peuvent être résolus en vérifiant minutieusement les
   politiques de façon à ce que les utilisateurs ne puissent pas insérer,
   supprimer, ou mettre à jour des enregistrements qui pourraient
   récupérer des valeurs qu'ils ne devraient pas pouvoir consulter, ou
   en utilisant un générateur de valeur (par exemple clés substituées) à la
   place de clés à signification externe.
  </para>
  
  <para>
   En général le système va appliquer des conditions filtrantes en
   se servant de politiques de sécurité pour prioriser les conditions
   apparaissant dans les requêtes utilisateur. Ceci afin d'éviter
   d'exposer par inadvertance des données protégées à certaines
   fonctions utilisateurs qui pourraient ne pas être dignes de
   confiance.
   Les fonctions et opérateurs, taggués <literal>LEAKPROOF</literal>
   par le système (ou l'administrateur système) seront évaluées
   avant les expressions des politiques et seront considérées comme
   digne de confiance.
  </para>
  
  <para>
   Comme les expressions de politique s'appliquent directement à la requête
   d'un utilisateur, elles seront lancées avec les droits de cet
   utilisateur pendant toute la durée de la requête.
   De ce fait, un utilisateur qui utilise une politique donnée doit pouvoir
   accéder à toutes les tables et fonctions référencées dans
   l'expression de vérification, sinon il recevra une erreur du type
   <quote>permission denied</quote> en essayant d'accéder à une référence dont le niveau de
   sécurité est activé. Cependant, ceci ne modifie pas le fonctionnement
   des vues.
   Comme avec les requêtes classiques et leurs vues, les vérifications
   des autorisations et politiques des tables référencées par la vue
   utilisent les droits du propriétaire de la vue, ainsi les politiques
   s'appliquent sur le propriétaire de la la vue.
  </para>
  
  <para>
   Des commentaires supplémentaires et des exemples pratiques peuvent
   être trouvés ici&nbsp;: <xref linkend="ddl-rowsecurity"/>.
  </para>
  
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>
  
  <para>
   <command>CREATE POLICY</command> est une extension
   <productname>PostgreSQL</productname>.
  </para>
 </refsect1>
 
 <refsect1>
  <title>Voir aussi</title>
  
  <simplelist type="inline">
   <member><xref linkend="sql-alterpolicy"/></member>
   <member><xref linkend="sql-droppolicy"/></member>
   <member><xref linkend="sql-altertable"/></member>
  </simplelist>
 </refsect1>
 
</refentry>

