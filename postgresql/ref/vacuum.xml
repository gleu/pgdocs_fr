<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-vacuum">
 <indexterm zone="sql-vacuum">
  <primary>VACUUM</primary>
 </indexterm>

 <refmeta>
  <refentrytitle id="sql-vacuum-title">VACUUM</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>VACUUM</refname>
  <refpurpose>récupère l'espace inutilisé et, optionnellement, analyse une
   base</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
VACUUM [ ( <replaceable class="parameter">option</replaceable> [, ...] ) ] [ <replaceable class="parameter">table_et_colonnes</replaceable> [, ...] ]
VACUUM [ FULL ] [ FREEZE ] [ VERBOSE ] [ ANALYZE ] [ <replaceable class="parameter">table_et_colonnes</replaceable> [, ...] ]

<phrase>où <replaceable class="parameter">option</replaceable> fait partie de&nbsp;:</phrase>

    FULL [ <replaceable class="parameter">boolean</replaceable> ]
    FREEZE [ <replaceable class="parameter">boolean</replaceable> ]
    VERBOSE [ <replaceable class="parameter">boolean</replaceable> ]
    ANALYZE [ <replaceable class="parameter">boolean</replaceable> ]
    DISABLE_PAGE_SKIPPING [ <replaceable class="parameter">boolean</replaceable> ]
    SKIP_LOCKED [ <replaceable class="parameter">boolean</replaceable> ]
    INDEX_CLEANUP [ <replaceable class="parameter">boolean</replaceable> ]
    TRUNCATE [ <replaceable class="parameter">boolean</replaceable> ]
    PARALLEL <replaceable class="parameter">integer</replaceable>

<phrase>et <replaceable class="parameter">table_et_colonnes</replaceable> est&nbsp;:</phrase>

    <replaceable class="parameter">nom_table</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>VACUUM</command> récupère l'espace de stockage occupé par des
   lignes mortes.
   Lors des opérations normales de <productname>PostgreSQL</productname>,
   les lignes supprimées ou rendues obsolètes par une mise à jour
   ne sont pas physiquement supprimées de leur table. Elles restent présentes
   jusqu'à ce qu'un <command>VACUUM</command> soit lancé.
   C'est pourquoi, il est nécessaire de faire un <command>VACUUM</command>
   régulièrement, spécialement sur les tables fréquemment mises à jour.
  </para>

  <para>
   Sans une liste <replaceable
   class="parameter">table_et_colonnes</replaceable>,
   <command>VACUUM</command> traite chaque table et vue matérialisée que
   l'utilisateur actuel a le droit de traiter ainsi. Avec une liste,
   <command>VACUUM</command> ne traite que ces tables.
  </para>

  <para>
   <command>VACUUM ANALYZE</command> fait un <command>VACUUM</command>,
   puis un <command>ANALYZE</command> sur chaque table sélectionnée.
   C'est une combinaison pratique pour les scripts de maintenance de
   routine. Voir la description d'<xref linkend="sql-analyze"/> pour avoir
   plus de détails sur ce qu'il traite.
  </para>

  <para>
   Le <command>VACUUM</command> standard (sans <literal>FULL</literal>)
   récupère simplement l'espace et le rend disponible pour une réutilisation.
   Cette forme de la commande peut opérer en parallèle avec les opérations
   normales de lecture et d'écriture de la table, car elle n'utilise pas de
   verrou exclusif. Néanmoins, l'espace récupéré n'est pas renvoyé au système
   de fichiers dans la plupart des cas&nbsp;; il est conservé pour être
   réutilisé dans la même table. Elle nous permet aussi d'exploiter plusieurs
   CPU pour traiter les index. Cette fonctionnalité est connue sous le nom
   <firstterm>vacuum parallélisé</firstterm>. Pour désactiver cette
   fonctionnalité, l'option <literal>PARALLEL</literal> peut être utilisée en
   spécifiant le nombre de workers à zéro. <command>VACUUM FULL</command>
   réécrit le contenu entier d'une table dans un nouveau fichier sur disque
   sans espace supplémentaire, permettant ainsi à l'espace non utilisé d'être
   retourné au système d'exploitation. Cette forme est bien plus lente et
   requiert un verrou exclusif sur chaque table pendant qu'elle s'exécute.
  </para>

  <para>
   Quand la liste d'options est entourée de parenthèses, les options peuvent
   être écrites dans n'importe quel ordre. Sans parenthèses, les options
   doivent être écrit dans l'ordre exact décrit ci-dessus. La syntaxe avec
   parenthèse a été ajoutée dès la version 9.0 de
   <productname>PostgreSQL</productname>&nbsp;; la syntaxe sans parenthèse est
   maintenant considérée comme obsolète.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>FULL</literal></term>
    <listitem>
     <para>
      Choisit un vacuum <quote>full</quote>, qui récupère plus d'espace,
      mais est beaucoup plus long et prend un verrou exclusif sur la table.
      Cette méthode requiert aussi un espace disque supplémentaire car il
      écrit une nouvelle copie de la table et ne supprime l'ancienne copie
      qu'à la fin de l'opération. Habituellement, cela doit seulement être
      utilisé quand une quantité importante d'espace doit être récupérée de
      la table.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FREEZE</literal></term>
    <listitem>
     <para>
      Choisit un <quote>gel</quote> agressif des lignes. Indiquer
      <literal>FREEZE</literal> est équivalent à réaliser un
      <command>VACUUM</command> avec les paramètres <xref
      linkend="guc-vacuum-freeze-min-age"/> et <xref
      linkend="guc-vacuum-freeze-table-age"/> configurés à zéro. Un gel
      agressif est toujours effectué quand la table est réécrite, cette option
      est donc redondante quand <literal>FULL</literal> est spécifié.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VERBOSE</literal></term>
    <listitem>
     <para>
      Affiche un rapport détaillé de l'activité de vacuum sur chaque table.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ANALYZE</literal></term>
    <listitem>
     <para>
      Met à jour les statistiques utilisées par l'optimiseur pour
      déterminer la méthode la plus efficace pour exécuter une
      requête.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DISABLE_PAGE_SKIPPING</literal></term>
    <listitem>
     <para>
      Habituellement, <command>VACUUM</command> ignorera certains blocs en se
      basant sur la <link linkend="vacuum-for-visibility-map">carte de
       visibilité</link>. Les blocs connues pour être entièrement gelés peuvent
      toujours être ignorés, et ceux où toutes les lignes sont connues pour
      être visibles par toutes les transactions peuvent être ignorées sauf
      lors de l'exécution d'un vacuum agressif. De plus, en dehors d'un vacuum
      agressif, certains blocs peuvent être ignorés pour éviter d'attendre la
      fin de leur utilisation par d'autres sessions. Cette option désactive
      entièrement ce comportement permettant d'ignorer certains blocs, et a
      pour but d'être utilisé uniquement quand le contenu de la carte de
      visibilité semble suspect, ce qui peut arrive seulement s'il y a un
      problème matériel ou logiciel causant une corruption de la base de
      données.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SKIP_LOCKED</literal></term>
    <listitem>
     <para>
      Indique que <command>VACUUM</command> ne doit pas attendre la
      disponibilité d'un verrou en conflit sur une table&nbsp;: si une table
      ne peut pas être verrouillée immédiatement sans attente, la table est
      ignorée. Notez que, même avec cette option, <command>VACUUM</command>
      pourrait toujours être bloqué lors de l'ouverture des index de la table.
      De plus, <command>VACUUM ANALYZE</command> pourrait toujours être bloqué
      lors de l'accès aux lignes de l'échantillon pour les partitions, les
      enfants dans le cadre d'un héritage de tables, et certains types de
      tables distantes. De plus, alors que <command>VACUUM</command> traite de
      façon standard toutes les partitions des tables partitionnées
      spécifiées, cette option fera en sorte que <command>VACUUM</command>
      ignorera toutes les partitions s'il y a un verrou en conflit sur la
      table partitionnée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INDEX_CLEANUP</literal></term>
    <listitem>
     <para>
      Indique que <command>VACUUM</command> doit tenter de supprimer les
      enregistrements de l'index qui pointent vers des lignes mortes. Ceci est
      le comportement habituellement désiré et est donc la valeur par défaut
      sauf si l'option <literal>vacuum_index_cleanup</literal> a été
      configurée à false pour la table en cours de traitement. Configurer
      cette option à false peut être utile quand il est nécessaire de rendre
      le VACUUM aussi rapide que possible, par exemple pour éviter une
      réutilisation imminente des identifiants de transaction (voir la <xref
      linkend="vacuum-for-wraparound"/>). Néanmoins, si le nettoyage de
      l'index n'est pas réalisé régulièrement, les performances pourraient en
      souffrir parce que, la table étant modifiée, les index accumulent des
      lignes mortes et la table elle-même accumule des pointeurs de ligne
      mortes qui ne peuvent pas être supprimés tant que le nettoyage de
      l'index n'est pas terminé. Cette option n'a aucun effet pour les tables
      qui n'ont pas d'index et est ignoré si l'option <literal>FULL</literal>
      est utilisée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TRUNCATE</literal></term>
    <listitem>
     <para>
      Indique que <command>VACUUM</command> doit tenter de tronquer toute page
      vide en fin de table et permettre que l'espace disque des pages
      tronquées soit rendu au système d'exploitation. Ceci est le comportement
      désiré habituellement et est le comportement par défaut sauf si l'option
      <literal>vacuum_truncate</literal> a été désactivée pour la table en
      cours de traitement. Configurer cette option à false peut être utile
      pour éviter un verrou <literal>ACCESS EXCLUSIVE</literal> sur la table
      que le troncage requiert. Cette option est ignorée si l'option
      <literal>FULL</literal> est utilisée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PARALLEL</literal></term>
    <listitem>
     <para>
      Effectue les phases de vacuum et de nettoyage d'index lors d'un
      <command>VACUUM</command> en parallèle en utilisant <replaceable
      class="parameter">integer</replaceable> processus en tâche de fond (pour
      les détails de chaque phase de vacuum, référez-vous au <xref
      linkend="vacuum-phases"/>). Le nombre de workers utilisés pour réaliser
      l'opération est égal au nombre d'index sur la relation qui supporte le
      vacuum parallélisé, qui est limité par le nombre de workers spécifiés
      avec la clause <literal>PARALLEL</literal> qui est elle-même limitée par
      le paramètre <xref linkend="guc-max-parallel-workers-maintenance"/>. Un
      index peut participer à un vacuum parallélisé si et seulement si la
      taille de l'index est supérieur à la valeur du paramètre <xref
      linkend="guc-min-parallel-index-scan-size"/>. Notez qu'il n'est pas
      garanti que le nombre de workers parallélisés indiqué dans <replaceable
      class="parameter">integer</replaceable> sera utilisé lors de
      l'exécution. Il est possible qu'un vacuum s'exécute avec moins de
      workers que spécifié, voire sans workers du tout. Seul un worker peut
      être utilisé par index. Donc les workers de parallélisation sont lancés
      seulement quand il y a au moins <literal>2</literal> index dans la
      table. Les workers pour le vacuum sont lancés avant le début de chaque
      phase et se terminent à la fin de la phase. Ces comportements pourraient
      changer dans une version future. Cette option ne peut pas être utilisée
      avec l'option <literal>FULL</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">boolean</replaceable></term>
    <listitem>
     <para>
      Indique si l'option sélectionnée doit être activée ou désactivée. Vous
      pouvez écrire <literal>TRUE</literal>, <literal>ON</literal> ou
      <literal>1</literal> pour activer l'option, et <literal>FALSE</literal>,
      <literal>OFF</literal> ou <literal>0</literal> pour la désactiver. La
      valeur <replaceable class="parameter">boolean</replaceable> peut aussi
      être omise, auquel cas <literal>TRUE</literal> est supposé.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">integer</replaceable></term>
    <listitem>
     <para>
      Spécifie une valeur entière non négative passée à l'option sélectionnée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_table</replaceable></term>
    <listitem>
     <para>
      Le nom (optionnellement qualifié par le nom d'un schéma) d'une table ou
      d'une vue matérialisée à traiter par vacuum. Si la table spécifiée est
      partitionnée, toutes les partitions enfants seront traitées.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_colonne</replaceable></term>
    <listitem>
     <para>
      Le nom d'une colonne spécifique à analyser. Par défaut, toutes les
      colonnes. Si une liste de colonnes est spécifiée,
      <literal>ANALYZE</literal> en est déduit.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Sorties</title>

  <para>
   Lorsque <literal>VERBOSE</literal> est précisé, <command>VACUUM</command> indique sa
   progression par des messages indiquant la table en cours
   de traitement. Différentes statistiques sur les tables sont aussi
   affichées.
  </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Pour exécuter un VACUUM sur une table, vous devez habituellement être le
   propriétaire de la table ou un superutilisateur. Néanmoins, les
   propriétaires de la base de données sont autorisés à exécuter VACUUM sur
   toutes les tables de leurs bases de données, sauf sur les catalogues
   partagés. Cette restriction signifie qu'un vrai <command>VACUUM</command>
   sur une base complète ne peut se faire que par un superutilisateur.)
   <command>VACUUM</command> ignorera toutes les tables pour lesquelles
   l'utilisateur n'a pas le droit d'exécuter un VACUUM.
  </para>

  <para>
   <command>VACUUM</command> ne peut pas être exécuté à l'intérieur
   d'un bloc de transactions.
  </para>

  <para>
   Pour les tables ayant des index <acronym>GIN</acronym>, <command>VACUUM</command>
   (sous n'importe quelle forme) termine aussi toutes les insertions d'index en
   attente, en déplaçant les entrées d'index aux bons endroits dans la structure
   d'index <acronym>GIN</acronym> principale. Voir la <xref
   linkend="gin-fast-update"/> pour les détails.
  </para>

  <para>
   Nous recommandons que les bases de données actives de production soient
   traitées par vacuum fréquemment (au moins toutes les nuits), pour supprimer
   les lignes mortes. Après avoir ajouté ou supprimé un grand nombre de
   lignes, il peut être utile de faire un <command>VACUUM ANALYZE</command>
   sur la table affectée. Cela met les catalogues système à jour
   de tous les changements récents et permet à l'optimiseur de
   requêtes de <productname>PostgreSQL</productname> de faire de meilleurs
   choix lors de l'optimisation des requêtes.
  </para>

  <para>
   L'option <option>FULL</option> n'est pas recommandée en usage normal, mais
   elle peut être utile dans certains cas. Par exemple, si vous avez supprimé
   ou mis à jour l'essentiel des lignes d'une table et si vous voulez que la table diminue
   physiquement sur le disque pour n'occuper que l'espace réellement
   nécessaire et pour que les parcours de table soient plus rapides.
   Généralement, <command>VACUUM FULL</command> réduit plus la table qu'un
   simple <command>VACUUM</command>.
  </para>

  <para>
   L'option <option>PARALLEL</option> est utilisée seulement pour le vacuum.
   Si cette option est spécifiée avec l'option <option>ANALYZE</option>, elle
   n'affecte pas <option>ANALYZE</option>.
  </para>

  <para>
   <command>VACUUM</command> peut engendrer une
   augmentation substantielle du trafic en entrées/sorties pouvant causer
   des performances diminuées pour les autres sessions actives. Du coup,
   il est quelque fois conseillé d'utiliser la fonctionnalité du délai du
   vacuum basé sur le coût. Pour un vacuum en parallèle, chaque processus
   dort proportionnellement au travail effectué par ce processus. Voir la <xref
   linkend="runtime-config-resource-vacuum-cost"/>
   pour des informations supplémentaires.
  </para>

  <para>
   <productname>PostgreSQL</productname> inclut un <quote>autovacuum</quote>
   qui peut automatiser la maintenance par VACUUM. Pour plus d'informations
   sur le VACUUM automatique et manuel, voir la
   <xref linkend="routine-vacuuming"/>.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Pour nettoyer une seule table <literal>onek</literal>, l'analyser pour
   l'optimiseur et afficher un rapport détaillé de l'activité du VACUUM&nbsp;:

   <programlisting>VACUUM (VERBOSE, ANALYZE) onek;</programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Il n'y a pas de commande <command>VACUUM</command> dans le standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="app-vacuumdb"/></member>
   <member><xref linkend="runtime-config-resource-vacuum-cost"/></member>
   <member><xref linkend="autovacuum"/></member>
  </simplelist>
 </refsect1>
</refentry>
