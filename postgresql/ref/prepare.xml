<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-prepare">
 <indexterm zone="sql-prepare">
  <primary>PREPARE</primary>
 </indexterm>

 <indexterm zone="sql-prepare">
  <primary>instructions préparées</primary>
  <secondary>création</secondary>
 </indexterm>

 <refmeta>
  <refentrytitle>PREPARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>PREPARE</refname>
  <refpurpose>prépare une instruction pour exécution</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>PREPARE <replaceable class="parameter">nom</replaceable> [ (<replaceable
class="parameter">type_données</replaceable> [, ...] ) ] AS <replaceable
class="parameter">instruction</replaceable>
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>PREPARE</command> crée une instruction préparée. Une instruction
   préparée est un objet côté serveur qui peut être utilisé pour optimiser les
   performances. Quand l'instruction <command>PREPARE</command> est exécutée,
   l'instruction spécifiée est lue, analysée et réécrite. Quand une
   commande <command>EXECUTE</command> est lancée par la suite, l'instruction
   préparée est planifiée et exécutée. Cette division du travail évite une analyse
   répétitive tout en permettant au plan d'exécution de dépendre des valeurs
   spécifiques du paramètre.
  </para>

  <para>
   Les instructions préparées peuvent prendre des paramètres&nbsp;: les valeurs
   sont substituées dans l'instruction lorsqu'elle est exécutée. Lors de la
   création de l'instruction préparée, faites référence aux paramètres suivant
   leur position, <literal>$1</literal>, <literal>$2</literal>, etc. Une liste
   correspondante des types de données des paramètres peut être spécifiée si
   vous le souhaitez. Quand le type de donnée d'un paramètre n'est pas indiqué
   ou est déclaré comme inconnu (<literal>unknown</literal>), le type est
   inféré à partir du contexte dans lequel le paramètre est référencé en premier
   (si possible). Lors de l'exécution de l'instruction, indiquez les valeurs
   réelles de ces paramètres dans l'instruction <command>EXECUTE</command>.
   Référez-vous à <xref linkend="sql-execute"/>
   pour plus d'informations à ce sujet.
  </para>

  <para>
   Les instructions préparées sont seulement stockées pour la durée
   de la session en cours. Lorsque la session se termine, l'instruction préparée
   est oubliée et, du coup, elle doit être recréée avant d'être utilisée de
   nouveau. Ceci signifie aussi qu'une seule instruction préparée ne peut pas
   être utilisée par plusieurs clients de bases de données simultanément&nbsp;;
   néanmoins, chaque client peut créer sa propre instruction préparée à
   utiliser. Les instructions préparées peuvent être supprimées manuellement
   en utilisant la commande <link
   linkend="sql-deallocate"><command>DEALLOCATE</command></link>.
  </para>

  <para>
   Les instructions préparées sont principalement intéressantes quand une seule
   session est utilisée pour exécuter un grand nombre
   d'instructions similaires. La différence de performances est
   potentiellement significative si les instructions sont complexes à
   planifier ou à réécrire, par exemple, si la requête implique une jointure de
   plusieurs tables ou requiert l'application de différentes règles. Si
   l'instruction est relativement simple à planifier ou à réécrire mais
   assez coûteuse à exécuter, l'avantage de performance des instructions
   préparées est moins net.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Un nom quelconque donné à cette instruction préparée particulière. Il
      doit être unique dans une session et est utilisé par la suite pour
      exécuter ou désallouer cette instruction préparée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_données</replaceable></term>
    <listitem>
     <para>
      Le type de données d'un paramètre de l'instruction préparée. Si le type
      de données d'un paramètre particulier n'est pas spécifié ou est spécifié
      comme étant inconnu (<literal>unknown</literal>), il sera inferré à
      partir du contexte dans lequel le paramètre est référencé en premier.
      Pour référencer les paramètres de l'instruction préparée, utilisez
      <literal>$1</literal>, <literal>$2</literal>, etc.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">instruction</replaceable></term>
    <listitem>
     <para>
      Toute instruction <command>SELECT</command>, <command>INSERT</command>,
      <command>UPDATE</command>, <command>DELETE</command> ou <command>VALUES</command>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-prepare-notes">
  <title>Notes</title>

  <para>
   Une requête préparée peut être exécutée soit avec un <firstterm>plan
    générique</firstterm> soit avec un <firstterm>plan
    personnalisé</firstterm>. Un plan générique est le même pour toutes les
   exécutions alors qu'un plan personnalisé est généré pour une exécution
   spécifique en utilisant les valeurs des paramètres données lors de son
   appel. L'utilisation d'un plan générique évite une charge supplémentaire
   pour la planification mais, dans certaines situations, un plan personnalisé
   sera bien plus efficace à exécuter parce que le planificateur pourra
   utiliser sa connaissance des valeurs des paramètres. (Bien sûr, si la
   requête préparée n'a pas de paramètres, ceci n'a pas d'intérêt et un plan
   générique sera toujours utilisé.)
  </para>

  <para>
   Par défaut (autrement dit, quand <xref linkend="guc-plan-cache_mode"/> est
   configuré à <literal>auto</literal>), le serveur choisira automatiquement
   l'utilisation d'un plan générique ou personnalisé pour une requête préparée
   utilisant des paramètres. La règle actuelle pour ceci est que les cinq
   premières exécutions sont réalisées avec des plans personnalisés et le coût
   moyen estimé pour ces plans est calculé. Un plan générique est créé et son
   estimation de coût est comparé au coût moyens des cinq plans personnalisés.
   Les exécutions suivantes utilisent le plan générique si son coût n'est pas
   tellement plus élevé que le coût moyen des plans personnalisés pour éviter
   de perdre du temps sur la planification.
  </para>

  <para>
   Cette heuristique peut être surchargée, en forçant le serveur à utiliser
   soit des plans génériques soit des plans personnalisés, en configurant
   <varname>plan_cache_mode</varname> à, respectivement,
   <literal>force_generic_plan</literal> ou
   <literal>force_custom_plan</literal>. Ce paramètre est principalement utile
   si l'estimation de coût du plan générique est très mauvais, autorisant son
   choix même si le coût réel est bien plus important que celui d'un plan
   personnalisé.
  </para>

  <para>
   Pour examiner le plan de requête que <productname>PostgreSQL</productname>
   utilise pour une instruction préparée, utilisez <link
   linkend="sql-explain"><command>EXPLAIN</command></link>,
   par exemple&nbsp;:
   <programlisting>
EXPLAIN EXECUTE <replaceable>nom</replaceable>(<replaceable>valeurs_parametres</replaceable>);
   </programlisting>
   Si un plan générique est utilisé, il contiendra des symboles
   <literal>$<replaceable>n</replaceable></literal>, alors qu'un plan
   personnalisé contiendra les valeurs fournies pour les paramètres.
  </para>

  <para>
   Pour plus d'informations sur la planification de la requête et les
   statistiques récupérées par <productname>PostgreSQL</productname> dans ce
   but, voir la documentation de <xref linkend="sql-analyze"/>.
  </para>

  <para>
   Bien que le but principal d'une requête préparée est déviter une analyse et
   une planification répétée, <productname>PostgreSQL</productname> forcera une
   nouvelle analyse et une nouvelle planification de la requête à chaque fois
   que les objets de la base utilisés dans la requête auront vus leur
   définition modifiée (requête DDL) or their planner statistics have
   been updated depuis la dernière utilisation de la
   requête préparée. De plus, si la valeur de <xref linkend="guc-search-path"/>
   change d'une exécution à l'autre, la requête sera de nouveau analysée d'après
   la nouvelle valeur du paramètre <varname>search_path</varname>. (Ce dernier
   comportement est nouveau depuis <productname>PostgreSQL</productname> 9.3.) Ces
   règles font d'une requête préparée l'équivalent sémantique de la soumission
   sans fin de la même requête, avec de meilleures performances si aucun objet
   n'est modifié, tout spécialement si le meilleur plan reste le même au travers
   des utilisations. Un exemple d'un cas où l'équivalence sémantique n'est pas
   parfaite est que, si la requête fait référence à une table dont le nom n'est pas
   qualifié du nom du schéma et qu'une nouvelle table de même nom est créée dans
   un schéma apparaissant avant dans le paramètre <varname>search_path</varname>,
   aucune nouvelle analyse n'intervient vu qu'aucun objet de la requête n'a été
   modifié. Néanmoins, si une autre modification force une nouvelle analyse, la
   nouvelle table sera référencée dans les utilisations suivantes.
  </para>

  <para>
   Vous pouvez voir toutes les instructions préparées disponibles dans la session
   en exécutant une requête sur la vue système <link
   linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>.
  </para>
 </refsect1>

 <refsect1 id="sql-prepare-examples" xreflabel="Exemples">
  <title>Exemples</title>
  <para>
   Crée une instruction préparée pour une instruction <command>INSERT</command>,
   puis l'exécute&nbsp;:
   <programlisting>PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
   </programlisting>
  </para>

  <para>
   Crée une instruction préparée pour une instruction <command>SELECT</command>,
   puis l'exécute&nbsp;:
   <programlisting>PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
   </programlisting>

   Dans cet exemple, notez que le type de données du deuxième paramètre n'est
   pas indiqué, donc il est déduit du contexte dans lequel
   <literal>$2</literal> est utilisé.
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL inclut une instruction <command>PREPARE</command> mais il
   est seulement utilisé en SQL embarqué. Cette version de l'instruction
   <command>PREPARE</command> utilise aussi une syntaxe quelque peu différente.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-deallocate"/></member>
   <member><xref linkend="sql-execute"/></member>
  </simplelist>
 </refsect1>
</refentry>
