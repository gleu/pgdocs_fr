<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<refentry id="sql-prepare">
 <refmeta>
  <refentrytitle>PREPARE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>PREPARE</refname>
  <refpurpose>prépare une instruction pour exécution</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>PREPARE <replaceable class="parameter">nom</replaceable> [ (<replaceable
class="parameter">type_données</replaceable> [, ...] ) ] AS <replaceable
class="parameter">instruction</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-prepare">
   <primary>PREPARE</primary>
  </indexterm>

  <indexterm zone="sql-prepare">
   <primary>instructions préparées</primary>
   <secondary>création</secondary>
  </indexterm>

  <para>
   <command>PREPARE</command> crée une instruction préparée. Une instruction
   préparée est un objet côté serveur qui peut être utilisé pour optimiser les
   performances. Quand l'instruction <command>PREPARE</command> est exécutée,
   l'instruction spécifiée est lue, analysée et réécrite. Quand une
   commande <command>EXECUTE</command> est lancée par la suite, l'instruction
   préparée est planifiée et exécutée. Cette division du travail évite une analyse
   répétitive tout en permettant au plan d'exécution de dépendre des valeurs
   spécifiques du paramètre.
  </para>

  <para>
   Les instructions préparées peuvent prendre des paramètres&nbsp;: les valeurs
   sont substituées dans l'instruction lorsqu'elle est exécutée. Lors de la
   création de l'instruction préparée, faites référence aux paramètres suivant
   leur position, <literal>$1</literal>, <literal>$2</literal>, etc. Une liste
   correspondante des types de données des paramètres peut être spécifiée si
   vous le souhaitez. Quand le type de donnée d'un paramètre n'est pas indiqué
   ou est déclaré comme inconnu (<literal>unknown</literal>), le type est
   inféré à partir du contexte dans lequel le paramètre est utilisé (si
   possible). Lors de l'exécution de l'instruction, indiquez les valeurs
   réelles de ces paramètres dans l'instruction <command>EXECUTE</command>.
   Référez-vous à <xref linkend="sql-execute"/>
   pour plus d'informations à ce sujet.
  </para>

  <para>
   Les instructions préparées sont seulement stockées pour la durée
   de la session en cours. Lorsque la session se termine, l'instruction préparée
   est oubliée et, du coup, elle doit être recréée avant d'être utilisée de
   nouveau. Ceci signifie aussi qu'une seule instruction préparée ne peut pas
   être utilisée par plusieurs clients de bases de données simultanément&nbsp;;
   néanmoins, chaque client peut créer sa propre instruction préparée à
   utiliser. L'instruction préparée peut être supprimés manuellement en
   utilisant la commande <xref linkend="sql-deallocate"
  />.
  </para>

  <para>
   Les instructions préparées sont principalement intéressantes quand une seule
   session est utilisée pour exécuter un grand nombre
   d'instructions similaires. La différence de performances est
   particulièrement significative si les instructions sont complexes à
   planifier ou à réécrire, par exemple, si la requête implique une jointure de
   plusieurs tables ou requiert l'application de différentes règles. Si
   l'instruction est relativement simple à planifier ou à réécrire mais 
   assez coûteuse à exécuter, l'avantage de performance des instructions
   préparées est moins net.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Un nom quelconque donné à cette instruction préparée particulière. Il
      doit être unique dans une session et est utilisé par la suite pour
      exécuter ou désallouer cette instruction préparée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_données</replaceable></term>
    <listitem>
     <para>
      Le type de données d'un paramètre de l'instruction préparée. Si le type
      de données d'un paramètre particulier n'est pas spécifié ou est
      spécifié comme étant inconnu (<literal>unknown</literal>), il sera inferré
      à partir du contexte dans lequel le paramètre est utilisé. Pour référencer
      les paramètres de l'instruction préparée, utilisez
      <literal>$1</literal>, <literal>$2</literal>, etc.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">instruction</replaceable></term>
    <listitem>
     <para>
      Toute instruction <command>SELECT</command>, <command>INSERT</command>,
      <command>UPDATE</command>, <command>DELETE</command> ou <command>VALUES</command>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Si une instruction préparée est exécutée suffisamment de fois, le serveur peut
   éventuellement décider de sauvegarder et ré-utiliser un plan générique plutôt
   que de re-planifier le plan à chaque fois. Cela surviendra immédiatement si
   l'instruction préparée n'a pas de paramètres. Sinon, cela n'arrivera que si
   le plan générique semble ne pas être plus coûteux que le plan dépendant des
   valeurs des paramètres. Typiquement un plan générique sera sélectionné
   seulement si les performances de la requête sont estimées comme étant
   insensible aux valeurs fournies pour les paramètres.
  </para>

  <para>
   Pour examiner le plan de requête que <productname>PostgreSQL</productname>
   utilise pour une instruction préparée, utilisez <xref linkend="sql-explain"/>.
   Si un plan générique est utilisé, il contiendra des symboles
   <literal>$<replaceable>n</replaceable></literal>, alors qu'un plan personnalisé
   contiendra les valeurs réellement utilisées.
  </para>

  <para>
   Pour plus d'informations sur la planification de la requête et les
   statistiques récupérées par <productname>PostgreSQL</productname> dans ce
   but, voir la documentation de <xref linkend="sql-analyze"/>.
  </para>

  <para>
   Although the main point of a prepared statement is to avoid repeated parse
   analysis and planning of the statement, <productname>PostgreSQL</productname> will
   force re-analysis and re-planning of the statement before using it
   whenever database objects used in the statement have undergone
   definitional (DDL) changes since the previous use of the prepared
   statement.  Also, if the value of <xref linkend="guc-search-path"/> changes
   from one use to the next, the statement will be re-parsed using the new
   <varname>search_path</varname>.  (This latter behavior is new as of
   <productname>PostgreSQL</productname> 9.3.)  These rules make use of a
   prepared statement semantically almost equivalent to re-submitting the
   same query text over and over, but with a performance benefit if no object
   definitions are changed, especially if the best plan remains the same
   across uses.  An example of a case where the semantic equivalence is not
   perfect is that if the statement refers to a table by an unqualified name,
   and then a new table of the same name is created in a schema appearing
   earlier in the <varname>search_path</varname>, no automatic re-parse will occur
   since no object used in the statement changed.  However, if some other
   change forces a re-parse, the new table will be referenced in subsequent
   uses.
  </para>

  <para>
   Vous pouvez voir toutes les instructions préparées disponibles dans la session
   en exécutant une requête sur la vue système <link
   linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>.
  </para>
 </refsect1>

 <refsect1 id="sql-prepare-examples">
  <title id="sql-prepare-examples-title">Exemples</title>
  <para>
   Crée une instruction préparée pour une instruction <command>INSERT</command>,
   puis l'exécute&nbsp;:
<programlisting>PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>

  <para>
   Crée une instruction préparée pour une instruction <command>SELECT</command>,
   puis l'exécute&nbsp;:
<programlisting>PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

   Note that the data type of the second parameter is not specified,
   so it is inferred from the context in which <literal>$2</literal> is used.
  </para>
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL inclut une instruction <command>PREPARE</command> mais il
   est seulement utilisé en SQL embarqué. Cette version de l'instruction
   <command>PREPARE</command> utilise aussi une syntaxe quelque peu différente.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-deallocate"/></member>
   <member><xref linkend="sql-execute"/></member>
  </simplelist>
 </refsect1>
</refentry>
