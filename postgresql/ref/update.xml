<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060228 pour la relecture -->
<!-- SAS 20060327 : tags -->
<!-- SAS 20060523 : Relecture après MAJ -->

<refentry id="sql-update">
 <indexterm zone="sql-update">
  <primary>UPDATE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>UPDATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>UPDATE</refname>
  <refpurpose>mettre à jour les lignes d'une table</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>[ WITH [ RECURSIVE ] <replaceable class="parameter">requête_with</replaceable> [, ...] ]
UPDATE [ ONLY ] <replaceable class="PARAMETER">nom_table</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    SET { <replaceable class="parameter">nom_colonne</replaceable> = { <replaceable class="parameter">expression</replaceable> | DEFAULT } |
          ( <replaceable class="PARAMETER">nom_colonne</replaceable> [, ...] ) = [ ROW ] ( { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } [, ...] ) |
          ( <replaceable class="PARAMETER">nom_colonne</replaceable> [, ...] ) = ( <replaceable class="PARAMETER">sous-SELECT</replaceable> )
        } [, ...]
    [ FROM <replaceable class="parameter">liste_from</replaceable> ]
    [ WHERE <replaceable class="parameter">condition</replaceable> | WHERE CURRENT OF <replaceable class="parameter">nom_curseur</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">expression_sortie</replaceable> [ [ AS ] <replaceable class="parameter">nom_sortie</replaceable> ] [, ...] ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>UPDATE</command> modifie les valeurs des colonnes spécifiées pour
   toutes les lignes qui satisfont la condition. Seules les colonnes à
   modifier doivent être mentionnées dans la clause
   <literal>SET</literal>&nbsp;; les autres colonnes conservent leur
   valeur.
  </para>

  <para>
   Il existe deux façons de modifier le contenu d'une table à partir d'informations
   contenues dans d'autres tables de la base de données&nbsp;: à l'aide de
   sous-requêtes ou en spécifiant des tables supplémentaires dans la clause
   <literal>FROM</literal>. Le contexte permet de décider de la technique la plus appropriée.
  </para>

  <para>
   La clause <literal>RETURNING</literal> optionnelle fait que
   <command>UPDATE</command> calcule et renvoie le(s) valeur(s) basée(s) sur
   chaque ligne en cours de mise à jour. Toute expression utilisant les
   colonnes de la table et/ou les colonnes d'autres tables mentionnées
   dans <literal>FROM</literal> peut être calculée. La syntaxe de la liste
   <literal>RETURNING</literal> est identique à celle de la commande
   <command>SELECT</command>.
  </para>

  <para>
   L'utilisateur doit posséder le droit <literal>UPDATE</literal> sur la table,
   ou au moins sur les colonnes listées pour la mise à jour. Vous devez aussi
   avoir le droit <literal>SELECT</literal> sur toutes les colonnes dont les
   valeurs sont lues dans les
   <replaceable class="parameter">expression</replaceable>s ou
   <replaceable class="parameter">condition</replaceable>.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">requête_with</replaceable></term>
    <listitem>
     <para>
      La clause <literal>WITH</literal> vous permet de spécifier une ou
      plusieurs sous-requêtes qui peuvent être référencées par nom dans la
      requête<command>UPDATE</command>. Voir <xref linkend="queries-with"/> et
      <xref linkend="sql-select"/> pour les détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_table</replaceable></term>
    <listitem>
     <para>
      Le nom de la table à mettre à jour (éventuellement qualifié du nom du
      schéma). Si <literal>ONLY</literal> est indiqué avant le nom de la table,
      les lignes modifiées ne concernent que la table nommée. Si
      <literal>ONLY</literal> n'est pas indiquée, les lignes modifiées font
      partie de la table nommée et de ses tables filles. En option,
      <literal>*</literal> peut être ajouté après le nom de la table pour
      indiquer explicitement que les tables filles doivent être inclues.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
     <para>
      Un nom de substitution pour la table cible. Quand un alias est fourni,
      il cache complètement le nom réel de la table. Par exemple, avec
      <literal>UPDATE foo AS f</literal>, le reste de l'instruction
      <command>UPDATE</command> doit référencer la table avec
      <literal>f</literal> et non plus <literal>foo</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_colonne</replaceable></term>
    <listitem>
     <para>
      Le nom d'une colonne dans <replaceable class="parameter">nom_table</replaceable>.
      Le nom de la colonne peut être qualifié avec un nom de sous-champ ou un
      indice de tableau, si nécessaire. Ne pas inclure le nom de la table dans
      la spécification d'une colonne cible &mdash; par exemple,
      <literal>UPDATE nom_table SET nom_table.col = 1</literal> est invalide.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression</replaceable></term>
    <listitem>
     <para>
      Une expression à affecter à la colonne. L'expression peut utiliser
      les anciennes valeurs de cette colonne et d'autres colonnes de la table.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</literal></term>
    <listitem>
     <para>
      Réinitialise la colonne à sa valeur par défaut (qui vaut NULL si aucune
      expression par défaut ne lui a été affectée).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">sous-SELECT</replaceable></term>
    <listitem>
     <para>
      Une sous-requête <literal>SELECT</literal> qui produit autant de
      colonnes en sortie que de colonnes comprises dans la liste entre
      parenthèses la précédant. La sous-requête doit ne renvoyer qu'une seule
      ligne lors de son exécution. Si elle renvoie une seule ligne, les
      valeurs des colonnes du résultat sont affectées aux colonnes cibles. Si
      elle ne renvoie aucune ligne, des valeurs NULL sont affectées aux
      colonnes cibles. La sous-requête peut faire référence aux anciennes
      valeurs de la ligne en cours de mise à jour.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">liste_from</replaceable></term>
    <listitem>
     <para>
      Une liste d'expressions de tables, qui permet aux colonnes des autres
      tables d'apparaître dans la condition <literal>WHERE</literal> et dans les
      expressions de mise à jour. Cela est similaire à la liste de tables
      pouvant être spécifiée dans <xref linkend="sql-from"/>
      d'une instruction <command>SELECT</command>.
      La table cible ne doit pas apparaître dans
      <replaceable>liste_from</replaceable>, sauf en cas d'auto-jointure
      (auquel cas elle doit apparaître avec un alias dans
      <replaceable>liste_from</replaceable>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <para>
      Une expression qui renvoie une valeur de type <type>boolean</type>.
      Seules les lignes pour lesquelles cette expression renvoie
      <literal>true</literal> sont mises à jour.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_curseur</replaceable></term>
    <listitem>
     <para>
      Le nom du curseur à utiliser dans une condition <literal>WHERE CURRENT
       OF</literal>. La ligne à mettre à jour est la dernière récupérée à
      partir de ce curseur. Le curseur doit être une requête sans regroupement
      sur la table cible de l'<command>UPDATE</command>.
      Notez que <literal>WHERE CURRENT OF</literal> ne peut pas être
      spécifié avec une condition booléenne. Voir
      <xref linkend="sql-declare"/> pour plus
      d'informations sur l'utilisation des curseurs avec
      <literal>WHERE CURRENT OF</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression_sortie</replaceable></term>
    <listitem>
     <para>
      Une expression à calculer et renvoyée par la commande <command>UPDATE</command>
      après chaque mise à jour de ligne. L'expression peut utiliser tout nom de
      colonne de la table nommée <replaceable class="parameter">nom_table</replaceable> ou des
      tables listées dans le <literal>FROM</literal>.
      Indiquez <literal>*</literal> pour que toutes les colonnes soient renvoyées.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_sortie</replaceable></term>
    <listitem>
     <para>
      Un nom à utiliser pour une colonne renvoyée.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Sorties</title>

  <para>
   En cas de succès, une commande <command>UPDATE</command> renvoie un message
   de la forme
   <screen>UPDATE <replaceable class="parameter">total</replaceable>
   </screen>
   <replaceable class="parameter">total</replaceable> est le nombre de
   lignes mises à jour, en incluant les lignes qui correspondent au filtre mais
   dont la valeur des colonnes ne change pas. Notez que le nombre peut
   être inférieur au nombre de lignes filtrées par la
   <replaceable class="parameter">condition</replaceable> quand certaines
   mises à jour sont supprimées par un trigger <literal>BEFORE UPDATE</literal>.
   S'il vaut 0, aucune ligne n'a été mise à jour par cette requête
   (ce qui n'est pas considéré comme une erreur).
  </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Lorsqu'une clause <literal>FROM</literal> est précisée, la table cible est jointe
   aux tables mentionnées dans <replaceable>liste_from</replaceable>, et chaque
   ligne en sortie de la jointure représente une opération de mise à jour pour
   la table cible. Lors de l'utilisation de <literal>FROM</literal>, il faut s'assurer
   que la jointure produit au plus une ligne en sortie par
   ligne à modifier. En d'autres termes, une ligne cible ne doit pas être
   jointe à plus d'une ligne des autres tables. Le cas échéant,
   seule une ligne de jointure est utilisée pour mettre à jour la
   ligne cible, mais il n'est pas possible de prédire laquelle.
  </para>

  <para>
   À cause de ce manque de déterminisme, il est plus sûr de ne référencer
   les autres tables qu'à l'intérieur de sous-requêtes. Même si c'est plus
   difficile à lire et souvent plus lent que l'utilisation d'une jointure.
  </para>

  <para>
   Dans le cas d'une table partitionnée, mettre à jour une ligne pourrait 
   faire qu'elle ne satisfait plus la contrainte de partionnement. Comme 
   il n'y a pas de réservation pour déplacer la ligne vers la partition 
   appropriée à la nouvelle valeur de clé de partitionnement, cela 
   engendrera une erreur. Cela peut également arriver en mettant à jour 
   directement une partition.
   </para>

  <para>
   Si la commande <command>UPDATE</command> contient une clause
   <literal>RETURNING</literal>, le résultat sera similaire à celui d'une
   instruction <command>SELECT</command> contenant les colonnes et les valeurs
   définies dans la liste <literal>RETURNING</literal>, à partir de la liste
   des lignes mises à jour par la commande, comme la
   possibilité d'utiliser la clause <literal>WITH</literal> avec la commande
   <command>UPDATE</command>.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Changer le mot <literal>Drame</literal> en <literal>Dramatique</literal> dans la colonne
   <structfield>genre</structfield> de la table <structname>films</structname>&nbsp;:

   <programlisting>UPDATE films SET genre = 'Dramatique' WHERE genre = 'Drame';
   </programlisting>
  </para>

  <para>
   Ajuster les entrées de température et réinitialiser la précipitation à sa
   valeur par défaut dans une ligne de la table
   <structname>temps</structname>&nbsp;:

   <programlisting>UPDATE temps SET temp_basse = temp_basse+1, temp_haute = temp_basse+15, prcp = DEFAULT
  WHERE ville = 'San Francisco' AND date = '2005-07-03';
   </programlisting>
  </para>

  <para>
   Réaliser la même opération et renvoyer les lignes mises à jour&nbsp;:

   <programlisting>UPDATE temps SET temp_basse = temp_basse+1, temp_haute = temp_basse+15, prcp = DEFAULT
  WHERE ville = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_basse, temp_haute, prcp;
   </programlisting>
  </para>

  <para>
   Utiliser une autre syntaxe pour faire la même mise à jour&nbsp;:
   <programlisting>UPDATE temps SET (temp_basse, temp_haute, prcp) = (temp_basse+1, temp_basse+15, DEFAULT)
  WHERE ville = 'San Francisco' AND date = '2003-07-03';
   </programlisting>
  </para>

  <para>
   Incrémenter le total des ventes de la personne qui gère le compte d'Acme
   Corporation, à l'aide de la clause <literal>FROM</literal>&nbsp;:
   <programlisting>UPDATE employes SET total_ventes = total_ventes + 1 FROM comptes
  WHERE compte.nom = 'Acme Corporation'
  AND employes.id = compte.vendeur;
   </programlisting>
  </para>

  <para>
   Réaliser la même opération en utilisant une sous-requête dans la clause
   <literal>WHERE</literal>&nbsp;:
   <programlisting>UPDATE employes SET total_ventes = total_ventes + 1 WHERE id =
  (SELECT vendeur FROM comptes WHERE nom = 'Acme Corporation');
   </programlisting>
  </para>

  <para>
   Mettre à jour les noms du contat dans la table comptes pour correspondre au
   vendeur actuellement affecté&nbsp;:
<programlisting>
UPDATE comptes SET (prenom_compte, nom_compte) =
    (SELECT prenom, nom FROM vendeurs
     WHERE vendeurs.id = comptes.id_vendeur);
</programlisting>
   Un résultat similaire peut être obtenu avec une jointure&nbsp;:
<programlisting>
UPDATE comptes SET prenom_contact = prenom,
                    nom_contact = nom
  FROM vendeurs WHERE vendeurs.id = comptes.id_vendeur;
</programlisting>
   Néanmoins, la deuxième requête pourrait donner des résultats inattendus si
   <structname>vendeurs</structname>.<structfield>id</structfield> n'est pas
   une clé unique alors que la première requête garantie la levée d'une erreur
   si plusieurs <structfield>id</structfield> correspondent. De plus, s'il n'y
   a pas de correspondance pour un certain
   <structname>comptes</structname>.<structfield>id_vendeur</structfield>, la
   première requête configurera les champs correspondants à NULL alors que la
   deuxième requête ne mettra pas du tout la ligne à jour.
  </para>

  <para>
   Mettre à jour les statistiques dans une table de résumé pour correspondre
   aux données actuelles&nbsp;:
<programlisting>
UPDATE resumes s SET (somme_x, somme_y, moyenne_x, moyenne_y) =
    (SELECT sum(x), sum(y), avg(x), avg(y) FROM donnees d
     WHERE d.id_groupe = s.id_groupe);
</programlisting>
  </para>

  <para>
   Tenter d'insérer un nouvel élément dans le stock avec sa quantité. Si
   l'élément existe déjà, mettre à jour le total du stock de l'élément.
   Les points de sauvegarde sont utilisés pour ne pas avoir à annuler
   l'intégralité de la transaction en cas d'erreur&nbsp;:
   <programlisting>BEGIN;
-- autres opérations
SAVEPOINT sp1;
INSERT INTO vins VALUES('Chateau Lafite 2003', '24');
-- A supposer que l'instruction ci-dessus échoue du fait d'une violation de clé
-- unique, les commandes suivantes sont exécutées :
ROLLBACK TO sp1;
UPDATE vins SET stock = stock + 24 WHERE nomvin = 'Chateau Lafite 2003';
-- continuer avec les autres opérations, et finir
COMMIT;
   </programlisting>
  </para>

  <para>
   Modifier la colonne <structfield>genre</structfield> de la table
   <structname>films</structname> dans la ligne où le curseur
   <literal>c_films</literal> est actuellement positionné&nbsp;:
   <programlisting>
UPDATE films SET genre = 'Dramatic' WHERE CURRENT OF c_films;
   </programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Cette commande est conforme au standard <acronym>SQL</acronym>, à
   l'exception des clauses <literal>FROM</literal> et <literal>RETURNING</literal>
   qui sont des extensions <productname>PostgreSQL</productname>.
  </para>

  <para>
   D'autres systèmes de bases de données offrent l'option
   <literal>FROM</literal> dans laquelle la table cible est supposée être à nouveau
   indiquée dans le <literal>FROM</literal>.
   <productname>PostgreSQL</productname> n'interprète pas la clause <literal>FROM</literal>
   ainsi. Il est important d'en tenir compte lors du portage d'applications qui
   utilisent cette extension.
  </para>

  <para>
    D'après le standard, la valeur source pour une sous-liste de noms de
   colonnes peut être toute expression de ligne renvoyant le bon nombre de
   colonnes. <productname>PostgreSQL</productname> autorise seulement la
   valeur source à être un <link linkend="sql-syntax-row-constructors">constructeur de ligne</link>
    ou un sous-<literal>SELECT</literal>. Une valeur
   mise à jour pour une colonne individuelle peut être spécifiée en tant que
   <literal>DEFAULT</literal> dans le cas d'une liste d'expressions, mais pas à
   l'intérieur d'un sous-<literal>SELECT</literal>.
  </para>
 </refsect1>
</refentry>
