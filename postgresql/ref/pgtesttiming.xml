<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/ref/pgtesttiming.sgml -->

<refentry id="pgtesttiming">
 <indexterm zone="pgtesttiming">
  <primary>pg_test_timing</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_test_timing</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_test_timing</refname>
  <refpurpose>mesure de l'impact du chronométrage</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_test_timing</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

 <para>
  <application>pg_test_timing</application> est un outil qui mesure
  l'impact du chronométrage sur votre système et confirme que l'horloge
  système ne prend jamais de retard. Les systèmes qui sont lents pour
  collecter des données chronométrées peuvent donner des résultats
  moins précis pour la commande <command>EXPLAIN ANALYSE</command>.
 </para>
 </refsect1>

 <refsect1>
  <title>Options</title>

   <para>
    <application>pg_test_timing</application> accepte les options de
    ligne de commande suivantes&nbsp;:

    <variablelist>

     <varlistentry>
      <term><option>-d <replaceable class="parameter">durée</replaceable></option></term>
      <term><option>--duration=<replaceable class="parameter">durée</replaceable></option></term>
      <listitem>
       <para>Indique la durée du test, en secondes. Des durées plus
       longues ont une précision bien meilleures, et ont plus de
       chances de détecter des problèmes avec les horloges systèmes
       qui prennent du retard. La durée par défaut du test est de
       3 secondes.</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem>
       <para>
        Affiche la version de <application>pg_test_timing</application>
        puis termine.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem>
       <para>
        Affiche l'aide concernant les arguments de la commande
        <application>pg_test_timing</application>, puis termine.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect1>

 <refsect1>
  <title>Usage</title>

 <refsect2>
  <title>Interprétation des résultats</title>

  <para>
   De bons résultats montreront que la plupart (>90%) des appels
   individuels de chronométrage prendront moins d'une microseconde. La
   moyenne de l'impact par boucle sera même plus basse, sous 100
   nanosecondes. L'exemple ci-dessous tiré d'un système Intel
   i7-860 utilisant une source d'horloge TSC montre d'excellentes
   performances&nbsp;:

<screen><![CDATA[
Testing timing overhead for 3 seconds.
Per loop time including overhead: 35.96 nsec
Histogram of timing durations:
< usec   % of total      count
     1     96.40465   80435604 
     2      3.59518    2999652  
     4      0.00015        126  
     8      0.00002         13  
    16      0.00000          2  
]]></screen>
  </para>

  <para>
   Notez que différentes unités sont utilisées pour le temps par
   boucle et les temps figurant dans l'histogramme. La boucle peut avoir
   une résolution de quelques nanosecondes (nsec), alors que les appels
   individuels de chronométrage peuvent seulement descendre jusqu'à
   une microseconde (usec).
  </para>
 </refsect2>

 <refsect2>
  <title>Mesure de l'impact du chonométrage sur l'exécuteur</title>

  <para>
   Lorsque l'exécuteur de requêtes exécute une instruction
   <command>EXPLAIN ANALYSE</command>, les opérations individuelles
   sont également chronométrées comme affiché par la sortie de
   la commande. L'impact supplémentaire de votre système peut
   être vérifié en comptant les lignes avec l'application
   <application>psql</application>&nbsp;:

<screen>
CREATE TABLE t AS SELECT * FROM generate_series(1,100000);
\timing
SELECT COUNT(*) FROM t;
EXPLAIN ANALYZE SELECT COUNT(*) FROM t;
</screen>
  </para>

  <para>
   Le système i7-860 mesuré effectue la requête de comptage en 9.8 ms
   alors que la commande <command>EXPLAIN ANALYSE</command> prend 16.6 ms,
   chaque version traitant 100&nbsp;000 lignes. Cette différence de 6.8
   ms signifie que l'incidence du chronométrage par ligne est de 68 ns,
   à peu près le double de l'estimation de pg_test_timing. Même cette
   relative petite incidence fait que l'instruction complète prend
   presque 70% de temps en plus. Sur des requêtes plus substantielles
   l'impact du chronométrage serait moins problématique.
  </para>

 </refsect2>

 <refsect2>
  <title>Modification de la source du chronométrage</title>
  <para>
   Sur certains système Linux récents, il est possible de modifier
   l'horloge source utilisée pour collecter les données chronométrées
   à n'importe quel moment. Un second exemple montre le ralentissement
   possible d'un passage à l'horloge plus lente acpi_pm, sur le même
   système utilisé pour les résultats rapides ci-dessus&nbsp;:

<screen><![CDATA[
# cat /sys/devices/system/clocksource/clocksource0/available_clocksource
tsc hpet acpi_pm
# echo acpi_pm > /sys/devices/system/clocksource/clocksource0/current_clocksource
# pg_test_timing
Per loop time including overhead: 722.92 nsec
Histogram of timing durations:
< usec   % of total      count
     1     27.84870    1155682 
     2     72.05956    2990371 
     4      0.07810       3241  
     8      0.01357        563  
    16      0.00007          3  
]]></screen>
  </para>

  <para>
   Dans cette configuration, la même commande <command>EXPLAIN
   ANALYSE</command> que ci-dessus prend 115.9 ms. Soit un impact
   de 1061 nsec du chronométrage, à nouveau un petit multiple de ce
   qui est mesuré directement par cet utilitaire. Autant d'impact du
   chronométrage signifie que la requête actuelle elle même prend
   une petite fraction du temps constaté, la plupart de celui-ci étant
   consommé par l'impact du chronométrage. Dans cette configuration,
   tous les totaux de la commande <command>EXPLAIN ANALYSE</command>
   entraînant beaucoup d'opérations chronométrées seront
   significativement augmentés par cet impact du chronomètre.
  </para>

  <para>
   FreeBSD permet également de modifier à la volée la cource du
   chronométrage, et il trace au démarrage l'information concernant
   l'horloge sélectionnée&nbsp;:

<screen>
# dmesg | grep "Timecounter"
Timecounter "ACPI-fast" frequency 3579545 Hz quality 900
Timecounter "i8254" frequency 1193182 Hz quality 0
Timecounters tick every 10.000 msec
Timecounter "TSC" frequency 2531787134 Hz quality 800
# sysctl kern.timecounter.hardware=TSC
kern.timecounter.hardware: ACPI-fast -> TSC
</screen>
  </para>

  <para>
   D'autres systèmes peuvent n'autoriser la modification de la source du
   chronométrage qu'au démarrage. Sur les plus vieux systèmes Linux le
   paramètre du kernel "clock" est la seule manière d'effectuer ce type
   de modification. Et même sur certains systèmes plus récent, la seule
   option que vous verrez pour une source d'horloge est "jiffies". Jiffies
   est la plus vieille implémentation Linux d'horloge logicielle,
   qui peut avoir une bonne résolution lorsqu'elle s'appuie sur une
   horloge matérielle suffisamment rapide, comme dans cet exemple&nbsp;:

<screen><![CDATA[
$ cat /sys/devices/system/clocksource/clocksource0/available_clocksource
jiffies
$ dmesg | grep time.c
time.c: Using 3.579545 MHz WALL PM GTOD PIT/TSC timer.
time.c: Detected 2400.153 MHz processor.
$ pg_test_timing
Testing timing overhead for 3 seconds.
Per timing duration including loop overhead: 97.75 ns
Histogram of timing durations:
< usec   % of total      count
     1     90.23734   27694571 
     2      9.75277    2993204  
     4      0.00981       3010  
     8      0.00007         22  
    16      0.00000          1  
    32      0.00000          1  
]]></screen>

 </para>
</refsect2>

 <refsect2>
  <title>Horloge matérielle et exactitude du chronométrage</title>

  <para>
   Collectionner des données chronométrées précises est normalement
   effectué sur des ordinateurs en utilisant des horloges matérielles
   ayant différents niveaux de précision. Avec certains matériels
   le système d'exploitation peut transmettre le temps de l'horloge
   système presque directement aux programmes. Une horloge système peut
   aussi provenir d'une puce qui fournie simplement des interruptions
   périodiques, des tic-tac à intervalles réguliers. Dans les deux cas,
   le kernel des systèmes d'exploitation fournit une source d'horloge qui
   masque ces détails. Mais la précision de cette source d'horloge et
   la vitesse à laquelle elle peut renvoyer des résultats est fonction
   du matériel sous-jacent.
  </para>

  <para>
   Une gestion du temps inexacte peut entraîner une instabilité
   du système. Testez tous les changements de source d'horloge avec
   soin. Les réglages par défaut des systèmes d'exploitation sont
   parfois effectués pour favoriser la fiabilité sur la précision. Et
   si vous utilisez une machine virtuelle, examiner les sources d'horloge
   compatibles recommandées avec elle. Le matériel virtuel fait face
   à des difficultés additionnelles pour émuler des horloges, et il
   existe souvent des réglages par système d'exploitation suggérés
   par les vendeurs.
  </para>

  <para>
   La source d'horloge Time Stamp Counter (TSC) est la plus précise
   disponible sur la génération actuelle de CPUs. C'est la manière
   préférentielle pour suivre le temps système lorsqu'elle est
   supportée par le système d'exploitation et que l'horloge TSC est
   fiable. Il existe plusieurs sources possibles pour qu'une horloge
   TSC échoue à fournir une source de temps précise, la rendant non
   fiable. Les plus vieux systèmes peuvent avoir une horloge TSC qui
   varie en fonction de la température du CPU, la rendant inutilisable
   pour le chronométrage. Essayer d'utiliser une horloge TSC sur
   certains vieux CPUs multi-cœurs peut renvoyer des temps qui sont
   inconsistents entre les multiples cœurs. Ceci peut résulter en
   des temps qui reculent, un problème que ce programme vérifie. Et
   même des systèmes plus récents peuvent échouer à fournir des
   chronométrages TSC précis avec des configurations très aggressives
   en matière d'économie d'énergie.
  </para>

  <para>
   Les systèmes d'exploitation plus récents peuvent vérifier ces
   problèmes connus avec l'horloge TSC et basculer vers une source plus
   lente, plus stable lorsqu'elles sont vues. Si votre système supporte
   le temps TSC mais ne l'utilise pas par défaut, c'est qu'il peut être
   désactivé pour une bonne raison. Et certains systèmes d'exploitation
   peuvent ne pas détecter correctement tous les problèmes possibles,
   ou autoriseront l'utilisation de l'horloge TSC y compris dans des
   situations où il est reconnu qu'elle est non fiable.
  </para>

  <para>
   La source High Precision Event Timer (HPET) est l'horloge préférée
   sur les systèmes où elle est disponible et que TSC n'est pas
   fiable. La puce horloge elle même est programmable pour permettre
   jusqu'à une résolution de 100 nanosecondes, mais vous pouvez ne pas
   constater autant de précision avec votre horloge système.
  </para>

  <para>
   L'Advanced Configuration and Power Interface (ACPI) fournit un Power
   Timer (PIT), le real-time clock (RTC), l'horloge Advanced Programmable
   Interrupt Controller (APIC), et l'horloge Cyclone.  Ces chronomètres
   visent une résolution de l'ordre de la milliseconde.
  </para>
  </refsect2>
</refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-explain"/></member>
  </simplelist>
 </refsect1>
</refentry>
