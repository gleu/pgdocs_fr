<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createforeigntable">
 <indexterm zone="sql-createforeigntable">
  <primary>CREATE FOREIGN TABLE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE FOREIGN TABLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions de langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE FOREIGN TABLE</refname>
  <refpurpose>crée une nouvelle table distante</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
CREATE FOREIGN TABLE [ IF NOT EXISTS ] <replaceable class="parameter">nom_table</replaceable> ( [
  { <replaceable class="parameter">nom_colonne</replaceable> <replaceable class="parameter">type_donnee</replaceable> [ OPTIONS ( <replaceable class="parameter">option</replaceable> '<replaceable class="parameter">valeur</replaceable>' [, ... ] ) ] [ COLLATE <replaceable>collation</replaceable> ] [ <replaceable class="parameter">contrainte_colonne</replaceable> [ ... ] ]
    | <replaceable>contrainte_table</replaceable> }
    [, ... ]
] )
  SERVER <replaceable class="parameter">nom_serveur</replaceable>
[ OPTIONS ( <replaceable class="parameter">option</replaceable> '<replaceable class="parameter">valeur</replaceable>' [, ... ] ) ]

CREATE FOREIGN TABLE [ IF NOT EXISTS ] <replaceable class="parameter">nom_table</replaceable>
  PARTITION OF <replaceable class="parameter">table_parente</replaceable> [ (
  { <replaceable class="parameter">nom_colonne</replaceable> [ WITH OPTIONS ] [ <replaceable class="parameter">contrainte_colonne</replaceable> [ ... ] ]
    | <replaceable>contrainte_table</replaceable> }
    [, ... ]
) ] <replaceable class="parameter">spec_limites_partition</replaceable>
  SERVER <replaceable class="parameter">nom_serveur</replaceable>
[ OPTIONS ( <replaceable class="parameter">option</replaceable> '<replaceable class="parameter">value</replaceable>' [, ... ] ) ]

<phrase>where <replaceable class="parameter">contrainte_colonne</replaceable> is:</phrase>

[ CONSTRAINT <replaceable class="parameter">nom_contrainte</replaceable> ]
{ NOT NULL |
  NULL |
  CHECK ( <replaceable class="parameter">expression</replaceable> ) [ NO INHERIT ] |
  DEFAULT <replaceable>expr_defaut</replaceable> |
  GENERATED ALWAYS AS ( <replaceable>expr_generation</replaceable> ) STORED }

<phrase>et <replaceable class="parameter">contrainte_table</replaceable> vaut&nbsp;:</phrase>

[ CONSTRAINT <replaceable class="parameter">nom_contrainte</replaceable> ]
CHECK ( <replaceable class="parameter">expression</replaceable> ) [ NO INHERIT ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createforeigntable-description">
  <title>Description</title>

  <para>
   La commande <command>CREATE FOREIGN TABLE</command> crée une nouvelle table distante
   dans la base de données courante. La table distante appartient à l'utilisateur qui
   exécute cette commande.
  </para>

  <para>
   Si un nom de schema est spécifié (par exemple, <literal>CREATE FOREIGN TABLE
    monschema.matable ...</literal>), alors la table sera créée dans le schéma
   spécifié. Dans les autres cas, elle sera créée dans le schéma courant.
   Le nom de la table distante doit être différent du nom des autres tables distantes,
   tables, séquences, index, vues ou vues matérialisées du même schéma.
  </para>

  <para>
   La commande <command>CREATE FOREIGN TABLE</command> crée aussi automatiquement
   un type de donnée qui représente le type composite correspondant à une ligne
   de la table distante. En conséquence, une table distante ne peut pas avoir
   le même nom qu'un type de donnée existant dans le même schéma.
  </para>

  <para>
   Si la clause <literal>PARTITION OF</literal> est specifiée alors la table
   est crée comme une partition de <literal>table_parente</literal> avec les
   limites spécifiées.
  </para>

  <para>
   Pour pouvoir créer une table distante, vous devez avoir le droit
   <literal>USAGE</literal> sur le serveur distant, ainsi que le droit
   <literal>USAGE</literal> sur tous les types de colonne utilisés dans la
   table.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>

   <varlistentry>
    <term><literal>IF NOT EXISTS</literal></term>
    <listitem>
     <para>
      Permet de ne pas retourner d'erreur si une table distante de même nom existe déjà.
      Une simple notice est alors rapportée. À noter que la table distante existante
      n'a potentiellement aucun lien avec la table distante qui aurait pu être créée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_table</replaceable></term>
    <listitem>
     <para>
      Le nom de la table distante à créer.
      Il est aussi possible de spécifier le schéma qui contient cette table.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_colonne</replaceable></term>
    <listitem>
     <para>
      Le nom de la colonne à créer dans cette nouvelle table distante.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_donnee</replaceable></term>
    <listitem>
     <para>
      le type de donnée de la colonne. cela peut inclure des spécificateurs
      de tableaux.
      pour plus d'information sur les types de données supportés par
      <productname>postgresql</productname>, se référer à <xref
      linkend="datatype"/>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>COLLATE <replaceable>collation</replaceable></literal></term>
    <listitem>
     <para>
      La clause <literal>COLLATE</literal> affecte un collationnement à la
      colonne (qui doit être d'un type de données acceptant le
      collationnement). Si ce n'est pas spécifié, le collationnement par
      défaut du type de données de la colonne est utilisé.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INHERITS ( <replaceable>table_parent</replaceable> [, ... ] )</literal></term>
    <listitem>
     <para>
      La clause optionnelle <literal>INHERITS</literal> indique une liste de
      tables à partir desquelles la nouvelle table distante hérite
      automatiquement de toutes les colonnes. Les tables parents sont des
      tables simples ou des tables distantes. Voir la forme similaire de <xref
      linkend="sql-createtable"/> pour plus de détails.
      Notez que ceci n'est pas accepté pour créer la table distante en tant
      que partition de la table parent s'il existe des index <literal>UNIQUE</literal>
      sur la table parent. (Voir aussi <link
      linkend="sql-altertable"><command>ALTER TABLE ATTACH
      PARTITION</command></link>.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PARTITION OF <replaceable>table_parent</replaceable> FOR VALUES <replaceable class="parameter">spec_limites_partition</replaceable></literal></term>
    <listitem>
     <para>
      Cette syntaxe peut être utilisée pour créer la table distante en tant
      que partition de la table parent indiquée avec les valeurs limites
      de la partition. Voir la syntaxe similaire de
      <xref linkend="sql-createtable"/> pour plus de détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONSTRAINT <replaceable class="parameter">nom_contrainte</replaceable></literal></term>
    <listitem>
     <para>
      Un nom optionnel pour une contrainte de colonne ou de table. Si la
      contrainte est violée, le nom de la contrainte est présent dans les
      messages d'erreur, donc des noms de contrainte comme <literal>col doit
      être positif</literal> peuvent être utilisés pour communiquer des
      informations intéressantes sur les contraintes aux applications
      clientes. (Les guillemets doubles sont nécessaires pour indiquer les
      noms de contraintes qui contiennent des espaces.) Si un nom de
      contrainte n'est pas indiqué, le système en génère un.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOT NULL</literal></term>
    <listitem>
     <para>
      Interdit des valeurs NULL dans la colonne.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULL</literal></term>
    <listitem>
     <para>
      Les valeurs NULL sont autorisées pour la colonne. il s'agit du comportement par défaut.
     </para>

     <para>
      Cette clause n'est fournie que pour des raisons de compatibilité avec les bases de données
      sql non standard. son utilisation n'est pas encouragée dans les nouvelles applications.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CHECK ( <replaceable class="parameter">expression</replaceable> ) [ NO INHERIT ] </literal></term>
    <listitem>
     <para>
      La clause <literal>CHECK</literal> précise une expression produisant un
      résultat booléen que chaque ligne de la table distante est attendu
      satisfaire. Autrement dit, l'expression doit renvoyer TRUE ou UNKNOWN,
      jamais FALSE, pour toutes les lignes de la table distante. Une
      contrainte de vérification spécifiée comme contrainte de colonne doit
      seulement référencer la valeur de la colonne alors qu'une expression
      apparaissant dans une contrainte de table peut référencer plusieurs
      colonnes.
     </para>

     <para>
      Actuellement, les expressions <literal>CHECK</literal> ne peuvent pas
      contenir de sous-requêtes. Elles ne peuvent pas non plus faire référence
      à des variables autres que les colonnes de la ligne courante. La colonne
      système <literal>tableoid</literal> peut être référencée, mais aucune
      autre colonne système ne peut l'être.
     </para>

     <para>
      Une contrainte marquée avec <literal>NO INHERIT</literal> ne sera pas
      propagée aux tables enfants.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT
      <replaceable>expr_defaut</replaceable></literal></term>
    <listitem>
     <para>
      La clause <literal>default</literal> affecte une valeur par défaut pour
      la colonne dont il est l'objet. la valeur est toute expression sans
      variable (les sous-requêtes et les références croisées à d'autres colonnes
      de la même table ne sont pas autorisées). le type de données de l'expression
      doit correspondre au type de données de la colonne.
     </para>

     <para>
      L'expression par défaut sera utilisée dans toute opération d'insertion
      qui n'indique pas de valeur pour la colonne. s'il n'y a pas de valeur par
      défaut pour une colonne, la valeur par défaut implicite est null.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>GENERATED ALWAYS AS ( <replaceable>expr_generation</replaceable> ) STORED</literal><indexterm><primary>colonne générée</primary></indexterm></term>
    <listitem>
     <para>
      Cette clause crée la colonne en tant que <firstterm>colonne générée</firstterm>.
      La colonne ne peut pas faire l'objet d'une écriture, et quand elle est lue, c'est
      le résultat de l'expression spécifiée qui est renvoyé.
     </para>

     <para>
      Le mot-clé <literal>STORED</literal> est nécessaire pour indiquer que
      la colonne va être calculée au moment de l'écriture. (La valeur calculée
      sera présentée au wrapper de données distantes pour stockage et doit être
      renvoyée en lecture.)
     </para>

     <para>
      L'expression de génération peut se référer à d'autres colonnes de la
      table, mais pas à d'autres colonnes générées. Toutes les fonctions et
      opérateurs qu'elle utilise doivent être immuables. Les références à
      d'autres tables ne sont pas autorisées.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_serveur</replaceable></term>
    <listitem>
     <para>
      Le nom d'un serveur distant existant à utiliser pour la table distante.
      Pour les détails sur la définition d'un serveur, voir <xref
      linkend="sql-createserver"/>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OPTIONS ( <replaceable class="parameter">option</replaceable> '<replaceable class="parameter">valeur</replaceable>' [, ...] )</literal></term>
    <listitem>
     <para>
      Options qui peuvent être associés à la nouvelle table distante ou à une de ses colonnes.
      Les noms des options autorisées et leurs valeurs sont spécifiques
      à chaque wrapper de données distantes et sont validées en utilisant
      la fonction de validation du wrapper de données distantes. L'utilisation répétée de la même option
      n'est pas autorisée (bien qu'il soit possible qu'une option de table et de colonne ait le même nom).
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </refsect1>

 <refsect1>
  <title>Notes</title>

   <para>
    Les contraintes sur les tables distantes (comme les clauses
    <literal>CHECK</literal> ou <literal>NOT NULL</literal>) ne sont pas
    vérifiées par le système <productname>PostgreSQL</productname>, et la
    plupart des wrappers de données distantes ne cherchent pas non plus à les
    vérifier. La contrainte est supposée être vraie. Il y aurait peu de
    raisons de la vérifier car elles ne s'appliqueraient qu'aux lignes
    insérées ou mises à jour via la table distante, et pas aux lignes
    modifiées d'une autre façon, comme directement sur le serveur distant. À
    la place, une contrainte attachée à une table distante doit représenter
    une contrainte vérifiée par le serveur distant.
   </para>

   <para>
    Certains wrappers de données distantes, dont le but est très spécifique,
    pourraient être le seul mécanisme d'accès aux données accédées. Dans ce
    cas, il pourrait être approprié au wrapper de données distantes de
    s'assurer de la vérification de la contrainte. Mais vous ne devez pas
    supposer qu'un wrapper le fait, sauf si sa documentation le précise.
   </para>

   <para>
    Bien que <productname>PostgreSQL</productname> ne tente pas de vérifier
    les contraintes sur les tables distantes, il suppose qu'elles sont
    vérifiées et les utilise pour optimiser les requêtes. S'il y a des lignes
    visibles dans la table distante qui ne satisfont pas une contrainte
    déclarée, les requêtes sur la table pourraient produire des réponses
    incorrectes. C'est de la responsabilité de l'utilisateur de s'assurer que
    la définition de la contrainte correspond à la réalité.
   </para>

   <para>
    Des considérations similaires s'appliquent aux colonnes générées. Les
    colonnes générées stockées sont calculées au moment de l'insertion
    et des mises à jour sur le serveur <productname>PostgreSQL</productname>
    local, et passés au wrapper de données distantes pour les écrire dans
    le stockage distant, mais il n'est pas garanti qu'une requête sur la
    table distante renvoie des valeurs pour les colonnes générées en cohérence
    avec l'expression de génération. A nouveau, cela peut engendrer des
    résultats de requête incorrects.
   </para>

   <para>
    Bien que les lignes puissent être déplacées d'une partition locale vers
    une partition externe (à condition que le wrapper de données distantes
    supporte ce type de déplacement), elles ne peuvent pas être déplacées
    d'une partition externe vers une autre partition.
   </para>
 </refsect1>
 
 <refsect1 id="sql-createforeigntable-examples">
  <title>Exemples</title>

  <para>
   Créer une table distante <structname>films</structname> qui sera parcourue
   via le serveur <structname>serveur_film</structname> :

   <programlisting>
CREATE FOREIGN TABLE films (
    code        char(5) NOT NULL,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
SERVER serveur_films;
   </programlisting>
  </para>

  <para>
   Créer une table distante <structname>measurement_y2016m07</structname>, qui
   sera accédée au travers du serveur <structname>server_07</structname>, comme
   une partition de la table partitionnée par intervalles
   <structname>measurement</structname> :

<programlisting>
CREATE FOREIGN TABLE measurement_y2016m07
    PARTITION OF measurement FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')
    SERVER server_07;
</programlisting></para>

 </refsect1>

 <refsect1 id="sql-createforeigntable-compatibility">
  <title>Compatibilité</title>

  <para>
   La commande <command>CREATE FOREIGN TABLE</command> est conforme au standard
   <acronym>SQL</acronym>. Toutefois, tout comme la commande
   <link linkend="sql-createtable"><command>CREATE TABLE</command></link>,
   l'usage de la contrainte <literal>NULL</literal> et des tables distantes
   sans colonnes sont autorisés. La possibilité de spécifier des valeurs par
   défaut pour les colonnes est aussi une extension de
   <productname>PostgreSQL</productname>. L'héritage de table, dans la forme
   définie par <productname>PostgreSQL</productname>, n'est pas standard.
  </para>

 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterforeigntable"/></member>
   <member><xref linkend="sql-dropforeigntable"/></member>
   <member><xref linkend="sql-createtable"/></member>
   <member><xref linkend="sql-createserver"/></member>
   <member><xref linkend="sql-importforeignschema"/></member>
  </simplelist>
 </refsect1>
</refentry>
