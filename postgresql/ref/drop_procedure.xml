<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-dropprocedure">
 <indexterm zone="sql-dropprocedure">
  <primary>DROP PROCEDURE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>DROP PROCEDURE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Commandes du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>DROP PROCEDURE</refname>
  <refpurpose>supprimer une procédure</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
DROP PROCEDURE [ IF EXISTS ] <replaceable class="parameter">nom</replaceable> [ ( [ [ <replaceable class="parameter">mode_argument</replaceable> ] [ <replaceable class="parameter">nom_argument</replaceable> ] <replaceable class="parameter">type_argument</replaceable> [, ...] ] ) ] [, ...]
    [ CASCADE | RESTRICT ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>DROP PROCEDURE</command> supprime la définition d'une procédure
   existante ou de plusieurs. Pour exécuter cette commande, l'utilisateur doit être le
   propriétaire des procédures. Les types des arguments des procédures
   doivent être spécifiés, car plusieurs procédures différentes peuvent
   coexister avec le même nom et des listes d'arguments différentes.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>IF EXISTS</literal></term>
    <listitem>
     <para>
      Ne génère pas d'erreur si la procédure n'existe pas. Une notification
      est fournie dans ce cas.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom d'une procédure existante (éventuellement qualifié par le schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">mode_argument</replaceable></term>

    <listitem>
     <para>
      Le mode d'un argument&nbsp;: <literal>IN</literal>, <literal>OUT</literal>,
      <literal>INOUT</literal> ou <literal>VARIADIC</literal>.
      Si non précisé, le défaut est <literal>IN</literal> (mais voir ci-dessous).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_arg</replaceable></term>

    <listitem>
     <para>
      Le nom d'un argument.
      Notez que <command>DROP PROCEDURE</command> ne fait pas vraiment
      attention aux noms des arguments, puisqu'il n'a besoin que des types
      des arguments pour déterminer la procédure.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_argument</replaceable></term>

    <listitem>
     <para>
      Les types de données des arguments de la procédure (éventuellement
      qualifiés par le schéma), s'il y en a.
      Voir ci-dessous pour les détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
     <para>
      Supprime automatiquement les objets qui dépendent de la
      procédure, puis à leur tour tous les objets qui dépendent de ces objets.
      (voir <xref linkend="ddl-depend"/>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
     <para>
      Refuse de supprimer une procédure si un objet en dépend.
      C'est le comportement par défaut.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-dropprocedure-notes">
  <title>Notes</title>

  <para>
   S'il n'existe qu'une seule procédure de ce nom, la liste d'arguments est
   omise. Omettez aussi les parenthèses dans ce cas.
  </para>

  <para>
   Dans <productname>PostgreSQL</productname>, il est suffisant de lister les
   arguments enentrée(en incluant arguments <literal>INOUT</literal>) parce
   qu'il n'est pas autorisé que deux routines qui partagent le même nom aient
   la même liste d'arguments en entrée. De plus, la commande
   <command>DROP</command> ne vérifiera pas que vous avez écrit les arguments
   <literal>OUT</literal> correctement&nbsp;; donc tout argument
   explicitement marqué <literal>OUT</literal> n'est que du bruit. Les
   indiquer est recommandé par cohérence avec la commande
   <command>CREATE</command>.
  </para>

  <para>
   Par compatibilité avec le standard SQL, il est aussi autorisé d'écrire tous
   les types de données des arguments (en incluant les arguments
   <literal>OUT</literal>) sans marqueurs <replaceable
   class="parameter">argmode</replaceable>. Quand c'est fait, les types des
   arguments <literal>OUT</literal> de la procédure
   <emphasis>seront</emphasis> vérifiés avec lacommande. Cette provision crée
   une ambiguité, dans le fait que, quand la liste d'arguments ne contient
   aucun marqueurs <replaceable class="parameter">argmode</replaceable>, il
   n'est pas clair de savoir quel règle suivre. La commande
   <command>DROP</command> tentera une recherche dans les deux sens et
   renverra une erreur si deux procédures différentes sont trouvées. Pour
   éviter le risque d'une telle ambiguité, il est recommandé d'écrire des
   marqueurs <literal>IN</literal> explicitement plutôt que de les laisser
   par défaut, forçant l'utilisation de l'interprétation traditionnelle de
   <productname>PostgreSQL</productname>.
  </para>

  <para>
   Les règles de recherche sont aussi utilisées par d'autres commandes qui
   agissent sur les procédures existantes, par exemple <command>ALTER
   PROCEDURE</command> et <command>COMMENT ON PROCEDURE</command>.
  </para>
 </refsect1>

 <refsect1 id="sql-dropprocedure-examples">
  <title>Exemples</title>

  <para>
   S'il n'existe qu'une seule procédure <literal>do_db_maintenance</literal>,
   cette commande est suffisante pour la supprimer&nbsp;:
<programlisting>
DROP PROCEDURE do_db_maintenance;
</programlisting>
  </para>

  <para>
   Étant donné cette définition de procédure&nbsp;:
<programlisting>
CREATE PROCEDURE do_db_maintenance(IN target_schema text, OUT results text) ...
</programlisting>
   n'importe laquelle de ces commandes pourrait la supprimer&nbsp;:
<programlisting>
DROP PROCEDURE do_db_maintenance();
DROP PROCEDURE do_db_maintenance(IN target_schema text, OUT results text);
DROP PROCEDURE do_db_maintenance(IN text, OUT text);
DROP PROCEDURE do_db_maintenance(IN text);
DROP PROCEDURE do_db_maintenance(text);
DROP PROCEDURE do_db_maintenance(text, text);  -- potentially ambiguous
</programlisting>
   Néanmoins, le dernier exemple serait ambigu s'il existait aussi, disons&nbsp;:
<programlisting>
CREATE PROCEDURE do_db_maintenance(IN target_schema text, IN options text) ...
</programlisting>
  </para>
 </refsect1>

 <refsect1 id="sql-dropprocedure-compatibility">
  <title>Compatibilité</title>

  <para>
   Cette commande se conforme au standard SQL, avec les extensions
   <productname>PostgreSQL</productname> suivantes&nbsp;:
   <itemizedlist>
    <listitem>
     <para>Le standard n'autorise qu'une seule procédure supprimée par commande.
     </para>
    </listitem>
    <listitem>
     <para>L'option <literal>IF EXISTS</literal> est une extension.</para>
    </listitem>
    <listitem>
     <para>La capacité de spécifier les modes et noms des arguments is an
     extension, and the lookup rules differ when modes are given</para>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createprocedure"/></member>
   <member><xref linkend="sql-alterprocedure"/></member>
   <member><xref linkend="sql-dropfunction"/></member>
   <member><xref linkend="sql-droproutine"/></member>
  </simplelist>
 </refsect1>

</refentry>
