<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createdomain">
 <indexterm zone="sql-createdomain">
  <primary>CREATE DOMAIN</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE DOMAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE DOMAIN</refname>
  <refpurpose>Définir un nouveau domaine</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>CREATE DOMAIN <replaceable class="parameter">nom</replaceable> [AS] <replaceable class="parameter">type_donnee</replaceable>
    [ COLLATE <replaceable>collation</replaceable> ]
    [ DEFAULT <replaceable>expression</replaceable> ]
    [ <replaceable class="parameter">contrainte</replaceable> [ ... ] ]

<phrase>où <replaceable class="parameter">contrainte</replaceable> est&nbsp;:</phrase>

[ CONSTRAINT <replaceable class="parameter">nom_contrainte</replaceable> ]
{ NOT NULL | NULL | CHECK (<replaceable class="parameter">expression</replaceable>) }
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE DOMAIN</command> crée un nouveau domaine. Un domaine est
   essentiellement un type de données avec des contraintes optionnelles
   (restrictions sur l'ensemble de valeurs autorisées). L'utilisateur qui
   définit un domaine devient son propriétaire.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple, <literal>CREATE DOMAIN
    monschema.mondomaine ...</literal>), alors le domaine est créé dans le
   schéma spécifié. Sinon, il est créé dans le schéma courant. Le nom du
   domaine doit être unique parmi les types et domaines existant dans son
   schéma.
  </para>

  <para>
   Les domaines permettent d'extraire des contraintes communes à plusieurs
   tables et de les regrouper en un seul emplacement, ce qui en facilite la
   maintenance. Par exemple, plusieurs tables pourraient contenir des colonnes
   d'adresses email, toutes nécessitant la même contrainte de vérification
   (CHECK) permettant de vérifier que le contenu de la colonne est bien une
   adresse email. Définissez un domaine plutôt que de configurer la contrainte
   individuellement sur chaque table.
  </para>

  <para>
   Pour pouvoir créer un domaine, vous devez avoir le droit
   <literal>USAGE</literal> sur le type sous-jacent.
  </para>

 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom du domaine à créer (éventuellement qualifié du nom du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_donnees</replaceable></term>
    <listitem>
     <para>
      Le type de données sous-jacent au domaine. Il peut contenir des
      spécifications de tableau.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>collation</replaceable></term>
    <listitem>
     <para>
      Un collationement optionnel pour le domaine. Si aucun collationnement
      n'est spécifié, le collationnement utilisé par défaut est celui du type
      de données. Le type doit être collationnable si
      <literal>COLLATE</literal> est spécifié.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT <replaceable>expression</replaceable></literal></term>

    <listitem>
     <para>
      La clause <literal>DEFAULT</literal> permet de définir une valeur par
      défaut pour les colonnes d'un type de données du domaine. La valeur est
      une expression quelconque sans variable (les sous-requêtes ne sont pas
      autorisées). Le type de données de l'expression par défaut doit
      correspondre à celui du domaine. Si la valeur par défaut n'est pas
      indiquée, alors il s'agit de la valeur NULL.
     </para>

     <para>
      L'expression par défaut est utilisée dans toute opération d'insertion
      qui ne spécifie pas de valeur pour cette colonne. Si une valeur par
      défaut est définie sur une colonne particulière, elle surcharge toute
      valeur par défaut du domaine. De même, la valeur par défaut surcharge
      toute valeur par défaut associée au type de données sous-jacent.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONSTRAINT <replaceable
      class="parameter">nom_contrainte</replaceable></literal></term>
    <listitem>
     <para>
      Un nom optionnel pour une contrainte. S'il n'est pas spécifié, le
      système en engendre un.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOT NULL</literal></term>
    <listitem>
     <para>
      Les valeurs de ce domaine sont protégées comme les valeurs NULL.
      Cependant, voir les notes ci-dessous.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULL</literal></term>
    <listitem>
     <para>
      Les valeurs de ce domaine peuvent être NULL. C'est la valeur par défaut.
     </para>

     <para>
      Cette clause a pour seul but la compatibilité avec les bases de données
      SQL non standard. Son utilisation est découragée dans les applications
      nouvelles.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CHECK (<replaceable class="parameter">expression</replaceable>)</literal></term>
    <listitem>
     <para>
      Les clauses <literal>CHECK</literal> spécifient des contraintes
      d'intégrité ou des tests que les valeurs du domaine doivent satisfaire.
      Chaque contrainte doit être une expression produisant un résultat
      booléen. <literal>VALUE</literal> est obligatoirement utilisé pour se
      référer à la valeur testée. Les expressions qui renvoient TRUE ou
      UNKNOWN réussissent. Si l'expression produit le résultat FALSE, une
      erreur est rapportée et la valeur n'est pas autorisée à être convertie
      dans le type du domaine.
     </para>

     <para>
      Actuellement, les expressions <literal>CHECK</literal> ne peuvent ni
      contenir de sous-requêtes ni se référer à des variables autres que
      <literal>VALUE</literal>.
     </para>

     <para>
      Quand un domaine dispose de plusieurs contraintes
      <literal>CHECK</literal>, elles seront testées dans l'ordre alphabétique
      de leur nom. (Les versions de <productname>PostgreSQL</productname>
      antérieures à la 9.5 n'utilisaient pas un ordre particulier pour la
      vérification des contraintes <literal>CHECK</literal>.)
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Les contraintes de domaine, tout particulièrement <literal>NOT
    NULL</literal>, sont vérifiées lors de la conversion d'une valeur vers le
   type du domaine. Il est possible qu'une colonne du type du domaine soit lue
   comme un NULL bien qu'il y ait une contrainte spécifiant le contraire. Par
   exemple, ceci peut arriver dans une requête de jointure externe si la
   colonne de domaine est du côté de la jointure qui peut être NULL. En voici
   un exemple&nbsp;:
   <programlisting>
INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM tab WHERE false));
   </programlisting>
   Le sous-SELECT vide produira une valeur NULL qui est considéré du type du
   domaine, donc aucune vérification supplémentaire de la contrainte n'est
   effectuée, et l'insertion réussira.
  </para>

  <para>
   Il est très difficile d'éviter de tels problèmes car l'hypothèse générale
   du SQL est qu'une valeur NULL est une valeur valide pour tout type de
   données. Une bonne pratique est donc de concevoir les contraintes du
   domaine pour qu'une valeur NULL soit acceptée, puis d'appliquer les
   contraintes <literal>NOT NULL</literal> aux colonnes du type du domaine
   quand cela est nécessaire, plutôt que de l'appliquer au type du domaine
   lui-même.
  </para>

  <para>
   <productname>PostgreSQL</productname> suppose que les conditions
   des contraintes <literal>CHECK</literal> sont immuables, c'est-à-dire
   qu'elles produisent toujours les mêmes résultats pour les mêmes valeurs
   d'entrée. Cette supposition justifie que l'examen des contraintes
   <literal>CHECK</literal> est effectué seulement quand une valeur est
   initialement convertie vers le type domaine, et pas à d'autres moments.
   (C'est essentiellement le même traitement que les contraintes
   <literal>CHECK</literal> s'appliquant aux tables, comme décrit dans
   <xref linkend="ddl-constraints-check-constraints"/>.)
  </para>

  <para>
   Un exemple typique contrevenant à cette supposition consiste à faire
   référence à une fonction définie par l'utilisateur dans l'expression
   <literal>CHECK</literal>, puis de modifier le comportement de cette fonction.
   <productname>PostgreSQL</productname> n'interdit pas cela,
   mais il ne pourra pas remarquer qu'il y a des valeurs stockées dans
   le type du domaine qui seraient en violation de la contrainte <literal>CHECK</literal>.
   Cette situation peut ainsi provoquer l'échec du rechargement d'une
   sauvegarde faite par export. La méthode recommandée pour mener à bien
   ce type de changement consiste à supprimer la contrainte (en utilisant
   <command>ALTER DOMAIN</command>), à changer la définition de la fonction,
   puis à remettre la contrainte, ce qui la testera sur les données stockées.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer le type de données <type>code_postal_us</type>, et l'utiliser dans la
   définition d'une table. Un test d'expression rationnelle est utilisé pour
   vérifier que la valeur ressemble à un code postal US valide&nbsp;:

   <programlisting>CREATE DOMAIN code_postal_us AS TEXT
CHECK(
   VALUE ~ '^\d{5}$'
OR VALUE ~ '^\d{5}-\d{4}$'
);

CREATE TABLE courrier_us (
  id_adresse SERIAL PRIMARY KEY,
  rue1 TEXT NOT NULL,
  rue2 TEXT,
  rue3 TEXT,
  ville TEXT NOT NULL,
  code_postal code_postal_us NOT NULL
);
   </programlisting>
  </para>
 </refsect1>

 <refsect1 id="sql-createdomain-compatibility">
  <title>Compatibilité</title>

  <para>
   La commande <command>CREATE DOMAIN</command> est conforme au standard SQL.
  </para>
 </refsect1>

 <refsect1 id="sql-createdomain-see-also">
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterdomain"/></member>
   <member><xref linkend="sql-dropdomain"/></member>
  </simplelist>
 </refsect1>

</refentry>
