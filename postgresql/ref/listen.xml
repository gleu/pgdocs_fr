<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-listen">
 <indexterm zone="sql-listen">
  <primary>LISTEN</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>LISTEN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>LISTEN</refname>
  <refpurpose>Attendre une notification</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>LISTEN <replaceable class="parameter">canal</replaceable>
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>LISTEN</command> enregistre la session courante comme listener du
   canal de notification <replaceable class="parameter">canal</replaceable>.
   Si la session courante est déjà enregistrée comme listener de ce canal de
   notification, il ne se passe rien de plus.
  </para>

  <para>
   À chaque appel de la commande <command>NOTIFY <replaceable
    class="parameter">canal</replaceable></command>, que ce soit par cette
   session ou par une autre connectée à la même base de données, toutes les
   sessions attendant sur ce canal en sont avisées et chacune en avise en
   retour son client. Voir <command>NOTIFY</command> pour plus d'informations.
  </para>

  <para>
   La commande <command>UNLISTEN</command> permet d'annuler l'enregistrement
   d'une session comme listener d'un canal de notification. Les
   enregistrements d'écoute d'une session sont automatiquement effacés lorsque
   la session se termine.
  </para>

  <para>
   La méthode utilisé par un client pour détecter les événements de
   notification dépend de l'interface de programmation
   <productname>PostgreSQL</productname> qu'il utilise. Avec la bibliothèque
   <application>libpq</application>, l'application exécute
   <command>LISTEN</command> comme une commande SQL ordinaire, puis appelle
   périodiquement la fonction <function>PQnotifies</function> pour savoir si
   un événement de notification est reçu. Les autres interfaces, telle
   <application>libpgtcl</application>, fournissent des méthodes de plus haut
   niveau pour gérer les événements de notification&nbsp;; en fait, avec
   <application>libpgtcl</application>, le développeur de l'application n'a
   même pas à lancer <command>LISTEN</command> ou <command>UNLISTEN</command>
   directement. Tous les détails se trouvent dans la documentation de
   l'interface utilisée.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">canal</replaceable></term>
    <listitem>
     <para>
      Le nom d'un canal de notification (tout identifiant).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   <command>LISTEN</command> prend effet à la validation de la transaction. Si
   <command>LISTEN</command> ou <command>UNLISTEN</command> est exécuté dans
   une transaction qui sera ensuite annulée, l'ensemble des canaux de
   notification écoutés sera inchangé.
  </para>

  <para>
   Une transaction qui a exécuté <command>LISTEN</command> ne peut pas être
   préparée pour la validation en deux phases.
  </para>

  <para>
   Il existe une fenêtre de vulnérabilité lors de la mise en place d'une
   session d'écoute&nbsp;: si des transactions validant en concurrence
   envoient des notifications, quels sont celles que la nouvelle session
   en écoute va recevoir&nbsp;?
   The answer is that the session will receive all events committed after
   an instant during the transaction's commit step.  But that is slightly
   later than any database state that the transaction could have observed
   in queries.  This leads to the following rule for
   using <command>LISTEN</command>: first execute (and commit!) that
   command, then in a new transaction inspect the database state as needed
   by the application logic, then rely on notifications to find out about
   subsequent changes to the database state.  The first few received
   notifications might refer to updates already observed in the initial
   database inspection, but this is usually harmless.
  </para>

  <para>
   <xref linkend="sql-notify"/> contient une discussion plus étendue sur
   l'utilisation de <command>LISTEN</command> et <command>NOTIFY</command>.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Configurer et exécuter une séquence listen/notify à partir de
   <application>psql</application>&nbsp;:

   <programlisting>LISTEN virtual;
NOTIFY virtual;
Notification asynchrone "virtual" reçue en provenance du processus serveur de PID 8448.
   </programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Il n'existe pas d'instruction <command>LISTEN</command> dans le standard
   SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-notify"/></member>
   <member><xref linkend="sql-unlisten"/></member>
  </simplelist>
 </refsect1>
</refentry>
