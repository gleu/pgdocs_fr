<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createeventtrigger">
 <indexterm zone="sql-createeventtrigger">
  <primary>CREATE EVENT TRIGGER</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE EVENT TRIGGER</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE EVENT TRIGGER</refname>
  <refpurpose>définir un nouveau trigger sur événement</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
CREATE EVENT TRIGGER <replaceable class="parameter">nom</replaceable>
  ON <replaceable class="parameter">evenement</replaceable>
  [ WHEN <replaceable class="parameter">variable_filtre</replaceable> IN (<replaceable class="parameter">valeur_filtre</replaceable> [, ... ]) [ AND ... ] ]
  EXECUTE { FUNCTION | PROCEDURE } <replaceable class="parameter">nom_fonction</replaceable>()
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE EVENT TRIGGER</command> crée un nouveau trigger sur
   événement. À chaque fois que l'événement désigné intervient et que la
   condition <literal>WHEN</literal> associée au trigger est satisfaite,
   la fonction du trigger est exécutée. Pour une introduction générale aux
   triggers sur événement, voir <xref linkend="event-triggers"/>. L'utilisateur
   qui crée un trigger sur événement devient son propriétaire.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom à donner au nouveau trigger. Ce nom doit être unique sur la base
      de données.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">evenement</replaceable></term>
    <listitem>
     <para>
      Le nom de l'événement qui déclenche un appel à la fonction donnée. Voir
      <xref linkend="event-trigger-definition"/> pour plus d'informations sur
      les noms d'événements.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">variable_filtre</replaceable></term>
    <listitem>
     <para>
      Le nom d'une variable utilisée pour filtrer les événements. Ceci rend
      possible de restreindre l'exécution du trigger sur un sous-ensemble des
      cas dans lesquels ceci est supporté. Actuellement la seule valeur
      autorisée pour <replaceable class="parameter">variable_filtre</replaceable>
      est <literal>TAG</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">valeur_filtre</replaceable></term>
    <listitem>
     <para>
      Une liste de valeurs pour la <replaceable
      class="parameter">variable_filtre</replaceable> associée, pour laquelle le
      trigger sera déclenché. Pour <literal>TAG</literal>, cela signifie une
      liste de balises de commande (par exemple <literal>'DROP
       FUNCTION'</literal>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_fonction</replaceable></term>
    <listitem>
     <para>
      Une fonction fournie par un utilisateur, déclarée ne prendre aucun
      argument et renvoyant le type de données <literal>event_trigger</literal>.
     </para>

     <para>
      Dans la syntaxe de <literal>CREATE EVENT TRIGGER</literal>, les mots
      clés <literal>FUNCTION</literal> et <literal>PROCEDURE</literal> sont
      équivalents mais la fonction référencée doit dans tous les cas être une
      fonction, et non pas une procédure. L'utilisation du mot-clé
      <literal>PROCEDURE</literal> est ici historique et dépréciée.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1 id="sql-createeventtrigger-notes">
  <title>Notes</title>

  <para>
   Seuls les super-utilisateurs peuvent créer des triggers sur événement.
  </para>

  <para>
   Les triggers sur événement sont désactivées en mode simple utilisateur (voir
   <xref linkend="app-postgres"/>). Si un trigger sur événement erroné désactive
   la base de données à tel point que vous ne pouvez même pas supprimer le
   trigger, redémarrez le serveur en mode simple utilisateur et vous pourrez
   enfin le faire.
  </para>
 </refsect1>

 <refsect1 id="sql-createeventtrigger-examples">
  <title>Exemples</title>

  <para>
   Empêche l'exécution de toute commande <link linkend="ddl">DDL</link>&nbsp;:

   <programlisting>
CREATE OR REPLACE FUNCTION annule_toute_commande()
  RETURNS event_trigger
 LANGUAGE plpgsql
  AS $$
BEGIN
  RAISE EXCEPTION 'la commande % est désactivée', tg_tag;
END;
$$;

CREATE EVENT TRIGGER annule_ddl ON ddl_command_start
   EXECUTE FUNCTION annule_toute_commande();
   </programlisting>
  </para>
 </refsect1>

 <refsect1 id="sql-createeventtrigger-compatibility">
  <title>Compatibilité</title>

  <para>
   Il n'existe pas d'instruction <command>CREATE EVENT TRIGGER</command> dans le
   standard SQL.
  </para>

 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altereventtrigger"/></member>
   <member><xref linkend="sql-dropeventtrigger"/></member>
   <member><xref linkend="sql-createfunction"/></member>
  </simplelist>
 </refsect1>
</refentry>
