<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-set-role">
 <indexterm zone="sql-set-role">
  <primary>SET ROLE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>SET ROLE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SET ROLE</refname>
  <refpurpose>initialise l'identifiant utilisateur courant de la session en cours</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>SET [ SESSION | LOCAL ] ROLE <replaceable class="parameter">nom_rôle</replaceable>
SET [ SESSION | LOCAL ] ROLE NONE
RESET ROLE
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   Cette commande positionne l'identifiant utilisateur courant suivant la
   session SQL en cours à <replaceable
   class="parameter">nom_rôle</replaceable>. Le nom du rôle peut être
   un identifiant ou une chaîne littérale.
   Après <command>SET ROLE</command>, la vérification des droits sur les commandes SQL
   est identique à ce qu'elle serait si le rôle nommé s'était lui-même connecté.
  </para>

  <para>
   Il est obligatoire que l'utilisateur de la session courante soit membre
   du rôle <replaceable class="parameter">nom_rôle</replaceable>
   (si l'utilisateur de la session est superutilisateur, tous les rôles sont
   utilisables).
  </para>

  <para>
   Les modificateurs <literal>SESSION</literal> et <literal>LOCAL</literal> agissent de la même
   façon que pour la commande <xref linkend="sql-set"/>.
  </para>

  <para>
   Les formes <literal>NONE</literal> et <literal>RESET</literal> réinitialisent l'identifiant
   de l'utilisateur à la valeur de session. Ces formes
   peuvent être exécutées par tout utilisateur.
  </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   L'utilisation de cette commande permet d'étendre ou de restreindre les
   privilèges d'un utilisateur. Si le rôle de l'utilisateur de la
   session comprend l'attribut <literal>INHERIT</literal>, alors il
   acquiert automatiquement les droits de chaque rôle qu'il peut prendre
   par la commande <command>SET ROLE</command>&nbsp;; dans
   ce cas, <command>SET ROLE</command> supprime tous les droits affectés
   directement à l'utilisateur de la session et les autres droits des rôles
   dont il est membre, ne lui laissant que les droits disponibles sur le rôle
   nommé. A l'opposé, si le rôle session de l'utilisateur dispose de
   l'attribut <literal>NOINHERIT</literal>, <command>SET ROLE</command> supprime les droits
   affectés directement à l'utilisateur session et les remplace par les
   privilèges du rôle nommé.
  </para>

  <para>
   En particulier, quand un utilisateur choisit un rôle autre que
   superutilisateur via <command>SET ROLE</command>, il perd les droits
   superutilisateur.
  </para>

  <para>
   <command>SET ROLE</command> a des effets comparables à
   <xref linkend="sql-set-session-authorization"
    /> mais la vérification des
   droits diffère. De plus, <command>SET SESSION AUTHORIZATION</command>
   détermine les rôles autorisés
   dans les commandes <command>SET ROLE</command> ultérieures alors que
   <command>SET ROLE</command> ne modifie pas les rôles accessibles par
   un futur <command>SET ROLE</command>.
  </para>

  <para>
   <command>SET ROLE</command> ne traite pas les variables de session
   indiqué par les paramètres du rôle (et configurés avec <xref
   linkend="sql-alterrole"/>&nbsp;; cela ne
   survient qu'à la connexion.
  </para>

  <para>
   <command>SET ROLE</command> ne peut pas être utilisé dans une
   fonction <literal>SECURITY DEFINER</literal>.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <programlisting>SELECT SESSION_USER, CURRENT_USER;

 session_user | current_user
--------------+--------------
 peter        | peter

SET ROLE 'paul';

SELECT SESSION_USER, CURRENT_USER;

 session_user | current_user
--------------+--------------
 peter        | paul
  </programlisting>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <productname>PostgreSQL</productname> autorise la syntaxe identifiant
   (<literal>"<replaceable>nom_role</replaceable>"</literal>) alors que le SQL
   standard impose une chaîne littérale pour le nom du rôle.
   SQL n'autorise pas cette commande lors d'une transaction&nbsp;;
   <productname>PostgreSQL</productname> n'est pas aussi restrictif,
   rien ne justifie cette interdiction. Les modificateurs
   <literal>SESSION</literal> et <literal>LOCAL</literal> sont des extensions
   <productname>PostgreSQL</productname> tout comme la syntaxe <literal>RESET</literal>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-set-session-authorization"/></member>
  </simplelist>
 </refsect1>
</refentry>
