<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060301 pour la relecture -->

<refentry id="sql-truncate">
 <refmeta>
  <refentrytitle>TRUNCATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>TRUNCATE</refname>
  <refpurpose>vide une table ou un ensemble de tables</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>TRUNCATE [ TABLE ] [ ONLY ] <replaceable class="PARAMETER">nom</replaceable> [ * ] [, ... ]
    [ RESTART IDENTITY | CONTINUE IDENTITY ] [ CASCADE | RESTRICT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-truncate">
   <primary>TRUNCATE</primary>
  </indexterm>

  <para>
   La commande <command>TRUNCATE</command> supprime rapidement toutes les
   lignes d'un ensemble de tables. Elle a le même effet qu'un
   <command>DELETE</command> non qualifié sur chaque table, mais comme elle ne
   parcourt par la table, elle est plus rapide. De plus, elle récupère
   immédiatement l'espace disque, évitant ainsi une opération
   <command>VACUUM</command>. Cette commande est particulièrement utile pour
   les tables volumineuses.
  </para>
 </refsect1>
  
 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom d'une table à vider (pouvant être qualifié par le schéma). Si la
      clause <literal>ONLY</literal> est précisée avant le nom de la table,
      seule cette table est tronquée. Dans le cas contraire, la table et toutes
      ses tables filles (si elle en a) sont tronquées. En option,
      <literal>*</literal> peut être ajouté après le nom de la table pour
      indiquer explicitement que les tables filles sont inclues.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTART IDENTITY</literal></term>
    <listitem>
     <para>
      Redémarre les séquences intégrées aux colonnes des tables tronquées.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONTINUE IDENTITY</literal></term>
    <listitem>
     <para>
      Ne change pas la valeur des séquences. C'est la valeur par défaut.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
     <para>
      Vide toutes les tables qui ont des références de clés étrangères sur une
      des tables nommées et sur toute table ajoutée au groupe à cause du
      <literal>CASCADE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
     <para>
      Refuse le vidage si une des tables a des références de clés étrangères
      sur une table qui ne sont pas listées dans la commande. Cette option est
      active par défaut.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Vous devez avoir le droit <literal>TRUNCATE</literal> sur la table que vous
   voulez tronquer.
  </para>

  <para>
   <command>TRUNCATE</command> nécessite un verrou d'accès exclusif
   (<literal>ACCESS EXCLUSIVE</literal>) sur chaque table qu'il traite, ce qui
   bloque toutes les autres opérations en parallèle sur cette table. Quand
   <literal>RESTART IDENTITY</literal> est spécifié, toutes les séquences qui
   doivent être réinitialisées ont un verrou exclusif. Si un
   accès concurrent est nécessaire, alors la commande
   <command>DELETE</command> doit être utilisée.
  </para>

  <para>
   <command>TRUNCATE</command> ne peut pas être utilisé sur une table
   référencée par d'autres tables au travers de clés étrangères, sauf si ces
   tables sont aussi comprises dans la commande. Dans le cas contraire, la
   vérification nécessiterait des parcours complets de tables, ce qui n'est pas
   le but de la commande <command>TRUNCATE</command>. L'option
   <literal>CASCADE</literal> est utilisable pour inclure automatiquement
   toutes les tables dépendantes &mdash; faites attention lorsque vous utilisez
   cette option parce que vous pourriez perdre des données que vous auriez
   souhaitez conserver&nbsp;!
  </para>

  <para>
   <command>TRUNCATE</command> ne déclenchera aucun trigger <literal>ON
   DELETE</literal> qui pourrait exister sur les tables. Par contre, il
   déclenchera les triggers <literal>ON TRUNCATE</literal>. Si des triggers
   <literal>ON TRUNCATE</literal> sont définis sur certaines des tables,
   alors tous les triggers <literal>BEFORE TRUNCATE</literal> sont déclenchés
   avant que le tronquage n'intervienne, et tous les triggers <literal>AFTER
   TRUNCATE</literal> sont déclenchés après la réalisation du dernier
   tronquage et toutes les séquences sont réinitialisées. Les triggers se
   déclencheront dans l'ordre de traitement des
   tables (tout d'abord celles listées dans la commande, puis celles ajoutées
   à cause des cascades).
  </para>

  <para>
   Quand <literal>RESTART IDENTITY</literal> est spécifié, les opérations
   <command>ALTER SEQUENCE RESTART</command> impliquées sont aussi réalisées
   de façon transactionnelles. Autrement dit, elles seront annulées si la
   transaction n'est pas validée. C'est le contraire du comportement normal de
   <command>ALTER SEQUENCE RESTART</command>. Faites attention au fait que si
   des opérations supplémentaires sur les séquences impliquées est faite avant
   l'annulation de la transaction, les effets de ces opérations sur les
   séquences seront aussi annulés mais pas les effets sur
   <function>currval()</function>&nbsp;; autrement dit, après la transaction,
   <function>currval()</function> continuera à refléter la dernière valeur de
   la séquence obtenue au sein de la transaction échouée, même si la séquence
   elle-même pourrait ne plus être en adéquation avec cela. C'est similaire
   au comportement habituel de <function>currval()</function> après une
   transaction échouée.
  </para>

  <para>
   <command>TRUNCATE</command> est compatible avec le système des transactions.
   Les données seront toujours disponibles si la transaction est annulée.
  </para>

  <warning>
   <para>
    Les opérations sur les séquences (<command>ALTER SEQUENCE RESTART</command>)
    réalisées en conséquence de l'utilisation de l'option <literal>RESTART
    IDENTITY</literal> sont non transactionnelles et ne seront pas annulées
    en cas d'échec. Pour minimiser les risques, ces opérations sont réalisées
    seulement après que tout le reste du travail de <command>TRUNCATE</command>
    ne soit terminé. Néanmoins, il y a toujours un risque si
    <command>TRUNCATE</command> est exécuté dans un bloc de transaction qui est
    annulé ultérieurement. Par exemple, avec&nbsp;:

<programlisting>
BEGIN;
TRUNCATE TABLE foo RESTART IDENTITY;
COPY foo FROM ...;
COMMIT;
</programlisting>

    Si le <command>COPY</command> échoue, les données de la table seront
    restaurées mais les séquences seront laissées avec des valeurs probablement
    inférieures à celles qu'elles avaient avant, ce qui pourrait amener à des
    échecs de clés dupliquées ou à d'autres problèmes dans les transactions
    suivantes. Si cela peut devenir un problème, il est bien mieux d'éviter
    d'utiliser <literal>RESTART IDENTITY</literal>, et d'accepter que le
    nouveau contenu de la table aura des numéros de séquence bien supérieur
    à l'ancien.
   </para>
  </warning>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Vider les tables <literal>grossetable</literal> et
   <literal>grandetable</literal>&nbsp;:

<programlisting>TRUNCATE grossetable, grandetable;
</programlisting>
  </para>
  
  <para>
   La même chose, en réinitialisant les générateurs des séquences
   associées&nbsp;:

<programlisting>
TRUNCATE bigtable, fattable RESTART IDENTITY;
</programlisting>
  </para>

  <para>
   Vide la table <literal>uneautretable</literal>, et cascade cela à toutes
   les tables qui référencent <literal>uneautretable</literal> via des
   contraintes de clés étrangères&nbsp;:

<programlisting>
TRUNCATE uneautretable CASCADE;
</programlisting>
  </para>
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL:2008 inclut une commande <command>TRUNCATE</command> avec la
   syntaxe <literal>TRUNCATE TABLE <replaceable>nom_table</replaceable></literal>.
   Les clauses <literal>CONTINUE IDENTITY</literal>/<literal>RESTART IDENTITY</literal>
   font aussi partie du standard mais ont une signification légèrement différente,
   quoique en rapport. Certains des comportements de concurrence de cette commande
   sont laissés au choix de l'implémentation par le standard, donc les notes
   ci-dessus doivent être comprises et comparées avec les autres implémentations
   si nécessaire.
  </para>
 </refsect1>
</refentry>
