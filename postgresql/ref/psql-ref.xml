<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<refentry id="app-psql">
  <refmeta>
    <refentrytitle id="app-psql-title"><application>psql</application></refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo>Application</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname><application>psql</application></refname>
    <refpurpose>
      terminal interactif <productname>PostgreSQL</productname>
    </refpurpose>
  </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>psql</command>
   <arg rep="repeat"><replaceable class="parameter">option</replaceable></arg>
   <arg choice="opt"><replaceable class="parameter">nombase</replaceable>
   <arg choice="opt"><replaceable class="parameter">nomutilisateur</replaceable></arg></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="app-psql">
   <primary>psql</primary>
  </indexterm>

    <para>
     <application>psql</application> est une interface en mode texte
     pour <productname>PostgreSQL</productname>. Il vous permet de saisir des
     requêtes de façon interactive, de les exécuter sur
     <productname>PostgreSQL</productname> et de voir les résultats de ces
     requêtes. Alternativement, les entrées peuvent êtres lues à partir d'un fichier.
     De plus, il fournit un certain nombre de méta-commandes et plusieurs
     fonctionnalités style shell pour faciliter l'écriture des scripts et
     automatiser un nombre varié de tâches.
    </para>
 </refsect1>

 <refsect1 id="r1-app-psql-3">
  <title>Options</title>

  <variablelist>
    <varlistentry>
      <term><option>-a</option></term>
      <term><option>--echo-all</option></term>
      <listitem>
      <para>
       Affiche toutes les lignes en entrée sur la sortie standard lorsqu'elles
       sont lues. Ceci est plus utile dans le traitement de scripts que dans
       le mode interactif. C'est équivalent à initialiser la variable
       <varname>ECHO</varname> à <literal>all</literal>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-A</option></term>
      <term><option>--no-align</option></term>
      <listitem>
      <para>
      Bascule dans le mode d'affichage non aligné. (Le mode d'affichage par
      défaut est aligné.)
      </para>
      </listitem>
    </varlistentry>
	
    <varlistentry>
      <term><option>-c <replaceable
	class="parameter">commande</replaceable></option></term>
      <term><option>--command=<replaceable
	class="parameter">commande</replaceable></option></term>
      <listitem>
      <para>
      Indique que <application>psql</application> doit exécuter une chaîne de
      commande, <replaceable class="parameter">commande</replaceable>, puis
      s'arrêter. Cette option est utile dans les scripts shell. Les fichiers
      de démarrage (<filename>psqlrc</filename> et
      <filename>~/.psqlrc</filename>) sont ignorés avec cette option.
      </para>
      <para>
      <replaceable class="parameter">commande</replaceable> doit être soit une
      chaîne de commandes complètement analysable par le serveur (c'est-à-dire
      qui ne contient aucune des fonctionnalités spécifiques de
      <application>psql</application>), soit une seule commande
      antislash. Du coup, vous ne pouvez pas mixer les commandes
      <acronym>SQL</acronym> et les méta-commandes
      <application>psql</application> avec cette option. Pour réussir ceci, vous
      pouvez envoyer la chaîne dans un tube vers <application>psql</application>
      comme ceci&nbsp;:
<literal>echo "\x \\ SELECT * FROM foo;" | psql</literal>.
      (<literal>\\</literal> est la méta-commande séparateur.)
      </para>
      <para>
       Si la chaîne de commandes contient plusieurs commandes SQL, elles sont
       traitées dans une seule transaction sauf si des commandes
       <command>BEGIN</command>/<command>COMMIT</command>
       explicites sont inclues dans la chaîne pour la diviser en plusieurs
       transactions. Ceci est différent du comportement adopté quand la même
       chaîne est envoyée dans l'entrée standard de
       <application>psql</application>. De plus, seul le résultat de la dernière
       commande SQL est renvoyé.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-d <replaceable
	class="parameter">nombase</replaceable></option></term>
      <term><option>--dbname=<replaceable
	class="parameter">nombase</replaceable></option></term>
      <listitem>
      <para>
      Indique le nom de la base de données où se connecter. Ceci est
      équivalent à spécifier <replaceable
      class="parameter">nombase</replaceable> comme premier argument de la
      ligne de commande qui n'est pas une option.
      </para>
      <para>
       Si ce paramètre contient un signe <symbol>=</symbol> ou commence avec un
       préfixe valide d'<acronym>URI</acronym>
       (<literal>postgresql://</literal>
       ou <literal>postgres://</literal>), il est traité comme
       une chaîne <parameter>conninfo</parameter>. Voir <xref
       linkend="libpq-connstring"/> pour plus d'informations.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-e</option></term>
      <term><option>--echo-queries</option></term>
      <listitem>
      <para>
      Copie toutes les commandes qui sont envoyées au serveur sur la sortie
      standard. Ceci est équivalent à initialiser la variable
      <varname>ECHO</varname> à <literal>queries</literal>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-E</option></term>
      <term><option>--echo-hidden</option></term>
      <listitem>
      <para>
      Affiche les requêtes réelles générées par <command>\d</command> et autres
      commandes antislash. Vous pouvez utiliser ceci pour étudier les
      opérations internes de <application>psql</application>. Ceci est
      équivalent à initialiser la variable <varname>ECHO_HIDDEN</varname>
      dans <application>psql</application>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-f <replaceable
	class="parameter">nomfichier</replaceable></option></term>
      <term><option>--file=<replaceable
	class="parameter">nomfichier</replaceable></option></term>
      <listitem>
      <para>
      Utilise le fichier <replaceable
      class="parameter">nomfichier</replaceable> comme source des commandes au
      lieu de lire les commandes de façon interactive. Une fois que le fichier
      est entièrement traité, <application>psql</application> se termine. Ceci
      est globalement équivalent à la méta-commande
      <command>\i</command>.
      </para>

      <para>
       Si <replaceable>nomfichier</replaceable> est un <literal>-</literal>
       (tiret), alors l'entrée standard est lue.
      </para>

      <para>
      Utiliser cette option est légèrement différent d'écrire <literal>psql
      &lt; <replaceable class="parameter">nomfichier</replaceable></literal>. En
      général, les deux feront ce que vous souhaitez mais utiliser
      <literal>-f</literal> active certaines fonctionnalités intéressantes
      comme les messages d'erreur avec les numéros de ligne. Il y a aussi une
      légère chance qu'utiliser cette option réduira la surcharge du lancement.
      D'un autre côté, la variante utilisant la redirection de l'entrée du shell
      doit (en théorie) pour ramener exactement le même affichage que
      celui que vous auriez eu en saisissant tout manuellement.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-F <replaceable
	class="parameter">séparateur</replaceable></option></term>
      <term><option>--field-separator=<replaceable
	class="parameter">séparateur</replaceable></option></term>
      <listitem>
      <para>
      Utilisez <replaceable class="parameter">séparateur</replaceable> comme
      champ séparateur pour un affichage non aligné. Ceci est équivalent à
      <command>\pset fieldsep</command> ou <command>\f</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-h <replaceable
	class="parameter">nomhôte</replaceable></option></term>
      <term><option>--host=<replaceable
	class="parameter">nomhôte</replaceable></option></term>
      <listitem>
      <para>
      Indique le nom d'hôte de la machine sur lequel le serveur est en cours
      d'exécution. Si la valeur commence avec un slash, elle est utilisée comme
      répertoire du socket de domaine Unix.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-H</option></term>
      <term><option>--html</option></term>
      <listitem>
      <para>
      Active l'affichage en tableau <acronym>HTML</acronym>. Ceci est
      équivalent à <literal>\pset format html</literal> ou à la commande
      <command>\H</command>.
      </para>
      </listitem>
    </varlistentry>
 
    <varlistentry>
      <term><option>-l</option></term>
      <term><option>--list</option></term>
      <listitem>
      <para>
      Liste toutes les bases de données disponibles puis quitte. Les autres
      option non relatives à la connexion sont ignorées. Ceci est similaire à la
      méta-commande <command>\list</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-L <replaceable class="parameter">nomfichier</replaceable></option></term>
      <term><option>--log-file=<replaceable class="parameter">nomfichier</replaceable></option></term>
      <listitem>
      <para>
      Écrit tous les résultats des requêtes dans le fichier <replaceable
      class="parameter">nomfichier</replaceable> en plus de la destination
      habituelle.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-readline</option></term>
      <listitem>
      <para>
       N'utilise pas <application>readline</application> pour l'édition de ligne et n'utilise pas
       l'historique. Ceci est utile quand on veut désactiver la gestion de la
       tabulation pour l'action copie/colle.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-o <replaceable
	class="parameter">nomfichier</replaceable></option></term>
      <term><option>--output=<replaceable
	class="parameter">nomfichier</replaceable></option></term>
      <listitem>
      <para>
      Dirige tous les affichages de requêtes dans le fichier <replaceable
      class="parameter">nomfichier</replaceable>. Ceci est équivalent à la
      commande <command>\o</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
      <para>
      Indique le port TCP ou l'extension du fichier socket de domaine local
      Unix sur lequel le serveur attend les connexions. Par défaut, il s'agit de
      la valeur de la variable d'environnement <envar>PGPORT</envar> ou, si elle
      n'est pas initialisée, le port spécifié au moment de la compilation,
      habituellement 5432.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-P <replaceable
	class="parameter">affectation</replaceable></option></term>
      <term><option>--pset=<replaceable
	class="parameter">affectation</replaceable></option></term>
      <listitem>
      <para>
      Vous permet de spécifier les options d'affichage dans le style de
      <command>\pset</command> sur la ligne de commande. Notez que, ici, vous
      devez séparer nom et valeur avec un signe égal au lieu d'un espace. Du
      coup, pour initialiser le format d'affichage en <application>LaTeX</application>, vous devez écrire
      <literal>-P format=latex</literal>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-q</option></term>
      <term><option>--quiet</option></term>
      <listitem>
      <para>
      Indique que <application>psql</application> doit travailler
      silencieusement. Par défaut, il affiche des messages de bienvenue et des
      informations diverses. Si cette option est utilisée, rien de ceci
      n'est affiché. C'est utile avec l'option <option>-c</option>. À l'intérieur
      de <application>psql</application>, vous pouvez aussi initialiser la
      variable <varname>QUIET</varname> pour arriver au même effet.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-R <replaceable
	class="parameter">séparateur</replaceable></option></term>
      <term><option>--record-separator=<replaceable
	class="parameter">séparateur</replaceable></option></term>
      <listitem>
      <para>
      Utilisez <replaceable class="parameter">séparateur</replaceable> comme
      séparateur d'enregistrement pour un affichage non aligné. Ceci est
      équivalent à la commande <command>\pset recordsep</command>.
      </para>
      </listitem>
    </varlistentry>
 
    <varlistentry>
      <term><option>-s</option></term>
      <term><option>--single-step</option></term>
      <listitem>
      <para>
      S'exécute en mode étape par étape. Ceci signifie qu'une
      intervention de l'utilisateur est nécessaire avant l'envoi de chaque
      commande au serveur, avec une option pour annuler l'exécution. Utilisez
      cette option pour déboguer des scripts.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-S</option></term>
      <term><option>--single-line</option></term>
      <listitem>
      <para>
      S'exécute en mode simple ligne où un retour à la ligne termine une
      commande SQL, de la même façon qu'un point-virgule.
      </para>

      <note>
      <para>
      Ce mode est fourni pour ceux qui insistent pour l'avoir, mais vous n'êtes pas
      nécessairement encouragé à l'utiliser. En particulier, si vous mixez
      <acronym>SQL</acronym> et méta-commandes sur une ligne, l'ordre
      d'exécution n'est pas toujours clair pour l'utilisateur non expérimenté.
      </para>
      </note>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-t</option></term>
      <term><option>--tuples-only</option></term>
      <listitem>
      <para>
      Désactive l'affichage des noms de colonnes et le pied de page
      contenant le nombre de résultats, etc. Ceci est équivalent à la
      méta-commande <command>\t</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-T <replaceable
	class="parameter">options_table</replaceable></option></term>
      <term><option>--table-attr=<replaceable
	class="parameter">options_table</replaceable></option></term>
      <listitem>
      <para>
      Permet d'indiquer les options à placer à l'intérieur d'une balise
      <sgmltag>table</sgmltag> en <acronym>HTML</acronym>. Voir
      <command>\pset</command> pour plus de détails.
      </para>
      </listitem>
    </varlistentry>
 
    <varlistentry>
      <term><option>-U <replaceable
	class="parameter">nomutilisateur</replaceable></option></term>
      <term><option>--username=<replaceable
	class="parameter">nomutilisateur</replaceable></option></term>
      <listitem>
      <para>
      Se connecte à la base de données en tant que l'utilisateur <replaceable
      class="parameter">nomutilisateur</replaceable> au lieu de celui par
      défaut. (Vous devez aussi avoir le droit de le faire, bien sûr.)
      </para> 
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-v <replaceable
	class="parameter">affectation</replaceable></option></term>
      <term><option>--set=<replaceable
	class="parameter">affectation</replaceable></option></term>
      <term><option>--variable=<replaceable
	class="parameter">affectation</replaceable></option></term>
      <listitem>
      <para>
      Réalise une affectation de variable comme la méta-commande
      <command>\set</command>. Notez que vous devez séparer nom et valeur par
      un signe égal sur la ligne de commande. Pour désinitialiser une variable,
      enlevez le signe d'égalité. Pour simplement initialiser une variable sans
      valeur, utilisez le signe égal sans passer de valeur. Ces affectations
      sont réalisées lors de la toute première étape du lancement, du coup les
      variables réservées à des buts internes peuvent être écrasées plus
      tard.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem>
      <para>
      Affiche la version de <application>psql</application> et quitte.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-w</option></term>
     <term><option>--no-password</option></term>
     <listitem>
      <para>
        Ne demande jamais un mot de passe. Si le serveur en réclame un pour
        l'authentification et qu'un mot de passe n'est pas disponible d'une autre
        façon (par exemple avec le fichier <filename>.pgpass</filename>), la
        tentative de connexion échouera. Cette option peut être utile pour les
        scripts où aucun utilisateur n'est présent pour saisir un mot de passe.
      </para>

      <para>
       Notez que cette option restera positionnée pour l'ensemble de la session,
       et qu'elle affecte aussi l'utilisation de la méta-commande
       <command>\connect</command> en plus de la tentative de connexion
       initiale.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-W</option></term>
      <term><option>--password</option></term>
      <listitem>
      <para>
      Force <application>psql</application> à demander un mot de
      passe avant de se connecter à une base de données.
      </para>

      <para>
        Cette option n'est jamais obligatoire car
        <application>psql</application> demandera automatiquement un
	mot de passe si le serveur exige une authentification par mot de
	passe. Néanmoins, <application>psql</application> perdra une
	tentative de connexion pour trouver que le serveur veut un mot de
	passe. Dans certains cas, il est préférable d'ajouter l'option
        <option>-W</option> pour éviter la tentative de connexion.
      </para>

      <para>
       Notez que cette option sera conservée pour la session entière,
       et que du coup elle affecte l'utilisation de la méta-commande      
       <command>\connect</command> ainsi que la tentative de connexion
       initiale.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-x</option></term>
      <term><option>--expanded</option></term>
      <listitem>
      <para>
      Active le mode de formatage de table étendu. Ceci est équivalent à la
      commande <command>\x</command>.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-X,</option></term>
      <term><option>--no-psqlrc</option></term>
      <listitem>
      <para>
      Ne lit pas le fichier de démarrage (ni le fichier système
      <filename>psqlrc</filename> ni celui de l'utilisateur
      <filename>~/.psqlrc</filename>).
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-z</option></term>
      <term><option>--field-separator-zero</option></term>
      <listitem>
      <para>
      Configure le séparateur de champs pour une sortie non alignée avec un
      octet zéro.
      </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><option>-0</option></term>
      <term><option>--record-separator-zero</option></term>
      <listitem>
      <para>
      Configure le séparateur d'enregistrement pour une sortie non alignée avec
      un octet zéro. C'est intéressant pour l'interfacer avec
      <literal>xargs -0</literal>.
      </para>
      </listitem>
    </varlistentry>

     <varlistentry>
      <term><option>-1</option></term>
      <term><option>--single-transaction</option></term>
      <listitem>
       <para>
        Quand <application>psql</application> exécute un script, ajouter
        cette option englobe le script avec les
        instructions <command>BEGIN</command>/<command>COMMIT</command> pour
        tout faire dans une seule transaction. Ceci nous assure que soit toutes
        les commandes se terminent avec succès, soit aucune modification n'est
        enregistrée.
       </para>

       <para>
        Si le script utilise lui-même <command>BEGIN</command>,
	<command>COMMIT</command> ou <command>ROLLBACK</command>, cette option
	n'aura pas les effets désirés. De plus, si le script contient toute
	commande qui ne peut pas être exécutée à l'intérieur d'un bloc de
	transaction, indiquer cette option provoquera l'échec de cette commande
	(et du coup de la transaction entière).
       </para>
      </listitem>
     </varlistentry>

    <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem>
      <para>
      Affiche de l'aide sur les arguments en ligne de commande de
      <application>psql</application> et quitte.
      </para>
      </listitem>
    </varlistentry>
  </variablelist>
 </refsect1>


 <refsect1>
  <title>Code de sortie</title>

  <para>
   <application>psql</application> renvoie 0 au shell s'il se termine
   normalement, 1 s'il y a eu une erreur fatale de son fait (pas assez de
   mémoire, fichier introuvable), 2 si la connexion au serveur s'est interrompue
   ou a été annulée, 3 si une erreur est survenue dans un script et si la variable
   <varname>ON_ERROR_STOP</varname> a été initialisée.
  </para>
 </refsect1>


 <refsect1>
  <title>Usage</title>

  <refsect2 id="r2-app-psql-connecting">
    <title>Se connecter à une base de données</title>

    <para>
    <application>psql</application> est une application client
    <productname>PostgreSQL</productname> standard. Pour se connecter à une
    base de données, vous devez connaître le nom de votre base de
    données cible, le nom de l'hôte et le numéro de port du serveur ainsi que le
    nom de l'utilisateur que vous souhaitez connecter.
    <application>psql</application> peut connaître ces paramètres à partir
    d'options en ligne de commande, respectivement
    <option>-d</option>, <option>-h</option>, <option>-p</option> et
    <option>-U</option>. Si un argument autre qu'une option est rencontré, 
    il est interprété comme le nom de la base de données (ou le nom de
    l'utilisateur si le nom de la base de données est déjà donné). Toutes les
    options ne sont pas requises, des valeurs par défaut sont applicables. Si
    vous omettez le nom de l'hôte, <application>psql</application> se connecte via un
    socket de domaine Unix à un serveur sur l'hôte local ou via TCP/IP sur
    <literal>localhost</literal> pour les machines qui n'ont pas sockets de domaine
    Unix. Le numéro de port par
    défaut est déterminé au moment de la compilation. Comme le serveur de bases
    de données utilise la même valeur par défaut, vous n'aurez pas besoin de
    spécifier le port dans la plupart des cas. Le nom de l'utilisateur par
    défaut est votre nom d'utilisateur Unix, de même pour le nom de la base de
    données par défaut. Notez que vous ne pouvez pas simplement vous connecter à
    n'importe quelle base de données avec n'importe quel nom d'utilisateur. Votre
    administrateur de bases de données doit vous avoir informé de vos droits
    d'accès.
    </para>

    <para>
    Quand les valeurs par défaut ne sont pas correctes, vous pouvez vous simplifier
    la vie en configurant les variables d'environnement
    <envar>PGDATABASE</envar>, <envar>PGHOST</envar>, <envar>PGPORT</envar>
    et/ou <envar>PGUSER</envar> avec les valeurs appropriées (pour les variables
    d'environnement supplémentaires, voir <xref linkend="libpq-envars"/>). Il
    est aussi intéressant d'avoir un fichier <filename>~/.pgpass</filename> pour éviter
    d'avoir régulièrement à saisir des mots de passe. Voir <xref
    linkend="libpq-pgpass"/> pour plus d'informations.
    </para>

    <para>
     Une autre façon d'indiquer les paramètres de connexion est dans une chaîne
     <parameter>conninfo</parameter> ou une <acronym>URI</acronym> qui est
     utilisée à la place du nom d'une
     base de données. Ce mécanisme vous donne un grand contrôle sur la
     connexion. Par exemple&nbsp;:
<programlisting>
$ <userinput>psql "service=monservice sslmode=require"</userinput>
$ <userinput>psql postgresql://dbmaster:5433/mydb?sslmode=require</userinput>
</programlisting>
     De cette façon, vous pouvez aussi utiliser <acronym>LDAP</acronym> pour la recherche de
     paramètres de connexion, comme décrit dans <xref linkend="libpq-ldap"/>.
     Voir <xref linkend="libpq-paramkeywords"/> pour plus d'informations sur toutes
     les options de connexion disponibles.
    </para>

    <para>
    Si la connexion ne peut pas se faire, quelle qu'en soit la raison (c'est-à-dire
    droits non suffisants, serveur arrêté sur l'hôte cible, etc.),
    <application>psql</application> renvoie une erreur et s'arrête.
    </para>

    <para>
     Si au moins l'une des entrée ou sortie standard correspond à
     un terminal, alors <application>psql</application> fixe le paramètre
     d'encodage client à la valeur <quote>auto</quote>, afin de pouvoir
     détecter l'encodage approprié d'après les paramètres régionaux (définis
     par la variable système <envar>LC_CTYPE</envar> pour les systèmes
     Unix).
     Si cette méthode échoue, il est possible de forcer l'encodage du client
     en renseignant la variable d'environnement <envar>PGCLIENTENCODING</envar>.
    </para>
  </refsect2>

  <refsect2 id="r2-app-psql-4">
    <title>Saisir des commandes SQL</title>

    <para>
    Dans le cas normal, <application>psql</application> fournit une invite avec
    le nom de la base de données sur laquelle <application>psql</application>
    est connecté suivi par la chaîne <literal>=&gt;</literal>. Par exemple&nbsp;
<programlisting>$ <userinput>psql basetest</userinput>
psql (&version;)
Type "help" for help.

basetest=&gt;
</programlisting>
    </para>

    <para>
    À l'invite l'utilisateur peut saisir des commandes <acronym>SQL</acronym>.
    Ordinairement, les lignes en entrée sont envoyées vers le serveur quand un
    point-virgule de fin de commande est saisi. Une fin de ligne ne termine pas
    une commande. Du coup, les commandes peuvent être saisies sur plusieurs
    lignes pour plus de clarté. Si la commande est envoyée et exécutée sans
    erreur, les résultats de la commande sont affichés sur l'écran.
    </para>

    <para>
    À chaque fois qu'une commande est exécutée, <application>psql</application>
    vérifie aussi les événements de notification générés par
    <xref linkend="sql-listen"/> et
    <xref linkend="sql-notify"/>.
    </para>
  </refsect2>

  <refsect2 id="app-psql-meta-commands">
    <title>Meta-commandes</title>

    <para>
    Tout ce que vous saisissez dans <application>psql</application> qui
    commence par un antislash non échappé est une méta-commande
    <application>psql</application> qui est traitée par
    <application>psql</application> lui-même. Ces commandes aident à rendre
    <application>psql</application> plus utile pour l'administration ou pour
    l'écriture de scripts. Les méta-commandes sont plus souvent appelées les
    commandes slash ou antislash.
    </para>

    <para>
    Le format d'une commande <application>psql</application> est l'antislash
    suivi immédiatement d'un verbe de commande et de ses arguments. Les
    arguments sont séparés du verbe de la commande et les uns des autres par 
    un nombre illimité d'espaces blancs.
    </para>

    <para>
    Pour inclure des espaces blancs dans un argument, vous pouvez le mettre
    entre des guillemets simples. Pour inclure un guillemet simple dans un
    argument, vous devez écrire deux guillemets simples dans un texte compris
    entre guillemets simples. Tout ce qui est contenu dans des guillemets
    simples est sujet aux substitutions du style langage C&nbsp;:
     <literal>\n</literal> (nouvelle ligne), <literal>\t</literal> (tabulation),
    <literal>\b</literal> (retour arrière), <literal>\r</literal> (retour à la
    ligne), <literal>\f</literal> (form feed),
     <literal>\</literal><replaceable>chiffres</replaceable> (octal), and
     <literal>\x</literal><replaceable>chiffres</replaceable> (hexadécimal).
     Un antislash précédant tout autre caractère dans une chaîne entre guillemets
     simples est ignoré.
     </para>
 
     <para>
    Dans un argument, le texte qui est à l'intérieur de guillemets inverses
    (<literal>`</literal>) est pris sur une ligne de commande qui est passée au
    shell. La sortie de la commande (dont tous les retours à la ligne sont
    supprimés) replace le texte entre guillemets inverses.
     </para>
 
     <para>
    Si un deux-points sans guillemets (<literal>:</literal>) suivi d'un nom
    de variable <application>psql</application> apparaît dans un argument,
    il est remplacé par la valeur de la variable, comme décrit dans <xref
    linkend="app-psql-interpolation" endterm="app-psql-interpolation-title"/>.
    </para>

    <para>
    Quelques commandes prennent un identifiant <acronym>SQL</acronym> (comme un
    nom de table) en argument. Ces arguments suivent les règles de la syntaxe
    <acronym>SQL</acronym>&nbsp;: les lettres sans guillemets sont forcées en
    minuscule alors que les guillemets doubles (<literal>"</literal>) protègent les
    lettres de la conversion de casse et autorisent l'incorporation d'espaces
    blancs dans l'identifiant. À l'intérieur des guillemets doubles, les
    guillemets doubles en paire se réduisent à un seul guillemet double dans le nom
    résultant. Par exemple, <literal>FOO"BAR"BAZ</literal> est interprété comme
    <literal>fooBARbaz</literal> et <literal>"Un nom ""bizarre"</literal> devient 
    <literal>Un nom "bizarre</literal>.
    </para>

    <para>
    L'analyse des arguments se termine quand d'autres antislash non entre
    guillemets surviennent. Ceci est pris pour le début d'une nouvelle
    méta-commande. La séquence spéciale <literal>\\</literal> (deux antislashes)
    marque la fin des arguments et continue l'analyse des commandes
    <acronym>SQL</acronym>, si elles existent. De cette façon, les commandes
    <acronym>SQL</acronym> et <application>psql</application> peuvent être
    mixées librement sur une ligne. Mais dans tous les cas, les arguments d'une
    meta-commande ne peuvent pas continuer après la fin de la ligne.
    </para>

    <para>
    Les meta-commandes suivantes sont définies&nbsp;:

    <variablelist>
      <varlistentry>
        <term><literal>\a</literal></term>
        <listitem>
        <para>
	Si le format actuel d'affichage d'une table est non aligné, il est
	basculé à aligné. S'il n'est pas non aligné, il devient non aligné.
	Cette commande est conservée pour des raisons de compatibilité. Voir
	<command>\pset</command> pour une solution plus générale.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\c</literal> (ou <literal>\connect</literal>) <literal>[ <replaceable class="parameter">nom_base</replaceable> [ <replaceable class="parameter">nom_utilisateur</replaceable> ] [ <replaceable class="parameter">hôte</replaceable> ] [ <replaceable class="parameter">port</replaceable> ] ]</literal></term>
        <listitem>
        <para>
         Établie une nouvelle connexion à un serveur
         <productname>PostgreSQL</productname>. Si la nouvelle connexion est
         réussie, la connexion précédente est fermée. Si une option parmi
         <replaceable class="parameter">nom_base</replaceable>, <replaceable
         class="parameter">nom_utilisateur</replaceable>, <replaceable
         class="parameter">hôte</replaceable> et <replaceable
         class="parameter">port</replaceable> est omise ou vaut
         <literal>-</literal>, la valeur de ce même paramètre de la connexion
         précédente est utilisée. S'il ny avait pas encore de connexion, la
         valeur par défaut dans <application>libpq</application> est
         utilisée.
        </para>

        <para>
         Si la tentative de connexion échoue (mauvais nom d'utilisateur,
         accès refusé, etc.), la connexion précédente est conservée si
         <application>psql</application> est en mode interactif. Lors de
         l'exécution d'un script non interactif, le traitement s'arrêtera
         immédiatement avec une erreur. Cette distinction a été choisie
         pour deux raisons&nbsp;: aider l'utilisateur face aux fautes de
         frappe et en tant que mesure de précaution pour qu'un script n'agisse
         pas par erreur sur la mauvaise base.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\C [ <replaceable
	class="parameter">titre</replaceable> ]</literal></term>
        <listitem>
        <para>
        Initialise ou supprime le titre des tables affichées en
	résultat d'une requête. Cette commande
	est équivalente à <literal>\pset title <replaceable
	class="parameter">titre</replaceable></literal>. (Le nom de cette
	commande provient de <quote>caption</quote>, car elle avait précédemment
	pour seul but d'initialiser l'en-tête dans une table
	<acronym>HTML</acronym>.)
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>\cd [ <replaceable>répertoire</replaceable> ]</literal></term>
       <listitem>
        <para>
	 Modifie le répertoire courant par
	<replaceable>répertoire</replaceable>. Sans argument, le
	répertoire personnel de l'utilisateur devient le répertoire courant.
        </para>

	<tip>
	 <para>
	  Pour afficher votre répertoire courant, utilisez
	  <literal>\! pwd</literal>.
	 </para>
	</tip>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\conninfo</literal></term>
        <listitem>
        <para>
        Outputs information about the current database connection.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\copy { <replaceable class="parameter">table</replaceable> [ ( <replaceable class="parameter">liste_colonnes</replaceable> ) ] | ( <replaceable class="parameter">requête</replaceable> ) }
        { <literal>from</literal> | <literal>to</literal> }
        { <replaceable class="parameter">'nomfichier'</replaceable> | program <replaceable class="parameter">'command'</replaceable> | stdin | stdout | pstdin | pstdout }
        [ [ with ] ( <replaceable class="parameter">option</replaceable> [, ...] ) ]</literal></term>

        <listitem>
        <para>
        Réalise une opération de copy côté client. C'est une opération qui
	exécute une commande <acronym>SQL</acronym>, <xref linkend="sql-copy"/>,
	mais au lieu que le serveur lise ou écrive le
	fichier spécifié, <application>psql</application> lit ou écrit le
	fichier en faisant le routage des données entre le serveur et le système
	de fichiers local. Ceci signifie que l'accès et les droits du fichier
	sont ceux de l'utilisateur local, pas celui du serveur, et qu'aucun
	droit de superutilisateur n'est requis.
	</para>

	<para>
        When <literal>program</literal> is specified,
        <replaceable class="parameter">command</replaceable> is
        executed by <application>psql</application> and the data from
        or to <replaceable class="parameter">command</replaceable> is
        routed between the server and the client.
        This means that the execution privileges are those of
        the local user, not the server, and no SQL superuser
        privileges are required.
	</para>

	<para>
	<literal>\copy ... from stdin | to stdout</literal>
	lit/écrit basé sur l'entrée standard de la commande ou sa sortie 
    standard respectivement.
	Toutes les lignes sont lues à partir de la même source qui a lancé la
	commande, en continuant jusqu'à ce que <literal>\.</literal> soit lu ou
	que le flux parvienne à <acronym>EOF</acronym>. La sortie est envoyée au même
	endroit que la sortie de la commande. Pour lire/écrire à partir de l'entrée
	et de la sortie standard de <application>psql</application>, utilisez
	<literal>pstdin</literal> ou <literal>pstdout</literal>. Cette option est utile pour
	peupler des tables en ligne à l'intérieur d'un fichier script SQL.
	</para>

        <para>
        The syntax of the command is similar to that of the
        <acronym>SQL</acronym> <xref linkend="sql-copy"/>
        command, and
        <replaceable class="parameter">option</replaceable>
        must indicate one of the options of the
        <acronym>SQL</acronym> <xref linkend="sql-copy"/> command.
        Note that, because of this,
        special parsing rules apply to the <command>\copy</command>
        command. In particular, the variable substitution rules and
        backslash escapes do not apply.
        </para>

        <tip>
        <para>
	Cette opération n'est pas aussi efficace que la commande
	<command>COPY</command> en <acronym>SQL</acronym> parce que toutes les
	données doivent passer au travers de la connexion client/serveur. Pour
	les grosses masses de données, la commande <acronym>SQL</acronym> est
	préférable.
        </para>
        </tip>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\copyright</literal></term>
        <listitem>
        <para>
        Affiche le copyright et les termes de distribution de
	<productname>PostgreSQL</productname>.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\d[S+] [ <replaceable class="parameter">motif</replaceable> ]</literal></term>

        <listitem>
        <para>
	Pour chaque relation (table, vue, index, séquence ou table distante)
	ou type composite correspondant au
	<replaceable class="parameter">motif</replaceable>, affiche toutes les
	colonnes, leur types, le tablespace (s'il ne s'agit pas du tablespace
	par défaut) et tout attribut spécial tel que <literal>NOT
	NULL</literal> ou les valeurs par défaut. Les index, contraintes, règles
	et déclencheurs associés sont aussi affichés, ainsi que la définition de
	la vue si la relation est une vue.  For foreign tables, the associated foreign
    server is shown as well. (Ce qui <quote>Correspond au motif</quote> est
	défini ci-dessous.)
	</para>

	<para>
   Pour chaque type de relation, <literal>\d</literal> affiche des informations
   supplémentaires pour chaque colonne&nbsp;; colonne valeur pour les séquences,
   expression indexée pour les index, options du wrapper de données distantes
   pour les tables distantes.
  </para>

  <para>
	Le forme de la commande <literal>\d+</literal> est identique, sauf que
	des informations plus complètes sont affichées&nbsp;: tout commentaire associé avec
	les colonnes de la table est affiché, ainsi que la présence d'OID dans
	la table, la définition de la vue (si la relation ciblée est une vue).
	</para>

        <para>
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
        </para>

	<note>
	<para>
	Si <command>\d</command> est utilisé sans argument
	<replaceable class="parameter">motif</replaceable>, c'est équivalent,
        en plus commode, à <command>\dtvsE</command> qui affiche une liste de
	toutes les tables, vues, séquences et tables distantes.
	</para>
	</note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\da[S] [ <replaceable
	 class="parameter">motif</replaceable> ]</literal></term>

        <listitem>
        <para>
        Liste toutes les fonctions d'agrégat disponibles, avec lee type de retour
        et les types de données sur lesquels elles opèrent. Si <replaceable
        class="parameter">motif</replaceable> est spécifié, seuls les agrégats
        dont les noms commencent par le motif sont affichés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\db[+] [ <replaceable class="parameter">motif</replaceable> ]</literal></term>

      <listitem>
      <para>
      Liste tous les tablespaces disponibles. Si <replaceable
      class="parameter">motif</replaceable> est spécifié, seuls les tablespaces
      dont le nom correspond au motif sont affichés. Si
      <literal>+</literal> est ajouté à la fin de la commande, chaque objet est
      listé avec les droits associés.
      </para>
      </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dc[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les conversions entre les encodages de
	jeux de caractères. Si <replaceable
	class="parameter">motif</replaceable> est spécifié, seules les
	conversions dont le nom correspond au motif sont listées.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque objet
        est listé avec sa description associée.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dC[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les conversions de types.
        Si <replaceable class="parameter">motif</replaceable> est indiqué,
	seules sont affichées les conversions dont le type source ou cible
	correspond au motif.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque objet
        est listé avec sa description associée.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dd[S] [ <link linkend="app-psql-patterns"><replaceable
	class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Affiche les descriptions des objets du type <literal>contrainte</literal>,
        <literal>classe d'opérateur</literal>, <literal>famille d'opérateur</literal>,
        <literal>règle</literal> et <literal>trigger</literal>. Tous les autres
        commentaires peuvent être visualisés avec les commandes antislashs
        respectives pour ces types d'objets.
        </para>

        <para><literal>\dd</literal> Affiche les descriptions des objets correspondant au <replaceable
        class="parameter">motif</replaceable> ou des objets du type
        approprié si aucun
	argument n'est donné. Mais dans tous les cas, seuls les objets qui ont
	une description sont listés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
        </para>

        <para>
        Les descriptions des objets peuvent être ajoutées avec la commande
	<acronym>SQL</acronym> <xref
        linkend="sql-comment"/>.
	</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ddp [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les paramètres par défaut pour les privilèges d'accès. Une entrée est affichée pour chaque rôle 
        (et schéma, si c'est approprié) pour lequel les paramètres
        par défaut des privilèges ont été modifiés par rapport aux paramètres par défaut intégrés.
        Si <replaceable class="parameter">motif</replaceable> est 
        spécifié, seules les entrées dont le nom de rôle ou le nom de schéma
        correspond au motif sont listées.
        </para>

        <para>
        La commande <xref linkend="sql-alterdefaultprivileges"/> sert à positionner
        les privilèges d'accès par défaut. Le sens de l'affichage
        des privilèges est expliqué à la page de
        <xref linkend="sql-grant"/>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dD[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les domaines. Si <replaceable
        class="parameter">motif</replaceable> est spécifié, seuls les
	domaines dont le nom correspond au motif sont affichés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque objet
        est listé avec sa description associée.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dE[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <term><literal>\di[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <term><literal>\ds[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <term><literal>\dt[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <term><literal>\dv[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>

	<listitem>
	<para>
        Dans ce groupe de commandes, les lettres <literal>E</literal>,
        <literal>i</literal>, <literal>s</literal>,
        <literal>t</literal> et <literal>v</literal>
        correspondent respectivement à table distante, index, séquence,
        table et vue.
        Vous pouvez indiquer n'importe quelle combinaison de ces lettres, dans
        n'importe quel ordre, pour obtenir la liste de tous les objets
        de ces types. Par exemple, <literal>\dit</literal> liste les index et
        tables. Si <literal>+</literal> est ajouté à la fin de la commande, chaque
        objet est listé avec sa taille physique sur disque et sa description
        associée s'il y en a une.
        Si <replaceable class="parameter">motif</replaceable> est spécifié,
        seuls les objets dont les noms correspondent au motif sont listés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
	</para>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\det[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
	Liste les tables distantes (mnémotechnique&nbsp;: <quote>tables externes</quote>).
	Si un <replaceable class="parameter">motif</replaceable> est fourni, seules les entrées
	concernant les tables ou les schémas en correspondance seront listées. Si vous utilisez la
	forme <literal>\det+</literal>, les options génériques et la description de la table distante seront également affichées.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\des[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les serveurs distants (mnémonique&nbsp;: <quote>external
        servers</quote>).
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seuls les serveurs dont le nom correspond au motif sont
        affichés. Si la forme <literal>\des+</literal> est utilisée, une description
        complète de chaque serveur est affichée, incluant la liste de contrôle
        d'accès du serveur (ACL), type, version, options et description.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\deu[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les correspondances d'utilisateurs (mnémonique&nbsp;:
	<quote>external users</quote>).
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seules les correspondances dont le nom correspond au motif sont
        affichées. Si la forme <literal>\deu+</literal> est utilisée, des
        informations supplémentaires sur chaque correspondance d'utilisateur
        sont affichées.
        </para>

        <caution>
        <para>
        <literal>\deu+</literal> risque aussi d'afficher le nom et le mot de
        passe de l'utilisateur distant, il est donc important de faire attention
        à ne pas les divulguer.
        </para>
        </caution>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dew[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les wrappers de données distants (mnémonique&nbsp;: <quote>external
        wrappers</quote>).
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seuls les wrappers dont le nom correspond au motif sont
        affichés. Si la forme <literal>\dew+</literal> est utilisée, les ACL,
        options et description du wrapper sont aussi affichées.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
      <term><literal>\df[antwS+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        Liste les fonctions, ainsi que leurs arguments, types de retour, et
        types de fonctions, qui sont classés comme <quote>agg</quote> (agrégat),
        <quote>normal</quote>, <quote>trigger</quote>, or <quote>window</quote>.
        Afin de n'afficher que les fonctions d'un type spécifié,
         ajoutez les lettres correspondantes, respectivement <literal>a</literal>,
        <literal>n</literal>, <literal>t</literal>, or <literal>w</literal> à la commande. Si <replaceable
	class="parameter">motif</replaceable> est
	spécifié, seules les fonctions dont le nom correspond au motif sont
	affichées. Si la forme <literal>\df+</literal> est utilisée, des
	informations supplémentaires sur chaque fonction, dont la sécurité, la volatibilité,
	le langage, le code source et la description, sont proposées.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
        </para>

        <tip>
	<para>
	Pour rechercher des fonctions prenant des arguments ou des valeurs de
	retour d'un type spécifique, utilisez les capacités de recherche du
	paginateur pour parcourir la sortie de <literal>\df</literal>.
	</para>
        </tip>

        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dF[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         Liste les configurations de la recherche plein texte.
	 Si <replaceable class="parameter">motif</replaceable> est spécifié,
	 seules les configurations dont le nom correspond au motif seront
	 affichées. Si la forme <literal>\dF+</literal> est utilisée, une
	 description complète de chaque configuration est affichée, ceci
	 incluant l'analyseur de recherche plein texte et la liste de dictionnaire
	 pour chaque type de jeton de l'analyseur.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFd[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
	 Liste les dictionnaires de la recherche plein texte.
	 Si <replaceable class="parameter">motif</replaceable> est spécifié,
	 seuls les dictionnaires dont le nom correspond au motif seront
	 affichés. Si la forme <literal>\dFd+</literal> est utilisée, des
	 informations supplémentaires sont affichées pour chaque dictionnaire,
	 ceci incluant le motif de recherche plein texte et les valeurs des
	 options.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFp[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
	 Liste les analyseurs de la recherche plein texte.
	 Si <replaceable class="parameter">motif</replaceable> est spécifié,
	 seuls les analyseurs dont le nom correspond au motif seront
	 affichés. Si la forme <literal>\dFp+</literal> est utilisée, une
	 description complète de chaque analyseur est affichée,
	 ceci incluant les fonctions sous-jacentes et les types de jeton
	 reconnu.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dFt[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
	 Liste les motifs de la recherche plein texte.
	 Si <replaceable class="parameter">motif</replaceable> est spécifié,
	 seuls les motifs dont le nom correspond au motif seront
	 affichés. Si la forme <literal>\dFt+</literal> est utilisée, des
	 informations supplémentaires sont affichées pour chaque motif, ceci
	 incluant les noms des fonctions sous-jacentes.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dg[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
         Liste les rôles des bases de données.
        (Comme les concepts des <quote>utilisateurs</quote> et <quote>groupes</quote>
        ont été unifiés dans les <quote>rôles</quote>, cette commande est
        maintenant équivalente à <literal>\du</literal>.)
         Si <replaceable
         class="parameter">motif</replaceable> est spécifié, seuls les rôles
         dont le nom correspond au motif sont listés.
         Si la forme <literal>\dg+</literal> est utilisée, des informations
         supplémentaires sont affichées pour chaque rôle&nbsp;; actuellement,
         cela ajoute le commentaire pour chaque rôle.
      </para>
      </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dl</literal></term>
	<listitem>
	<para>
	Ceci est un alias pour <command>\lo_list</command>, qui affiche une
	liste des objets larges.
	</para>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dL[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
	Affiche les langages procéduraux.
	Si un <replaceable class="parameter">motif</replaceable> est spécifié,
        seuls les langages dont les noms correspondent au motif sont listés.
	Par défaut, seuls les langages créés par les utilisateurs sont affichés&nbsp;; il faut
	spécifier l'option <literal>S</literal> pour inclure les objets systèmes.
	Si <literal>+</literal> est ajouté à la fin de la commande, chaque 
	langage sera affiché avec ses gestionnaire d'appels, validateur, droits
	d'accès, et ce même s'il s'agit d'un objet système.
        </para>
        </listitem>
      </varlistentry>

 
      <varlistentry>
        <term><literal>\dn[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>

        <listitem>
        <para>
        Liste les schémas. Si <replaceable
        class="parameter">motif</replaceable> est
	spécifié, seuls les schémas dont le nom correspond au motif sont
	listés.
	Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
	Si <literal>+</literal> est ajouté à la fin de la commande, chaque 
	objet sera affiché avec ses droits et son éventuelle description.
         </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\do[S] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link>
	]</literal></term>
        <listitem>
        <para>
        Liste les opérateurs avec leur opérande et type en
	retour. Si <replaceable class="parameter">motif</replaceable> est
	spécifié, seuls les opérateurs dont le nom correspond au motif sont
	listés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dO[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
	Affiche les collationnements.
	Si <replaceable class="parameter">motif</replaceable> est
	spécifié, seuls les collationnements dont le nom correspond au 
	motif sont listés. Par défaut, seuls les objets créés par les utilisateurs 
	sont affichés, fournissez un motif ou le modificateur <literal>S</literal> 
	pour afficher les objets systèmes. Si <literal>+</literal> est ajouté à la fin 
	de la commande, chacun des collationnements sera affiché avec son éventuelle 
	description.
	Notez que seuls les collationnements compatibles avec l'encodage de la base de
	données courante sont affichés, les résultats peuvent donc varier selon les 
	différentes bases d'une même instance.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dp [ <link linkend="app-psql-patterns"><replaceable
	class="parameter">motif</replaceable></link> ]</literal></term>
	<listitem>
	<para>
        Liste les tables, vues et séquences
	avec leur droits d'accès associés. Si <replaceable
	class="parameter">motif</replaceable> est spécifié, seules les tables,
	vues et séquences dont le nom correspond au motif sont listées.
	</para>

	<para>
	Les commandes <xref linkend="sql-grant"/> et
        <xref linkend="sql-revoke"/>
	sont utilisées pour configurer les droits d'accès. Les explications sur le sens de
	l'affichage des privilèges sont sous
        <xref linkend="sql-grant"/>.
	</para>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\drds [ <link linkend="app-psql-patterns"><replaceable class="parameter">role-pattern</replaceable></link> [ <link linkend="app-psql-patterns"><replaceable class="parameter">database-pattern</replaceable></link> ] ]</literal></term>
        <listitem>
        <para>
        Liste les paramètres de configuration définis. Ces paramètres peuvent 
        être spécifiques à un rôle, spécifiques à une base, ou les deux.
        <replaceable>role-pattern</replaceable> et
        <replaceable>database-pattern</replaceable> servent à choisir sur quels rôles
        spécifiques ou quelles bases de données - respectivement - les paramètres sont listés. Si ces options sont
        omises, ou si on spécifie <literal>*</literal>, tous les paramètres sont listés, y 
        compris ceux qui ne sont pas spécifiques à un rôle ou à une base, respectivement.
        </para>

        <para>
        Les commande <xref linkend="sql-alterrole"/> et
        <xref linkend="sql-alterdatabase"/>
        servent à définir les paramètres de configuration par rôle et par base de données.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\dT[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les types de données.
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seuls les types dont le nom correspond au motif sont
        affichés. Si <literal>+</literal> est ajouté à la fin de la commande,
        chaque type est listé avec son nom interne et sa taille, ainsi que ses
        valeurs autorisées si c'est un type <type>enum</type>.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets systèmes.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\du[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link>
	]</literal></term>
        <listitem>
        <para>
        Liste les rôles de la base de données.
        (Depuis que les concepts des <quote>utilisateurs</quote> et <quote>groupes</quote>
        ont été unifiés en des <quote>rôles</quote>, cette commande est équivalent à
        <literal>\dg</literal>.)
        Si <replaceable class="parameter">motif</replaceable> est indiqué,
        seuls les rôles dont le nom correspond au motif sont listés. Si la
        forme <literal>\du+</literal> est utilisée, des informations
        supplémentaires sont affichées pour chaque rôle&nbsp;; actuellement,
        cela ajoute le commentaire pour chaque rôle.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\dx[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
	Affiche les extensions installées.
	Si <replaceable class="parameter">motif</replaceable> est
	spécifié, seules les entensions dont le nom correspond au motif sont affichées.
	Avec la forme <literal>\dx+</literal>, tous les objets dépendants de chacune
	des extensions correspondantes sont également listés.
        </para>
        </listitem>
      </varlistentry>
 
      <varlistentry>
        <term><literal>\dy[+] [ <link linkend="APP-PSQL-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Lists event triggers.
        If <replaceable class="parameter">pattern</replaceable>
        is specified, only those event triggers whose names match the pattern
        are listed.
        If <literal>+</literal> is appended to the command name, each object
        is listed with its associated description.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\e</literal> (or <literal>\edit</literal>) <literal> <optional> <replaceable class="parameter">nomfichier</replaceable> </optional> <optional> <replaceable class="parameter">numero_ligne</replaceable> </optional> </literal></term>

        <listitem>
        <para>
        Si <replaceable class="parameter">nomfichier</replaceable> est
	spécifié, le fichier est édité&nbsp;; en quittant l'éditeur, son contenu
	est recopié dans le tampon de requête. Si aucun paramètre <replaceable class="parameter">nomfichier</replaceable>
	n'est fourni, le tampon de requête courant est copié dans un fichier 
	temporaire et édité à l'identique.
        </para>

        <para>
        Le nouveau tampon de requête est ensuite ré-analysé suivant les règles
	habituelles de <application>psql</application>, où le tampon complet est
	traité comme une seule ligne. (Du coup, vous ne pouvez pas faire de
	scripts de cette façon. Utilisez <command>\i</command> pour cela.) Ceci
	signifie que si la requête se termine avec (ou contient) un
	point-virgule, elle est immédiatement exécutée. Dans les autres cas,
	elle attend simplement dans le tampon de requête un point-virgule ou un
	<literal>\g</literal> pour l'envoyer, ou encore un
        <literal>\r</literal> pour annuler.
        </para>

        <para>
	Si vous indiquez un numéro de ligne, <application>psql</application>
	positionnera le curseur sur cette ligne du fichier ou du tampon de requête.
	Notez que si un seul argument comportant uniquement des caractères
	numériques est fourni à la commande, <application>psql</application> 
	considère qu'il s'agit d'un numéro de ligne, et non pas un nom de fichier.
        </para>

        <tip>
         <para>
        Voir dans <xref linkend="app-psql-environment"
        endterm="app-psql-environment-title"/> la façon de configurer
        et personnaliser votre éditeur.
         </para>
        </tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\echo <replaceable
	class="parameter">texte</replaceable> [ ... ]</literal></term>
        <listitem>
	<para>
        Affiche les arguments sur la sortie standard séparés par un espace et
	suivi par une nouvelle ligne. Ceci peut être utile pour intégrer des
	informations sur la sortie des scripts. Par exemple&nbsp;:
<programlisting>=&gt; <userinput>\echo `date`</userinput>
Tue Oct 26 21:40:57 CEST 1999
</programlisting>
        Si le premier argument est <literal>-n</literal> sans guillemets,
	alors la fin de ligne n'est pas écrite.
	</para>

	<tip>
	<para>
	Si vous utilisez la commande <command>\o</command> pour rediriger la
	sortie de la requête, vous pourriez souhaiter utiliser
	<command>\qecho</command> au lieu de cette commande.
	</para>
	</tip>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ef <optional> <replaceable class="parameter">description_fonction</replaceable> <optional>  <replaceable class="parameter">line_number</replaceable> </optional> </optional> </literal></term>

        <listitem>
        <para>
         Cette commande récupère et édite la définition de la fonction
	 désignée au moyen d'une commande <command>CREATE OR REPLACE
	 FUNCTION</command>.
         L'édition est faite de la même façon que pour <literal>\edit</literal>.
         Après que l'éditeur se soit fermé, la commande mise à jour attend
         dans le tampon de requête&nbsp;; tapez <literal>;</literal> ou
         <literal>\g</literal> pour l'envoyer, ou <literal>\r</literal> pour
         l'annuler.
        </para>

        <para>
         La fonction cible peut être spécifiée par son nom seul, ou par son
         nom et ses arguments, par exemple <literal>foo(integer, text)</literal>.
         Les types d'arguments doivent être fournis s'il y a plus d'une fonction
         du même nom.
        </para>

        <para>
         Si aucune fonction n'est spécifiée, un modèle d'ordre <command>CREATE
         FUNCTION</command> vierge est affiché pour édition.
        </para>

        <para>
	     Si vous indiquez un numéro de ligne,
	     <application>psql</application> positionnera le curseur sur
	     cette ligne dans le corps de la fonction. (Notez que le corps
	     de la fonction ne commence pas sur la première ligne du
	     fichier.)
        </para>

        <tip>
         <para>
          Voir dans <xref linkend="app-psql-environment"
          endterm="app-psql-environment-title"/> la façon de configurer
          et personnaliser votre éditeur.
         </para>
        </tip>
        </listitem>
      </varlistentry>
      
      
      <varlistentry>
        <term><literal>\encoding [ <replaceable
	class="parameter">codage</replaceable> ]</literal></term>

        <listitem>
        <para>
        Initialise l'encodage du jeu de caractères du client. Sans
	argument, cette commande affiche l'encodage actuel.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\f [ <replaceable
	class="parameter">chaîne</replaceable> ]</literal></term>

        <listitem>
        <para>
        Initialise le champ séparateur pour la sortie de requête non alignée.
	La valeur par défaut est la barre verticale (<literal>|</literal>). Voir
	aussi <command>\pset</command> comme moyen générique de configuration
	des options d'affichage.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\g</literal> [ { <replaceable
	class="parameter">nomfichier</replaceable> |
	<literal>|</literal><replaceable
	class="parameter">commande</replaceable> } ]</term>

        <listitem>
        <para>
	Envoie le tampon de requête en entrée vers le serveur et stocke en
	option la sortie de la requête dans <replaceable
	class="parameter">nomfichier</replaceable> ou envoie dans un tube la
	sortie vers un autre shell Unix exécutant <replaceable
	class="parameter">commande</replaceable>.The file or command is
        written to only if the query successfully returns zero or more tuples,
        not if the query fails or is a non-data-returning SQL command.
        </para>
        <para>
        Un simple
	<literal>\g</literal> est virtuellement équivalent à un point-virgule.
	Un <literal>\g</literal> avec argument est une alternative en <quote>un
	coup</quote> à la commande <command>\o</command>.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\gset</literal> [ <replaceable class="parameter">prefix</replaceable> ]</term>

        <listitem>
        <para>
         Sends the current query input buffer to the server and stores the
         query's output into <application>psql</application> variables (see <xref
         linkend="APP-PSQL-variables" endterm="APP-PSQL-variables-title"/>).
         The query to be executed must return exactly one row.  Each column of
         the row is stored into a separate variable, named the same as the
         column.  For example:
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset</userinput>
=&gt; <userinput>\echo :var1 :var2</userinput>
hello 10
</programlisting>
        </para>
        <para>
         If you specify a <replaceable class="parameter">prefix</replaceable>,
         that string is prepended to the query's column names to create the
         variable names to use:
<programlisting>
=&gt; <userinput>SELECT 'hello' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset result_</userinput>
=&gt; <userinput>\echo :result_var1 :result_var2</userinput>
hello 10
</programlisting>
        </para>
        <para>
         If a column result is NULL, the corresponding variable is unset
         rather than being set.
        </para>
        <para>
         If the query fails or does not return one row,
         no variables are changed.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\h</literal> (ou <literal>\help</literal>) <literal>[
	<replaceable class="parameter">commande</replaceable> ]</literal></term>
        <listitem>
        <para>
        Donne la syntaxe sur la commande <acronym>SQL</acronym> spécifiée. Si
	<replaceable class="parameter">commande</replaceable> n'est pas
	spécifiée, alors <application>psql</application> liste toutes les
	commandes pour lesquelles une aide en ligne est disponible. Si
	<replaceable class="parameter">commande</replaceable> est un astérisque
	(<literal>*</literal>), alors l'aide en ligne de toutes les commandes
	<acronym>SQL</acronym> est affichée.
        </para>

	<note>
	<para>
	Pour simplifier la saisie, les commandes qui consistent en plusieurs mots
	n'ont pas besoin d'être entre guillemets. Du coup, il est correct de
	saisir <userinput>\help alter table</userinput>.
	</para>
	</note>	
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\H</literal></term>
        <listitem>
        <para>
	Active le format d'affichage <acronym>HTML</acronym> des requêtes. Si
	le format <acronym>HTML</acronym> est déjà activé, il est basculé au
	format d'affichage défaut (texte aligné). Cette commande est pour la compatibilité
	mais voir <command>\pset</command> pour configurer les autres options
	d'affichage.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\i <replaceable
	class="parameter">nomfichier</replaceable></literal></term>
        <listitem>
        <para>
        Lit l'entrée à partir du fichier <replaceable
        class="parameter">nomfichier</replaceable> et l'exécute comme si elle
	avait été saisie sur le clavier.
        </para>
	<note>
	<para>
	Si vous voulez voir les lignes sur l'écran au moment de leur lecture,
	vous devez initialiser la variable <varname>ECHO</varname> à
	<literal>all</literal>.
	</para>
	</note>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\ir <replaceable class="parameter">nom_fichier</replaceable></literal></term>
        <listitem>
        <para>
        La commande <literal>\ir</literal> est similaire à <literal>\i</literal>,
        mais résout les chemins différemment. Lors d'une exécution en mode
        interactif, les deux commandes se comportent de la même façon. Néanmoins,
        lorsqu'elles sont appelées par un script, <literal>\ir</literal>
        interprète les chemins à partir du répertoire où le script est enregistré,
        plutôt qu'à partir du répertoire courant.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\l[+]</literal> ou <literal>\list[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">modèle</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        List the databases in the server and show their names, owners,
        character set encodings, and access privileges.
        If <replaceable class="parameter">pattern</replaceable> is specified,
        only databases whose names match the pattern are listed.
        Si <literal>+</literal> est ajouté à la fin de la commande, la taille
        des bases, les tablespaces par défaut et les descriptions sont aussi
        affichées. (Les tailles ne sont disponibles que pour les bases 
        auxquelles l'utilisateur courant a le droit de se connecter.)
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_export <replaceable
	class="parameter">loid</replaceable> <replaceable
	class="parameter">nomfichier</replaceable></literal></term>

	<listitem>
	<para>
	Lit l'objet large d'<acronym>OID</acronym> <replaceable
	class="parameter">loid</replaceable> à partir de la base de données
	et l'écrit dans <replaceable
	class="parameter">nomfichier</replaceable>. Notez que ceci est
	subtilement différent de la fonction serveur
	<function>lo_export</function>, qui agit avec les droits de
	l'utilisateur avec lequel est exécuté le serveur de base de données et
	sur le système de fichiers du serveur.
	</para>
	<tip>
	<para>
	Utilisez <command>\lo_list</command> pour trouver
	l'<acronym>OID</acronym> de l'objet large.
	</para>
	</tip>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\lo_import <replaceable
	class="parameter">nomfichier</replaceable> [ <replaceable
	class="parameter">commentaire</replaceable> ]</literal></term>

	<listitem>
	<para>
	Stocke le fichier dans un objet large
	<productname>PostgreSQL</productname>. En option, il associe le
	commentaire donné avec l'objet. Exemple&nbsp;:
<programlisting>foo=&gt; <userinput>\lo_import '/home/peter/pictures/photo.xcf' 'une
photo de moi'</userinput>
lo_import 152801
</programlisting>
	La réponse indique que l'objet large a reçu l'ID 152801, qui peut être
	utilisé pour accéder de nouveau à l'objet créé. Pour une meilleure
	lisibilité, il est recommandé de toujours associer un commentaire
	compréhensible par un humain avec chaque objet. Les OID et les
	commentaires sont visibles avec la commande <command>\lo_list</command>.
	</para>

	<para>
	Notez que cette commande est subtilement différente de la fonction
	serveur <function>lo_import</function> car elle agit en tant
	qu'utilisateur local sur le système de fichier local plutôt qu'en tant
	qu'utilisateur du serveur et de son système de fichiers.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_list</literal></term>
	<listitem>
	<para>
	Affiche une liste de tous les objets larges
	<productname>PostgreSQL</productname> actuellement stockés dans la base
	de données, avec tous les commentaires fournis par eux.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\lo_unlink <replaceable class="parameter">loid</replaceable></literal></term>

	<listitem>
	<para>
	Supprime l'objet large d'<acronym>OID</acronym>
	<replaceable class="parameter">loid</replaceable> de la base
	de données.
	</para>

	<tip>
	<para>
	Utilisez <command>\lo_list</command> pour trouver
	l'<acronym>OID</acronym> d'un objet large.
	</para>
	</tip>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\o</literal> [ {<replaceable
	class="parameter">nomfichier</replaceable> |
	<literal>|</literal><replaceable
	class="parameter">commande</replaceable>} ]</term>

        <listitem>
        <para>
        Sauvegarde les résultats des requêtes suivantes dans le fichier <replaceable
        class="parameter">nomfichier</replaceable> ou envoie via un tube les
	résultats à venir dans un shell Unix séparé pour exécuter <replaceable
	class="parameter">command</replaceable>. Si aucun argument n'est
	spécifié, l'affichage de la requête est redirigé vers la sortie
	standard.
        </para>

	<para>
	Les <quote>résultats de requête</quote> incluent toutes les tables,
	réponses de commande et messages d'avertissement obtenus du serveur de
	bases de données, ainsi que la sortie de différentes commandes
	antislash qui envoient des requêtes à la base de données (comme
	<command>\d</command>), mais sans message d'erreur.
	</para>

	<tip>
	<para>
	Pour intégrer du texte entre les résultats de requête, utilisez
	<command>\qecho</command>.
	</para>
	</tip>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\p</literal></term>
        <listitem>
        <para>
        Affiche le tampon de requête actuel sur la sortie standard.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\password [ <replaceable class="parameter">nom_utilisateur</replaceable> ]</literal></term>
        <listitem>
        <para>
         Modifie le mot de passe de l'utilisateur indiqué (par défaut,
         l'utilisateur en cours). Cette commande demande le nouveau mot de passe,
         le chiffre et l'envoie au serveur avec la commande <command>ALTER
         ROLE</command>. Ceci vous assure que le nouveau mot de passe n'apparaît
         pas en clair dans l'historique de la commande, les traces du serveur
         ou encore ailleurs.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\prompt [ <replaceable class="parameter">texte</replaceable> ] <replaceable class="parameter">nom</replaceable></literal></term>
        <listitem>
        <para>
         Demande la saisie d'un texte par l'utilisateur. Ce texte sera affecté à
         la variable <replaceable class="parameter">nom</replaceable>. Une
         chaîne supplémentaire, <replaceable class="parameter">texte</replaceable>,
         peut être donnée. (Pour pouvoir saisir plusieurs mots, entourez le texte
         par des guillemets simples.)
        </para>

        <para>
         Par défaut, <literal>\prompt</literal> utilise le terminal pour les
	 entrées et sorties. Néanmoins, si la bascule <option>-f</option> est
	 utilisée, <literal>\prompt</literal> utilise l'entrée et la sortie
	 standard.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\pset <replaceable
	class="parameter">option</replaceable> [ <replaceable
	class="parameter">valeur</replaceable> ]</literal></term>

	<listitem>
	<para>
	Cette commande initialise les options affectant l'affichage des tables 
	résultat de la requête. <replaceable
	class="parameter">option</replaceable> décrit l'option à initialiser.
	La sémantique de <replaceable class="parameter">valeur</replaceable> varie en fonction de
	l'option sélectionnée. Pour certaines options, omettre <replaceable
        class="parameter">valeur</replaceable> a pour conséquence de basculer ou désactiver l'option,
        tel que cela est décrit pour chaque option. Si aucun comportement de ce type 
        n'est mentionné, alors omettre <replaceable
        class="parameter">valeur</replaceable> occasionne simplement l'affichage de la configuration actuelle.
	</para>

	<para>
	Les options ajustables d'affichage sont&nbsp;:
	<variablelist>
	  <varlistentry>
	  <term><literal>border</literal></term>
	  <listitem>
	  <para>
	  Le <replaceable class="parameter">valeur</replaceable> doit être un nombre. En général, plus grand est ce
	  nombre, plus les tables ont de bordure et de ligne mais ceci
	  dépend du format. Dans le mode <acronym>HTML</acronym>, ceci sera
	  traduit directement avec l'attribut <literal>border=...</literal>.
	  Avec les autres, seules les valeurs 0 (sans bordure), 1 (lignes
	  internes de division) et 2 (forme de table) ont un sens.
          <literal>latex</literal> and <literal>latex-longtable</literal>
          also support a <literal>border</literal> value of 3 which adds
          a dividing line between each row.
	  </para>
	  </listitem>
	  </varlistentry>

          <varlistentry>
          <term><literal>columns</literal></term>
          <listitem>
          <para>
          Positionne la largeur pour le format <literal>wrapped</literal> ,
          ainsi que la largeur à partir de laquelle la sortie est suffisamment
          longue pour nécessiter le paginateur ou pour basculer sur l'affichage
          vertical dans le mode étendu automatique.
          Si l'option est positionnée à zéro (la valeur par défaut), la largeur de la colonne est contrôlée 
          soit par la variable d'environnement <envar>COLUMNS</envar>, soit par la largeur d'écran détectée si 
          <envar>COLUMNS</envar> n'est pas positionnée.
          De plus, si <literal>columns</literal> vaut zero, alors le format
          <literal>wrapped</literal> affecte seulement la sortie écran.
          Si <literal>columns</literal> ne vaut pas zéro, alors les sorties fichier et tubes (pipe) font
          l'objet de retours à la ligne
          à cette largeur également.
          </para>
          </listitem>
          </varlistentry>

	  <varlistentry>
	  <term><literal>expanded</literal> (ou <literal>x</literal>)</term>
	  <listitem>
	  <para>
          Si une <replaceable class="parameter">valeur</replaceable> est
          précisée, elle doit être soit <literal>on</literal> soit
          <literal>off</literal>, ce qui activera ou désactivera le mode
          étendu, soit <literal>auto</literal>.
          Si <replaceable class="parameter">valeur</replaceable> est omis,
          la commande bascule le paramètre entre les valeurs on et off.
          Quand le mode étendu est activé, les résultats des requêtes sont
          affichés sur deux colonnes, avec le nom de la colonne sur la gauche
          et ses données sur la droite. Ce mode est utile si la donnée ne tient
          pas sur l'écran dans le mode <quote>horizontal</quote> habituel. Dans
          le mode auto, le mode étendu est utilisé à chaque fois que la sortie
          de la requête est plus grande que l'écran. Sinon, le mode habituel
          est utilisé. Le mode auto est seulement intéressant lors de
          l'utilisation des formats aligné et <literal>wrapped</literal> .
          Si d'autres formats sont sélectionnés, il se comporte toujours comme
          si le mode étendu était désactivé.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>fieldsep</literal></term>
	  <listitem>
	  <para>
	  Indique le séparateur de champ à utiliser dans le mode d'affichage
	  non aligné. De cette façon, vous pouvez créer, par exemple, une
	  sortie séparée par des tabulations ou des virgules, que d'autres
	  programmes pourraient préférer. Pour configurer une tabulation comme
	  champ séparateur, saisissez <literal>\pset fieldsep
	  '\t'</literal>. Le séparateur de champ par défaut est
	  <literal>'|'</literal> (une barre verticale).
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
          <term><literal>fieldsep_zero</literal></term>
          <listitem>
          <para>
          Configure le séparateur de champs pour qu'il utilise un octet zéro
          dans le format non aligné en sortie.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
	  <term><literal>footer</literal></term>
	  <listitem>
	  <para>
          Si le paramètre <replaceable class="parameter">valeur</replaceable> est précisé, il doit valoir soit
           <literal>on</literal>, soit <literal>off</literal>, ce qui a pour effet d'activer
           ou de désactiver l'affichage du pied de table (le compte&nbsp;: <literal>(<replaceable>n</replaceable> rows)</literal>).
          Si le paramètre <replaceable class="parameter">valeur</replaceable> est omis, la commande bascule entre
          l'affichage du pied de table ou sa désactivation.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>format</literal></term>
	  <listitem>
	  <para>
	  Initialise le format d'affichage parmi <literal>unaligned</literal>,
	  <literal>aligned</literal>, <literal>wrapped</literal>, <literal>html</literal>,
          <literal>latex</literal> (uses <literal>tabular</literal>),
          <literal>latex-longtable</literal>, or
          <literal>troff-ms</literal>.
    Les
	  abréviations uniques sont autorisées. (ce qui signifie qu'une lettre
	  est suffisante.)
	  </para>

          <para>
          Le format <literal>unaligned</literal> écrit toutes les colonnes d'un enregistrement sur une seule ligne,
           séparées par le séparateur de champ courant. Ceci est utile pour crééer des sorties qui doivent être
           lues par d'autres programmes (au format séparé par des caractère tabulation ou par des virgules, par exemple).
          </para>

          <para>
          Le format <literal>aligned</literal> est le format de sortie texte standard, lisible par les humains,
          joliement formaté&nbsp;; c'est le format par défaut.
          </para>

          <para>
          Le format <literal>wrapped</literal> est comme <literal>aligned</literal>, sauf qu'il retourne à 
          la ligne dans les données de grande taille afin que la sortie tienne dans la largeur
          de colonne cible. La largeur cible est déterminée comme cela est décrit à l'option
          <literal>columns</literal>. Notez que <application>psql</application> n'essaie pas de revenir à la ligne dans
          les titres de colonnes. Par conséquent, si la largeur totale nécessaire pour le titre
          de colonne est plus grande que la largeur cible, le format
          <literal>wrapped</literal> se comporte de la même manière que  <literal>aligned</literal>.
          </para>

          <para>
          Les formats <literal>html</literal>, <literal>latex</literal>,
          <literal>latex-longtable</literal> et <literal>troff-ms</literal>
          produisent des tables destinées à être inclues dans des documents
          utilisant le langage de marques respectif. Ce ne sont pas des
          documents complets&nbsp;! Ce n'est pas forcément nécessaire en
          <acronym>HTML</acronym> mais en <application>LaTeX</application>,
          vous devez avoir une structure de document complet.
          <literal>latex-longtable</literal> also requires the
          <application>LaTeX</application> <literal>longtable</literal> and
          <literal>booktabs</literal> packages
	  </para>
	  </listitem>
          </varlistentry>

          <varlistentry>
          <term><literal>linestyle</literal></term>
          <listitem>
          <para>
          
          Positionne le style des lignes de bordure sur
           <literal>ascii</literal>, <literal>old-ascii</literal>
           <literal>unicode</literal>.
          Les abréviations uniques sont autorisées.  (Cela signifie qu'une lettre suffit.)
          La valeur par défaut est <literal>ascii</literal>.
          Cette option affecte seulement les formats de sortie
           <literal>aligned</literal> et
          <literal>wrapped</literal>.
          </para>

          <para>
          Le style <literal>ascii</literal> utilise les caractères basiques <acronym>ASCII</acronym>
          .  Les retours à la ligne dans les données sont représentés par un
          symbole <literal>+</literal> dans la marge de droite.
          Si le format <literal>wrapped</literal> est sélectionné, un retour chariot est ajouté
          à l'affichage pour les valeurs dont la taille à l'affichage est trop
          importante pour tenir dans une cellule de la colonne associée. Un point
           (<literal>.</literal>) est affiché dans la marge droite de la ligne avant le retour
           chariot et un autre point est affiché dans la marge gauche de la ligne
           suivante.
          </para>

          <para>
          Le style <literal>old-ascii</literal> utilise des caractères basiques <acronym>ASCII</acronym>,
          utilisant le style de formatage utilisé dans
           <productname>PostgreSQL</productname> 8.4 and et les versions plus anciennes.
          Les retours à la ligne dans les données sont représentés par un symbole <literal>:</literal>
          à la place du séparateur de colonnes placé à gauche. Quand les données sont réparties sur plusieurs 
          lignes sans qu'il y ait de caractère de retour à la ligne dans les données, un symbole <literal>;</literal> est utilisé 
          à la place du séparateur de colonne de gauche.
          </para>

          <para>
          Le style <literal>unicode</literal> utilise les caractères Unicode de dessin de boîte.
          Les retours à la ligne dans les données sont représentés par un symbole de retour à la ligne
          dans la marge de droite. Lorsque les données sont réparties sur plusieurs lignes, sans qu'il y ait de caractère de retour à la ligne dans les données, le symbole ellipse est affiché dans
          la marge de droite de la première ligne, et également dans la marge de gauche de la ligne suivante.
          </para>

          <para>
          Quand le paramètre <literal>border</literal> vaut plus que zéro, cette option
          détermine également les caractères utilisés pour dessiner les lignes de bordure.
          Les simples caractères <acronym>ASCII</acronym> fonctionnent partout, mais les 
          caractères Unicode sont plus jolis sur les affichages qui les reconnaissent.
          </para>
          </listitem>
          </varlistentry>

	  <varlistentry>
	  <term><literal>null</literal></term>
	  <listitem>
	  <para>
          Positionne la chaîne de caractères à afficher à la place d'une valeur null.
          Par défaut, rien n'est affiché, ce qui peut facilement être confondu avec une 
          chaîne de caractères vide. Par exemple, vous pouvez préférer afficher <literal>\pset null
          '(null)'</literal>.
	  </para>
	  </listitem>
	  </varlistentry>

          <varlistentry>
          <term><literal>numericlocale</literal></term>
          <listitem>
          <para>
          Si <replaceable class="parameter">valeur</replaceable> est précisée, elle doit valoir soit
           <literal>on</literal>, soit <literal>off</literal>
          afin d'activer ou désactiver l'affichage d'un caractère dépendant de la locale
          pour séparer des groupes de chiffres à gauche du séparateur décimal.
          Si <replaceable class="parameter">valeur</replaceable> est omise, la commande bascule entre 
          la sortie numérique classique et celle spécifique à la locale.
          </para>
          </listitem>
          </varlistentry>

	  <varlistentry>
	  <term><literal>pager</literal></term>
	  <listitem>
	  <para>
	  Contrôle l'utilisation d'un paginateur pour les requêtes et les
	  affichages de l'aide de <application>psql</application>. Si la variable
	  d'environnement <envar>PAGER</envar> est configurée, la sortie est
	  envoyée via un tube dans le programme spécifié. Sinon, une valeur par
	  défaut dépendant de la plateforme (comme <filename>more</filename>)
	  est utilisée.
	  </para>

	  <para>
          Quand l'option <literal>pager</literal> vaut <literal>off</literal>, le paginateur
          n'est pas utilisé. Quand l'option <literal>pager</literal> vaut
          <literal>on</literal>, et que cela est approprié, c'est à dire quand la sortie est dirigée vers
          an terminal, et ne tient pas dans l'écran, le paginateur est utilisé.
          L'option <literal>pager</literal> peut également être positionnée à <literal>always</literal>,
          ce qui a pour effet d'utiliser le paginateur pour toutes les sorties terminal,
          que ces dernières tiennent ou non dans l'écran. <literal>\pset pager</literal>
          sans préciser <replaceable class="parameter">valeur</replaceable> bascule entre les états "paginateur activé" et "paginateur désactivé".
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>recordsep</literal></term>
	  <listitem>
	  <para>
          Indique le séparateur d'enregistrement (ligne) à utiliser dans le
	  mode d'affichage non aligné. La valeur par défaut est un caractère de
	  retour chariot.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
          <term><literal>recordsep_zero</literal></term>
          <listitem>
          <para>
          Configure le séparateur d'enregistrements pour qu'il utilise un octet zéro
          dans le format non aligné en sortie.
          </para>
          </listitem>
          </varlistentry>

          <varlistentry>
	  <term><literal>tableattr</literal> (or <literal>T</literal>)</term>
	  <listitem>
	  <para>
          In <acronym>HTML</acronym> format, this specifies attributes
          to be placed inside the <sgmltag>table</sgmltag> tag.  Ceci
	  pourrait être par exemple <literal>cellpadding</literal> ou
	  <literal>bgcolor</literal>. Notez que vous ne voulez probablement pas
	  spécifier <literal>border</literal> car c'est pris en compte
	  par <literal>\pset border</literal>.
          Si
          <replaceable class="parameter">valeur</replaceable> n'est pas précisée,
          aucun attribut de table n'est positionné.
	  </para>
          <para>
          In <literal>latex-longtable</literal> format, this controls
          the proportional width of each column containing a left-aligned
          data type.  It is specified as a whitespace-separated list of values,
          e.g. <literal>'0.2 0.2 0.6'</literal>.  Unspecified output columns
          use the last specified value.
          </para>
	  </listitem>
	  </varlistentry>


	  <varlistentry>
	  <term><literal>title [ <replaceable
	  class="parameter">texte</replaceable> ]</literal></term>
	  <listitem>
	  <para>
	  Initialise le titre de la table pour toutes les tables affichées
	  ensuite. Ceci peut être utilisé pour ajouter des balises de description
	  à l'affichage. Si aucun <replaceable class="parameter">valeur</replaceable> n'est donné, le titre n'est pas
	  initialisé.
	  </para>
	  </listitem>
	  </varlistentry>

	  <varlistentry>
	  <term><literal>tuples_only</literal> (ou <literal>t</literal>)</term>
	  <listitem>
	  <para>
          Si <replaceable class="parameter">valeur</replaceable> est spécifiée, elle doit
          valoir soit <literal>on</literal>, soit <literal>off</literal>, ce qui va
          activer ou désactiver le mode "tuples seulement".
          Si <replaceable class="parameter">valeur</replaceable> est omise,
          la commande bascule entre la sortie normale et la sortie "tuples seulement".
          La sortie normale comprend des informations supplémentaires telles que 
          les entêtes de colonnes, les titres, et différents pieds. Dans le mode
          "tuples seulement", seules les données de la table sont affichées.
	  </para>
	  </listitem>
	  </varlistentry>

	</variablelist>
        </para>

        <para>
	Des exemples d'utilisation de ces différents formats sont
	disponibles dans la section <xref linkend="app-psql-examples"
	endterm="app-psql-examples-title"/>.
	</para>

	<tip>
	<para>
	Il existe plusieurs raccourcis de commandes pour
	<command>\pset</command>. Voir
	<command>\a</command>, <command>\C</command>, <command>\H</command>,
	<command>\t</command>, <command>\T</command> et <command>\x</command>.
	</para>
	</tip>

	<note>
	<para>
	C'est une erreur d'appeler <command>\pset</command> sans
	argument. Dans le futur, cet appel pourrait afficher le statut actuel
	de toutes les options d'affichage.
	</para>
	</note>

	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\q</literal> ou <literal>\quit</literal></term>
        <listitem>
        <para>
        Quitte le programme <application>psql</application>.
        Avec un script, seule l'exécution du script est terminée.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\qecho <replaceable
	class="parameter">texte</replaceable> [ ... ] </literal></term>
        <listitem>
        <para>
	Cette commande est identique à <command>\echo</command> sauf que 
	les affichages sont écrits dans le canal d'affichage des requêtes,
	configuré par <command>\o</command>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\r</literal></term>
        <listitem>
        <para>
        Réinitialise (efface) le tampon de requêtes.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\s [ <replaceable
	class="parameter">nomfichier</replaceable> ]</literal></term>
        <listitem>
        <para>
        Affiche ou sauvegarde l'historique des lignes de commandes dans
	<replaceable class="parameter">nomfichier</replaceable>. Si <replaceable
	class="parameter">nomfichier</replaceable> est omis, l'historique est
	écrit sur la sortie standard. Cette option est seulement disponible si
	<application>psql</application> est configuré pour utiliser la
	bibliothèque <acronym>GNU</acronym> <application>Readline</application>.
        </para>

        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\set [ <replaceable
	class="parameter">nom</replaceable> [ <replaceable
	class="parameter">valeur</replaceable> [ ... ]]]</literal></term>

	<listitem>
	<para>
	Initialise la variable <replaceable
	class="parameter">nom</replaceable> de <application>psql</application> à <replaceable
	class="parameter">valeur</replaceable> ou, si plus d'une valeur est
	donnée, à la concaténation de toutes les valeurs. Si seulement un argument est
  donné, la variable est configurée avec une valeur vide.
  Pour désinitialiser une variable, utilisez la commande
	<command>\unset</command>.
	</para>

	<para>
  <command>\set</command> sans arguments affiche le nom et la valeur de toutes
  les variables <application>psql</application> actuellement configurées.
  </para>

  <para>
	Les noms de variables valides peuvent contenir des lettres, chiffres
	et tirets bas. Voir la section <xref linkend="app-psql-variables"
	endterm="app-psql-variables-title"/> ci-dessous pour les détails. Les noms
	des variables sont sensibles à la casse.
	</para>

	<para>
	Bien que vous puissiez configurer toute variable comme vous le
	souhaitez, <application>psql</application> traite certaines variables de
	façon spéciale. Elles sont documentées dans la section sur les
	variables.
	</para>

	<note>
	<para>
	Cette commande est sans relation avec la commande 
	<acronym>SQL</acronym> <xref linkend="sql-set"/>.
	</para>
	</note>
	</listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\setenv [ <replaceable class="parameter">nom</replaceable> [ <replaceable class="parameter">valeur</replaceable> ] ]</literal></term>

        <listitem>
        <para>
        Configure la variable d'environnement <replaceable
        class="parameter">nom</replaceable> à <replaceable
        class="parameter">valeur</replaceable>, ou si la
        <replaceable class="parameter">valeur</replaceable> n'est pas fournie,
        désinitialise la variable d'environnement. Par exemple&nbsp;:
<programlisting>
testdb=&gt; <userinput>\setenv PAGER less</userinput>
testdb=&gt; <userinput>\setenv LESS -imx4F</userinput>
</programlisting></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>\sf[+] <replaceable class="parameter">description_fonction</replaceable> </literal></term>

        <listitem>
        <para>
	 Cette commande récupère et affiche la définition d'une fonction sous la forme d'une
	 commande <command>CREATE OR REPLACE FUNCTION</command>.
	 La définition est affichée via le canal de sortie courant, tel que défini par <command>\o</command>.
        </para>

        <para>
         La fonction cible peut être spécifiée par son seul nom, ou bien par
	 ses nom et arguments, par exemple, <literal>foo(integer, text)</literal>.
	 Fournir les types des arguments devient obligatoire si plusieurs 
	 fonctions portent le même nom.
        </para>

        <para>
	 Si <literal>+</literal> est ajouté à la commande, les numéros de lignes
	 sont affichés, la ligne 1 débutant à partir du corps de la fonction.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\t</literal></term>
        <listitem>
        <para>
        Bascule l'affichage des en-têtes de nom de colonne en sortie et celle du
	bas de page indiquant le nombre de lignes. Cette commande est
	équivalente à <literal>\pset tuples_only</literal> et est fournie pour en
	faciliter l'accès.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\T <replaceable
	class="parameter">options_table</replaceable></literal></term>
        <listitem>
        <para>
        Spécifie les attributs qui seront placés dans le tag
        <sgmltag>table</sgmltag> pour le format de sortie <acronym>HTML</acronym>.
        Cette commande est équivalente à <literal>\pset
        tableattr <replaceable
	class="parameter">options_table</replaceable></literal>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
       <term><literal>\timing [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> ]</literal></term>
        <listitem>
        <para>
         Sans paramètre, affiche le temps pris par chaque instruction SQL, en
         millisecondes, ou arrête cet affichage. Avec paramètre, force la valeur
         au paramètre.
        </para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\unset <replaceable class="parameter">nom</replaceable></literal></term>

        <listitem>
        <para>
        Désinitialise (supprime) la variable <application>psql</application>
        <replaceable class="parameter">nom</replaceable>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\w</literal> <replaceable class="parameter">nomfichier</replaceable></term>
        <term><literal>\w</literal> <literal>|</literal><replaceable class="parameter">commande</replaceable></term>
        <listitem>
        <para>
	Place le tampon de requête en cours dans le fichier <replaceable
        class="parameter">nomfichier</replaceable> ou l'envoie via un tube à la
	commande Unix <replaceable class="parameter">commande</replaceable>.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\watch [ <replaceable class="parameter">seconds</replaceable> ]</literal></term>
        <listitem>
        <para>
        Repeatedly execute the current query buffer (like <literal>\g</literal>)
        until interrupted or the query fails.  Wait the specified number of
        seconds (default 2) between executions.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\x [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> | <replaceable class="parameter">auto</replaceable> ]</literal></term>
        <listitem>
        <para>
        Configure ou bascule le mode étendu de formatage en table. C'est équivalent à
	<literal>\pset expanded</literal>.
       </para>
       </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\z [ <link linkend="app-psql-patterns"><replaceable
	class="parameter">motif</replaceable></link> ]</literal></term>
        <listitem>
        <para>
        Liste les tables, vues et séquences
	avec leur droit d'accès associé. Si un <replaceable
	class="parameter">motif</replaceable> est spécifié, seules les tables,
	vues et séquences dont le nom correspond au motif sont listées.
	</para>

	<para>
	Ceci est un alias pour <command>\dp</command> (<quote>affichage des
	droits</quote>).
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\! [ <replaceable
	class="parameter">commande</replaceable> ]</literal></term>
        <listitem>
        <para>
        Lance un shell Unix séparé ou exécute la commande Unix
        <replaceable class="parameter">commande</replaceable>. Les
        arguments ne sont pas interprétés, le shell les voit tel quel.
        In particular, the variable substitution rules and
        backslash escapes do not apply.
        </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><literal>\?</literal></term>
        <listitem>
        <para>
        Affiche l'aide sur les commandes antislash.
        </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </para>

  <refsect3 id="app-psql-patterns">
   <title id="app-psql-patterns-title">motifs</title>

   <indexterm>
    <primary>motifs</primary>
    <secondary>dans psql et pg_dump</secondary>
   </indexterm>

  <para>
   Les différentes commandes <literal>\d</literal> acceptent un paramètre
   <replaceable class="parameter">motif</replaceable> pour spécifier le(s)
   nom(s) d'objet à afficher. Dans le cas le plus simple, un motif est
   seulement le nom exact de l'objet. Les caractères à l'intérieur du
   motif sont normalement mis en minuscule comme pour les noms SQL&nbsp;;
   par exemple, <literal>\dt FOO</literal> affichera la table nommée
   <literal>foo</literal>. Comme pour les noms SQL, placer des guillemets
   doubles autour d'un motif empêchera la mise en minuscule. Si vous devez
   inclure un guillemet double dans un motif, écrivez-le en double en
   accord avec les règles sur les identifiants SQL. Par exemple,
   <literal>\dt "FOO""BAR"</literal> affichera la table nommée
   <literal>FOO"BAR</literal> (et non pas <literal>foo"bar</literal>).
   Contrairement aux règles normales pour les noms SQL, vous pouvez placer
   des guillemets doubles simplement autour d'une partie d'un motif,
   par exemple <literal>\dt FOO"FOO"BAR</literal> affichera la table nommée
   <literal>fooFOObar</literal>.
  </para>

  <para>
   Lorsque le paramètre <replaceable class="parameter">motif</replaceable> 
   est complètement absent, la commande <literal>\d</literal> affiche tous les objets
   visibles dans le chemin de recherche courant &mdash; cela est équivalent à l'utilisation du motif
    <literal>*</literal>.
   (Un objet est dit <firstterm>visible</firstterm> si le schéma qui le contient
   est dans le chemin de recherche et qu'aucun objet de même type et même nom n'apparaît
   en priorité dans le chemin de recherche. Cela est équivalent à dire que 
   l'objet peut être référencé par son nom sans préciser explicitement 
   le schéma.)
   Pour voir tous les objets de la base quelle que soit leur visibilité,
   utilisez le motif <literal>*.*</literal> .
  </para>

  <para>
   À l'intérieur d'un motif, <literal>*</literal> correspond à toute
   séquence de caractères (et aussi à aucun) alors que <literal>?</literal> ne
   correspond qu'à un seul caractère. (Cette notation est comparable à celle des
   motifs de nom de fichier Unix.) Par exemple, <literal>\dt int*</literal>
   affiche les tables dont le nom commence avec <literal>int</literal>. Mais à
   l'intérieur de guillemets doubles, <literal>*</literal> et <literal>?</literal>
   perdent leurs significations spéciales et sont donc traités directement.
  </para>

  <para>
   Un motif qui contient un point (<literal>.</literal>) est interprété comme
   le motif d'un nom de schéma suivi par celui d'un nom d'objet. Par exemple,
   <literal>\dt foo*.*bar*</literal> affiche toutes les tables dont le nom
   inclut <literal>bar</literal> et qui sont dans des schémas dont le
   nom commence avec <literal>foo</literal>. Sans point, le motif correspond
   seulement avec les objets qui sont visibles dans le chemin de recherche
   actuel des schémas. De nouveau, un point dans des guillemets doubles
   perd sa signification spéciale et est traité directement.
  </para>

  <para>
   Les utilisateurs avancés peuvent utiliser des expressions rationnelles comme
   par exemple les classes de caractère (<literal>[0-9]</literal> pour tout
   chiffre). Tous les caractères spéciaux d'expression rationnelle fonctionnent
   de la façon indiquée dans <xref linkend="functions-posix-regexp"/>, sauf pour
   le <literal>.</literal> qui est pris comme séparateur (voir ci-dessus),
   l'étoile (<literal>*</literal>) qui est transformée en l'expression
   rationnelle <literal>.*</literal> et <literal>?</literal> qui est transformée
   en <literal>.</literal>, et <literal>$</literal> qui est une correspondance
   littérale. Vous pouvez émuler ces caractères si besoin en
   écrivant <literal>?</literal> pour <literal>.</literal>,
   <literal>(<replaceable class="parameter">R</replaceable>+|)</literal> pour
   <literal><replaceable class="parameter">R</replaceable>*</literal> et
   <literal>(<replaceable class="parameter">R</replaceable>|)</literal> pour
   <literal><replaceable class="parameter">R</replaceable>?</literal>.
   <literal>$</literal> n'est pas nécessaire en tant que caractère d'une
   expression rationnelle car le motif doit correspondre au nom complet,
   contrairement à l'interprétation habituelle des expressions rationnelles
   (en d'autres termes, <literal>$</literal> est ajouté automatiquement à
   votre motif). Écrivez <literal>*</literal> au début et/ou à la fin si
   vous ne souhaitez pas que le motif soit ancré.
   Notez qu'à l'intérieur de guillemets doubles, tous les
   caractères spéciaux des expressions rationnelles perdent leur signification
   spéciale et sont traités directement. De plus, ces caractères sont traités
   littéralement dans les motifs des noms d'opérateurs (par exemple
   pour l'argument de <literal>\do</literal>).
  </para>
  </refsect3>
 </refsect2>

 <refsect2>
  <title>Fonctionnalités avancées</title>

   <refsect3 id="app-psql-variables">
    <title id="app-psql-variables-title">Variables</title>

    <para>
    <application>psql</application> fournit des fonctionnalités de substitution
    de variable similaire aux shells de commandes Unix. Les variables sont
    simplement des paires nom/valeur où la valeur peut être toute chaîne, quel
    que soit sa longueur. Le nom doit consister en des lettres (includant des
    lettres non latines), des chiffres et des tirets bas.
    </para>

    <para>
    Pour configurer une variable, utilisez la
    méta-commande <application>psql</application> <command>\set</command>.
    Par exemple&nbsp;:
<programlisting>basetest=&gt; <userinput>\set foo bar</userinput>
</programlisting>
    initialise la variable <literal>foo</literal> avec la valeur
    <literal>bar</literal>. Pour récupérer le contenu de la variable, précédez
    le nom avec un caractère deux-points, par exemple&nbsp;:
<programlisting>basetest=&gt; <userinput>\echo :foo</userinput>
bar
</programlisting>
    Ceci fonctionne avec les commandes SQL et les méta-commandes standards. Il
    y a plus de détails dans <xref linkend="app-psql-interpolation"
    endterm="app-psql-interpolation-title"/>, ci-dessous.
    </para>

    <para>
    Si vous appelez <command>\set</command> sans second argument, la variable
    est initialisée avec une chaîne vide. Pour désinitialiser (ou supprimer) une
    variable, utilisez la commande <command>\unset</command>.
    Pour afficher les valeurs de toutes les variables, appelez
    <command>\set</command> sans argument.
    </para>

    <note>
    <para>
    Les arguments de <command>\set</command> sont sujets aux même règles de
    substitution que les autres commandes. Du coup, vous pouvez construire des
    références intéressantes comme <literal>\set :foo 'quelquechose'</literal>
    et obtenir des <quote>liens doux</quote> ou des <quote>variables de
    variables</quote> comme, respectivement, <productname>Perl</productname> ou
    <productname><acronym>PHP</acronym></productname>. Malheureusement (ou
    heureusement&nbsp;?), on ne peut rien faire
    d'utile avec ces constructions. D'un autre côté, <literal>\set bar
    :foo</literal> est un moyen parfaitement valide de copier une variable.
    </para>
    </note>

    <para>
    Un certain nombre de ces variables sont traitées d'une façon particulière
    par <application>psql</application>. Elles représentent certaines
    configurations d'options pouvant être changées à l'exécution en modifiant
    la valeur de la variable ou, dans certains cas, représentent un état
    modifiable de <application>psql</application>. Bien que vous pouvez
    utiliser ces variables dans d'autres buts, cela n'est pas recommandé, car
    le comportement du programme pourrait devenir vraiment étrange très
    rapidement. La convention veut que tous les noms de variables traités
    spécialement utilisent des lettres ASCII en majuscule (avec en option
    des chiffres et des tirets bas). Pour s'assurer une compatibilité maximum
    dans le futur, éviter d'utiliser de tels noms de variables pour votre
    propre besoin. Voici une liste des variables spéciales&nbsp;:
   </para>

    <variablelist>
      <varlistentry>
        <term><varname>AUTOCOMMIT</varname></term>
	<listitem>
        <indexterm>
	  <primary>autocommit</primary>
	  <secondary>psql</secondary>
        </indexterm>
	<para>
	Si actif (<literal>on</literal>, valeur par défaut), chaque commande SQL est
	automatiquement validée si elle se termine avec succès. Pour suspendre
	la validation dans ce mode, vous devez saisir une commande SQL
	<command>BEGIN</command> ou <command>START TRANSACTION</command>. Lorsqu'elle est
	désactivée (<literal>off</literal>) ou non initialisée, les commandes SQL ne
	sont plus validées tant que vous ne lancez pas explicitement
	<command>COMMIT</command> ou <command>END</command>. Le mode sans autocommit
	fonctionne en lançant implicitement un <command>BEGIN</command>,
	juste avant toute commande qui n'est pas déjà dans un bloc de
	transaction et qui n'est pas elle-même un <command>BEGIN</command> ou une autre
	commande de contrôle de transaction, ou une commande qui ne peut pas être
	exécutée à l'intérieur d'un bloc de transaction (comme <command>VACUUM</command>).
	</para>

	<note>
	<para>
	 Dans le mode sans autocommit, vous devez annuler explicitement toute
	transaction échouée en saisissant <command>ABORT</command> ou
	<command>ROLLBACK</command>. Gardez aussi en tête que si vous sortez d'une
	session sans validation, votre travail est perdu.
	</para>
	</note>

	<note>
	<para>
	 Le mode auto-commit est le comportement traditionnel de
	 <productname>PostgreSQL</productname> alors que le mode sans autocommit est plus
	 proche des spécifications SQL. Si vous préférez sans autocommit, vous
	 pouvez le configurer dans le fichier <filename>psqlrc</filename> 
         global du système ou dans votre fichier <filename>~/.psqlrc</filename>.
	</para>
	</note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>COMP_KEYWORD_CASE</varname></term>
        <listitem>
        <para>
        Détermine la casse à utiliser lors de la compléttion d'un mot clé SQL.
        Si c'est configuré à <literal>lower</literal> ou <literal>upper</literal>,
        le mot complété sera, respectivement, en minuscule ou en majuscule.
        Si la variable est configurée à <literal>preserve-lower</literal> ou
        <literal>preserve-upper</literal> (valeur par défaut), le mot complété
        sera dans la casse du mot déjà saisi, mais les mots qui n'ont pas eu un
        début de saisie seront complétés, respectivement, soit en minuscule soit
        en majuscule.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>DBNAME</varname></term>
	<listitem>
	<para>
        Le nom de la base de données à laquelle vous êtes actuellement connecté.
        Ceci est configuré à chaque fois que vous vous connectez à une base de
	données (ainsi qu'au lancement du programme) mais peut être
	désinitialisé.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ECHO</varname></term>
	<listitem>
	<para>
	Si cette variable est initialisée à <literal>all</literal>, toutes les lignes saisies
	au clavier ou provenant d'un script sont écrites sur la sortie standard avant
	d'être analysées ou exécutées. Pour sélectionner ce comportement au
	lancement du programme, utilisez l'option <option>-a</option>. Si
	<varname>ECHO</varname> vaut <literal>queries</literal>, 
        <application>psql</application>
	affiche simplement toutes les requêtes au moment de leur envoi au
	serveur. L'option pour ceci est <option>-e</option>.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ECHO_HIDDEN</varname></term>
	<listitem>
	<para>
	Quand cette variable est initialisée et qu'une commande antislash est
	envoyée à la base de données, la requête est d'abord affichée. De cette
	façon, vous pouvez étudier le fonctionnement interne de
	<productname>PostgreSQL</productname> et fournir des fonctionnalités
	similaires dans vos propres programmes. (Pour sélectionner ce
	comportement au lancement du programme, utilisez l'option
	<option>-E</option>.) Si vous configurez la variable avec la valeur
	<literal>noexec</literal>, les requêtes sont juste affichées mais ne
	sont pas réellement envoyées au serveur ni exécutées.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ENCODING</varname></term>
	<listitem>
	<para>
        Le codage courant du jeu de caractères du client.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>FETCH_COUNT</varname></term>
        <listitem>
        <para>
         Si cette variable est un entier positif, les résultats de la requête
         <command>SELECT</command> sont récupérés et affichés en groupe de
         ce nombre de lignes, plutôt que par le comportement par défaut
         (récupération de l'ensemble complet des résultats avant l'affichage).
         Du coup, seule une petite quantité de mémoire est utilisée, quelle que
         soit la taille de l'ensemble des résultats. Une configuration entre
         100 et 1000 est habituellement utilisée lors de l'activation de cette
         fonctionnalité.
         Gardez en tête que lors de l'utilisation de cette fonctionnalité, une
         requête pourrait échouer après avoir affiché quelques lignes.
        </para>
        <tip>
        <para>
         Bien que vous puissiez utiliser tout format de sortie avec cette
         fonctionnalité, le format par défaut, <literal>aligned</literal>,
         rend mal car chaque groupe de <varname>FETCH_COUNT</varname> lignes
         sera formaté séparément, modifiant ainsi les largeurs de colonnes
         suivant les lignes du groupe. Les autres formats d'affichage
         fonctionnent mieux.
        </para>
        </tip>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTCONTROL</varname></term>
	<listitem>
	<para>
         Si cette variable est configurée à <literal>ignorespace</literal>, les
	 lignes commençant avec un espace n'entrent pas dans la liste de
	 l'historique. Si elle est initialisée avec la valeur
	 <literal>ignoredups</literal>, les lignes correspondant aux précédentes
	 lignes de l'historique n'entrent pas dans la liste. Une valeur de
	 <literal>ignoreboth</literal> combine les deux options. Si elle n'est
	 pas initialisée ou si elle est configurée avec une autre valeur que
	 celles-ci, toutes les lignes lues dans le mode interactif sont
	 sauvegardées dans la liste de l'historique.
	</para>
        <note>
        <para>
         Cette fonctionnalité a été plagiée sur
        <application>Bash</application>.
        </para>
        </note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTFILE</varname></term>
        <listitem>
        <para>
        Le nom du fichier utilisé pour stocker l'historique. La valeur par
        défaut est <filename>~/.psql_history</filename>. Par exemple,
        utiliser&nbsp;:
<programlisting>\set HISTFILE ~/.psql_history- :DBNAME
</programlisting>
        dans <filename>~/.psqlrc</filename> fera que
        <application>psql</application> maintiendra un historique séparé pour
        chaque base de données.
        </para>
        <note>
        <para>
        Cette fonctionnalité a été plagiée sans honte à partir de
        <application>Bash</application>.
        </para>
        </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HISTSIZE</varname></term>
	<listitem>
	<para>
         Le nombre de commandes à stocker dans l'historique des commandes. La
	 valeur par défaut est 500.
	</para>
        <note>
        <para>
         Cette fonctionnalité a été plagiée sur
        <application>Bash</application>.
        </para>
        </note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>HOST</varname></term>
	<listitem>
	<para>
	L'hôte du serveur de la base de données où vous êtes actuellement
	connecté. Ceci est configuré à chaque fois que vous vous connectez à une
	base de données (ainsi qu'au lancement du programme) mais peut être
	désinitialisé.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>IGNOREEOF</varname></term>
	<listitem>
	<para>
         Si non initialisé, envoyer un caractère <acronym>EOF</acronym> (habituellement
         <keycombo action="simul"><keycap>Ctrl</keycap><keycap>D</keycap></keycombo>) dans une
	session interactive de <application>psql</application> ferme
	l'application. Si elle est configurée avec une valeur numérique, ce
	nombre de caractères <acronym>EOF</acronym> est ignoré avant la fin de
	l'application. Si la variable est configurée mais n'a pas de valeur
	numérique, la valeur par défaut est de 10.
	</para>
        <note>
        <para>
        Cette fonctionnalité a été plagiée sur
        <application>Bash</application>.
        </para>
        </note>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>LASTOID</varname></term>
	<listitem>
	<para>
	La valeur du dernier OID affecté, renvoyée à partir d'une commande
        <command>INSERT</command> ou <command>lo_import</command>. La
	validité de cette variable est seulement garantie jusqu'à 
	l'affichage du résultat de la commande <acronym>SQL</acronym> suivante.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ON_ERROR_ROLLBACK</varname></term>
        <listitem>
      <indexterm>
       <primary>rollback</primary>
       <secondary>psql</secondary>
      </indexterm>
        <para>
        Lorsqu'il est actif (<literal>on</literal>), si une instruction d'un bloc de
        transaction génère une erreur, cette dernière est ignorée et la
        transaction continue. Lorsqu'il vaut <literal>interactive</literal>, ces
        erreurs sont seulement ignorées lors des sessions interactives, mais
        ne le sont pas lors de la lecture de scripts. Lorsqu'il vaut
        <literal>off</literal> (valeur par défaut), une instruction générant une
        erreur dans un bloc de transaction annule la transaction complète. Le
        mode on_error_rollback-on fonctionne en exécutant un
        <command>SAVEPOINT</command> implicite pour vous, juste avant chaque commande
        se trouvant dans un bloc de transaction et annule jusqu'au dernier
        point de sauvegarde en cas d'erreur.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>ON_ERROR_STOP</varname></term>
	    <listitem>
	    <para>
		 Par défaut, le traitement des commandes continue après une
		 erreur. Quand cette variable est positionnée, le traitement
		 sera immédiatement arrêté dès la première erreur rencontrée.
		 Dans le mode interactif, <application>psql</application>
		 reviendra à l'invite de commande. Sinon
		 <application>psql</application> quittera en renvoyant le code
		 d'erreur 3 pour distinguer ce cas des conditions d'erreurs
		 fatales, qui utilisent le code 1. Dans tous les cas, tout script
		 en cours d'exécution (le script de haut niveau et tout autre
		 script qui pourrait avoir été appelé) sera terminé
		 immédiatement. Si la chaîne de commande de haut niveau contient
		 plusieurs commandes SQL, le traitement s'arrêtera à la commande
		 en cours.
    	</para>
	    </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>PORT</varname></term>
	<listitem>
	<para>
        Le port du serveur de la base de données sur lequel vous êtes
	actuellement connecté. Ceci est configuré à chaque fois que vous vous
	connectez à une base de données (ainsi qu'au lancement du programme)
	mais peut être désinitialisé.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>PROMPT1</varname></term>
        <term><varname>PROMPT2</varname></term>
        <term><varname>PROMPT3</varname></term>
	<listitem>
	<para>
	Ils spécifient à quoi doit ressembler l'invite
	<application>psql</application>. Voir <xref
	linkend="app-psql-prompting" endterm="app-psql-prompting-title"/>
	ci-dessous.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>QUIET</varname></term>
	<listitem>
	<para>
	Cette variable est équivalente à l'option <option>-q</option> en ligne
	de commande. Elle n'est probablement pas très utile en mode
	interactif.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>SINGLELINE</varname></term>
	<listitem>
	<para>
	Cette variable est équivalente à l'option <option>-S</option> en ligne
	de commande.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>SINGLESTEP</varname></term>
	<listitem>
	<para>
	Cette variable est équivalente à l'option <option>-s</option> en ligne
	de commande.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>USER</varname></term>
	<listitem>
	<para>
        L'utilisateur de la base de données où vous êtes actuellement
	connecté. Ceci est configuré à chaque fois que vous vous connectez à une
	base de données (ainsi qu'au lancement du programme) mais peut être
	désinitialisé.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>VERBOSITY</varname></term>
	<listitem>
	<para>
	 Cette variable peut être configurée avec les valeurs
	 <literal>default</literal>, <literal>verbose</literal> (bavard) 
         ou <literal>terse</literal> (succinct) pour
	 contrôler la verbosité des rapports d'erreurs.
	</para>
	</listitem>
      </varlistentry>

    </variablelist>

   </refsect3>

   <refsect3 id="app-psql-interpolation">
    <title id="app-psql-interpolation-title">Interpolation <acronym>SQL</acronym></title>

    <para>
    Une fonctionnalité clé des variables <application>psql</application> est
    que vous pouvez les substituer (<quote>interpolation</quote>) dans des
    requêtes <acronym>SQL</acronym> standards, ainsi qu'en arguments de
    méta-commandes. De plus, <application>psql</application> fournit des
    fonctionnalités vous assurant que les valeurs des variables utilisées
    comme constantes et identifiants SQL sont correctement mises entre
    guillemets. La syntaxe pour l'interpolation d'une valeur sans guillemets
    est de préfixer le nom de la variable avec le symbole deux-points
    (<literal>:</literal>). Par exemple&nbsp;:
<programlisting>basetest=&gt; <userinput>\set foo 'ma_table'</userinput>
basetest=&gt; <userinput>SELECT * FROM :foo;</userinput>
</programlisting>
    envoie alors la requête pour la table <literal>ma_table</literal>. Notez que cela peut 
    être dangereux&nbsp;; la valeur de la variable est copiée de façon litérale, elle peut 
    même contenir des guillemets non fermés, ou bien des commandes backslash. Vous devez
    vous assurer que cela a du sens à l'endroit où vous les utilisez.
    </para>

    <para>
    Lorsqu'une valeur doit être utilisée comme une chaîne SQL litérale ou un identifiant, il 
    est plus sûr de s'arranger pour qu'elle soit entre guillemets. Afin de mettre en guillemets la valeur d'une variable
    en tant que chaîne SQL litérale, écrivez un caractère deux-points, suivi du nom de la 
    variable entouré par des guillemets simples. Pour mettre entre guillemet la valeur en tant qu'identifiant SQL,
    écrivez un caractère deux-points suivi du nom de la valeur entouré de guillemets doubles.
    Ces constructions gèrent correctement les guillemets et autres caractères
    spéciaux intégrés dans la valeur de la variable. L'exemple précédent 
    peut s'écrire de façon plus sûre ainsi &nbsp;:
<programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :"foo";</userinput>
</programlisting>
    L'interpolation de variables ne sera pas réalisée à l'intérieur de litéraux
    et d'identifiants <acronym>SQL</acronym> mis entre guillemets. Du coup, une
    construction comme <literal>':foo'</literal> ne fonctionne pas pour avoir
    un litéral entre guillemets à partir de la valeur d'une variable (il serait
    même dangereux que cela fonctionne car ça ne peut pas gérer correctement
    les guillemets embarqués dans la valeur).
    </para>

    <para>
    Un exemple de l'utilisation de ce mécanisme est la copie du contenu d'un
    fichier dans la colonne d'une table. Tout d'abord, chargez le fichier dans
    une variable puis interpolez la valeur de la valeur en tant que chaîne de
    caractères&nbsp;:
<programlisting>basetest=&gt; <userinput>\set contenu `cat mon_fichier.txt`</userinput>
basetest=&gt; <userinput>INSERT INTO ma_table VALUES (:'contenu');</userinput>
</programlisting>
    (Notez que cela ne fonctionnera par si le fichier
    <filename>mon_fichier.txt</filename> contient des octets nuls. <application>psql</application> ne 
    gère pas les octets nuls inclus dans les valeurs de variable.)
    </para>

    <para>
    Comme les caractères deux-points peuvent légitimement apparaître dans les 
    commandes SQL, une tentative apparente d'interpolation (comme <literal>:nom</literal>,
    <literal>:'nom'</literal>, ou <literal>:"nom"</literal>) n'est pas remplacée, sauf si
    la variable nommée est actuellement positionnée. Dans tous les cas, vous pouvez échapper un
    caractère deux-points avec un backslash pour le protéger des substitutions.
    </para>

    <para>
    La syntaxe deux-points pour les variables est du <acronym>SQL</acronym> standard pour 
    les langages de requête embarqués, comme <application>ECPG</application>.
    La syntaxe avec les deux-points pour les tranches de tableau et les conversions de types
    sont des extensions <productname>PostgreSQL</productname> extensions, qui peut parfois
    provoquer un conflit avec l'utilisation standard.
    La syntaxe avec le caractère deux-points pour échapper la valeur d'une variable en tant
    que chaîne SQL litérale ou identifiant est une extension <application>psql</application>
    .
    </para>

   </refsect3>

   <refsect3 id="app-psql-prompting">
    <title id="app-psql-prompting-title">Invite</title>

    <para>
    Les invites <application>psql</application> peuvent être personnalisées
suivant vos préférences. Les trois variables <varname>PROMPT1</varname>,
<varname>PROMPT2</varname> et <varname>PROMPT3</varname> contiennent des
chaînes et des séquences d'échappement spéciales décrivant l'apparence de
l'invite. L'invite 1 est l'invite normale qui est lancée quand
<application>psql</application> réclame une nouvelle commande. L'invite 2 est
lancée lorsqu'une saisie supplémentaire est attendue lors de la saisie de la
commande parce que la commande n'a pas été terminée avec un point-virgule ou
parce qu'un guillemet n'a pas été fermé. L'invite 3 est lancée lorsque vous
exécutez une commande <acronym>SQL</acronym> <command>COPY</command> et que
vous devez saisir les valeurs des lignes sur le terminal.
    </para>

    <para>
    La valeur de la variable prompt sélectionnée est affichée littéralement
    sauf si un signe pourcentage (<literal>%</literal>) est rencontré. Suivant
    le prochain caractère, certains autres textes sont substitués. Les
    substitutions définies sont&nbsp;:

    <variablelist>
      <varlistentry>
        <term><literal>%M</literal></term>
	<listitem>
         <para>
          Le nom complet de l'hôte (avec le nom du domaine) du serveur de la
	  base de données ou <literal>[local]</literal> si la connexion est
	  établie via une socket de domaine Unix ou
	 <literal>[local:<replaceable>/répertoire/nom</replaceable>]</literal>,
          si la socket de domaine Unix n'est pas dans l'emplacement par défaut 
          défini à la compilation.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%m</literal></term>
	<listitem>
         <para>
          Le nom de l'hôte du serveur de la base de données, tronqué au
	  premier point ou <literal>[local]</literal> si la connexion se fait
	  via une socket de domaine Unix.
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%&gt;</literal></term>
	<listitem><para>Le numéro de port sur lequel le serveur de la base de 
	données écoute.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%n</literal></term>
	<listitem>
         <para>
          Le nom d'utilisateur de la session. (L'expansion de cette valeur
	  peut changer pendant une session après une commande <command>SET
	  SESSION AUTHORIZATION</command>.)
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%/</literal></term>
	<listitem><para>Le nom de la base de données courante.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%~</literal></term>
	<listitem><para>Comme <literal>%/</literal> mais l'affichage est un
	<literal>~</literal> (tilde) si la base de données est votre base de
	données par défaut.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%#</literal></term>
	<listitem>
         <para>
          Si l'utilisateur de la session est un superutilisateur, alors un
          <literal>#</literal> sinon un <literal>&gt;</literal>.
          (L'expansion de cette valeur peut changer durant une session
	  après une commande <command>SET SESSION
	  AUTHORIZATION</command>.)
         </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%R</literal></term>
	<listitem>
	<para>
	Pour l'invite 1, affiche normalement <literal>=</literal> mais
	affiche <literal>^</literal> si on est en mode simple ligne et 
        <literal>!</literal> si
	la session est déconnectée de la base de données (ce qui peut arriver si
	<command>\connect</command> échoue). Pour l'invite 2, la séquence est
	remplacée par <literal>-</literal>, <literal>*</literal>, un simple
	guillemet, un double ou un signe dollar, suivant si <application>psql</application>
	attend une saisie supplémentaire parce que la commande n'est pas
	terminée, parce que vous êtes à l'intérieur d'un commentaire <literal>/*
	... */</literal>, ou parce que vous n'avez pas terminé un guillemet ou
	une chaîne échappée avec des dollars. Pour
	l'invite 3, la séquence ne produit rien.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%x</literal></term>
	<listitem>
	<para>
	État de la Transaction&nbsp;: une chaîne vide lorsque vous n'êtes pas
	dans un bloc de transaction ou <literal>*</literal> si vous vous y trouvez, ou
	<literal>!</literal> si vous êtes dans une transaction échouée, ou enfin
	<literal>?</literal> lorsque l'état de la transaction est indéterminé (par
	exemple à cause d'une rupture de la connexion).
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%</literal><replaceable
	class="parameter">chiffres</replaceable></term>
	<listitem>
	<para>
	Le caractère avec ce code numérique est substitué.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%:</literal><replaceable
	class="parameter">nom</replaceable><literal>:</literal></term>
	<listitem>
	<para>
	La valeur de la variable <replaceable
	class="parameter">nom</replaceable> de <application>psql</application>.
	Voir la section <xref linkend="app-psql-variables"
	endterm="app-psql-variables-title"/> pour les détails.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
        <term><literal>%`</literal><replaceable
	class="parameter">commande</replaceable><literal>`</literal></term>
	<listitem>
	<para>
	la sortie de la <replaceable
	class="parameter">commande</replaceable>, similaire à la substitution
	par <quote>guillemets inverse</quote> classique.
	</para>
	</listitem>
      </varlistentry>

      <varlistentry>
      <term><literal>%[</literal> ... <literal>%]</literal></term>
      <listitem>
      <para>
       Les invites peuvent contenir des caractères de contrôle du terminal
       qui, par exemple, modifient la couleur, le fond ou le style du texte
       de l'invite, ou modifient le titre de la fenêtre du terminal. Pour
       que les fonctionnalités d'édition de ligne de
       <application>Readline</application> fonctionnent correctement, les
       caractères de contrôle non affichables doivent être indiqués comme
       invisibles en les entourant avec <literal>%[</literal> et
       <literal>%]</literal>. Des pairs multiples de ceux-ci pourraient
       survenir à l'intérieur de l'invite. Par exemple&nbsp;:
<programlisting>basetest=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%# '
</programlisting>
       a pour résultat une invite en gras (<literal>1;</literal>), jaune sur
       noir (<literal>33;40</literal>) sur les terminaux compatibles 
       VT100.
      </para>
      </listitem>
      </varlistentry>

    </variablelist>

    Pour insérer un pourcentage dans votre invite, écrivez
    <literal>%%</literal>. Les invites par défaut sont
    <literal>'%/%R%# '</literal> pour les invites 1 et 2 et
    <literal>'&gt;&gt; '</literal> pour l'invite 3.
    </para>

    <note>
    <para>
    Cette fonctionnalité a été plagiée sur
    <application>tcsh</application>.
    </para>
    </note>

   </refsect3>

   <refsect3>
    <title>Édition de la ligne de commande</title>

    <para>
    <application>psql</application> supporte la bibliothèque
    <application>Readline</application> pour une édition et une recherche
    simplifiée et conviviale de la ligne de commande. L'historique des commandes est
    automatiquement sauvegardé lorsque <application>psql</application> quitte
    et est rechargé quand <application>psql</application> est lancé. La
    complétion par tabulation est aussi
    supportée bien que la logique de complétion n'ait pas la prétention d'être un
    analyseur <acronym>SQL</acronym>. The queries generated by tab-completion
    can also interfere with other SQL commands, e.g. <literal>SET
    TRANSACTION ISOLATION LEVEL</literal>.
    Si pour quelques raisons que ce soit, vous
    n'aimez pas la complétion par tabulation, vous pouvez la désactiver en
    plaçant ceci dans un fichier nommé <filename>.inputrc</filename> de votre
    répertoire personnel&nbsp;:
<programlisting>$if psql
set disable-completion on
$endif
</programlisting>
    (Ceci n'est pas une fonctionnalité <application>psql</application> mais
    <application>Readline</application>. Lisez sa documentation pour plus de
    détails.)
    </para>
   </refsect3>
  </refsect2>
 </refsect1>


<refsect1 id="app-psql-environment">
  <title id="app-psql-environment-title">Environnement</title>

  <variablelist>
   <varlistentry>
    <term><envar>COLUMNS</envar></term>

    <listitem>
     <para>
      Si <literal>\pset columns</literal> vaut zéro, contrôle la largeur pour
      le format <literal>wrapped</literal> et la largeur pour déterminer si
      une sortie large a besoin du paginateur ou doit être basculé en format
      vertical dans le mode automatique étendu.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PAGER</envar></term>

    <listitem>
     <para>
      Si les résultats d'une requête ne tiennent pas sur l'écran, ils sont
      envoyés via un tube sur cette commande. Les valeurs typiques sont
      <literal>more</literal> ou <literal>less</literal>. La valeur par défaut
      dépend de la plateforme. L'utilisation du paginateur peut être désactivée
      en utilisant la commande <command>\pset</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PGDATABASE</envar></term>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGPORT</envar></term>
    <term><envar>PGUSER</envar></term>

    <listitem>
     <para>
      Paramètres de connexion par défaut (voir <xref linkend="libpq-envars"/>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_EDITOR</envar></term>
    <term><envar>EDITOR</envar></term>
    <term><envar>VISUAL</envar></term>

    <listitem>
     <para>
      Éditeur utilisé par les commandes <command>\e</command> et
      <command>\ef</command>. Les variables sont
      examinées dans l'ordre donné&nbsp;; la première initialisée est utilisée.
     </para>

     <para>
      Les éditeurs intégrés par défaut sont <filename>vi</filename> sur
      les systèmes Unix et <filename>notepad.exe</filename> sur les
      systèmes Windows.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_EDITOR_LINENUMBER_ARG</envar></term>

    <listitem>
     <para>
      Lorsque les commandes <command>\e</command> ou <command>\ef</command> 
	  sont utilisées avec un argument spécifiant le numéro de ligne,
	  cette variable doit indiquer l'argument en ligne de commande à
	  fournir à l'éditeur de texte. Pour les éditeurs les plus courants,
	  tels qu'<productname>emacs</productname> ou
	  <productname>vi</productname>, vous pouvez simplement initialiser
	  cette variable avec le signe +. Il faut inclure le caractère
	  d'espacement en fin de la valeur de la variable si la syntaxe de
	  l'éditeur nécessite un espace entre l'option à spécifier et le
	  numéro de ligne. Par exemple&nbsp;:
<programlisting>
PSQL_EDITOR_LINENUMBER_ARG='+'
PSQL_EDITOR_LINENUMBER_ARG='--line '
</programlisting>
     </para>

     <para>
      La valeur par défaut est <literal>+</literal> sur les systèmes Unix
      (ce qui correspond à la bonne configuration pour l'éditeur par
      défaut, <filename>vi</filename>, et est utilisable généralement
      avec la plupart des éditeurs courants)&nbsp;; par contre, il n'y
      a pas de valeur par défaut pour les systèmes Windows.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_HISTORY</envar></term>

    <listitem>
     <para>
      Emplacement alternatif pour le fichier d'historique des commandes.
      L'expansion du symbôle <literal>~</literal> est réalisée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQLRC</envar></term>

    <listitem>
     <para>
      Emplacement alternatif pour le fichier <filename>.psqlrc</filename> de l'utilisateur. L'expansion
      du symbôle <literal>~</literal> est réalisée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>SHELL</envar></term>

    <listitem>
     <para>
      Commande exécutée par la commande <command>\!</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>TMPDIR</envar></term>

    <listitem>
     <para>
      Répertoire pour stocker des fichiers temporaires. La valeur par défaut est
      <filename>/tmp</filename>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Cet outil, comme la plupart des autres outils <productname>PostgreSQL</productname>,
   utilise aussi les variables d'environnement supportées par la bibliothèque
   <application>libpq</application> (voir <xref linkend="libpq-envars"/>).
  </para>

</refsect1>


 <refsect1>
  <title>Fichiers</title>

  <itemizedlist>
   <listitem>
    <para>
     Sauf si une option <option>-X</option> ou <option>-c</option> est fournie,
     <application>psql</application> tente de lire et exécuter les commandes
     provenant du fichier global au système <filename>psqlrc</filename> ou du
     fichier utilisateur <filename>~/.psqlrc</filename> avant de démarrer.
     (Sur Windows, le fichier de démarrage de l'utilisateur est nommé
     <filename>%APPDATA%\postgresql\psqlrc.conf</filename>.) Voir
     <filename><replaceable>PREFIX</replaceable>/share/psqlrc.sample</filename>
     pour plus d'informations sur la configuration du fichier global au
     système. Il pourrait être utilisé pour configurer le client et le serveur
     à votre goût (en utilisant les commandes <command>\set</command> et
     <command>SET</command>).
    </para>
    <para>
     L'emplacement du fichier <filename>~/.psqlrc</filename> de l'utilisateur
     peut aussi être configuré explicitement avec la variable d'environnement
     <envar>PSQLRC</envar>.
    </para>
   </listitem>

   <listitem>
   <para>
      Le fichier <filename>psqlrc</filename>, niveau système, et le fichier
      <filename>~/.psqlrc</filename> de l'utilisateur peuvent être spécifiques
      à la version de psql en ajoutant un tiret et la version mineure ou
      majeure de <application>psql</application>, par exemple
      <filename>~/.psqlrc-9.2</filename> ou
      <filename>~/.psqlrc-9.2.5</filename>. Le fichier dont la version est la
      plus proche sera lu à la place d'un fichier sans indication de version.
   </para>
   </listitem>

   <listitem>
    <para>
     L'historique de la ligne de commandes est stocké dans le fichier
     <filename>~/.psql_history</filename> ou
     <filename>%APPDATA%\postgresql\psql_history</filename> sur Windows.
    </para>
    <para>
     L'emplacement du fichier historique peut aussi être configuré explicitement
     avec la variable d'environnement <envar>PSQL_HISTORY</envar>.
    </para>
   </listitem>
  </itemizedlist>
 </refsect1>


 <refsect1>
  <title>Notes</title>

    <itemizedlist>
      <listitem>
       <para>
        Dans une vie précédente, <application>psql</application> permettait au
        premier argument d'une commande antislash à une seule lettre de commencer
        directement après la commande, sans espace séparateur. À partir de
        <productname>PostgreSQL</productname> 8.4, ce n'est plus autorisé.
       </para>
      </listitem>

      <listitem>
      <para>
       <application>psql</application> works best with servers of the same
       or an older major version.  Backslash commands are particularly likely
       to fail if the server is of a newer version than <application>psql</application>
       itself.  However, backslash commands of the <literal>\d</literal> family should
       work with servers of versions back to 7.4, though not necessarily with
       servers newer than <application>psql</application> itself.  The general
       functionality of running SQL commands and displaying query results
       should also work with servers of a newer major version, but this cannot
       be guaranteed in all cases.
      </para>
      <para>
       If you want to use <application>psql</application> to connect to several
       servers of different major versions, it is recommended that you use the
       newest version of <application>psql</application>.  Alternatively, you
       can keep a copy of <application>psql</application> from each major
       version around and be sure to use the version that matches the
       respective server.  But in practice, this additional complication should
       not be necessary.
      </para>
      </listitem>

    </itemizedlist>
 </refsect1>


 <refsect1>
   <title>Notes pour les utilisateurs sous Windows</title>
   
   <para>
     <application>psql</application> est construit comme une
     <quote>application de type console</quote>. Comme les fenêtres console de
     windows utilisent un codage différent du reste du système, vous devez
     avoir une attention particulière lors de l'utilisation de caractères sur
     8 bits à l'intérieur de <application>psql</application>. Si
     <application>psql</application> détecte une page de code problématique,
     il vous avertira au lancement. Pour modifier la page de code de la console,
     deux étapes sont nécessaires&nbsp;:
   
   <itemizedlist>
     <listitem>
       <para>
         Configurez la page code en saisissant <userinput>cmd.exe /c chcp
         1252</userinput>. (1252 est une page code appropriée pour
         l'Allemagne&nbsp;; remplacez-la par votre valeur.) Si vous
         utilisez Cygwin, vous pouvez placer cette commande dans
         <filename>/etc/profile</filename>.
       </para>
     </listitem>
     
     <listitem>
       <para>
         Configurez la police de la console par <literal>Lucida Console</literal>
         parce que la police raster ne fonctionne pas avec la page de code ANSI.
       </para>
     </listitem>
   </itemizedlist>
   </para>

 </refsect1>


 <refsect1 id="app-psql-examples">
  <title id="app-psql-examples-title">Exemples</title>

  <para>
  Le premier exemple montre comment envoyer une commande sur plusieurs lignes
  d'entrée. Notez le changement de l'invite&nbsp;:
<programlisting>basetest=&gt; <userinput>CREATE TABLE ma_table (</userinput>
basetest(> <userinput> premier integer not NULL default 0,</userinput>
basetest(> <userinput> second text)</userinput>
basetest-> <userinput>;</userinput>
CREATE TABLE
</programlisting>
  Maintenant, regardons la définition de la table&nbsp;:
<programlisting>basetest=&gt; <userinput>\d ma_table</userinput>
             Table "ma_table"
 Attribute |  Type   |      Modifier
-----------+---------+--------------------
 premier   | integer | not null default 0
 second    | text    |

</programlisting>
  Maintenant, changeons l'invite par quelque chose de plus intéressant&nbsp;:
<programlisting>basetest=&gt; <userinput>\set PROMPT1 '%n@%m %~%R%# '</userinput>
peter@localhost basetest=&gt;
</programlisting>
  Supposons que nous avons rempli la table de données et que nous voulons les
  regarder&nbsp;:
<programlisting>peter@localhost basetest=&gt; SELECT * FROM ma_table;
 premier | second
---------+--------
       1 | one
       2 | two
       3 | three
       4 | four
(4 rows)

</programlisting>
  Vous pouvez afficher cette table de façon différente en utilisant la
  commande <command>\pset</command>&nbsp;:
<programlisting>peter@localhost basetest=&gt; <userinput>\pset border 2</userinput>
Border style is 2.
peter@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
+---------+--------+
| premier | second |
+---------+--------+
|       1 | one    |
|       2 | two    |
|       3 | three  |
|       4 | four   |
+---------+--------+
(4 rows)

peter@localhost basetest=&gt; <userinput>\pset border 0</userinput>
Border style is 0.
peter@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
premier second
------- ------
      1 one
      2 two
      3 three
      4 four
(4 rows)

peter@localhost basetest=&gt; <userinput>\pset border 1</userinput>
Border style is 1.
peter@localhost basetest=&gt; <userinput>\pset format unaligned</userinput>
Output format is unaligned.
peter@localhost basetest=&gt; <userinput>\pset fieldsep ","</userinput>
Field separator is ",".
peter@localhost basetest=&gt; <userinput>\pset tuples_only</userinput>
Showing only tuples.
peter@localhost basetest=&gt; <userinput>SELECT second, first FROM
ma_table;</userinput>
one,1
two,2
three,3
four,4
</programlisting>
  Vous pouvez aussi utiliser les commandes courtes&nbsp;:
<programlisting>peter@localhost basetest=&gt; <userinput>\a \t \x</userinput>
Output format is aligned.
Tuples only is off.
Expanded display is on.
peter@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
-[ RECORD 1 ]-
first  | 1
second | one
-[ RECORD 2 ]-
first  | 2
second | two
-[ RECORD 3 ]-
first  | 3
second | three
-[ RECORD 4 ]-
first  | 4
second | four
</programlisting>
  </para>

 </refsect1>

</refentry>
