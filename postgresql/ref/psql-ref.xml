<?xml version="1.0" encoding="UTF-8"?>
<refentry id="app-psql">
 <indexterm zone="app-psql">
  <primary>psql</primary>
 </indexterm>

 <refmeta>
  <refentrytitle id="app-psql-title"><application>psql</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname><application>psql</application></refname>
  <refpurpose>
   terminal interactif <productname>PostgreSQL</productname>
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>psql</command>
   <arg rep="repeat"><replaceable class="parameter">option</replaceable></arg>
   <arg choice="opt"><replaceable class="parameter">nombase</replaceable>
    <arg choice="opt"><replaceable class="parameter">nomutilisateur</replaceable></arg></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <application>psql</application> est une interface en mode texte
   pour <productname>PostgreSQL</productname>. Il vous permet de saisir des
   requêtes de façon interactive, de les exécuter sur
   <productname>PostgreSQL</productname> et de voir les résultats de ces
   requêtes. Alternativement, les entrées peuvent être lues à partir d'un fichier
   ou à partir des arguments de la ligne de commande.
   De plus, il fournit un certain nombre de métacommandes et plusieurs
   fonctionnalités style shell pour faciliter l'écriture des scripts et
   automatiser une grande variété de tâches.
  </para>
 </refsect1>

 <refsect1 id="r1-app-psql-3">
  <title>Options</title>

  <variablelist>
   <varlistentry>
    <term><option>-a</option></term>
    <term><option>--echo-all</option></term>
    <listitem>
     <para>
      Affiche toutes les lignes non vides en entrée sur la sortie standard
      lorsqu'elles sont lues. (Ceci ne s'applique pas aux lignes lues de
      façon interactive.) C'est équivalent à initialiser la variable
      <varname>ECHO</varname> à <literal>all</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-A</option></term>
    <term><option>--no-align</option></term>
    <listitem>
     <para>
      Bascule dans le mode d'affichage non aligné. (Le mode d'affichage par
      défaut est <literal>aligned</literal>.) Ceci est équivalent à <command>\pset format
       unaligned</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-b</option></term>
    <term><option>--echo-errors</option></term>
    <listitem>
     <para>
      Affiche les commandes SQL qui ont échoué sur la sortie standard des erreurs.
      C'est équivalent à configurer la variable <varname>ECHO</varname> à
      <literal>errors</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-c <replaceable
      class="parameter">commande</replaceable></option></term>
    <term><option>--command=<replaceable
      class="parameter">commande</replaceable></option></term>
    <listitem>
     <para>
      Indique que <application>psql</application> doit exécuter la commande
      indiquée dans le paramètre <replaceable
      class="parameter">commande</replaceable>. Cette option peut être
      répétée et combinée avec l'option <option>-f</option> dans n'importe
      quel ordre. Quand soit <option>-c</option> soit <option>-f</option> est
      utilisée, <application>psql</application> ne lit pas les commandes à
      partir de l'entrée standard&nbsp;; à la place, il quitte après avoir
      traité toutes les options <option>-c</option> et <option>-f</option>
      dans la séquence indiquée.
     </para>
     <para>
      <replaceable class="parameter">commande</replaceable> doit être soit
      une chaîne de commande complètement analysable par le serveur
      (autrement dit, elle ne contient pas de fonctionnalités spécifiques à
      <application>psql</application>), soit une simple métacommande. De ce
      fait, vous ne pouvez pas mixer les commandes <acronym>SQL</acronym> et les
      métacommandes <application>psql</application> dans une option
      <option>-c</option>. Pour ce faire, vous pouvez utiliser plusieurs
      options <option>-c</option> ou envoyer la chaîne par un tube
      (<foreignphrase>pipe</foreignphrase>) dans
      <application>psql</application>, par exemple&nbsp;:
      <programlisting>
psql -c '\x' -c 'SELECT * FROM foo;'
      </programlisting>
      or
      <programlisting>
echo '\x \\ SELECT * FROM foo;' | psql
      </programlisting>
      (<literal>\\</literal> est le séparateur de métacommandes.)
     </para>
     <para>
      Chaque chaîne de commande <acronym>SQL</acronym> passée à
      <option>-c</option> est envoyée au serveur comme une requête unique. De
      ce fait, le serveur l'exécute comme une seule transaction, même si la
      chaîne contient plusieurs commandes <acronym>SQL</acronym>, sauf si des
      commandes <command>BEGIN</command>/<command>COMMIT</command> explicites
      sont incluses dans la chaîne pour la diviser en plusieurs transactions.
      (Voir <xref linkend="protocol-flow-multi-statement"/> pour plus de
      détails sur la gestion par le serveur des chaînes contenant plusieurs
      requêtes.)
      De plus, <application>psql</application> n'affiche que le résultat
      de la dernière commande <acronym>SQL</acronym> dans la chaîne. Ce
      comportement est différent de celui où la même chaîne est lue à partir
      d'un fichier ou envoyée à <application>psql</application> via l'entrée
      standard, parce qu'alors <application>psql</application> envoie chaque
      commande <acronym>SQL</acronym> séparément.
     </para>
     <para>
      À cause de ce comportement, placer plus d'une commande dans une option
      <option>-c</option> a souvent des résultats inattendus. Il est
      préférable d'utiliser plusieurs options <option>-c</option> ou
      d'envoyer les différentes commandes à <application>psql</application>
      via l'entrée standard, soit en utilisant
      <application>echo</application> comme dans l'exemple ci-dessus, soit en
      utilisant une redirection de type <quote>here-document</quote>, comme
      ci-dessous&nbsp;:
      <programlisting>
psql &lt;&lt;EOF
\x
SELECT * FROM foo;
EOF
      </programlisting>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--csv</option></term>
    <listitem>
     <para>
      Passe au format de sortie <acronym>CSV</acronym> (Comma-Separated Values)
      Ceci est équivalent à <command>\pset format csv</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-d <replaceable
      class="parameter">nombase</replaceable></option></term>
    <term><option>--dbname=<replaceable
      class="parameter">nombase</replaceable></option></term>
    <listitem>
     <para>
      Indique le nom de la base de données où se connecter. Ceci est
      équivalent à spécifier <replaceable
      class="parameter">nombase</replaceable> comme premier argument de la
      ligne de commande qui n'est pas une option. Le nom de la base,
      <replaceable>dbname</replaceable>, peut être remplacé par une <link
      linkend="libpq-connstring">chaîne de connexion</link>. Dans ce cas, les
      paramètres de la chaîne de connexion surchargeront toutes les options en
      ligne de commande conflictuelles.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-e</option></term>
    <term><option>--echo-queries</option></term>
    <listitem>
     <para>
      Copie toutes les commandes SQL envoyées au serveur aussi sur la sortie
      standard. Ceci est équivalent à initialiser la variable
      <varname>ECHO</varname> à <literal>queries</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-E</option></term>
    <term><option>--echo-hidden</option></term>
    <listitem>
     <para>
      Affiche les requêtes réelles générées par <command>\d</command> et autres
      commandes antislash. Vous pouvez utiliser ceci pour étudier les
      opérations internes de <application>psql</application>. Ceci est
      équivalent à initialiser la variable <varname>ECHO_HIDDEN</varname>
      à <literal>on</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-f <replaceable
      class="parameter">nomfichier</replaceable></option></term>
    <term><option>--file=<replaceable
      class="parameter">nomfichier</replaceable></option></term>
    <listitem>
     <para>
      Lit les commandes à partir du fichier <replaceable
      class="parameter">nomfichier</replaceable>, plutôt que l'entrée
      standard. Cette option peut être répétée et combinée dans tout ordre
      avec l'option <option>-c</option>. Quand ni <option>-c</option> ni
      <option>-f</option> n'est indiquée, <application>psql</application> ne
      lit pas les commandes à partir de l'entrée standard&nbsp;; à la place,
      il termine après avoir traité toutes les options <option>-c</option> et
      <option>-f</option> dans la séquence indiquée. En dehors de ça, cette
      option est fortement équivalente à la métacommande
      <command>\i</command>.
     </para>

     <para>
      Si <replaceable>nomfichier</replaceable> est un <literal>-</literal>
      (tiret), alors l'entrée standard est lue jusqu'à la détection d'une fin
      de fichier ou de la métacommande <command>\q</command>. Ceci peut être
      utilisé pour intercaler une saisie interactive entre des entrées depuis
      des fichiers. Néanmoins,
      notez que Readline n'est pas utilisé dans ce cas (un peu comme si
      <option>-n</option> a été précisé).
     </para>

     <para>
      Utiliser cette option est légèrement différent d'écrire <literal>psql
       &lt; <replaceable class="parameter">nomfichier</replaceable></literal>. En
      général, les deux feront ce que vous souhaitez, mais utiliser
      <literal>-f</literal> active certaines fonctionnalités intéressantes
      comme les messages d'erreur avec les numéros de ligne. Il y a aussi une
      petite chance qu'utiliser cette option réduira la charge au démarrage.
      D'un autre côté, la variante utilisant la redirection de l'entrée du shell
      doit (en théorie) pour ramener exactement le même affichage que
      celui que vous auriez eu en saisissant tout manuellement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-F <replaceable
      class="parameter">séparateur</replaceable></option></term>
    <term><option>--field-separator=<replaceable
      class="parameter">séparateur</replaceable></option></term>
    <listitem>
     <para>
      Utilisez <replaceable class="parameter">séparateur</replaceable> comme
      champ séparateur pour un affichage non aligné. Ceci est équivalent à
      <command>\pset fieldsep</command> ou <command>\f</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-h <replaceable
      class="parameter">nomhôte</replaceable></option></term>
    <term><option>--host=<replaceable
      class="parameter">nomhôte</replaceable></option></term>
    <listitem>
     <para>
      Indique le nom d'hôte de la machine sur lequel le serveur est en cours
      d'exécution. Si la valeur commence avec un slash, elle est utilisée comme
      répertoire du socket de domaine Unix.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-H</option></term>
    <term><option>--html</option></term>
    <listitem>
     <para>
      Bascule en affichage <acronym>HTML</acronym>. Ceci est
      équivalent à <literal>\pset format html</literal> ou à la commande
      <command>\H</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-l</option></term>
    <term><option>--list</option></term>
    <listitem>
     <para>
      Liste toutes les bases de données disponibles puis quitte. Les autres
      options non relatives à la connexion sont ignorées. Ceci est similaire
      à la métacommande <command>\list</command>.
     </para>

     <para>
      Quand cette option est utilisée, <application>psql</application> se
      connectera à la base de données <literal>postgres</literal>, sauf si une
      base de données différente est nommée sur la ligne de commande (via
      l'option <option>-d</option>, via le dernier argument de la ligne de
      commande, via l'enregistrement du service, mais pas via une variable
      d'environnement).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-L <replaceable class="parameter">nomfichier</replaceable></option></term>
    <term><option>--log-file=<replaceable class="parameter">nomfichier</replaceable></option></term>
    <listitem>
     <para>
      Écrit tous les résultats des requêtes dans le fichier <replaceable
      class="parameter">nomfichier</replaceable> en plus de la destination
      habituelle.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-n</option></term>
    <term><option>--no-readline</option></term>
    <listitem>
     <para>
      N'utilise pas <application>Readline</application> pour l'édition de ligne
      et n'utilise pas l'historique des commandes. Ceci est utile quand on
      veut désactiver la gestion de la tabulation quand on copie/colle.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-o <replaceable
      class="parameter">nomfichier</replaceable></option></term>
    <term><option>--output=<replaceable
      class="parameter">nomfichier</replaceable></option></term>
    <listitem>
     <para>
      Dirige tous les affichages de requêtes dans le fichier <replaceable
      class="parameter">nomfichier</replaceable>. Ceci est équivalent à la
      commande <command>\o</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
    <term><option>--port=<replaceable class="parameter">port</replaceable></option></term>
    <listitem>
     <para>
      Indique le port TCP ou l'extension du fichier socket de domaine local
      Unix sur lequel le serveur attend les connexions. Par défaut, il s'agit de
      la valeur de la variable d'environnement <envar>PGPORT</envar> ou, si elle
      n'est pas initialisée, le port spécifié au moment de la compilation,
      habituellement 5432.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-P <replaceable
      class="parameter">affectation</replaceable></option></term>
    <term><option>--pset=<replaceable
      class="parameter">affectation</replaceable></option></term>
    <listitem>
     <para>
      Vous permet de spécifier les options d'affichage dans le style de
      <command>\pset</command> sur la ligne de commande. Notez que, ici, vous
      devez séparer nom et valeur avec un signe égal au lieu d'un espace. Du
      coup, pour initialiser le format d'affichage en
      <application>LaTeX</application>, vous devez écrire
      <literal>-P format=latex</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-q</option></term>
    <term><option>--quiet</option></term>
    <listitem>
     <para>
      Indique que <application>psql</application> doit travailler
      silencieusement. Par défaut, il affiche des messages de bienvenue et
      diverses informations. Si cette option est utilisée, rien de ceci
      n'est affiché. C'est utile avec l'option <option>-c</option>. Ceci est
      équivalent à configurer la variable <varname>QUIET</varname> à
      <literal>on</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-R <replaceable
      class="parameter">séparateur</replaceable></option></term>
    <term><option>--record-separator=<replaceable
      class="parameter">séparateur</replaceable></option></term>
    <listitem>
     <para>
      Utilisez <replaceable class="parameter">séparateur</replaceable> comme
      séparateur d'enregistrement pour un affichage non aligné. Ceci est
      équivalent à <command>\pset recordsep</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-s</option></term>
    <term><option>--single-step</option></term>
    <listitem>
     <para>
      S'exécute en mode étape par étape. Ceci signifie qu'une
      intervention de l'utilisateur est nécessaire avant l'envoi de chaque
      commande au serveur, avec une option pour annuler l'exécution. Utilisez
      cette option pour déboguer des scripts.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-S</option></term>
    <term><option>--single-line</option></term>
    <listitem>
     <para>
      S'exécute en mode simple ligne, où un retour à la ligne termine une
      commande SQL, de la même façon qu'un point-virgule.
     </para>

     <note>
      <para>
       Ce mode est fourni pour ceux qui insistent pour l'avoir, mais vous
       n'êtes pas nécessairement encouragé à l'utiliser. En particulier,
       si vous mixez <acronym>SQL</acronym> et métacommandes sur une ligne,
       l'ordre d'exécution peut ne pas être toujours clair pour
       un utilisateur inexpérimenté.
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-t</option></term>
    <term><option>--tuples-only</option></term>
    <listitem>
     <para>
      Désactive l'affichage des noms de colonnes, le pied de page
      contenant le nombre de résultats, etc. Ceci est équivalent à la
      métacommande <command>\t</command> ou à
      <command>\pset tuples_only</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-T <replaceable
      class="parameter">options_table</replaceable></option></term>
    <term><option>--table-attr=<replaceable
      class="parameter">options_table</replaceable></option></term>
    <listitem>
     <para>
      Indique les options à placer à l'intérieur d'une balise
      <sgmltag>table</sgmltag> en <acronym>HTML</acronym>. Voir
      <command>\pset tableattr</command> pour plus de détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-U <replaceable
      class="parameter">nomutilisateur</replaceable></option></term>
    <term><option>--username=<replaceable
      class="parameter">nomutilisateur</replaceable></option></term>
    <listitem>
     <para>
      Se connecte à la base de données en tant que l'utilisateur <replaceable
      class="parameter">nomutilisateur</replaceable> au lieu de celui par
      défaut. (Vous devez aussi avoir le droit de le faire, bien sûr.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-v <replaceable
      class="parameter">affectation</replaceable></option></term>
    <term><option>--set=<replaceable
      class="parameter">affectation</replaceable></option></term>
    <term><option>--variable=<replaceable
      class="parameter">affectation</replaceable></option></term>
    <listitem>
     <para>
      Réalise une affectation de variable, comme la métacommande
      <command>\set</command>. Notez que vous devez séparer le nom et la valeur,
      s'il y en a une, par
      un signe égal sur la ligne de commande. Pour désinitialiser une variable,
      enlevez le signe d'égalité. Pour initialiser une variable avec une valeur
      vide, utilisez le signe égal sans passer de valeur. Ces affectations
      sont réalisées lors du traitement de la ligne de commande, du coup les
      variables reflétant l'état de la connexion seront écrasées plus
      tard.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-V</option></term>
    <term><option>--version</option></term>
    <listitem>
     <para>
      Affiche la version de <application>psql</application> et quitte.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-w</option></term>
    <term><option>--no-password</option></term>
    <listitem>
     <para>
      Ne demande jamais un mot de passe. Si le serveur en réclame un pour
      l'authentification et qu'un mot de passe n'est pas disponible d'une autre
      façon (par exemple avec le fichier <filename>.pgpass</filename>), la
      tentative de connexion échouera. Cette option peut être utile pour les
      scripts où aucun utilisateur n'est présent pour saisir un mot de passe.
     </para>

     <para>
      Notez que cette option restera positionnée pour l'ensemble de la session,
      et qu'elle affecte aussi l'utilisation de la métacommande
      <command>\connect</command> en plus de la tentative de connexion
      initiale.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-W</option></term>
    <term><option>--password</option></term>
    <listitem>
     <para>
      Force <application>psql</application> à demander un mot de
      passe avant de se connecter à une base de données, même si
      le mot de passe ne sera pas utilisé.
     </para>

     <para>
      Si le serveur requiert une authentification par mot de passe et qu'un
      mot de passe n'est pas disponible par d'autres sources que le fichier
      <filename>.pgpass</filename>, <application>psql</application> demandera
      un mot de passe. Néanmoins, <application>psql</application> perdra une
      tentative de connexion pour trouver que le serveur veut un mot de passe.
      Dans certains cas, il est préférable d'ajouter l'option
      <option>-W</option> pour éviter la tentative de connexion.
     </para>

     <para>
      Notez que cette option sera conservée pour la session entière,
      et que du coup elle affecte l'utilisation de la métacommande
      <command>\connect</command> ainsi que la tentative de connexion
      initiale.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-x</option></term>
    <term><option>--expanded</option></term>
    <listitem>
     <para>
      Active le mode de formatage de table étendu. Ceci est équivalent à
      <command>\x</command> ou <command>\pset expanded</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-X,</option></term>
    <term><option>--no-psqlrc</option></term>
    <listitem>
     <para>
      Ne lit pas le fichier de démarrage (ni le fichier système
      <filename>psqlrc</filename> ni le <filename>~/.psqlrc</filename>
      de l'utilisateur).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-z</option></term>
    <term><option>--field-separator-zero</option></term>
    <listitem>
     <para>
      Configure le séparateur de champs pour une sortie non alignée avec un
      octet zéro. Ceci est équivalent à <command>\pset fieldsep_zero</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-0</option></term>
    <term><option>--record-separator-zero</option></term>
    <listitem>
     <para>
      Configure le séparateur d'enregistrement pour une sortie non alignée avec
      un octet zéro. C'est intéressant pour l'interfacer avec
      <literal>xargs -0</literal>. Ceci est équivalent à <command>\pset
       recordsep_zero</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-1</option></term>
    <term><option>--single-transaction</option></term>
    <listitem>
     <para>
      Cette option peut seulement être utilisée en combinaison avec une ou
      plusieurs options <option>-c</option> et/ou <option>-f</option>. Cela
      force <application>psql</application> à exécuter une commande
      <command>BEGIN</command> avant la première option de ce type et une
      commande <command>COMMIT</command> après la dernière, englobant la
      totalité des commandes dans une seule transaction. Ceci garantit que soit
      toutes les commandes réussissent, soit aucun changement n'est appliqué.
     </para>

     <para>
      Si les commandes elles-mêmes contiennent <command>BEGIN</command>,
      <command>COMMIT</command> ou <command>ROLLBACK</command>, cette option
      n'aura pas les effets désirés. De plus, si une commande en particulier ne
      peut pas être exécutée à l'intérieur d'un bloc de transaction, indiquer
      cette option causera l'échec de toute la transaction.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>-?</option></term>
    <term><option>--help[=<replaceable class="parameter">thème</replaceable>]</option></term>
    <listitem>
     <para>
      Affiche de l'aide sur <application>psql</application> puis quitte. Le
      paramètre optionnel <replaceable class="parameter">thème</replaceable>
      (par défaut à <literal>options</literal>) sélectionne les parties de
      <application>psql</application> à expliquer&nbsp;:
      <literal>commands</literal> décrit les métacommandes de
      <application>psql</application>&nbsp;; <literal>options</literal> décrit
      les options en ligne de commande de
      <application>psql</application>&nbsp;; et <literal>variables</literal>
      affiche de l'aide sur les variables de configuration de
      <application>psql</application>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>


 <refsect1>
  <title>Code de sortie</title>

  <para>
   <application>psql</application> renvoie 0 au shell s'il s'est terminé
   normalement, 1 s'il y a eu une erreur fatale de son fait (par exemple&nbsp;:
   pas assez de mémoire, fichier introuvable), 2 si la connexion au serveur
   s'est interrompue et que la session n'était pas interactive,
   3 si une erreur est survenue dans un script et si la variable
   <varname>ON_ERROR_STOP</varname> était positionnée.
  </para>
 </refsect1>


 <refsect1>
  <title>Usage</title>

  <refsect2 id="r2-app-psql-connecting">
   <title>Se connecter à une base de données</title>

   <para>
    <application>psql</application> est une application client
    <productname>PostgreSQL</productname> standard. Pour se connecter à une
    base de données, vous devez connaître le nom de votre base de
    données cible, le nom de l'hôte et le numéro de port du serveur ainsi que le
    nom de l'utilisateur sous lequel vous voulez vous connecter.
    On peut indiquer ces paramètres à <application>psql</application> à partir
    d'options en ligne de commande, respectivement
    <option>-d</option>, <option>-h</option>, <option>-p</option> et
    <option>-U</option>. Si un argument est rencontré qui ne correspond à
    aucune option, il sera interprété comme le nom de la base de données
    (ou le nom de l'utilisateur si le nom de la base de données est déjà donné).
    Toutes ces options ne sont pas requises, il y a des valeurs par défaut
    convenables. Si vous omettez le nom de l'hôte,
    <application>psql</application> se connectera via un
    socket de domaine Unix à un serveur sur l'hôte local, ou par TCP/IP sur
    <literal>localhost</literal> pour les machines qui n'ont pas de sockets
    de domaine Unix. Le numéro de port par
    défaut est déterminé au moment de la compilation. Comme le serveur de bases
    de données utilise la même valeur par défaut, vous n'aurez pas besoin de
    spécifier le port dans la plupart des cas. Le nom de l'utilisateur par
    défaut est votre nom d'utilisateur pour le système d'exploitation,
    de même pour le nom de la base de
    données par défaut. Notez que vous ne pouvez pas simplement vous connecter à
    n'importe quelle base de données avec n'importe quel nom d'utilisateur. Votre
    administrateur de bases de données doit vous avoir informé de vos droits
    d'accès.
   </para>

   <para>
    Quand les valeurs par défaut ne sont pas idéales, vous pouvez vous
    épargner de la frappe en configurant les variables d'environnement
    <envar>PGDATABASE</envar>, <envar>PGHOST</envar>, <envar>PGPORT</envar>
    et/ou <envar>PGUSER</envar> avec les valeurs appropriées (pour les variables
    d'environnement supplémentaires, voir <xref linkend="libpq-envars"/>). Il
    est aussi pratique d'avoir un fichier <filename>~/.pgpass</filename> pour
    éviter d'avoir régulièrement à saisir les mots de passe. Voir <xref
    linkend="libpq-pgpass"/> pour plus d'informations.
   </para>

   <para>
    Une autre façon d'indiquer les paramètres de connexion est dans une chaîne
    <parameter>conninfo</parameter> ou une <acronym>URI</acronym> qui est
    utilisée à la place du nom d'une
    base de données. Ce mécanisme vous donne un grand contrôle sur la
    connexion. Par exemple&nbsp;:
    <programlisting>
$ <userinput>psql "service=monservice sslmode=require"</userinput>
$ <userinput>psql postgresql://dbmaster:5433/mydb?sslmode=require</userinput>
    </programlisting>
    De cette façon, vous pouvez aussi utiliser <acronym>LDAP</acronym> pour
    la recherche de paramètres de connexion, comme décrit dans
    <xref linkend="libpq-ldap"/>. Voir <xref linkend="libpq-paramkeywords"/>
    pour plus d'informations sur toutes les options de connexion disponibles.
   </para>

   <para>
    Si la connexion ne peut pas se faire, quelle qu'en soit la raison
    (c'est-à-dire droits non suffisants, serveur arrêté sur l'hôte cible, etc.),
    <application>psql</application> renverra une erreur et s'arrêtera.
   </para>

   <para>
    Si l'entrée et la sortie standard correspondent à
    un terminal, alors <application>psql</application> fixe le paramètre
    d'encodage client à la valeur <quote>auto</quote>, afin de pouvoir
    détecter l'encodage approprié d'après les paramètres régionaux (définis
    par la variable système <envar>LC_CTYPE</envar> pour les systèmes
    Unix).
    Si cela ne fonctionne pas comme attendu, il est possible de forcer
    l'encodage du client en renseignant la variable d'environnement
    <envar>PGCLIENTENCODING</envar>.
   </para>
  </refsect2>

  <refsect2 id="r2-app-psql-4">
   <title>Saisir des commandes SQL</title>

   <para>
    Dans le cas normal, <application>psql</application> fournit une invite avec
    le nom de la base de données sur laquelle <application>psql</application>
    est connecté suivi par la chaîne <literal>=&gt;</literal>. Par exemple&nbsp;
    <programlisting>$ <userinput>psql basetest</userinput>
psql (&version;)
Type "help" for help.

basetest=&gt;
    </programlisting>
   </para>

   <para>
    À l'invite l'utilisateur peut saisir des commandes <acronym>SQL</acronym>.
    Ordinairement, les lignes en entrée sont envoyées vers le serveur quand un
    point-virgule de fin de commande est saisi. Une fin de ligne ne termine pas
    une commande. Du coup, les commandes peuvent être saisies sur plusieurs
    lignes pour plus de clarté. Si la commande a été envoyée et exécutée sans
    erreur, ses résultats sont affichés sur l'écran.
   </para>

   <para>
    Si des utilisateurs en qui vous n'avez pas confiance ont accès à une base
    qui n'a pas adopté la
    <link linkend="ddl-schemas-patterns">méthode sécurisée d'utilisation
     des schémas</link>, démarrez votre session en supprimant de votre
    <varname>search_path</varname> les schémas ouverts en écriture au public.
    On peut ajouter <literal>options=-csearch_path=</literal> à la chaîne de
    connexion ou exécuter
    <literal>SELECT pg_catalog.set_config('search_path', '', false)</literal>
    avant toute autre commande SQL. Cette considération n'est pas propre à
    <application>psql</application>&nbsp;; elle s'applique à chaque interface qui
    exécute des commandes SQL quelconques.
   </para>

   <para>
    À chaque fois qu'une commande est exécutée, <application>psql</application>
    vérifie aussi les événements de notification générés par
    <xref linkend="sql-listen"/> et
    <xref linkend="sql-notify"/>.
   </para>

   <para>
    Alors que les blocs de commentaire de type C sont transmis au serveur pour
    traitement et suppression, les commentaires au standard SQL sont supprimés
    par <application>psql</application>.
   </para>
  </refsect2>

  <refsect2 id="app-psql-meta-commands">
   <title>Métacommandes</title>

   <para>
    Tout ce que vous saisissez dans <application>psql</application> qui
    commence par un antislash non échappé est une métacommande
    <application>psql</application>, traitée par
    <application>psql</application> lui-même. Ces commandes aident à rendre
    <application>psql</application> plus utile pour l'administration ou pour
    l'écriture de scripts. Les métacommandes sont plus souvent appelées les
    commandes slash ou antislash.
   </para>

   <para>
    Le format d'une commande <application>psql</application> est l'antislash
    suivi immédiatement d'un verbe de commande et de ses arguments. Les
    arguments sont séparés du verbe de la commande et les uns des autres par
    un nombre illimité d'espaces blancs.
   </para>

   <para>
    Pour inclure des espaces blancs dans un argument, vous pouvez le mettre
    entre des guillemets simples. Pour inclure un guillemet simple dans un
    argument, vous devez écrire deux guillemets simples dans un texte compris
    entre guillemets simples. Tout ce qui est contenu dans des guillemets
    simples est sujet aux substitutions du style langage C&nbsp;:
    <literal>\n</literal> (nouvelle ligne), <literal>\t</literal> (tabulation),
    <literal>\b</literal> (retour arrière), <literal>\r</literal> (retour
    chariot), <literal>\f</literal> (saut de page),
    <literal>\</literal><replaceable>chiffres</replaceable> (octal), and
    <literal>\x</literal><replaceable>chiffres</replaceable> (hexadécimal).
    Un antislash précédant tout autre caractère dans une chaîne entre guillemets
    reproduit ce caractère, quel qu'il soit.
   </para>

   <para>
    Si un deux-points sans guillemets (<literal>:</literal>) suivi d'un nom
    de variable <application>psql</application> apparaît dans un argument,
    il est remplacé par la valeur de la variable, comme décrit dans <xref
    linkend="app-psql-interpolation"/>.
    Les formes <literal>:'<replaceable>variable_name</replaceable>'</literal> et
    <literal>:"<replaceable>variable_name</replaceable>"</literal> décrites ici
    fonctionnent également. La syntaxe
    <literal>:{?<replaceable>variable_name</replaceable>}</literal> permet de
    tester si une variable est définie. Elle est substituée par TRUE ou FALSE.
    Échapper le symbole deux-points avec un antislash le protège de la
    substitution.
   </para>

   <para>
    Dans un argument, le texte entre des guillemets inverses
    (<literal>`</literal>) est pris comme une ligne de commande, qui est passée
    au shell. La sortie de la commande (dont tous les retours à la ligne sont
    supprimés) remplace le texte entre guillemets inverses.
    Dans le texte à l'intérieur des guillemets inverses, ne se déroule
    ni échappement ni autre traitement, à l'exception de
    <literal>:<replaceable>variable_name</replaceable></literal> où
    <replaceable>variable_name</replaceable> est une
    variable <application>psql</application>, qui sera remplacée par sa valeur.
    De plus, les occurences de
    <literal>:'<replaceable>variable_name</replaceable>'</literal>  sont
    remplacées par la valeur de la variable correctement échappée pour devenir
    un unique argument de commande shell (cette dernière forme est presque
    toujours préférable, sauf à être absolument sûr du contenu de la
    variable). Comme les caractères retour chariot et saut de ligne ne
    peuvent être échappés correctement sur toutes les plateformes, la
    forme <literal>:'<replaceable>variable_name</replaceable>'</literal> renvoie
    un message d'erreur et ne remplace pas la valeur de la variable quand ces
    caractères sont présents dans la valeur.
   </para>

   <para>
    Quelques commandes prennent un identifiant <acronym>SQL</acronym> (comme un
    nom de table) en argument. Ces arguments suivent les règles de la syntaxe
    <acronym>SQL</acronym>&nbsp;: les lettres sans guillemets sont forcées en
    minuscule alors que les guillemets doubles (<literal>"</literal>) protègent les
    lettres de la conversion de casse et autorisent l'incorporation d'espaces
    blancs dans l'identifiant. À l'intérieur des guillemets doubles, les
    guillemets doubles en paire se réduisent à un seul guillemet double dans le nom
    résultant. Par exemple, <literal>FOO"BAR"BAZ</literal> est interprété comme
    <literal>fooBARbaz</literal> et <literal>"Un nom ""bizarre"</literal> devient
    <literal>Un nom "bizarre</literal>.
   </para>

   <para>
    L'analyse des arguments se termine à la fin de la ligne ou quand un autre
    antislash non entre guillemets est rencontré. Un antislash non entre
    guillemets est pris pour le début d'une nouvelle
    métacommande. La séquence spéciale <literal>\\</literal> (deux antislashes)
    marque la fin des arguments et continue l'analyse des commandes
    <acronym>SQL</acronym>, si elles existent. De cette façon, les commandes
    <acronym>SQL</acronym> et <application>psql</application> peuvent être
    mixées librement sur une ligne. Mais dans tous les cas, les arguments d'une
    métacommande ne peuvent pas continuer après la fin de la ligne.
   </para>

   <para>
    De nombreuses métacommandes utilisent le <firstterm>buffer de la requête actuelle</firstterm>.
    Ce buffer contient simplement le texte de la commande SQL qui a été écrite
    mais pas encore envoyée au serveur pour exécution. Cela comprendra les
    lignes saisies précédentes ainsi que tout texte présent avant la
    métacommande de la même ligne.
   </para>

   <para>
    Les métacommandes suivantes sont définies&nbsp;:

    <variablelist>
     <varlistentry>
      <term><literal>\a</literal></term>
      <listitem>
       <para>
        Si le format d'affichage de table actuel est non aligné, il est
        basculé à aligné. S'il n'est pas non aligné, il devient non aligné.
        Cette commande est conservée pour des raisons de compatibilité. Voir
        <command>\pset</command> pour une solution plus générale.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\c</literal> ou <literal>\connect [ -reuse-previous=<replaceable class="parameter">on|off</replaceable> ] [ <replaceable class="parameter">nom_base</replaceable> [ <replaceable class="parameter">nom_utilisateur</replaceable> ] [ <replaceable class="parameter">hôte</replaceable> ] [ <replaceable class="parameter">port</replaceable> ] | <replaceable class="parameter">conninfo</replaceable> ]</literal></term>

      <listitem>
       <para>
        Établit une nouvelle connexion à un serveur
        <productname>PostgreSQL</productname>. Les paramètres de connexion
        utilisés peuvent être spécifiés en utilisant soit la syntaxe par
        position (une ou plusieurs parmi le nom de la base, le nom de
        l'utilisateur, l'hôte et le port) soit une chaîne de connexion
        <literal>conninfo</literal> telle qu'elle est détaillée dans <xref
        linkend="libpq-connstring"/>. Si aucun argument n'est donné, une
        nouvelle connexion est réalisée en utilisant les mêmes paramètres
        qu'auparavant.
       </para>

       <para>
        Utiliser <literal>-</literal> comme valeur d'un des paramètres
        <replaceable class="parameter">nom_base</replaceable>, <replaceable
        class="parameter">nom_utilisateur</replaceable>, <replaceable
        class="parameter">hôte</replaceable> ou <replaceable
        class="parameter">port</replaceable> est équivalent à l'omission de ce
        paramètre.
       </para>

       <para>
        La nouvelle connexion peut réutiliser les paramètres de connexion de
        la précédente connexion&nbsp;; non seulement le nom de la base, de
        l'utilisateur, l'hôte et le port, mais aussi les autres paramètres
        tels que <replaceable>sslmode</replaceable>. Par défaut, les
        paramètres sont ré-utilisés dans la syntaxe par position, mais pas
        quand une chaîne de connexion <replaceable>conninfo</replaceable> est
        donnée. Passer en premier argument
        <literal>-reuse-previous=on</literal> ou
        <literal>-reuse-previous=off</literal> surcharge ce comportement par
        défaut. Si les paramètres sont ré-utilisés, alors tout paramètre non
        spécifié explicitement comme un paramètre de position ou dans une
        chaîne de connexion <replaceable>conninfo</replaceable> est pris dans
        les paramètres de la connexion existante. Une exception concerne le
        changement du paramètre <replaceable>host</replaceable> de sa valeur
        précédente utilisant la syntaxe par position, et tout paramétrage de
        <replaceable>hostaddr</replaceable> présent dans les paramètres de la
        connexion existant est supprimé. Quand la commande ne spécifie pas ou
        ne réutilise pas une paramètre particulier, sa valeur
        <application>libpq</application> par défaut est utilisé.
       </para>

       <para>
        Si la nouvelle connexion est réussie, la connexion précédente est
        fermée. Si la tentative de connexion échoue (mauvais nom d'utilisateur,
        accès refusé, etc.), la connexion précédente est conservée si
        <application>psql</application> est en mode interactif. Lors de
        l'exécution d'un script non interactif, le traitement s'arrêtera
        immédiatement avec une erreur. Cette distinction a été choisie d'une
        part comme facilité pour l'utilisateur confronté aux fautes de frappe,
        d'autre part en tant que sécurité pour que des scripts n'agissent pas
        par erreur sur la mauvaise base de données.
       </para>

       <para>
        Exemples&nbsp;:
       </para>
       <programlisting>
=&gt; \c mydb myuser host.dom 6432
=&gt; \c service=foo
=&gt; \c "host=localhost port=5432 dbname=mydb connect_timeout=10 sslmode=disable"
=&gt; \c -reuse-previous=on sslmode=require    -- change uniquement sslmode
=&gt; \c postgresql://tom@localhost/mydb?application_name=myapp
       </programlisting>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\C [ <replaceable
        class="parameter">titre</replaceable> ]</literal></term>
      <listitem>
       <para>
        Initialise ou supprime le titre des tables affichées en
        résultat d'une requête. Cette commande
        est équivalente à <literal>\pset title <replaceable
         class="parameter">titre</replaceable></literal>. (Le nom de cette
        commande provient de <quote>caption</quote>, car elle avait précédemment
        pour seul but d'initialiser l'en-tête dans une table
        <acronym>HTML</acronym>.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\cd [ <replaceable>répertoire</replaceable> ]</literal></term>
      <listitem>
       <para>
        Change le répertoire courant en
        <replaceable>répertoire</replaceable>. Sans argument, le
        répertoire personnel de l'utilisateur devient le répertoire courant.
       </para>

       <tip>
        <para>
         Pour afficher votre répertoire courant, utilisez
         <literal>\! pwd</literal>.
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\conninfo</literal></term>
      <listitem>
       <para>
        Affiche des informations sur la connexion en cours à la base de données.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="app-psql-meta-commands-copy">
      <term><literal>\copy { <replaceable class="parameter">table</replaceable> [ ( <replaceable class="parameter">liste_colonnes</replaceable> ) ] }
        <literal>from</literal>
        { <replaceable class="parameter">'nomfichier'</replaceable> | program <replaceable class="parameter">'commande'</replaceable> | stdin | pstdin }
        [ [ with ] ( <replaceable class="parameter">option</replaceable> [, ...] ) ]
        [ where <replaceable class="parameter">condition</replaceable> ]</literal></term>

      <term><literal>\copy { <replaceable class="parameter">table</replaceable> [ ( <replaceable class="parameter">liste_colonnes</replaceable> ) ] | ( <replaceable class="parameter">requête</replaceable> ) }
        <literal>to</literal>
        { <replaceable class="parameter">'nomfichier'</replaceable> | program <replaceable class="parameter">'commande'</replaceable> | stdout | pstdout }
        [ [ with ] ( <replaceable class="parameter">option</replaceable> [, ...] ) ]</literal></term>

      <listitem>
       <para>
        Réalise une opération de copie côté client. C'est une opération qui
        exécute une commande <acronym>SQL</acronym>, <xref linkend="sql-copy"/>,
        mais au lieu que le serveur lise ou écrive le
        fichier spécifié, <application>psql</application> lit ou écrit le
        fichier en faisant le routage des données entre le serveur et le système
        de fichiers local. Ceci signifie que l'accès et les droits du fichier
        sont ceux de l'utilisateur local, pas celui du serveur, et qu'aucun
        droit de superutilisateur n'est requis.
       </para>

       <para>
        Quand la clause <literal>program</literal> est présente,
        <replaceable class="parameter">commande</replaceable> est exécuté par
        <application>psql</application> et les données provenant ou fournies à
        <replaceable class="parameter">commande</replaceable> sont routées entre
        le serveur et le client. Encore une fois, les droits d'exécution sont
        ceux de l'utilisateur local, et non du serveur, et les droits
        superutilisateur ne sont pas nécessaires.
       </para>

       <para>
        Pour <literal>\copy ... from stdin</literal>, les lignes de données
        sont lues depuis la même source qui a exécuté la commande, continuant
        jusqu'à ce que <literal>\.</literal> soit lu ou que le flux atteigne
        <acronym>EOF</acronym>. Cette option est utile pour remplir des tables
        depuis les scripts SQL même.
        Pour <literal>\copy ... to stdout</literal>, la sortie est envoyée au
        même endroit que la sortie des commandes<application>psql</application>,
        et le statut de la commande <literal>COPY <replaceable>count
         </replaceable></literal> n'est pas affiché (puisqu'il pourrait être
        confondu avec une ligne de données).
        Pour lire et écrire sur les entrées et sorties de <application>psql
        </application> sans prendre en compte la source de commande courante ou
        l'option <literal>\o</literal>, écrivez
        <literal>from pstdin</literal> ou <literal>to pstdout</literal>.
       </para>

       <para>
        La syntaxe de cette commande est similaire à celle de la commande
        <acronym>SQL</acronym> <xref linkend="sql-copy"/>.
        Toutes les options autres que les source/destination des données sont
        spécifié comme pour <xref linkend="sql-copy"/>.
        À cause de cela, des règles spéciales d'analyse sont appliquées à la
        métacommande <command>\copy</command>. Contrairement à la majorité des
        autres métacommandes, l'intégralité du reste de la ligne est toujours
        pris en compte en tant qu'arguments de <command>\copy</command>,
        et ni l'interpolation des variables ni la substitution par guillemets
        inverses ne seront effectuées sur les arguments.
       </para>

       <tip>
        <para>
         Une autre façon d'obtenir le même résultat que <literal>\copy ...
          to</literal> est d'utiliser la commande <acronym>SQL</acronym>
         <literal>COPY ... TO STDOUT</literal> et de la finir avec <literal>\g
          <replaceable>nom_fichier</replaceable></literal> ou <literal>\g
          |<replaceable>programme</replaceable></literal>. Contrairement à
         <literal>\copy</literal>, cette méthode permet à la commande d'aller
         sur plusieurs lignes. De plus, l'interpolation de variable et
         l'expansion des guillemets inverses peuvent être utilisées.
        </para>
       </tip>

       <tip>
        <para>
         Ces opérations ne sont pas aussi efficaces que la commande
         <acronym>SQL</acronym> <command>COPY</command> avec un fichier ou
         avec les données fournies pour/par un programme car toutes les
         données doivent passer via la connexion client/serveur. Pour les
         grandes quantités de données, la commande <acronym>SQL</acronym>
         pourrait être préférable.
        </para>
       </tip>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\copyright</literal></term>
      <listitem>
       <para>
        Affiche le copyright et les termes de distribution de
        <productname>PostgreSQL</productname>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="app-psql-meta-commands-crosstabview">
      <term><literal>\crosstabview [
        <replaceable class="parameter">colV</replaceable>
        [ <replaceable class="parameter">colH</replaceable>
        [ <replaceable class="parameter">colD</replaceable>
        [ <replaceable class="parameter">sortcolH</replaceable>
        ] ] ] ] </literal></term>
      <listitem>
       <para>
        Exécute le tampon de requête actuel (tout comme <literal>\g</literal>)
        et affiche le résultat dans un tableau croisé. La requête doit
        renvoyer au moins trois colonnes. La colonne en sortie identifiée par
        <replaceable class="parameter">colV</replaceable> devient l'en-tête
        vertical et la colonne en sortie identifiée par <replaceable
        class="parameter">colH</replaceable> devient l'en-tête horizontal.
        <replaceable class="parameter">colD</replaceable> identifie la colonne
        en sortie à afficher à l'intérieur de la grille. <replaceable
        class="parameter">sortcolH</replaceable> identifie une colonne
        optionnelle de tri pour l'en-tête horizontal.
       </para>

       <para>
        Chaque spécification de colonne peut être un numéro de colonne (en
        commençant à 1) ou un nom de colonne. Les règles SQL habituelles de
        casse et de guillemet s'appliquent aux noms de colonne. En cas
        d'omission, la colonne 1 est utilisée pour <replaceable
        class="parameter">colV</replaceable> et la colonne 2 est utilisée pour
        <replaceable class="parameter">colH</replaceable>. <replaceable
        class="parameter">colH</replaceable> doit différer de <replaceable
        class="parameter">colV</replaceable>. Si <replaceable
        class="parameter">colD</replaceable> n'est pas indiqué, alors il doit
        y avoir exactement trois colonnes dans le résultat de la requête et la
        colonne qui n'est ni <replaceable class="parameter">colV</replaceable>
        ni <replaceable class="parameter">colH</replaceable> est utilisée pour
        <replaceable class="parameter">colD</replaceable>.
       </para>

       <para>
        L'en-tête vertical, affiché comme colonne la plus à gauche, contient les valeurs
        trouvées dans la colonne <replaceable class="parameter">colV</replaceable>, dans
        le même ordre que dans les résultats de la requête, mais sans les duplicats.
       </para>

       <para>
        L'en-tête horizontal, affiché comme la première ligne, contient les valeurs
        trouvées dans la colonne <replaceable class="parameter">colH</replaceable>,
        sans duplicats. Par défaut, ils apparaissent dans le même ordre que les
        résultats de la requête. Mais si l'argument optionnel
        <replaceable class="parameter">sortcolH</replaceable> est renseigné, il
        identifie une colonne dont les valeurs doivent être des entiers et les
        valeurs provenant de <replaceable class="parameter">colH</replaceable>
        apparaîtront dans l'en-tête horizontal trié suivant les valeurs correspondantes
        de <replaceable class="parameter">sortcolH</replaceable>.
       </para>

       <para>
        À l'intérieur du tableau croisé, pour chaque valeur
        <literal>x</literal> distincte de <replaceable
        class="parameter">colH</replaceable> et pour chaque valeur
        <literal>y</literal> distincte de <replaceable
        class="parameter">colV</replaceable>, la cellule située à
        l'intersection <literal>(x,y)</literal> contient la valeur de la
        colonne <literal>colD</literal> dans la ligne de résultat de la
        requête pour laquelle la valeur de <replaceable
        class="parameter">colH</replaceable> est <literal>x</literal> et la
        valeur de <replaceable class="parameter">colV</replaceable> est
        <literal>y</literal>. Si cette ligne n'existe pas, la cellule est
        vide. S'il existe plusieurs lignes, une erreur est renvoyée.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\d[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>

      <listitem>
       <para>
        Pour chaque relation (table, vue, vue matérialisée, index, séquence ou
        table distante) ou type composite correspondant au
        <replaceable class="parameter">motif</replaceable>, affiche toutes les
        colonnes, leurs types, le tablespace (s'il ne s'agit pas du tablespace
        par défaut) et tout attribut spécial tel que <literal>NOT
         NULL</literal> ou les valeurs par défaut. Les index, contraintes, règles
        et déclencheurs associés sont aussi affichés. Pour les tables distantes,
        le serveur distant associé est aussi affiché. (Ce qui
        <quote>correspond au motif</quote> est défini dans
        <xref linkend="app-psql-patterns"/>
        ci-dessous.)
       </para>

       <para>
        Pour certains type de relation, <literal>\d</literal> affiche des informations
        supplémentaires pour chaque colonne&nbsp;; colonne valeur pour les séquences,
        expression indexée pour les index, options du wrapper de données distantes
        pour les tables distantes.
       </para>

       <para>
        Le forme de la commande <literal>\d+</literal> est identique, sauf que
        des informations plus complètes sont affichées&nbsp;: tout commentaire associé avec
        les colonnes de la table est affiché, ainsi que la présence d'OID dans
        la table, la définition de la vue (si la relation ciblée est une vue), un
        réglage de <link linkend="sql-createtable-replica-identity">replica
         identity</link> autre que celui par défaut.
       </para>

       <para>
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
       </para>

       <note>
        <para>
         Si <command>\d</command> est utilisé sans argument
         <replaceable class="parameter">motif</replaceable>, il est équivalent,
         en plus commode, à <command>\dtvmsE</command> qui affiche une liste de
         toutes les tables, vues, vues matérialisées, séquences et tables
         distantes. Ce n'est qu'un outil pratique.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\da[S] [ <replaceable
        class="parameter">motif</replaceable> ]</literal></term>

      <listitem>
       <para>
        Liste toutes les fonctions d'agrégat disponibles, avec le type en retour
        et les types de données sur lesquels elles opèrent. Si <replaceable
        class="parameter">motif</replaceable> est spécifié, seuls les agrégats
        dont les noms commencent par le motif sont affichés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dA[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>

      <listitem>
       <para>
        Liste les méthodes d'accès. Si <replaceable
        class="parameter">motif</replaceable> est précisé, seules sont
        affichées les méthodes d'accès dont le nom correspond au motif. Si
        <literal>+</literal> est ajouté au nom de la commande, chaque méthode
        d'accès est listée avec sa fonction gestionnaire et sa description
        associées.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <literal>\dAc[+]
        [<link linkend="app-psql-patterns"><replaceable class="parameter">access-method-pattern</replaceable></link>
        [<link linkend="app-psql-patterns"><replaceable class="parameter">input-type-pattern</replaceable></link>]]
       </literal>
      </term>
      <listitem>
       <para>
        Liste les classes d'opérateur (voir
        <xref linkend="catalog-pg-opclass"/>).
        Si <replaceable class="parameter">access-method-pattern</replaceable>
        est spécifié, seules les classes d'opérateur associées avec les
        méthodes d'accès dont les noms correspondent au motif sont listées.
        Si <replaceable class="parameter">input-type-pattern</replaceable>
        est spécifié, seules les classes d'opérateur associées avec les types
        en entrée dont les noms correspondent au motif sont listées.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque classe
        d'opérateur est affichée avec sa famille d'opérateur associée et
        propriétaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <literal>\dAf[+]
        [<link linkend="app-psql-patterns"><replaceable class="parameter">access-method-pattern</replaceable></link>
        [<link linkend="app-psql-patterns"><replaceable class="parameter">input-type-pattern</replaceable></link>]]
       </literal>
      </term>
      <listitem>
       <para>
        Liste les familles d'opérateur (voir
        <xref linkend="xindex-opfamily"/>).
        Si <replaceable class="parameter">access-method-pattern</replaceable>
        est spécifié, seules les familles d'opérateur associées avec les
        méthodes d'accès dont les noms correspondent au motif sont listées.
        Si <replaceable class="parameter">input-type-pattern</replaceable>
        est spécifié, seules les familles d'opérateur associées avec les types
        en entrée dont les noms correspondent au motif sont listées.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque
        famille d'opérateur est affichée avec son propriétaire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <literal>\dAo[+]
        [<link linkend="app-psql-patterns"><replaceable class="parameter">access-method-pattern</replaceable></link>
        [<link linkend="app-psql-patterns"><replaceable class="parameter">operator-family-pattern</replaceable></link>]]
       </literal>
      </term>

      <listitem>
       <para>
        Liste les fonctions associées avec les familles d'opérateur (<xref
        linkend="xindex-strategies"/>).
        Si <replaceable class="parameter">access-method-pattern</replaceable>
        est spécifié, seuls les membres des familles d'opérateur associés avec
        les méthodes d'accès dont les noms correspondent au motif sont listés.
        Si <replaceable class="parameter">operator-family-pattern</replaceable>
        est spécifié, seuls les membres des familles d'opérateur dont les noms
        correspondent au motif sont listés.
        Si <literal>+</literal>  est ajouté au nom de la commande, chaque
        opérateur est listé avec sa famille d'opérateur de tri (s'il en a un).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <literal>\dAp[+]
        [<link linkend="app-psql-patterns"><replaceable class="parameter">access-method-pattern</replaceable></link>
        [<link linkend="app-psql-patterns"><replaceable class="parameter">operator-family-pattern</replaceable></link>]]
       </literal>
      </term>
      <listitem>
       <para>
        Listes les procédures de support associées avec les familles d'opérateur
        (<xref linkend="xindex-support"/>).
        Si <replaceable class="parameter">access-method-pattern</replaceable>
        est spécifié, seules les fonctions des familles d'opérateur associées
        avec les méthodes d'accès dont le nom correspond au motif sont listées.
        Si <replaceable class="parameter">operator-family-pattern</replaceable>
        est spécifié, seules les fonctions des familles d'opérateur dont les
        noms correspondent au motif sont listées.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque fonction
        est affiché de façon verbeuse, avec sa liste réelle de paramètres.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\db[+] [ <replaceable class="parameter">motif</replaceable> ]</literal></term>

      <listitem>
       <para>
        Liste tous les tablespaces disponibles. Si <replaceable
        class="parameter">motif</replaceable> est spécifié, seuls les
        tablespaces dont le nom correspond au motif sont affichés. Si
        <literal>+</literal> est ajouté au nom de commande, chaque tablespace
        est listé avec ses options associées, sa taille sur disque, ses droits
        et sa description.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dc[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les conversions entre les encodages de
        jeux de caractères. Si <replaceable
        class="parameter">motif</replaceable> est spécifié, seules les
        conversions dont le nom correspond au motif sont listées.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque objet
        est listé avec sa description associée.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dC[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les conversions de types.
        Si <replaceable class="parameter">motif</replaceable> est indiqué,
        seules sont affichées les conversions dont le type source ou cible
        correspond au motif.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque objet
        est listé avec sa description associée.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dd[S] [ <link linkend="app-psql-patterns"><replaceable
         class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Affiche les descriptions des objets du type <literal>contrainte</literal>,
        <literal>classe d'opérateur</literal>, <literal>famille d'opérateur</literal>,
        <literal>règle</literal> et <literal>trigger</literal>. Tous les autres
        commentaires peuvent être visualisés avec les commandes antislash
        respectives pour ces types d'objets.
       </para>

       <para><literal>\dd</literal> Affiche les descriptions des objets correspondant au <replaceable
        class="parameter">motif</replaceable> ou des objets du type
        approprié si aucun
        argument n'est donné. Mais dans tous les cas, seuls les objets qui ont
        une description sont listés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
       </para>

       <para>
        Les descriptions des objets peuvent être créées avec la commande
        <acronym>SQL</acronym> <xref linkend="sql-comment"/>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dD[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les domaines. Si <replaceable
        class="parameter">motif</replaceable> est spécifié, seuls les
        domaines dont le nom correspond au motif sont affichés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
        Si <literal>+</literal> est ajouté au nom de la commande, chaque objet
        est listé avec sa description associée.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\ddp [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les paramètres par défaut pour les privilèges d'accès. Une entrée est affichée pour chaque rôle
        (et schéma, si c'est approprié) pour lequel les paramètres
        par défaut des privilèges ont été modifiés par rapport aux paramètres par défaut intégrés.
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seules les entrées dont le nom de rôle ou le nom de schéma
        correspond au motif sont listées.
       </para>

       <para>
        La commande <xref linkend="sql-alterdefaultprivileges"/> sert à positionner
        les privilèges d'accès par défaut. La signification de l'affichage
        des privilèges est expliquée à la page de
        <xref linkend="ddl-priv"/>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dE[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <term><literal>\di[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <term><literal>\dm[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <term><literal>\ds[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <term><literal>\dt[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <term><literal>\dv[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>

      <listitem>
       <para>
        Dans ce groupe de commandes, les lettres <literal>E</literal>,
        <literal>i</literal>, <literal>m</literal>, <literal>s</literal>,
        <literal>t</literal> et <literal>v</literal>
        correspondent respectivement à table distante, index, vue matérialisée,
        séquence, table et vue.
        Vous pouvez indiquer n'importe quelle combinaison de ces lettres, dans
        n'importe quel ordre, pour obtenir la liste de tous les objets
        de ces types. Par exemple, <literal>\dti</literal> liste les index et
        tables. Si <literal>+</literal> est ajouté à la fin de la commande,
        chaque objet est listé avec son statut de persistence (permanent,
        temporaire, non journalisé), sa taille physique sur disque et sa
        description associée s'il y en a une.
        Si <replaceable class="parameter">motif</replaceable> est spécifié,
        seuls les objets dont les noms correspondent au motif sont listés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\des[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les serveurs distants (mnémonique&nbsp;: <quote>external
         servers</quote>).
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seuls les serveurs dont le nom correspond au motif sont
        affichés. Si la forme <literal>\des+</literal> est utilisée, une description
        complète de chaque serveur est affichée, incluant liste de contrôle
        d'accès du serveur (ACL), type, version, options et description.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\det[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les tables distantes (mnémotechnique&nbsp;: <quote>tables externes</quote>).
        Si un <replaceable class="parameter">motif</replaceable> est fourni, seules les entrées
        concernant les tables ou les schémas en correspondance seront listées. Si vous utilisez la
        forme <literal>\det+</literal>, les options génériques et la description de la table distante seront également affichées.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\deu[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les correspondances d'utilisateurs (mnémonique&nbsp;:
        <quote>external users</quote>).
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seules les correspondances dont le nom correspond au motif sont
        affichées. Si la forme <literal>\deu+</literal> est utilisée, des
        informations supplémentaires sur chaque correspondance d'utilisateur
        sont affichées.
       </para>

       <caution>
        <para>
         <literal>\deu+</literal> risque aussi d'afficher le nom et le mot de
         passe de l'utilisateur distant, il est donc important de faire attention
         à ne pas les divulguer.
        </para>
       </caution>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dew[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les wrappers de données distants (mnémonique&nbsp;: <quote>external
         wrappers</quote>).
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seuls les wrappers dont le nom correspond au motif sont
        affichés. Si la forme <literal>\dew+</literal> est utilisée, les ACL,
        options et description du wrapper sont aussi affichées.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\df[anptwS+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>

      <listitem>
       <para>
        Liste les fonctions, ainsi que leurs types de données pour le résultat, leurs
        types de données pour les arguments et les
        types de fonctions, qui sont classés comme <quote>agg</quote> (agrégat),
        <quote>normal</quote>, <quote>procedure</quote>, <quote>trigger</quote>, or <quote>window</quote>.
        Afin de n'afficher que les fonctions d'un type spécifié,
        ajoutez les lettres correspondantes, respectivement <literal>a</literal>,
        <literal>n</literal>, <literal>p</literal>, <literal>t</literal>, or <literal>w</literal> à la commande. Si <replaceable
        class="parameter">motif</replaceable> est
        spécifié, seules les fonctions dont le nom correspond au motif sont
        affichées.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
        Si la forme <literal>\df+</literal> est utilisée, des informations
        supplémentaires sur chaque fonction sont affichées, incluant la
        volatibilité, le parallélisme, le propriétaire, la classification en
        sécurité, les droits d'accès, le langage, le code source et la
        description.
       </para>

       <tip>
        <para>
         Pour rechercher des fonctions prenant des arguments ou des valeurs de
         retour d'un type spécifique, utilisez les capacités de recherche du
         paginateur pour parcourir la sortie de <literal>\df</literal>.
        </para>
       </tip>

      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dF[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les configurations de la recherche plein texte.
        Si <replaceable class="parameter">motif</replaceable> est spécifié,
        seules les configurations dont le nom correspond au motif seront
        affichées. Si la forme <literal>\dF+</literal> est utilisée, une
        description complète de chaque configuration est affichée, ceci
        incluant l'analyseur de recherche plein texte et la liste de dictionnaire
        pour chaque type de jeton de l'analyseur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dFd[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les dictionnaires de la recherche plein texte.
        Si <replaceable class="parameter">motif</replaceable> est spécifié,
        seuls les dictionnaires dont le nom correspond au motif seront
        affichés. Si la forme <literal>\dFd+</literal> est utilisée, des
        informations supplémentaires sont affichées pour chaque dictionnaire,
        ceci incluant le motif de recherche plein texte et les valeurs des
        options.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dFp[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les analyseurs de la recherche plein texte.
        Si <replaceable class="parameter">motif</replaceable> est spécifié,
        seuls les analyseurs dont le nom correspond au motif seront
        affichés. Si la forme <literal>\dFp+</literal> est utilisée, une
        description complète de chaque analyseur est affichée,
        ceci incluant les fonctions sous-jacentes et la liste des types de jeton
        reconnus.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dFt[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les motifs de la recherche plein texte.
        Si <replaceable class="parameter">motif</replaceable> est spécifié,
        seuls les motifs dont le nom correspond au motif seront
        affichés. Si la forme <literal>\dFt+</literal> est utilisée, des
        informations supplémentaires sont affichées pour chaque motif, ceci
        incluant les noms des fonctions sous-jacentes.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dg[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>

      <listitem>
       <para>
        Liste les rôles des bases de données.
        (Comme les concepts d'<quote>utilisateurs</quote> et <quote>groupes</quote>
        ont été unifiés dans les <quote>rôles</quote>, cette commande est
        maintenant équivalente à <literal>\du</literal>.)
        Par défaut, seuls les rôles créés par des utilisateurs sont affichés&nbsp;;
        ajoutez le modificateur <literal>S</literal> pour inclure les rôles
        système. Si <replaceable
        class="parameter">motif</replaceable> est spécifié, seuls les rôles
        dont le nom correspond au motif sont listés.
        Si la forme <literal>\dg+</literal> est utilisée, des informations
        supplémentaires sont affichées pour chaque rôle&nbsp;; actuellement,
        cela ajoute le commentaire pour chaque rôle.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dl</literal></term>
      <listitem>
       <para>
        Ceci est un alias pour <command>\lo_list</command>, qui affiche une
        liste des Large Objects.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dL[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Affiche les langages procéduraux.
        Si un <replaceable class="parameter">motif</replaceable> est spécifié,
        seuls les langages dont les noms correspondent au motif sont listés.
        Par défaut, seuls les langages créés par les utilisateurs sont affichés&nbsp;; il faut
        spécifier l'option <literal>S</literal> pour inclure les objets système.
        Si <literal>+</literal> est ajouté à la fin de la commande, chaque
        langage sera affiché avec ses gestionnaire d'appels, validateur, droits
        d'accès, et ce même s'il s'agit d'un objet système.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dn[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>

      <listitem>
       <para>
        Liste les schémas (espaces de noms). Si <replaceable
        class="parameter">motif</replaceable> est
        spécifié, seuls les schémas dont le nom correspond au motif sont
        listés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
        Si <literal>+</literal> est ajouté à la fin de la commande, chaque
        objet sera affiché avec ses droits et son éventuelle description.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\do[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link>
        ]</literal></term>
      <listitem>
       <para>
        Liste les opérateurs avec les types de leur opérande et résultat.
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seuls les opérateurs dont le nom correspond au motif sont
        listés.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
        Si <literal>+</literal> est ajouté au nom de la commande, des
        informations supplémentaire sur chaque opérateur est affiché,
        actuellement uniquement le nom de la fonction sous-jacente.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dO[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Affiche les collationnements.
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seuls les collationnements dont le nom correspond au
        motif sont listés. Par défaut, seuls les objets créés par les utilisateurs
        sont affichés&nbsp;; fournissez un motif ou le modificateur <literal>S</literal>
        pour afficher les objets système. Si <literal>+</literal> est ajouté à la fin
        de la commande, chacun des collationnements sera affiché avec son éventuelle
        description.
        Notez que seuls les collationnements compatibles avec l'encodage de la base de
        données courante sont affichés, les résultats peuvent donc varier selon les
        différentes bases d'une même instance.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dp [ <link linkend="app-psql-patterns"><replaceable
         class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les tables, vues et séquences
        avec leur droits d'accès associés. Si <replaceable
        class="parameter">motif</replaceable> est spécifié, seules les tables,
        vues et séquences dont le nom correspond au motif sont listées.
       </para>

       <para>
        Les commandes <xref linkend="sql-grant"/> et
        <xref linkend="sql-revoke"/>
        sont utilisées pour configurer les droits d'accès. Les explications sur le sens de
        l'affichage des privilèges sont sous
        <xref linkend="ddl-priv"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dP[itn+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les tables partitionnées.
        Si <replaceable class="parameter">motif</replaceable>
        est spécifié, seules les entrées dont le nom correspond au motif sont listées.
        Les modificateurs <literal>t</literal> (tables) et <literal>i</literal>
        (index) peuvent être ajoutés à la commande pour filtrer le type d'objet
        à lister. Par défaut, les tables et index partitionnés sont listés.
       </para>

       <para>
        Si le modificateur <literal>n</literal> (<quote>nested</quote>) est indiqué,
        ou si un motif est spécifié, alors les partitions qui ne sont pas à la racine
        sont incluses, et une colonne indique le parent de chaque objet partitionné.
       </para>

       <para>
        Si <literal>+</literal> est ajouté à la commande, la somme des tailles
        de chaque partition est aussi affichée, ainsi que la description de la
        relation.
        Si <literal>n</literal> est combiné avec <literal>+</literal>, deux
        tailles sont affichées&nbsp;: l'une incluant la taille totale des partitions
        directement attachées, l'autre montrant la taille totale de toutes
        les partitions, y compris les sous-partitions attachées indirectement.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\drds [ <link linkend="app-psql-patterns"><replaceable class="parameter">role-pattern</replaceable></link> [ <link linkend="app-psql-patterns"><replaceable class="parameter">database-pattern</replaceable></link> ] ]</literal></term>
      <listitem>
       <para>
        Liste les paramètres de configuration définis. Ces paramètres peuvent
        être spécifiques à un rôle, spécifiques à une base, ou les deux.
        <replaceable>role-pattern</replaceable> et
        <replaceable>database-pattern</replaceable> servent à choisir sur quels rôles
        spécifiques ou quelles bases de données les paramètres sont listés.
        Si ces options sont omises, ou si on spécifie
        <literal>*</literal>, tous les paramètres sont listés, y
        compris ceux qui ne sont pas spécifiques, respectivement, à un
        rôle ou une base.
       </para>

       <para>
        Les commande <xref linkend="sql-alterrole"/> et
        <xref linkend="sql-alterdatabase"/>
        servent à définir les paramètres de configuration par rôle et par base de données.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dRp[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les publications de réplication.
        Si <replaceable class="parameter">pattern</replaceable> est spécifié,
        seules les publications dont le nom correspond au motif sont listées.
        Si <literal>+</literal> est ajouté à la fin du nom de la commande, les
        tables associées à chaque publication sont également affichées.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dRs[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les souscriptions de réplication.
        Si <replaceable class="parameter">pattern</replaceable> est spécifié,
        seules les souscriptions dont le nom correspond au motif sont
        listées.
        Si <literal>+</literal> est ajouté à la fin du nom de la commande, des
        propriétés supplémentaires de la souscription sont affichées.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dT[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les types de données.
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seuls les types dont le nom correspond au motif sont
        affichés. Si <literal>+</literal> est ajouté à la fin de la commande,
        chaque type est listé avec son nom interne et sa taille, ses
        valeurs autorisées si c'est un type <type>enum</type>, et ses permissions
        associées.
        Par défaut, seuls les objets créés par les utilisateurs sont affichés&nbsp;;
        fournissez un motif ou le modificateur <literal>S</literal> pour afficher
        les objets système.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\du[S+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">pattern</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les rôles de la base de données.
        (Depuis que les concepts des <quote>utilisateurs</quote> et <quote>groupes</quote>
        ont été unifiés en des <quote>rôles</quote>, cette commande est équivalent à
        <literal>\dg</literal>.)
        Par défaut, seuls les rôles créés par des utilisateurs sont affichés.
        Ajoutez le modificateur <literal>S</literal> pour inclure les rôles
        système.
        Si <replaceable class="parameter">motif</replaceable> est indiqué,
        seuls les rôles dont le nom correspond au motif sont listés. Si la
        forme <literal>\du+</literal> est utilisée, des informations
        supplémentaires sont affichées pour chaque rôle&nbsp;; actuellement,
        cela ajoute le commentaire pour chaque rôle.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\dx[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Affiche les extensions installées.
        Si <replaceable class="parameter">motif</replaceable> est
        spécifié, seules les entensions dont le nom correspond au motif sont affichées.
        Avec la forme <literal>\dx+</literal>, tous les objets dépendants de chacune
        des extensions correspondantes sont également listés.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\dy[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les triggers d'événements. Si <replaceable
        class="parameter">motif</replaceable> est indiqué, seuls les triggers
        d'événements dont les noms correspondent au motif sont listés. Si
        <literal>+</literal> est ajouté au nom de la commande, chaque objet est
        listé avec sa description.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\e</literal> (or <literal>\edit</literal>) <literal> <optional> <replaceable class="parameter">nomfichier</replaceable> </optional> <optional> <replaceable class="parameter">numero_ligne</replaceable> </optional> </literal></term>

      <listitem>
       <para>
        Si <replaceable class="parameter">nomfichier</replaceable> est
        spécifié, le fichier est édité&nbsp;; en quittant l'éditeur, le contenu
        du fichier est recopié dans le tampon de requête. Si aucun paramètre <replaceable class="parameter">nomfichier</replaceable>
        n'est fourni, le tampon de requête courant est copié dans un fichier
        temporaire qui édité de la même manière. Ou bien, si le tampon actuel de
        requête est vide, la dernière requête exécutée est copiée vers un
        fichier temporaire et éditée de la même manière.
       </para>

       <para>
        Le nouveau tampon de requête est ensuite ré-analysé suivant les règles
        habituelles de <application>psql</application>, où le tampon complet est
        traité comme une seule ligne. Toute requête complète est exécutée
        immédiatement&nbsp;; c'est-à-dire que si le tampon de requête contient ou se
        termine par un point-virgule, tout ce qui précède est exécuté et supprimé
        du tampon de requête. Ce qui reste dans le tampon de requête est réaffiché.
        En tapant point-virgule
        ou <literal>\g</literal>, le contenu sera envoyé, tandis que
        <literal>\r</literal> annulera en effaçant le tampon de requête.
        Traiter le buffer comme une ligne unique affecte principalement les
        métacommandes&nbsp;: tout ce qui se trouve dans le tampon après une
        métacommande sera pris en tant qu'argument(s) de la métacommande, même
        si cela s'étend sur plusieurs lignes (du coup, vous ne pouvez pas faire
        de scripts de cette façon. Utilisez <command>\i</command> pour cela).
       </para>

       <para>
        Si vous indiquez un numéro de ligne, <application>psql</application>
        positionnera le curseur sur cette ligne du fichier ou du tampon de requête.
        Notez que si un seul argument comportant uniquement des caractères
        numériques est fourni à la commande, <application>psql</application>
        considère qu'il s'agit d'un numéro de ligne, et non pas un nom de fichier.
       </para>

       <tip>
        <para>
         Voir dans <xref linkend="app-psql-environment"/>, ci-dessous, comment
         configurer et personnaliser votre éditeur.
        </para>
       </tip>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\echo <replaceable
        class="parameter">texte</replaceable> [ ... ]</literal></term>
      <listitem>
       <para>
        Affiche les arguments évalués sur la sortie standard, séparés par des
        espaces et suivis par une nouvelle ligne. Ceci peut être utile pour
        intégrer des informations sur la sortie des scripts. Par exemple&nbsp;:
        <programlisting>=&gt; <userinput>\echo `date`</userinput>
Tue Oct 26 21:40:57 CEST 1999
        </programlisting>
        Si le premier argument est <literal>-n</literal> sans guillemets,
        alors la fin de ligne n'est pas écrite (ni le premier argument).
       </para>

       <tip>
        <para>
         Si vous utilisez la commande <command>\o</command> pour rediriger la
         sortie de la requête, vous pouvez aussi utiliser
         <command>\qecho</command> au lieu de cette commande.
         See also <command>\warn</command>.
        </para>
       </tip>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\ef <optional> <replaceable class="parameter">description_fonction</replaceable> <optional>  <replaceable class="parameter">line_number</replaceable> </optional> </optional> </literal></term>

      <listitem>
       <para>
        Cette commande récupère et édite la définition de la fonction ou procédure
        désignée sous la forme d'une commande <command>CREATE OR REPLACE
         FUNCTION</command> ou <command>CREATE OR REPLACE PROCEDURE</command>.
        L'édition est faite de la même façon que pour <literal>\edit</literal>.
        Une fois l'éditeur fermé, la commande mise à jour est exécutée immédiatement
        si vous y ajoutez un point-virgule.
        Sinon elle est ré-affichée&nbsp; tapez <literal>;</literal> ou
        <literal>\g</literal> pour l'envoyer, ou <literal>\r</literal> pour
        l'annuler.
       </para>

       <para>
        La fonction cible peut être spécifiée par son nom seul, ou par son
        nom et ses arguments, par exemple <literal>foo(integer, text)</literal>.
        Les types d'arguments doivent être fournis s'il y a plus d'une fonction
        du même nom.
       </para>

       <para>
        Si aucune fonction n'est spécifiée, un modèle d'ordre <command>CREATE
         FUNCTION</command> vierge est affiché pour édition.
       </para>

       <para>
        Si vous indiquez un numéro de ligne,
        <application>psql</application> positionnera le curseur sur
        cette ligne dans le corps de la fonction. (Notez que le corps
        de la fonction, typiquement, ne commence pas sur la première ligne du
        fichier.)
       </para>

       <para>
        Contrairement à la plupart des autres métacommandes, l'intégralité du
        reste de la ligne est toujours pris en compte en tant qu'argument(s)
        de <command>\ef</command>, et ni l'interpolation des variables ni la
        substitution par guillemets inverses ne seront effectuées sur les
        arguments.
       </para>

       <tip>
        <para>
         Voir dans <xref linkend="app-psql-environment"/>, ci-dessous, la façon
         de configurer et personnaliser votre éditeur.
        </para>
       </tip>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\encoding [ <replaceable
        class="parameter">codage</replaceable> ]</literal></term>

      <listitem>
       <para>
        Initialise l'encodage du jeu de caractères du client. Sans
        argument, cette commande affiche l'encodage actuel.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\errverbose</literal></term>

      <listitem>
       <para>
        Répète le message d'erreur le plus récent avec une verbosité maximale,
        comme si <varname>VERBOSITY</varname> était configuré à
        <literal>verbose</literal> et <varname>SHOW_CONTEXT</varname> à
        <literal>always</literal>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\ev <optional> <replaceable class="parameter">nom_vue</replaceable> <optional>  <replaceable class="parameter">numero_ligne</replaceable> </optional> </optional> </literal></term>

      <listitem>
       <para>
        Cette commande récupère et édite la définition de la vue désignée, sous
        la forme d'une commande <command>CREATE OR REPLACE VIEW</command>.
        L'édition se termine de la même façon que pour
        <literal>\edit</literal>. Après avoir quitté l'éditeur, la commande
        mise à jour est exécutée immédiatement si vous y ajoutez un point-virgule.
        Sinon, elle est réaffichée&nbsp;; saisir un point-
        virgule ou <literal>\g</literal> pour l'envoyer, ou
        <literal>\r</literal> pour annuler.
       </para>

       <para>
        Si aucune vue n'est indiquée, un <command>CREATE VIEW</command> modèle
        est présenté pour l'édition.
       </para>

       <para>
        Si un numéro de ligne est indiqué, <application>psql</application>
        positionnera le curseur sur la ligne indiquée pour la définition de la
        vue.
       </para>

       <para>
        Contrairement à la majorité des autres métacommandes, l'intégralité du
        reste de la ligne est toujours pris en compte en tant qu'arguments
        de <command>\ev</command>, et ni l'interpolation des variables ni la
        substitution par guillemets inverses ne seront effectuées sur les
        arguments.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\f [ <replaceable
        class="parameter">chaîne</replaceable> ]</literal></term>

      <listitem>
       <para>
        Initialise le champ séparateur pour la sortie de requête non alignée.
        La valeur par défaut est la barre verticale (<literal>|</literal>). C'est
        équivalent à <command>\pset fieldsep</command>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\g [ (<replaceable class="parameter">option</replaceable>=<replaceable class="parameter">value</replaceable> [...]) ] [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
      <term><literal>\g [ (<replaceable class="parameter">option</replaceable>=<replaceable class="parameter">value</replaceable> [...]) ] [ |<replaceable class="parameter">command</replaceable> ]</literal></term>

      <listitem>
       <para>
        Envoie le tampon de requête en entrée vers le serveur pour exécution.
       </para>

       <para>
        Si des parenthèses apparaissent après <literal>\g</literal>, elles entourent
        une liste séparée par des espaces de clauses d'option formatées <replaceable
        class="parameter">option</replaceable><literal>=</literal><replaceable
        class="parameter">value</replaceable>, qui sont interprétées de la même façon que
        des commandes <literal>\pset</literal>
        <replaceable class="parameter">option</replaceable> <replaceable
        class="parameter">value</replaceable>, mais prennent effet seulement pour la durée
        de cette requête.
        Dans cette liste, les espaces ne sont pas permis autour des signes
        <literal>=</literal> mais sont requis entre chaque clause d'option.
        Si <literal>=</literal><replaceable
        class="parameter">value</replaceable> sont omis, l'option nommée
        <replaceable class="parameter">option</replaceable> est modifiée de la
        même façon que pour <literal>\pset</literal> <replaceable
        class="parameter">option</replaceable> sans <replaceable
        class="parameter">value</replaceable> explicite.
       </para>

       <para>
        Si un argument
        <replaceable class="parameter">filename</replaceable> ou
        <literal>|</literal><replaceable
        class="parameter">command</replaceable> est donné, la commande
        stocke en option la sortie de la requête dans <replaceable
        class="parameter">nomfichier</replaceable> ou envoie dans un tube
        (<foreignphrase>pipe</foreignphrase>) la sortie vers un autre shell
        exécutant <replaceable class="parameter">commande</replaceable> au
        lieu de l'exécuter comme habituellement. Le fichier ou la commande
        n'est écrit que si la requête renvoit zéro ou plus enregistrements,
        mais pas si la requête échoue ou s'il s'agit d'une commande SQL ne
        renvoyant pas de données.
       </para>

       <para>
        Si le tampon de la requête est vide, la dernière requête envoyée est
        ré-exécutée à la place. En dehors de cette exception,
        <literal>\g</literal> sans argument est essentiellement équivalent à
        un point-virgule. Avec des arguments,
        <literal>\g</literal> fournit une alternative <quote>one-shot</quote>
        à la commande <command>\o</command>, et permet en plus des ajustements
        uniques aux options de format de sortie normalement affectées par
        <literal>\pset</literal>.
       </para>

       <para>
        Quand le dernier argument débute par <literal>|</literal>, alors
        l'intégralité du reste de la ligne est pris en tant que <replaceable
        class="parameter">commande</replaceable> à exécuter et ni
        l'interpolation des variables ni la substitution par guillemets
        inverses n'y sont effectuées. Le reste de la ligne est simplement
        passé littéralement au shell.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\gdesc</literal></term>

      <listitem>
       <para>
        Affiche la description (c'est-à-dire les noms et types de données des
        colonnes) pour le résultat de la requête contenue dans le tampon. La
        requête n'est pas réellement exécutée. Cependant, si elle contient
        une erreur de syntaxe, l'erreur sera rapportée de la façon
        habituelle.
       </para>

       <para>
        Si le tampon de requête est vide, la requête la plus récemment
        envoyée est décrite à la place.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\gexec</literal></term>

      <listitem>
       <para>
        Envoie le tampon de requête actuel au serveur, puis traite chaque
        colonne de chaque ligne du résultat de la requête (s'il y en a)
        comme une requête à
        exécuter. Par exemple, pour créer un index sur chaque colonne de
        <structname>ma_table</structname>&nbsp;:
        <programlisting>
=&gt; <userinput>SELECT format('create index on ma_table(%I)', attname)</userinput>
-&gt; <userinput>FROM pg_attribute</userinput>
-&gt; <userinput>WHERE attrelid = 'ma_table'::regclass AND attnum &gt; 0</userinput>
-&gt; <userinput>ORDER BY attnum</userinput>
-&gt; <userinput>\gexec</userinput>
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
        </programlisting>
       </para>

       <para>
        Les requêtes générées sont exécutées dans l'ordre dans lequel les lignes sont
        renvoyées, et de gauche à droite sur chaque ligne s'il y a plus d'une
        colonne. Les champs NULL sont ignorés. Les requêtes générées sont
        envoyées litéralement au serveur pour traitement, donc elles ne
        peuvent pas être des métacommandes <application>psql</application> ni
        contenir des références de variables <application>psql</application>.
        Si une requête individuelle échoue, l'exécution des requêtes suivantes
        continue, sauf si <varname>ON_ERROR_STOP</varname> est configuré.
        L'exécution de chaque requête est sujette au traitement de
        <varname>ECHO</varname>. (Configurer <varname>ECHO</varname> à
        <literal>all</literal> ou à <literal>queries</literal> est souvent
        conseillé lors de l'utilisation de <command>\gexec</command>.) La
        trace de requêtes, le mode étape par étape, le chronométrage et les
        autres fonctionnalités d'exécution des requêtes s'appliquent aussi à
        chaque requête générée.
       </para>
       <para>
        Si le tampon de requête courant est vide, la dernière requête
        envoyée est ré-exécutée à la place.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\gset [ <replaceable class="parameter">préfixe</replaceable> ]</literal></term>

      <listitem>
       <para>
        Envoie la requête courante du tampon au serveur et stocke le résultat
        de la requête dans des variables <application>psql</application> (voir
        <xref linkend="app-psql-variables"/> ci-dessous).
        La requête à exécuter doit renvoyer exactement une ligne. Chaque colonne
        de la ligne est enregistrée dans une variable séparée, nommée de la même
        façon que la colonne. Par exemple&nbsp;:
        <programlisting>
=&gt; <userinput>SELECT 'bonjour' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset</userinput>
=&gt; <userinput>\echo :var1 :var2</userinput>
bonjour 10
        </programlisting>
       </para>
       <para>
        Si vous précisez un préfixe <replaceable
        class="parameter">préfixe</replaceable>, cette chaîne est ajoutée aux
        noms de colonne de la requête pour créer les noms de variable à
        utiliser&nbsp;:
        <programlisting>
=&gt; <userinput>SELECT 'bonjour' AS var1, 10 AS var2</userinput>
-&gt; <userinput>\gset result_</userinput>
=&gt; <userinput>\echo :result_var1 :result_var2</userinput>
bonjour 10
        </programlisting>
       </para>
       <para>
        Si le résultat d'une colonne est NULL, la variable correspondante
        n'est pas initialisée.
       </para>
       <para>
        Si la requête échoue ou ne renvoie pas une ligne, aucune variable
        n'est modifiée.
       </para>
       <para>
        Si le tampon de requête courant est vide, la dernière requête
        envoyée est ré-exécutée à la place.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\gx [ (<replaceable class="parameter">option</replaceable>=<replaceable class="parameter">value</replaceable> [...]) ] [ <replaceable class="parameter">filename</replaceable> ]</literal></term>
      <term><literal>\gx [ (<replaceable class="parameter">option</replaceable>=<replaceable class="parameter">value</replaceable> [...]) ] [ |<replaceable class="parameter">command</replaceable> ]</literal></term>
      <listitem>
       <para>
        <literal>\gx</literal> est équivalent à <literal>\g</literal>,
        sauf qu'il force le mode de sortie étendue pour cette requête, comme si
        <literal>expanded=on</literal> était inclus dans la liste des options
        <literal>\pset</literal>. Voir aussi <literal>\x</literal>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\h</literal> (ou <literal>\help</literal>) <literal>[
        <replaceable class="parameter">commande</replaceable> ]</literal></term>
      <listitem>
       <para>
        Fournit la syntaxe sur la commande <acronym>SQL</acronym> spécifiée. Si
        <replaceable class="parameter">commande</replaceable> n'est pas
        spécifiée, alors <application>psql</application> liste toutes les
        commandes pour lesquelles une aide en ligne est disponible. Si
        <replaceable class="parameter">commande</replaceable> est un astérisque
        (<literal>*</literal>), alors l'aide en ligne de toutes les commandes
        <acronym>SQL</acronym> est affichée.
       </para>

       <para>
        Contrairement à la plupart des autres métacommandes, l'intégralité du
        reste de la ligne est toujours pris en compte en tant qu'argument(s)
        de <command>\help</command>, et ni l'interpolation des variables ni la
        substitution par guillemets inverses ne seront effectuées sur les
        arguments.
       </para>

       <note>
        <para>
         Pour simplifier la saisie, les commandes qui consistent en plusieurs mots
         n'ont pas besoin d'être entre guillemets. Du coup, il est correct de
         saisir <userinput>\help alter table</userinput>.
        </para>
       </note>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\H</literal> ou <literal>\html</literal></term>
      <listitem>
       <para>
        Active le format d'affichage <acronym>HTML</acronym> des requêtes. Si
        le format <acronym>HTML</acronym> est déjà activé, il est basculé au
        format d'affichage défaut (texte aligné). Cette commande existe pour
        la compatibilité et la praticité, mais voyez <command>\pset</command>
        pour configurer les autres options d'affichage.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\i</literal> ou <literal>\include</literal> <replaceable
       class="parameter">nomfichier</replaceable></term>
      <listitem>
       <para>
        Lit l'entrée à partir du fichier <replaceable
        class="parameter">nomfichier</replaceable> et l'exécute comme si elle
        avait été saisie sur le clavier.
       </para>
       <para>
        Si <replaceable>nomfichier</replaceable> est <literal>-</literal>
        (tiret), l'entrée standard est lue jusqu'à une indication EOF
        ou la métacommande <command>\q</command>. Ceci peut être utilisé
        pour intercaler des entrées interactives entre des entrées de fichiers.
        Notez que le comportement de Readline ne sera activé que s'il est
        actif au niveau supérieur.
       </para>
       <note>
        <para>
         Si vous voulez voir les lignes sur l'écran au moment de leur lecture,
         vous devez initialiser la variable <varname>ECHO</varname> à
         <literal>all</literal>.
        </para>
       </note>
      </listitem>
     </varlistentry>


     <varlistentry id="psql-metacommand-if">
      <term><literal>\if</literal> <replaceable class="parameter">expression</replaceable></term>
      <term><literal>\elif</literal> <replaceable class="parameter">expression</replaceable></term>
      <term><literal>\else</literal></term>
      <term><literal>\endif</literal></term>
      <listitem>
       <para>
        Ce groupe de commandes implémente les blocs conditionnels imbriqués.
        Un bloc conditionnel doit commencer par un <command>\if</command> et se
        terminer par un <command>\endif</command>. Entre les deux, il peut y
        avoir plusieurs clauses <command>\elif</command>, pouvant être suivies
        facultativement par une unique clause <command>\else</command>. Des
        requêtes ordinaires et d'autres commandes antislash peuvent apparaître
        (et c'est généralement le cas) entre les commandes formant le bloc
        conditionnel.
       </para>
       <para>
        Les commandes <command>\if</command> et <command>\elif</command>
        lisent leurs arguments et les évaluent en tant qu'expression booléenne.
        Si l'expression renvoie <literal>true</literal>, alors le traitement
        continue normalement&nbsp;; sinon, les lignes sont ignorées jusqu'à un
        <command>\elif</command>, <command>\else</command>, ou
        <command>\endif</command> correspondant.
        Dès qu'un test <command>\if</command> ou <command>\elif</command> a
        réussi, les arguments des commandes <command>\elif</command> ultérieures
        du même bloc ne sont pas évaluées mais sont traitées comme fausses.
        Les lignes qui suivent un <command>\else</command> ne sont traitées
        que si aucune commande <command>\if</command> or <command>\elif</command>
        correspondante n'a réussie.
       </para>
       <para>
        L'argument d'<replaceable class="parameter">expression</replaceable>
        d'une commande <command>\if</command> or <command>\elif</command> est
        soumis à l'interpolation des variables et la substitution par guillemets
        inverses, tout comme n'importe quelle autre commande antislash. Après
        cela, il est évalué comme la valeur d'une variable d'option on/off.
        Une valeur valide est n'importe quelle correspondance non sensible à la
        case et non-ambiguë parmi&nbsp;:
        <literal>true</literal>, <literal>false</literal>, <literal>1</literal>,
        <literal>0</literal>, <literal>on</literal>, <literal>off</literal>,
        <literal>yes</literal>, <literal>no</literal>.  Par exemple,
        <literal>t</literal>, <literal>T</literal> et <literal>tR</literal>
        seront tous considérés comme <literal>true</literal>.
       </para>
       <para>
        Les expressions ne s'évaluant pas correctement à vrai ou faux
        généreront un avertissement et seront traitées comme fausses.
       </para>
       <para>
        Les lignes qui sont évitées sont analysées syntaxiquement pour
        identifier les requêtes et les commandes antislash, mais les
        requêtes ne sont pas envoyées au serveur, et les commandes antislash
        autres que conditionnelles
        (<command>\if</command>, <command>\elif</command>,
        <command>\else</command>, <command>\endif</command>) sont ignorées.
        Les commandes conditionnelles sont vérifiées seulement pour valider
        l'emboîtement. Les références des variables des lignes évitées ne sont
        pas interpolées et les substitutions par guillemets inverses ne seront
        pas effectuées non plus.
       </para>
       <para>
        Toutes les commandes antislash d'un bloc conditionnel doivent
        apparaître dans le même fichier source. Si EOF est atteint dans le
        fichier d'entrée principal ou un fichier <command>\include</command>
        avant que tous les blocs <command>\if</command> locaux ne soient
        fermés, alors <application>psql</application> générera une erreur.
       </para>
       <para>
        Voici un exemple&nbsp;:
       </para>
       <programlisting>
-- vérifier l'existence de deux enregistrements distincts dans la base et
-- enregistrer les résultats dans deux variables psql différentes
SELECT
    EXISTS(SELECT 1 FROM customer WHERE customer_id = 123) as est_client,
    EXISTS(SELECT 1 FROM employee WHERE employee_id = 456) as est_employe
\gset
\if :est_client
    SELECT * FROM customer WHERE customer_id = 123;
\elif :est_employe
    \echo 'est un employé mais pas un client'
    SELECT * FROM employee WHERE employee_id = 456;
\else
    \if yes
        \echo 'ni un client ni un employé'
    \else
        \echo 'ce message ne s\'affichera jamais'
    \endif
\endif
       </programlisting>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\ir</literal> ou <literal>\include_relative</literal>  <replaceable class="parameter">nom_fichier</replaceable></term>
      <listitem>
       <para>
        La commande <literal>\ir</literal> est similaire à <literal>\i</literal>,
        mais résout les chemins différemment. Lors d'une exécution en mode
        interactif, les deux commandes se comportent de la même façon. Néanmoins,
        lorsqu'elles sont appelées par un script, <literal>\ir</literal>
        interprète les chemins à partir du répertoire où le script est enregistré,
        plutôt qu'à partir du répertoire courant.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\l[+]</literal> ou <literal>\list[+] [ <link linkend="app-psql-patterns"><replaceable class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les bases de données du serveur en indiquant leur nom,
        propriétaire, encodage de caractères, et droits d'accès.
        Si <replaceable class="parameter">pattern</replaceable> est spécifié,
        seules les bases de données dont le nom correspond au motif sont listées.
        Si <literal>+</literal> est ajouté à la fin de la commande, la taille
        des bases, les tablespaces par défaut et les descriptions sont aussi
        affichées. (Les tailles ne sont disponibles que pour les bases
        auxquelles l'utilisateur courant a le droit de se connecter.)
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\lo_export <replaceable
        class="parameter">loid</replaceable> <replaceable
        class="parameter">nomfichier</replaceable></literal></term>

      <listitem>
       <para>
        Lit l'objet large d'<acronym>OID</acronym> <replaceable
        class="parameter">loid</replaceable> à partir de la base de données
        et l'écrit dans <replaceable
        class="parameter">nomfichier</replaceable>. Notez que ceci est
        subtilement différent de la fonction serveur
        <function>lo_export</function>, qui agit avec les droits de
        l'utilisateur avec lequel est exécuté le serveur de base de données et
        sur le système de fichiers du serveur.
       </para>
       <tip>
        <para>
         Utilisez <command>\lo_list</command> pour trouver
         l'<acronym>OID</acronym> de l'objet large.
        </para>
       </tip>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\lo_import <replaceable
        class="parameter">nomfichier</replaceable> [ <replaceable
        class="parameter">commentaire</replaceable> ]</literal></term>

      <listitem>
       <para>
        Stocke le fichier dans un Large Object
        <productname>PostgreSQL</productname>. En option, il associe le
        commentaire donné avec l'objet. Exemple&nbsp;:
        <programlisting>foo=&gt; <userinput>\lo_import '/home/pierre/pictures/photo.xcf' 'une
photo de moi'</userinput>
lo_import 152801
        </programlisting>
        La réponse indique que le Large Object a reçu l'ID 152801, qui peut être
        utilisé pour accéder de nouveau à l'objet créé. Pour une meilleure
        lisibilité, il est recommandé de toujours associer un commentaire
        compréhensible par un humain avec chaque objet. Les OID et les
        commentaires sont visibles avec la commande <command>\lo_list</command>.
       </para>

       <para>
        Notez que cette commande est subtilement différente de la fonction
        serveur <function>lo_import</function> car elle agit en tant
        qu'utilisateur local sur le système de fichier local plutôt qu'en tant
        qu'utilisateur du serveur et de son système de fichiers.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\lo_list</literal></term>
      <listitem>
       <para>
        Affiche une liste de tous les Large Objects
        <productname>PostgreSQL</productname> actuellement stockés dans la base
        de données, avec tous les commentaires fournis par eux.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\lo_unlink <replaceable class="parameter">loid</replaceable></literal></term>

      <listitem>
       <para>
        Supprime le Large Object d'<acronym>OID</acronym>
        <replaceable class="parameter">loid</replaceable> de la base
        de données.
       </para>

       <tip>
        <para>
         Utilisez <command>\lo_list</command> pour trouver
         l'<acronym>OID</acronym> d'un Large Object.
        </para>
       </tip>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\o</literal> ou <literal>\out [ <replaceable class="parameter">nomfichier</replaceable> ]</literal></term>
      <term><literal>\o</literal> ou <literal>\out [ |<replaceable class="parameter">commande</replaceable> ]</literal></term>

      <listitem>
       <para>
        S'arrange pour sauvegarder les résultats des prochaines requêtes dans
        le fichier <replaceable class="parameter">nomfichier</replaceable> ou
        d'envoyer les résultats à la commande shell <replaceable
        class="parameter">commande</replaceable>. Si aucun argument n'est
        fourni, le résultat de la requête va sur la sortie standard.
       </para>

       <para>
        Si l'argument commence par <literal>|</literal>, alors l'intégralité du
        reste de la ligne est considérée en tant que <replaceable class="parameter">commande</replaceable>
        à exécuter et ni l'interpolation des variables ni la substitution par
        guillemets inverses ne seront effectuées. Le reste de ligne est
        simplement envoyée littéralement au shell.
       </para>

       <para>
        Les <quote>résultats de requête</quote> incluent toutes les tables,
        réponses de commande et messages d'avertissement obtenus du serveur de
        bases de données, ainsi que la sortie de différentes commandes
        antislash qui envoient des requêtes à la base de données (comme
        <command>\d</command>), mais sans message d'erreur.
       </para>

       <tip>
        <para>
         Pour intercaler du texte entre des résultats de requête, utilisez
         <command>\qecho</command>.
        </para>
       </tip>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\p</literal> ou <literal>\print</literal></term>
      <listitem>
       <para>
        Affiche le tampon de requête actuel sur la sortie standard.
        Si le tampon de requête actuel est vide, la requête la plus récemment
        exécutée est affichée à la place.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\password [ <replaceable class="parameter">nom_utilisateur</replaceable> ]</literal></term>
      <listitem>
       <para>
        Modifie le mot de passe de l'utilisateur indiqué (par défaut,
        l'utilisateur en cours). Cette commande demande le nouveau mot de passe,
        le chiffre et l'envoie au serveur avec la commande <command>ALTER
         ROLE</command>. Ceci vous assure que le nouveau mot de passe n'apparaît
        pas en clair dans l'historique de la commande, les traces du serveur
        ou ailleurs.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\prompt [ <replaceable class="parameter">texte</replaceable> ] <replaceable class="parameter">nom</replaceable></literal></term>
      <listitem>
       <para>
        Demande la saisie d'un texte par l'utilisateur. Ce texte sera affecté à
        la variable <replaceable class="parameter">nom</replaceable>. Une
        chaîne supplémentaire, <replaceable class="parameter">texte</replaceable>,
        peut être donnée. (Pour pouvoir saisir plusieurs mots, entourez le texte
        par des guillemets simples.)
       </para>

       <para>
        Par défaut, <literal>\prompt</literal> utilise le terminal pour les
        entrées et sorties. Néanmoins, si la bascule <option>-f</option> est
        utilisée, <literal>\prompt</literal> utilise l'entrée et la sortie
        standard.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\pset [ <replaceable class="parameter">option</replaceable> [ <replaceable class="parameter">valeur</replaceable> ] ]</literal></term>

      <listitem>
       <para>
        Cette commande initialise les options affectant l'affichage des tableaux
        de résultat de requête. <replaceable
        class="parameter">option</replaceable> décrit l'option à initialiser.
        La sémantique de <replaceable class="parameter">valeur</replaceable> varie en fonction de
        l'option sélectionnée. Pour certaines options, omettre <replaceable
        class="parameter">valeur</replaceable> a pour conséquence de basculer ou désactiver l'option,
        tel que cela est décrit pour chaque option. Si aucun comportement de ce type
        n'est mentionné, alors omettre <replaceable
        class="parameter">valeur</replaceable> occasionne simplement l'affichage de la configuration actuelle.
       </para>

       <para>
        <command>\pset</command> sans aucun argument affiche l'état actuel de
        toutes les options d'affichage.
       </para>

       <para>
        Les options ajustables d'affichage sont&nbsp;:
        <variablelist>
         <varlistentry>
          <term><literal>border</literal></term>
          <listitem>
           <para>
            Le <replaceable class="parameter">valeur</replaceable> doit être
            un nombre. En général, plus grand est ce nombre, plus les tables
            ont de bordures et de lignes mais ceci dépend du format. Dans le
            format <acronym>HTML</acronym>, cela se traduira directement en un
            attribut <literal>border=...</literal>. Dans la plupart des autres
            formats, seules les valeurs 0 (sans bordure), 1 (lignes interne de
            séparation) et 2 (cadre du tableau) ont un sens, et les valeurs
            au-dessus de 2 seront traitées de la même façon que
            <literal>border = 2</literal>. Les formats
            <literal>latex</literal> et <literal>latex-longtable</literal>
            autorisent en plus une valeur de 3 pour ajouter des lignes de
            séparation entre les lignes de données.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>columns</literal></term>
          <listitem>
           <para>
            Positionne la largeur pour le format <literal>wrapped</literal> ,
            ainsi que la largeur à partir de laquelle la sortie est suffisamment
            longue pour nécessiter le paginateur ou pour basculer sur l'affichage
            vertical dans le mode étendu automatique.
            Si l'option est positionnée à zéro (la valeur par défaut), la largeur de la colonne est contrôlée
            soit par la variable d'environnement <envar>COLUMNS</envar>, soit par la largeur d'écran détectée si
            <envar>COLUMNS</envar> n'est pas positionnée.
            De plus, si <literal>columns</literal> vaut zéro, alors le format
            <literal>wrapped</literal> affecte seulement la sortie écran.
            Si <literal>columns</literal> ne vaut pas zéro, alors les sorties
            fichier et tubes (<foreignphrase>pipes</foreignphrase>) font
            l'objet de retours à la ligne
            à cette largeur également.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>csv_fieldsep</literal></term>
          <listitem>
           <para>
            Spécifie le séparateur de champ à utiliser pour le format de sortie
            <acronym>CSV</acronym>. Lorsque le caractère de séparation apparaît
            dans la valeur d'un champ, le champ est affiché encadré par des
            guillemets, suivant les règles standards du <acronym>CSV</acronym>.
            La valeur par défaut est une virgule.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>expanded</literal> (ou <literal>x</literal>)</term>
          <listitem>
           <para>
            Si une <replaceable class="parameter">valeur</replaceable> est
            précisée, elle doit être soit <literal>on</literal> soit
            <literal>off</literal>, ce qui activera ou désactivera le mode
            étendu, soit <literal>auto</literal>.
            Si <replaceable class="parameter">valeur</replaceable> est omis,
            la commande bascule le paramètre entre les valeurs on et off.
            Quand le mode étendu est activé, les résultats des requêtes sont
            affichés sur deux colonnes, avec le nom de la colonne sur la gauche
            et ses données sur la droite. Ce mode est utile si la donnée ne tient
            pas sur l'écran dans le mode <quote>horizontal</quote> habituel. Dans
            le mode auto, le mode étendu est utilisé quand la sortie de la requête
            a plus d'une colonne et est plus large que l'écran. Sinon, le mode habituel
            est utilisé. Le mode auto est seulement intéressant lors de
            l'utilisation des formats aligné et <literal>wrapped</literal> .
            Si d'autres formats sont sélectionnés, il se comporte toujours comme
            si le mode étendu était désactivé.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>fieldsep</literal></term>
          <listitem>
           <para>
            Indique le séparateur de champ à utiliser dans le mode d'affichage
            non aligné. De cette façon, vous pouvez créer, par exemple une
            sortie séparée par des tabulations, que d'autres
            programmes pourraient préférer. Pour configurer une tabulation comme
            champ séparateur, saisissez <literal>\pset fieldsep
             '\t'</literal>. Le séparateur de champ par défaut est
            <literal>'|'</literal> (une barre verticale).
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>fieldsep_zero</literal></term>
          <listitem>
           <para>
            Configure le séparateur de champs pour qu'il utilise un octet zéro
            dans le format non aligné en sortie.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>footer</literal></term>
          <listitem>
           <para>
            Si le paramètre <replaceable class="parameter">valeur</replaceable> est précisé, il doit valoir soit
            <literal>on</literal>, soit <literal>off</literal>, ce qui a pour effet d'activer
            ou de désactiver l'affichage du pied de tableau (le compte&nbsp;: <literal>(<replaceable>n</replaceable> rows)</literal>).
            Si le paramètre <replaceable class="parameter">valeur</replaceable> est omis, la commande bascule entre
            l'affichage du pied de table ou sa désactivation.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>format</literal></term>
          <listitem>
           <para>
            Initialise le format d'affichage parmi <literal>aligned</literal>,
            <literal>asciidoc</literal>,
            <literal>csv</literal>,
            <literal>html</literal>,
            <literal>latex</literal>,
            <literal>latex-longtable</literal>, <literal>troff-ms</literal>,
            <literal>unaligned</literal> ou <literal>wrapped</literal>.
            Les abréviations uniques sont autorisées.
           </para>

           <para>Le format <literal>aligned</literal> est le format de sortie standard,
            lisible par les humains, plaisamment formaté&nbsp;; c'est le format par défaut.
           </para>

           <para>
            Le format <literal>unaligned</literal> écrit toutes les colonnes
            d'un enregistrement sur une seule ligne, séparées par le
            séparateur de champ courant. Ceci est utile pour crééer des
            sorties qui doivent être lues par d'autres programmes au format
            séparé par des caractère tabulation ou par des virgules, par
            exemple. Toutefois, le caractère séparateur n'est pas géré
            spécifiquement s'il apparaît dans la valeur d'une colonne&nbsp;; le
            format <acronym>CSV</acronym> peut être mieux adapté pour ces cas
            de figure.
           </para>

           <para>Le format <literal>csv</literal>
            <indexterm>
             <primary>Format CSV (Comma-Separated Values)</primary>
             <secondary>dans psql</secondary>
            </indexterm>
            sort les valeurs des colonnes séparées par des virgules, en
            appliquant les règles d'échappement décrites dans
            <ulink url="https://tools.ietf.org/html/rfc4180">la RFC 4180</ulink>.
            Cette sortie est compatible avec le format CSV de la commande serveur
            <command>COPY</command>.
            Une ligne d'entête avec les noms des colonnes est produite
            sauf si le paramètre <literal>tuples_only</literal> est à
            <literal>on</literal>. Le titre et le pied de table ne figurent
            pas dans la sortie.
            Chaque ligne se termine par la séquence de fin de ligne qui dépend
            du système d'exploitation, et qui est typiquement un seul caractère
            de nouvelle ligne (<literal>\n</literal>) sur les systèmes Unix,
            ou une séquence constituée d'un retour chariot et nouvelle ligne
            (<literal>\r\n</literal>) sur Microsoft Windows.
            Un caractère de séparation de champs autre que la virgule peut
            être choisi avec <command>\pset csv_fieldsep</command>.
           </para>

           <para>
            Le format <literal>wrapped</literal> est comme <literal>aligned</literal>, sauf qu'il retourne à
            la ligne dans les données de grande taille afin que la sortie tienne dans la largeur
            de colonne cible. La largeur cible est déterminée comme décrit à l'option
            <literal>columns</literal>. Notez que <application>psql</application> n'essaie pas de revenir à la ligne dans
            les titres de colonnes. Par conséquent, si la largeur totale nécessaire pour le titre
            de colonne est plus grande que la largeur cible, le format
            <literal>wrapped</literal> se comporte de la même manière que  <literal>aligned</literal>.
           </para>

           <para>
            Les formats <literal>asciidoc</literal>, <literal>html</literal>,
            <literal>latex</literal>, <literal>latex-longtable</literal> et
            <literal>troff-ms</literal>
            produisent des tableaux destinées à être inclus dans des documents
            utilisant les langages de balisage respectifs. Ce ne sont pas des
            documents complets&nbsp;! Ce n'est pas forcément nécessaire en
            <acronym>HTML</acronym> mais en <application>LaTeX</application>,
            vous devez avoir une structure de document complet.
            Le format <literal>latex</literal> utilise l'environnement <literal>tabular</literal>
            de <application>LaTeX</application>. Le format <literal>latex-longtable</literal>
            requiert les paquets <application>LaTeX</application>
            <literal>longtable</literal> et <literal>booktabs</literal>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>linestyle</literal></term>
          <listitem>
           <para>

            Positionne le style des lignes de bordure sur
            <literal>ascii</literal>, <literal>old-ascii</literal>
            <literal>unicode</literal>.
            Les abréviations uniques sont autorisées. (Cela signifie qu'une
            lettre suffit.)
            La valeur par défaut est <literal>ascii</literal>.
            Cette option affecte seulement les formats de sortie
            <literal>aligned</literal> et
            <literal>wrapped</literal>.
           </para>

           <para>
            Le style <literal>ascii</literal> utilise les caractères basiques
            <acronym>ASCII</acronym>. Les retours à la ligne dans les données
            sont représentés par un symbole <literal>+</literal> dans la marge
            de droite.
            Quand le format <literal>wrapped</literal> déroule les données
            d'une ligne à l'autre sans caractère retour à la ligne, un point
            (<literal>.</literal>) est affiché dans la marge droite de la
            première ligne et à nouveau dans la marge gauche de la ligne
            suivante.
           </para>

           <para>
            Le style <literal>old-ascii</literal> utilise des caractères basiques <acronym>ASCII</acronym>,
            utilisant le style de formatage utilisé dans
            <productname>PostgreSQL</productname> 8.4 and et les versions plus anciennes.
            Les retours à la ligne dans les données sont représentés par un symbole <literal>:</literal>
            à la place du séparateur de colonnes placé à gauche. Quand les données sont réparties sur plusieurs
            lignes sans qu'il y ait de caractère de retour à la ligne dans les données, un symbole <literal>;</literal> est utilisé
            à la place du séparateur de colonne de gauche.
           </para>

           <para>
            Le style <literal>unicode</literal> utilise les caractères Unicode de dessin de boîte.
            Les retours à la ligne dans les données sont représentés par un symbole de retour à la ligne
            dans la marge de droite. Lorsque les données sont réparties sur plusieurs lignes, sans qu'il y ait de caractère de retour à la ligne dans les données, le symbole ellipse est affiché dans
            la marge de droite de la première ligne, et également dans la marge de gauche de la ligne suivante.
           </para>

           <para>
            Quand le paramètre <literal>border</literal> vaut plus que zéro, l'option <literal>linestyle</literal>
            détermine également les caractères utilisés pour dessiner les lignes de bordure.
            Les simples caractères <acronym>ASCII</acronym> fonctionnent partout, mais les
            caractères Unicode sont plus jolis sur les affichages qui les reconnaissent.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>null</literal></term>
          <listitem>
           <para>
            Positionne la chaîne de caractères à afficher à la place d'une valeur null.
            Par défaut rien n'est affiché, ce qui peut facilement être confondu avec une
            chaîne de caractères vide. Par exemple, on peut préférer
            <literal>\pset null '(null)'</literal>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>numericlocale</literal></term>
          <listitem>
           <para>
            Si <replaceable class="parameter">valeur</replaceable> est précisée, elle doit valoir soit
            <literal>on</literal>, soit <literal>off</literal>
            afin d'activer ou désactiver l'affichage d'un caractère dépendant de la locale
            pour séparer des groupes de chiffres à gauche du séparateur décimal.
            Si <replaceable class="parameter">valeur</replaceable> est omise, la commande bascule entre
            la sortie numérique classique et celle spécifique à la locale.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>pager</literal></term>
          <listitem>
           <para>
            Contrôle l'utilisation d'un paginateur pour les requêtes et les
            affichages de l'aide de <application>psql</application>. Si la variable
            d'environnement <envar>PSQL_PAGER</envar> ou <envar>PAGER</envar> est configurée, la sortie est
            envoyée via un tube (<foreignphrase>pipe</foreignphrase>) dans
            le programme spécifié. Sinon, une valeur par
            défaut dépendant de la plateforme (comme <filename>more</filename>)
            est utilisée.
           </para>

           <para>
            Quand l'option <literal>pager</literal> vaut <literal>off</literal>, le paginateur
            n'est pas utilisé. Quand l'option <literal>pager</literal> vaut
            <literal>on</literal>, et que cela est approprié, c'est-à-dire
            quand la sortie est dirigée vers un terminal et ne tient pas dans
            l'écran, le paginateur est utilisé.
            L'option <literal>pager</literal> peut également être positionnée à <literal>always</literal>,
            ce qui a pour effet d'utiliser le paginateur pour toutes les sorties terminal,
            que ces dernières tiennent ou non dans l'écran.
            <literal>\pset pager</literal>,
            sans préciser <replaceable class="parameter">valeur</replaceable>,
            bascule entre les états "paginateur activé" et "paginateur désactivé".
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>pager_min_lines</literal></term>
          <listitem>
           <para>
            Si <literal>pager_min_lines</literal> est configuré à un numéro
            supérieur à la hauteur de page, le programme de pagination ne sera
            appelé que s'il y a au moins ce nombre de lignes à afficher.
            La configuration par défaut est 0.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>recordsep</literal></term>
          <listitem>
           <para>
            Indique le séparateur d'enregistrement (ligne) à utiliser dans le
            mode d'affichage non aligné. La valeur par défaut est un caractère de
            retour chariot.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>recordsep_zero</literal></term>
          <listitem>
           <para>
            Configure le séparateur d'enregistrements pour qu'il utilise un octet zéro
            dans le format non aligné en sortie.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>tableattr</literal> (ou <literal>T</literal>)</term>
          <listitem>
           <para>
            Dans le format <acronym>HTML</acronym>, ceci indique les attributs
            à placer dans la balise <sgmltag>table</sgmltag>. Ce
            pourrait être par exemple <literal>cellpadding</literal> ou
            <literal>bgcolor</literal>. Notez que vous ne voulez probablement pas
            spécifier <literal>border</literal> puisqu'il est déjà pris en compte
            par <literal>\pset border</literal>. Si <replaceable
            class="parameter">valeur</replaceable> n'est pas précisée, aucun
            attribut de table n'est positionné.
           </para>
           <para>
            Dans le format <literal>latex-longtable</literal>, ceci contrôle
            la largeur proportionnelle de chaque colonne contenant un type de
            données aligné à gauche. Il est spécifié en tant que liste de
            valeurs séparées par des espaces blancs, par exemple
            <literal>'0.2 0.2 0.6'</literal>. Les colonnes en sortie non
            spécifiées utilisent la dernière valeur indiquée.
           </para>
          </listitem>
         </varlistentry>


         <varlistentry>
          <term><literal>title</literal> (or <literal>C</literal>)</term>
          <listitem>
           <para>
            Initialise le titre de la table pour toutes les tables affichées
            ensuite. Ceci peut être utilisé pour ajouter des balises de description
            à l'affichage. Si aucun <replaceable class="parameter">valeur</replaceable> n'est donné, le titre n'est pas
            initialisé.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>tuples_only</literal> (ou <literal>t</literal>)</term>
          <listitem>
           <para>
            Si <replaceable class="parameter">valeur</replaceable> est spécifiée, elle doit
            valoir soit <literal>on</literal>, soit <literal>off</literal>, ce qui va
            activer ou désactiver le mode «&nbsp;tuples seulement&nbsp;».
            Si <replaceable class="parameter">valeur</replaceable> est omise,
            la commande bascule entre la sortie normale et la sortie
            «&nbsp;tuples seulement&nbsp;».
            La sortie normale comprend des informations supplémentaires telles que
            les en-têtes de colonnes, les titres, et différents pieds. Dans le mode
            «&nbsp;tuples seulement&nbsp;», seules les données de la table sont affichées.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>unicode_border_linestyle</literal></term>
          <listitem>
           <para>
            Configure le style d'affichage de la bordure pour le style de
            ligne <literal>unicode</literal> soit à <literal>single</literal>
            soit à <literal>double</literal>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>unicode_column_linestyle</literal></term>
          <listitem>
           <para>
            Configure le style d'affichage de la colonne pour le style de
            ligne <literal>unicode</literal> soit à <literal>single</literal>
            soit à <literal>double</literal>.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>unicode_header_linestyle</literal></term>
          <listitem>
           <para>
            Configure le style d'affichage de l'en-tête pour le style de
            ligne <literal>unicode</literal> soit à <literal>single</literal>
            soit à <literal>double</literal>.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>

       <para>
        Des exemples d'utilisation de ces différents formats sont
        disponibles dans la section <xref linkend="app-psql-examples"/>.
       </para>

       <tip>
        <para>
         Il existe plusieurs raccourcis de commandes pour
         <command>\pset</command>. Voir
         <command>\a</command>, <command>\C</command>, <command>\f</command>,
         <command>\H</command>, <command>\t</command>, <command>\T</command>
         et <command>\x</command>.
        </para>
       </tip>

      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\q</literal> ou <literal>\quit</literal></term>
      <listitem>
       <para>
        Quitte le programme <application>psql</application>.
        Avec un script, seule l'exécution du script est terminée.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\qecho <replaceable
        class="parameter">texte</replaceable> [ ... ] </literal></term>
      <listitem>
       <para>
        Cette commande est identique à <command>\echo</command> sauf que
        les affichages sont écrits dans le canal d'affichage des requêtes,
        configuré par <command>\o</command>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\r</literal> ou <literal>\reset</literal></term>
      <listitem>
       <para>
        Réinitialise (efface) le tampon de requêtes.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\s [ <replaceable
        class="parameter">nomfichier</replaceable> ]</literal></term>
      <listitem>
       <para>
        Envoie l'historique de la ligne de commandes de
        <application>psql</application> dans <replaceable class="parameter">nomfichier</replaceable>.
        Si <replaceable class="parameter">nomfichier</replaceable> est omis,
        l'historique est écrit sur la sortie standard (en utilisant le paginateur
        si approprié). Cette commande n'est pas disponible si
        <application>psql</application> a été construit sans le support de
        <application>Readline</application>.
       </para>

      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\set [ <replaceable
        class="parameter">nom</replaceable> [ <replaceable
        class="parameter">valeur</replaceable> [ ... ]]]</literal></term>

      <listitem>
       <para>
        Initialise la variable <replaceable
        class="parameter">nom</replaceable> de <application>psql</application> à <replaceable
        class="parameter">valeur</replaceable> ou, si plus d'une valeur est
        donnée, à la concaténation de toutes les valeurs. Si un seul argument est
        donné, la variable est configurée avec une valeur vide.
        Pour désinitialiser une variable, utilisez la commande
        <command>\unset</command>.
       </para>

       <para>
        <command>\set</command> sans arguments affiche le nom et la valeur de toutes
        les variables <application>psql</application> actuellement configurées.
       </para>

       <para>
        Les noms de variables valides peuvent contenir des lettres, chiffres
        et tirets bas (_). Voir la section <xref linkend="app-psql-variables"/>
        ci-dessous pour les détails. Les noms des variables sont sensibles à la
        casse.
       </para>

       <para>
        Certaines variables sont spéciales, dans le sens qu'elles contrôlent le
        comportement de <application>psql</application> ou qu'elles sont mises
        à jour pour refléter l'état de la connexion. Ces variables sont
        documentées plus bas dans <xref linkend="app-psql-variables"/>.
       </para>

       <note>
        <para>
         Cette commande est sans relation avec la commande
         <acronym>SQL</acronym> <xref linkend="sql-set"/>.
        </para>
       </note>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\setenv <replaceable class="parameter">nom</replaceable> [ <replaceable class="parameter">valeur</replaceable> ]</literal></term>

      <listitem>
       <para>
        Configure la variable d'environnement <replaceable
        class="parameter">nom</replaceable> à <replaceable
        class="parameter">valeur</replaceable>, ou si la
        <replaceable class="parameter">valeur</replaceable> n'est pas fournie,
        désinitialise la variable d'environnement. Par exemple&nbsp;:
        <programlisting>
testdb=&gt; <userinput>\setenv PAGER less</userinput>
testdb=&gt; <userinput>\setenv LESS -imx4F</userinput>
        </programlisting></para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\sf[+] <replaceable class="parameter">description_fonction</replaceable> </literal></term>

      <listitem>
       <para>
        Cette commande récupère et affiche la définition d'une fonction ou
        procédure sous la forme d'une commande <command>CREATE OR REPLACE
         FUNCTION</command> ou <command>CREATE OR REPLACE PROCEDURE</command>.
        La définition est affichée via le canal de sortie courant, tel que
        défini par <command>\o</command>.
       </para>

       <para>
        La fonction cible peut être spécifiée par son seul nom, ou bien par
        ses nom et arguments, par exemple, <literal>foo(integer, text)</literal>.
        Fournir les types des arguments devient obligatoire si plusieurs
        fonctions portent le même nom.
       </para>

       <para>
        Si <literal>+</literal> est ajouté à la commande, les numéros de lignes
        sont affichés, la ligne 1 débutant à partir du corps de la fonction.
       </para>

       <para>
        Contrairement à la majorité des autres métacommandes, l'intégralité du
        reste de la ligne est toujours pris en tant qu'argument(s) de
        <command>\sf</command> et ni l'interpolation des variables ni la
        substitution par guillemets inverses ne seront effectuées.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\sv[+] <replaceable class="parameter">view_name</replaceable> </literal></term>

      <listitem>
       <para>
        Cette commande récupère et affiche la définition de la vue nommée,
        dans la forme d'une commande <command>CREATE OR REPLACE
         VIEW</command>. La définition est affichée au travers du canal de
        sortie actuel, comme configuré par <command>\o</command>.
       </para>

       <para>
        Si <literal>+</literal> est ajouté au nom de commande, les lignes de
        sorties sont numérotées à partir de 1.
       </para>

       <para>
        Contrairement à la majorité des autres métacommandes, l'intégralité du
        reste de la ligne est toujours pris en tant qu'argument(s) de
        <command>\sv</command> et ni l'interpolation des variables ni la
        substitution par guillemets inverses ne sont effectuées dans les arguments.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\t</literal></term>
      <listitem>
       <para>
        Bascule l'affichage des en-têtes de nom de colonne en sortie et celle du
        bas de page indiquant le nombre de lignes. Cette commande est
        équivalente à <literal>\pset tuples_only</literal> et est fournie pour en
        faciliter l'accès.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\T <replaceable
        class="parameter">options_table</replaceable></literal></term>
      <listitem>
       <para>
        Spécifie les attributs qui seront placés dans le tag
        <sgmltag>table</sgmltag> pour le format de sortie <acronym>HTML</acronym>.
        Cette commande est équivalente à <literal>\pset
         tableattr <replaceable
         class="parameter">options_table</replaceable></literal>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\timing [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> ]</literal></term>
      <listitem>
       <para>
        Avec un paramètre, affiche ou supprime l'affichage du temps
        d'exécution de chaque requête. Sans paramètre, commute l'affichage
        entre on et off. L'affichage est en millisecondes&nbsp;; les intervalles
        plus longs qu'une seconde sont affichés au format minutes:secondes et
        les champs heures et jours sont ajoutés si nécessaires.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\unset <replaceable class="parameter">nom</replaceable></literal></term>

      <listitem>
       <para>
        Désinitialise (supprime) la variable <application>psql</application>
        <replaceable class="parameter">nom</replaceable>.
       </para>

       <para>
        La plupart des variables qui contrôlent le comportement de
        <application>psql</application> ne peuvent pas être
        désinitialisées&nbsp;; la commande <literal>\unset</literal> est
        interprétée comme les remettant à leur valeur par défaut. Voir <xref
        linkend="app-psql-variables"/> plus bas.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\w</literal> ou <literal>\write</literal> <replaceable class="parameter">nomfichier</replaceable></term>
      <term><literal>\w</literal> ou <literal>\write</literal> <literal>|</literal><replaceable class="parameter">commande</replaceable></term>
      <listitem>
       <para>
        Place le tampon de requête en cours dans le fichier <replaceable
        class="parameter">nomfichier</replaceable> ou l'envoie via un tube à la
        commande shell <replaceable class="parameter">commande</replaceable>.
        Si le tampon de requête actuel est vide, la dernière requête exécutée
        est affichée à nouveau.
       </para>

       <para>
        Si l'argument débute par <literal>|</literal>, alors l'intégralité du
        reste de la ligne est pris en tant que
        <replaceable class="parameter">commande</replaceable> à exécuter
        et ni l'interpolation des variables ni la substitution par guillemets
        inverses n'y sont effectuées. Le reste de la ligne est simplement
        passé littéralement au shell.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\warn <replaceable class="parameter">text</replaceable> [ ... ]</literal></term>
      <listitem>
       <para>
        Cette commande est identique à <command>\echo</command> sauf que
        la sortie sera écrite sur la sortie des erreurs de
        <application>psql</application> plutôt que la sortie standard.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>\watch [ <replaceable class="parameter">seconds</replaceable> ]</literal></term>
      <listitem>
       <para>
        Exécute en répété le tampon de requête courant (comme
        <literal>\g</literal>) jusqu'à être interrompu explicitement ou que la
        requête échoue. Attend le nombre spécifié de secondes (2 par défaut)
        entre les exécutions. Chaque résultat de requête est affiché avec un
        en-tête qui inclut la chaîne <literal>\pset title</literal> (si c'est
        activé), l'heure du début de la requête, et l'intervalle.
       </para>
       <para>
        Si le tampon de requête actuel est vide, la dernière requête envoyée
        est exécutée à nouveau.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\x [ <replaceable class="parameter">on</replaceable> | <replaceable class="parameter">off</replaceable> | <replaceable class="parameter">auto</replaceable> ]</literal></term>
      <listitem>
       <para>
        Configure ou bascule le mode étendu de formatage en table. C'est équivalent à
        <literal>\pset expanded</literal>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\z [ <link linkend="app-psql-patterns"><replaceable
         class="parameter">motif</replaceable></link> ]</literal></term>
      <listitem>
       <para>
        Liste les tables, vues et séquences
        avec leur droits d'accès associés. Si un <replaceable
        class="parameter">motif</replaceable> est spécifié, seules les tables,
        vues et séquences dont le nom correspond au motif sont listées.
       </para>

       <para>
        Ceci est un alias pour <command>\dp</command> (<quote>affichage des
         droits</quote>).
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\! [ <replaceable
        class="parameter">commande</replaceable> ]</literal></term>
      <listitem>
       <para>
        Sans argument, échappe vers un sous-shell&nbsp;; <application>psql</application>
        reprendra quand le sous-shell se terminera. Avec un argument, exécute
        la commande shell <replaceable class="parameter">commande</replaceable>.
       </para>

       <para>
        Contrairement à la majorité des autres métacommandes, l'intégralité du
        reste de la ligne est toujours pris en compte en tant qu'arguments
        de <command>\!</command>, et ni l'interpolation des variables ni la
        substitution par guillemets inverses ne seront effectuées sur les
        arguments. Le reste de la ligne est simplement envoyé directement au
        shell.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\? [ <replaceable class="parameter">thème</replaceable> ]</literal></term>
      <listitem>
       <para>
        Affiche l'aide. Le paramètre optionnel <replaceable
        class="parameter">thème</replaceable> (par défaut à
        <literal>commands</literal>) sélectionne les parties de
        <application>psql</application> à expliquer&nbsp;:
        <literal>commands</literal> décrit les métacommandes de
        <application>psql</application>&nbsp;; <literal>options</literal>
        décrit les options en ligne de commande de
        <application>psql</application>&nbsp;; et <literal>variables</literal>
        affiche de l'aide sur les variables de configuration de
        <application>psql</application>.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>\;</literal></term>
      <listitem>
       <para>
        Un antislash suivi d'un point-virgule n'est pas une méta-commande
        comme les commandes précédentes. Cela permet d'ajouter un
        point-virgule au tampon de requête sans autre traitement.
       </para>

       <para>
        D'ordinaire, <application>psql</application> envoie une commande SQL
        au serveur dès qu'il atteint un point-virgule de fin de commande, y
        compris s'il reste du texte sur la ligne courante. Donc, par
        exemple&nbsp;:
        <programlisting>
select 1; select 2; select 3;
        </programlisting>
        résultera en trois commandes SQL envoyées individuellement au serveur,
        les résultats de chacune étant affichés avant l'exécution de la
        commande suivante. Néanmoins, un point-virgule saisi avec un antislash
        avant, <literal>\;</literal>, ne déclenchera pas le traitement de la
        commande, pour que la commande précédente et la commande suivante
        soient en fait combinées et envoyées au serveur comme une seule
        requête. Par exemple&nbsp;
        <programlisting>
select 1\; select 2\; select 3;
        </programlisting>
        résultera en l'envoi des trois commandes SQL en une seule requête
        lorsque le premier point-virgule sans antislash est atteint. Le
        serveur exécute une telle requête comme une seule transaction, sauf
        s'il y a des commandes
        <command>BEGIN</command>/<command>COMMIT</command> explicites incluses
        dans la chaîne pour la diviser en plusieurs transactions. (Voir <xref
        linkend="protocol-flow-multi-statement"/> pour plus de détails sur la
        gestion par le serveur des chaînes de plusieurs requêtes.)
        <application>psql</application> n'affiche que les résultats de la
        dernière requête pour chaque chaîne qu'il reçoit. Dans cet exemple,
        bien que les trois <command>SELECT</command> sont exécutés,
        <application>psql</application> affichera seulement le
        <literal>3</literal>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <refsect3 id="app-psql-patterns" xreflabel="Motifs">
    <title>Motifs</title>

    <indexterm>
     <primary>motifs</primary>
     <secondary>dans psql et pg_dump</secondary>
    </indexterm>

    <para>
     Les différentes commandes <literal>\d</literal> acceptent un paramètre
     <replaceable class="parameter">motif</replaceable> pour spécifier le(s)
     nom(s) d'objet à afficher. Dans le cas le plus simple, un motif est
     seulement le nom exact de l'objet. Les caractères à l'intérieur du
     motif sont normalement mis en minuscule comme pour les noms SQL&nbsp;;
     par exemple, <literal>\dt FOO</literal> affichera la table nommée
     <literal>foo</literal>. Comme pour les noms SQL, placer des guillemets
     doubles autour d'un motif empêchera la mise en minuscule. Si vous devez
     inclure un guillemet double dans un motif, écrivez-le en double en
     accord avec les règles sur les identifiants SQL. Par exemple,
     <literal>\dt "FOO""BAR"</literal> affichera la table nommée
     <literal>FOO"BAR</literal> (et non pas <literal>foo"bar</literal>).
     Contrairement aux règles normales pour les noms SQL, vous pouvez placer
     des guillemets doubles simplement autour d'une partie d'un motif,
     par exemple <literal>\dt FOO"FOO"BAR</literal> affichera la table nommée
     <literal>fooFOObar</literal>.
    </para>

    <para>
     Lorsque le paramètre <replaceable class="parameter">motif</replaceable>
     est complètement absent, la commande <literal>\d</literal> affiche tous les objets
     visibles dans le chemin de recherche courant &mdash; cela est équivalent à l'utilisation du motif
     <literal>*</literal>.
     (Un objet est dit <firstterm>visible</firstterm> si le schéma qui le contient
     est dans le chemin de recherche et qu'aucun objet de même type et même nom n'apparaît
     avant dans le chemin de recherche. Cela est équivalent à dire que
     l'objet peut être référencé par son nom sans préciser explicitement
     le schéma.)
     Pour voir tous les objets de la base quelle que soit leur visibilité,
     utilisez le motif <literal>*.*</literal> .
    </para>

    <para>
     À l'intérieur d'un motif, <literal>*</literal> correspond à toute
     séquence de caractères (et aussi à aucun) alors que <literal>?</literal> ne
     correspond qu'à un seul caractère. (Cette notation est comparable à celle des
     motifs de nom de fichier Unix.) Par exemple, <literal>\dt int*</literal>
     affiche les tables dont le nom commence avec <literal>int</literal>. Mais à
     l'intérieur de guillemets doubles, <literal>*</literal> et <literal>?</literal>
     perdent leurs significations spéciales et sont donc traités directement.
    </para>

    <para>
     Un motif qui contient un point (<literal>.</literal>) est interprété comme
     le motif d'un nom de schéma suivi par celui d'un nom d'objet. Par exemple,
     <literal>\dt foo*.*bar*</literal> affiche toutes les tables dont le nom
     inclut <literal>bar</literal> et qui sont dans des schémas dont le
     nom commence avec <literal>foo</literal>. Sans point, le motif correspond
     seulement aux objets qui sont visibles dans le chemin de recherche
     actuel des schémas. De nouveau, un point dans des guillemets doubles
     perd sa signification spéciale et est traité directement.
    </para>

    <para>
     Les utilisateurs avancés peuvent utiliser des expressions rationnelles comme
     par exemple les classes de caractère (<literal>[0-9]</literal> pour tout
     chiffre). Tous les caractères spéciaux d'expression rationnelle fonctionnent
     de la façon indiquée dans <xref linkend="functions-posix-regexp"/>, sauf pour
     le <literal>.</literal> qui est pris comme séparateur (voir ci-dessus),
     l'étoile (<literal>*</literal>) qui est transformée en l'expression
     rationnelle <literal>.*</literal> et <literal>?</literal> qui est transformée
     en <literal>.</literal>, et <literal>$</literal> qui est une correspondance
     littérale. Vous pouvez émuler ces caractères si besoin en
     écrivant <literal>?</literal> pour <literal>.</literal>,
     <literal>(<replaceable class="parameter">R</replaceable>+|)</literal> pour
     <literal><replaceable class="parameter">R</replaceable>*</literal> et
     <literal>(<replaceable class="parameter">R</replaceable>|)</literal> pour
     <literal><replaceable class="parameter">R</replaceable>?</literal>.
     <literal>$</literal> n'est pas nécessaire en tant que caractère d'une
     expression rationnelle car le motif doit correspondre au nom complet,
     contrairement à l'interprétation habituelle des expressions rationnelles
     (en d'autres termes, <literal>$</literal> est ajouté automatiquement à
     votre motif). Écrivez <literal>*</literal> au début et/ou à la fin si
     vous ne souhaitez pas que le motif soit ancré.
     Notez qu'à l'intérieur de guillemets doubles, tous les
     caractères spéciaux des expressions rationnelles perdent leur signification
     spéciale et sont traités directement. De plus, ces caractères sont traités
     littéralement dans les motifs des noms d'opérateurs (par exemple
     pour l'argument de <literal>\do</literal>).
    </para>
   </refsect3>
  </refsect2>

  <refsect2>
   <title>Fonctionnalités avancées</title>

   <refsect3 id="app-psql-variables" xreflabel="Variables">
    <title>Variables</title>

    <para>
     <application>psql</application> fournit des fonctionnalités de substitution
     de variable similaire aux shells de commandes Unix. Les variables sont
     simplement des paires nom/valeur où la valeur peut être toute chaîne, quelle
     que soit sa longueur. Le nom doit consister en lettres (incluant les
     lettres non latines), chiffres et tirets bas.
    </para>

    <para>
     Pour configurer une variable, utilisez la
     métacommande <application>psql</application> <command>\set</command>.
     Par exemple&nbsp;:
     <programlisting>basetest=&gt; <userinput>\set foo bar</userinput>
     </programlisting>
     initialise la variable <literal>foo</literal> avec la valeur
     <literal>bar</literal>. Pour récupérer le contenu de la variable, précédez
     le nom avec un caractère deux-points, par exemple&nbsp;:
     <programlisting>basetest=&gt; <userinput>\echo :foo</userinput>
bar
     </programlisting>
     Ceci fonctionne avec les commandes SQL et les métacommandes standards. Il
     y a plus de détails dans <xref linkend="app-psql-interpolation"/>, ci-dessous.
    </para>

    <para>
     Si vous appelez <command>\set</command> sans second argument, la variable
     est initialisée avec une chaîne vide. Pour désinitialiser (c'est-a-dire
     supprimer) une
     variable, utilisez la commande <command>\unset</command>.
     Pour afficher les valeurs de toutes les variables, appelez
     <command>\set</command> sans argument.
    </para>

    <note>
     <para>
      Les arguments de <command>\set</command> sont sujets aux même règles de
      substitution que les autres commandes. Du coup, vous pouvez construire des
      références intéressantes comme <literal>\set :foo 'quelquechose'</literal>
      et obtenir des <quote>liens doux</quote> ou des <quote>variables de
       variables</quote> comme, respectivement, en <productname>Perl</productname> ou
      <productname><acronym>PHP</acronym></productname>. Malheureusement (ou
      heureusement&nbsp;?), on ne peut rien faire
      d'utile avec ces constructions. D'un autre côté, <literal>\set bar
       :foo</literal> est un moyen parfaitement valide de copier une variable.
     </para>
    </note>

    <para>
     Un certain nombre de ces variables sont traitées d'une façon particulière
     par <application>psql</application>. Elles représentent certaines
     configurations d'options pouvant être changées à l'exécution en modifiant
     la valeur de la variable ou, dans certains cas, représentent un état
     modifiable de <application>psql</application>. La convention veut que
     tous les noms de variables traités
     spécialement utilisent des lettres ASCII en majuscule (et éventuellement
     des chiffres et des tirets bas). Pour s'assurer une compatibilité maximum
     dans le futur, éviter d'utiliser de tels noms de variables pour vos
     propres besoins.
    </para>

    <para>
     Les variables qui contrôlent le comportement de <application>psql</application>
     ne peuvent pas être désinitialisées ou se voir affecter des valeurs
     incorrectes. Une commande <literal>\unset</literal> est autorisée mais
     interprétée comme remettant la variable à sa valeur par défaut. Une commande
     <literal>\set</literal> sans second argument est interprétée comme affectant
     <literal>on</literal> à la variable, pour les variables de contrôle qui
     acceptent cette valeur, et sera rejeté pour les autres. Les variables de
     contrôle qui acceptent les valeurs <literal>on</literal>
     et <literal>off</literal> accepteront également d'autres formes communes
     d'écriture des valeurs booléennes, comme <literal>true</literal> et
     <literal>false</literal>.
    </para>

    <para>
     Voici une liste des variables spéciales&nbsp;:
    </para>

    <variablelist>
     <varlistentry>
      <term>
       <varname>AUTOCOMMIT</varname>
       <indexterm>
        <primary>autocommit</primary>
        <secondary>psql</secondary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Si actif (<literal>on</literal>, valeur par défaut), chaque commande SQL est
        automatiquement validée si elle se termine avec succès. Pour suspendre
        la validation dans ce mode, vous devez saisir une commande SQL
        <command>BEGIN</command> ou <command>START TRANSACTION</command>. Lorsqu'elle est
        désactivée (<literal>off</literal>) ou non initialisée, les commandes SQL ne
        sont plus validées tant que vous ne lancez pas explicitement
        <command>COMMIT</command> ou <command>END</command>. Le mode sans autocommit
        fonctionne en lançant implicitement un <command>BEGIN</command>,
        juste avant toute commande qui n'est pas déjà dans un bloc de
        transaction et qui n'est pas elle-même un <command>BEGIN</command> ou une autre
        commande de contrôle de transaction, ou une commande qui ne peut pas être
        exécutée à l'intérieur d'un bloc de transaction (comme <command>VACUUM</command>).
       </para>

       <note>
        <para>
         Dans le mode sans autocommit, vous devez annuler explicitement toute
         transaction échouée en saisissant <command>ABORT</command> ou
         <command>ROLLBACK</command>. Gardez aussi en tête que si vous sortez d'une
         session sans validation, votre travail est perdu.
        </para>
       </note>

       <note>
        <para>
         Le mode auto-commit est le comportement traditionnel de
         <productname>PostgreSQL</productname> alors que le mode sans autocommit est plus
         proche des spécifications SQL. Si vous préférez sans autocommit, vous
         pouvez le configurer dans le fichier <filename>psqlrc</filename>
         global du système ou dans votre fichier <filename>~/.psqlrc</filename>.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>COMP_KEYWORD_CASE</varname></term>
      <listitem>
       <para>
        Détermine la casse à utiliser lors de la complétion d'un mot clé SQL.
        S'il est configuré à <literal>lower</literal> ou <literal>upper</literal>,
        le mot complété sera, respectivement, en minuscule ou en majuscule.
        Si la variable est configurée à <literal>preserve-lower</literal> ou
        <literal>preserve-upper</literal> (valeur par défaut), le mot complété
        sera dans la casse du mot déjà saisi, mais les mots qui n'ont pas eu un
        début de saisie seront complétés, respectivement, soit en minuscule soit
        en majuscule.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>DBNAME</varname></term>
      <listitem>
       <para>
        Le nom de la base de données à laquelle vous êtes actuellement connecté.
        Ceci est configuré à chaque fois que vous vous connectez à une base de
        données (ainsi qu'au lancement du programme) mais peut être
        changé ou désinitialisé.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>ECHO</varname></term>
      <listitem>
       <para>
        Si cette variable est initialisée à <literal>all</literal>, toutes les
        lignes non vides saisies sont envoyées sur la sortie standard tout de
        suite après leur lecture. (Ceci ne s'applique pas aux lignes lues de
        façon interactive.) Pour sélectionner ce comportement au lancement du
        programme, utilisez l'option <option>-a</option>. Si
        <varname>ECHO</varname> vaut <literal>queries</literal>,
        <application>psql</application> affiche chaque requête sur la sortie
        standard comme elle est envoyée au serveur. L'option pour choisir ce
        comportement est <option>-e</option>. Si elle est configurée à
        <literal>errors</literal>, seules les requêtes échouées seront
        affichées sur la sortie standard des erreurs. L'option en ligne de
        commande pour ce comportement est <option>-b</option>. Si elle est
        configurée à <literal>none</literal> (valeur par défaut), alors aucune requête n'est
        affichée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>ECHO_HIDDEN</varname></term>
      <listitem>
       <para>
        Quand cette variable est initialisée à <literal>on</literal> et qu'une
        commande antislash est envoyée à la base de données, la requête est
        d'abord affichée. Cette fonctionnalité vous aide à étudier le
        fonctionnement interne de
        <productname>PostgreSQL</productname> et fournir des fonctionnalités
        similaires dans vos propres programmes. (Pour sélectionner ce
        comportement au lancement du programme, utilisez l'option
        <option>-E</option>.) Si vous configurez la variable avec la valeur
        <literal>noexec</literal>, les requêtes sont juste affichées mais ne
        sont pas réellement envoyées au serveur ni exécutées.
        La valeur par défaut est <literal>off</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>ENCODING</varname></term>
      <listitem>
       <para>
        Le codage courant du jeu de caractères du client.
        Il est fixé à chaque fois que vous vous connectez à une base de données
        (y compris au démarrage du programme), et quand vous changez
        l'encodage avec <literal>\encoding</literal>, mais il peut être changé ou
        désinitialisé.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>ERROR</varname></term>
      <listitem>
       <para>
        <literal>true</literal> si la dernière requête SQL a échoué,
        <literal>false</literal> si elle a réussi. Voir aussi
        <varname>SQLSTATE</varname>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>FETCH_COUNT</varname></term>
      <listitem>
       <para>
        Si cette variable est un entier plus grand que zéro, les résultats des
        requêtes <command>SELECT</command> sont récupérés et affichés en groupe de
        ce nombre de lignes, plutôt que par le comportement par défaut
        (récupération de l'ensemble complet des résultats avant l'affichage).
        Du coup, seule une petite quantité de mémoire est utilisée, quelle que
        soit la taille de l'ensemble des résultats. Une configuration entre
        100 et 1000 est habituellement utilisée lors de l'activation de cette
        fonctionnalité.
        Gardez en tête que lors de l'utilisation de cette fonctionnalité, une
        requête pourrait échouer après avoir affiché quelques lignes.
       </para>
       <tip>
        <para>
         Bien que vous puissiez utiliser tout format de sortie avec cette
         fonctionnalité, le format par défaut, <literal>aligned</literal>,
         rend mal car chaque groupe de <varname>FETCH_COUNT</varname> lignes
         sera formaté séparément, modifiant ainsi les largeurs de colonnes
         suivant les lignes du groupe. Les autres formats d'affichage
         fonctionnent mieux.
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HIDE_TABLEAM</varname></term>
      <listitem>
       <para>
        Si cette variable est positionnée à <literal>true</literal>, le détail
        de la méthode d'accès d'une table n'est pas affiché. C'est surtout
        utile pour les tests de non-régression.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HISTCONTROL</varname></term>
      <listitem>
       <para>
        Si cette variable est configurée à <literal>ignorespace</literal>, les
        lignes commençant avec un espace n'entrent pas dans la liste de
        l'historique. Si elle est initialisée avec la valeur
        <literal>ignoredups</literal>, les lignes correspondant aux précédentes
        lignes de l'historique n'entrent pas dans la liste. Une valeur de
        <literal>ignoreboth</literal> combine les deux options. Si elle est
        configurée avec <literal>none</literal>), toutes les lignes lues dans le mode interactif sont
        sauvegardées dans la liste de l'historique.
       </para>
       <note>
        <para>
         Cette fonctionnalité a été plagiée sans vergogne sur
         <application>Bash</application>.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HISTFILE</varname></term>
      <listitem>
       <para>
        Le nom du fichier utilisé pour stocker l'historique. Si désinitialisé,
        le nom du fichier sera la valeur de la variable d'environnement
        <envar>PSQL_HISTORY</envar>. Si celle-ci n'est pas initialisée, la
        valeur par défaut sera <filename>~/.psql_history</filename> ou
        <filename>%APPDATA%\postgresql\psql_history</filename> sur Windows.
        Par exemple, mettre&nbsp;:
       </para>
       <note>
        <para>
         Cette fonctionnalité a été plagiée sans vergogne sur
         <application>Bash</application>.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HISTSIZE</varname></term>
      <listitem>
       <para>
        Le nombre maximum de commandes à stocker dans l'historique des commandes
        (par défaut 500). Aucune limite ne sera appliquée si une valeur négative
        est donnée.
       </para>
       <note>
        <para>
         Cette fonctionnalité a été plagiée sans vergogne sur
         <application>Bash</application>.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>HOST</varname></term>
      <listitem>
       <para>
        L'hôte du serveur de la base de données sur lequel vous êtes actuellement
        connecté. Ceci est configuré à chaque fois que vous vous connectez à une
        base de données (ainsi qu'au lancement du programme) mais peut être
        changé ou désinitialisé.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>IGNOREEOF</varname></term>
      <listitem>
       <para>
        Si configuré à 1 ou inférieur, envoyer un caractère
        <acronym>EOF</acronym> (habituellement <keycombo
        action="simul"><keycap>Ctrl</keycap><keycap>D</keycap></keycombo>)
        dans une session interactive de <application>psql</application> ferme
        l'application. Si configuré à une valeur numérique supérieure, alors
        autant de caractères <acronym>EOF</acronym> consécutifs doivent être
        saisis pour terminer une session interactive. Une valeur non numérique
        sera interprétée comme valant 10. La valeur par défaut est 0.
       </para>
       <note>
        <para>
         Cette fonctionnalité a été plagiée sans vergogne sur
         <application>Bash</application>.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>LASTOID</varname></term>
      <listitem>
       <para>
        La valeur du dernier OID affecté, renvoyée à partir d'une commande
        <command>INSERT</command> ou <command>lo_import</command>. La
        validité de cette variable est seulement garantie jusqu'à
        l'affichage du résultat de la commande <acronym>SQL</acronym> suivante.
        Les serveurs <productname>PostgreSQL</productname> depuis la version 12
        ne gèrent plus la colonne système OID, et de ce fait LASTOID sera
        toujours à 0 à la suite d'une commande <command>INSERT</command>
        sur ces serveurs.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>LAST_ERROR_MESSAGE</varname></term>
      <term><varname>LAST_ERROR_SQLSTATE</varname></term>
      <listitem>
       <para>
        Le message d'erreur principal et le code SQLSTATE associé pour la plus
        récente requête en échec dans la session
        <application>psql</application> en cours, ou une chaîne vide et
        <literal>00000</literal> s'il n'y a eu aucune erreur dans la session
        actuelle.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>
       <varname>ON_ERROR_ROLLBACK</varname>
       <indexterm>
        <primary>rollback</primary>
        <secondary>psql</secondary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Lorsqu'il est actif (<literal>on</literal>), si une instruction d'un bloc de
        transaction génère une erreur, cette dernière est ignorée et la
        transaction continue. Lorsqu'il vaut <literal>interactive</literal>, ces
        erreurs sont seulement ignorées lors des sessions interactives, mais
        ne le sont pas lors de la lecture de scripts. Lorsqu'il est configuré
        à <literal>off</literal> (valeur par défaut), une instruction générant une
        erreur dans un bloc de transaction annule la transaction complète. Le
        mode avec <literal>on</literal> fonctionne en exécutant un
        <command>SAVEPOINT</command> implicite pour vous, juste avant chaque commande
        se trouvant dans un bloc de transaction, et annule jusqu'au
        point de sauvegarde si la commande échoue.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>ON_ERROR_STOP</varname></term>
      <listitem>
       <para>
        Par défaut, le traitement des commandes continue après une
        erreur. Quand cette variable est positionnée à <literal>on</literal>, le traitement
        sera immédiatement arrêté dès la première erreur rencontrée.
        En mode interactif, <application>psql</application>
        reviendra à l'invite de commande&nbsp;; sinon
        <application>psql</application> quittera en renvoyant le code
        d'erreur 3 pour distinguer ce cas des conditions d'erreurs
        fatales, qui utilisent le code 1. Dans tous les cas, tout script
        en cours d'exécution (le script de plus haut niveau, s'il y a, et
        tout autre script qui pourrait avoir été appelé) sera terminé
        immédiatement. Si la chaîne de commande de plus haut niveau contient
        plusieurs commandes SQL, le traitement s'arrêtera à la commande
        en cours.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PORT</varname></term>
      <listitem>
       <para>
        Le port du serveur de la base de données sur lequel vous êtes
        actuellement connecté. Ceci est configuré à chaque fois que vous vous
        connectez à une base de données (ainsi qu'au lancement du programme)
        mais peut être changé ou désinitialisé.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>PROMPT1</varname></term>
      <term><varname>PROMPT2</varname></term>
      <term><varname>PROMPT3</varname></term>
      <listitem>
       <para>
        Ils spécifient à quoi doit ressembler l'invite
        <application>psql</application>. Voir <xref
        linkend="app-psql-prompting"/>
        ci-dessous.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>QUIET</varname></term>
      <listitem>
       <para>
        Configurer cette variable à <literal>on</literal> est équivalent à
        l'option <option>-q</option> en ligne
        de commande. Elle n'est probablement pas très utile en mode
        interactif.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>ROW_COUNT</varname></term>
      <listitem>
       <para>
        Le nombre de lignes renvoyées ou affectées par la dernière requête
        SQL, ou 0 si la requête a échoué ou si elle n'a pas renvoyée un nombre
        de lignes.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SERVER_VERSION_NAME</varname></term>
      <term><varname>SERVER_VERSION_NUM</varname></term>
      <listitem>
       <para>
        Le numéro de version du serveur sous la forme d'une chaîne de
        caractères, par exemple <literal>9.6.2</literal>,
        <literal>10.1</literal> ou <literal>11beta1</literal>, et sous sa
        forme numérique, par exemple <literal>90602</literal> ou
        <literal>100001</literal>. Ces variables sont configurées à chaque
        fois que vous vous connectez à une base de données (y compris au
        lancement du programme) mais peuvent être modifiées ou déconfigurées.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SHOW_CONTEXT</varname></term>
      <listitem>
       <para>
        Cette variable peut être configurée avec les valeurs
        <literal>never</literal>, <literal>errors</literal> ou
        <literal>always</literal> pour contrôler si les champs
        <literal>CONTEXT</literal> sont affichés dans les messages du serveur.
        La valeur par défaut est <literal>errors</literal> (signifiant que ce
        contexte sera affiché dans les messages d'erreur et non pas dans les
        notes et avertissements). Ce paramètre n'a pas d'effet quand
        <varname>VERBOSITY</varname> est configuré à <literal>terse</literal>
        ou <literal>sqlstate</literal>.
        (Voir aussi <command>\errverbose</command>, à utiliser quand vous
        voulez une version verbose du dernier message d'erreur reçu.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SINGLELINE</varname></term>
      <listitem>
       <para>
        Configurer cette variable à <literal>on</literal> est équivalent à
        l'option <option>-S</option> en ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SINGLESTEP</varname></term>
      <listitem>
       <para>
        Configurer cette variable à <literal>on</literal> est équivalent à
        l'option <option>-s</option> en ligne de commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>SQLSTATE</varname></term>
      <listitem>
       <para>
        Le code d'erreur (voir <xref linkend="errcodes-appendix"/>) associé
        avec l'échec de la dernière requête SQL, ou <literal>00000</literal>
        si elle a réussi.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>USER</varname></term>
      <listitem>
       <para>
        L'utilisateur de la base de données sur laquelle vous êtes actuellement
        connecté. Ceci est configuré à chaque fois que vous vous connectez à une
        base de données (ainsi qu'au lancement du programme) mais peut être
        changé ou désinitialisé.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>VERBOSITY</varname></term>
      <listitem>
       <para>
        Cette variable peut être configurée avec les valeurs
        <literal>default</literal>, <literal>verbose</literal> (bavard),
        <literal>terse</literal> (succinct) ou <literal>sqlstate</literal> pour
        contrôler la verbosité des rapports d'erreurs.
        (Voir aussi <command>\errverbose</command> à utiliser quand vous avez
        besoin d'une version verbeuse de l'erreur que vous venez de
        récupérer.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><varname>VERSION</varname></term>
      <term><varname>VERSION_NAME</varname></term>
      <term><varname>VERSION_NUM</varname></term>
      <listitem>
       <para>
        Ces variables sont configurées au démarrage du programme pour
        refléter la version de <application>psql</application> respectivement
        sous la forme d'une chaîne de caractères, d'une chaîne courte (par
        exemple <literal>9.6.2</literal>, <literal>10.1</literal> ou
        <literal>11beta1</literal>) d'un nombre (par exemple
        <literal>90602</literal> ou <literal>100001</literal>). Elles peuvent
        être modifiées ou désinitialisées.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

   </refsect3>

   <refsect3 id="app-psql-interpolation" xreflabel="Interpolation SQL">
    <title>Interpolation <acronym>SQL</acronym></title>

    <para>
     Une fonctionnalité clé des variables <application>psql</application> est
     que vous pouvez les substituer (<quote>interpolation</quote>) dans des
     requêtes <acronym>SQL</acronym> standards, ainsi qu'en arguments de
     métacommandes. De plus, <application>psql</application> fournit des
     fonctionnalités vous assurant que les valeurs des variables utilisées
     comme constantes et identifiants SQL sont correctement mises entre
     guillemets. La syntaxe pour l'interpolation d'une valeur sans guillemets
     est de préfixer le nom de la variable avec le symbole deux-points
     (<literal>:</literal>). Par exemple&nbsp;:
     <programlisting>basetest=&gt; <userinput>\set foo 'ma_table'</userinput>
basetest=&gt; <userinput>SELECT * FROM :foo;</userinput>
     </programlisting>
     envoie alors la requête pour la table <literal>ma_table</literal>. Notez que cela peut
     être dangereux&nbsp;; la valeur de la variable est copiée de façon litérale, elle peut
     même contenir des guillemets non fermés, ou bien des commandes antislash. Vous devez
     vous assurer que cela a du sens à l'endroit où vous les utilisez.
    </para>

    <para>
     Lorsqu'une valeur doit être utilisée comme une chaîne SQL litérale ou un identifiant, il
     est plus sûr de s'arranger pour qu'elle soit entre guillemets. Afin de mettre en guillemets la valeur d'une variable
     en tant que chaîne SQL litérale, écrivez un caractère deux-points, suivi du nom de la
     variable entouré par des guillemets simples. Pour mettre entre guillemet la valeur en tant qu'identifiant SQL,
     écrivez un caractère deux-points suivi du nom de la valeur entouré de guillemets doubles.
     Ces constructions gèrent correctement les guillemets et autres caractères
     spéciaux intégrés dans la valeur de la variable. L'exemple précédent
     peut s'écrire de façon plus sûre ainsi &nbsp;:
     <programlisting>
testdb=&gt; <userinput>\set foo 'my_table'</userinput>
testdb=&gt; <userinput>SELECT * FROM :"foo";</userinput>
     </programlisting>
     L'interpolation de variables ne sera pas réalisée à l'intérieur de litéraux
     et d'identifiants <acronym>SQL</acronym> mis entre guillemets. Du coup, une
     construction comme <literal>':foo'</literal> ne fonctionne pas pour avoir
     un litéral entre guillemets à partir de la valeur d'une variable (il serait
     même dangereux que cela fonctionne car ça ne peut pas gérer correctement
     les guillemets embarqués dans la valeur).
    </para>

    <para>
     Un exemple de l'utilisation de ce mécanisme est la copie du contenu d'un
     fichier dans la colonne d'une table. Tout d'abord, chargez le fichier dans
     une variable puis interpolez la valeur de la valeur en tant que chaîne de
     caractères&nbsp;:
     <programlisting>basetest=&gt; <userinput>\set contenu `cat mon_fichier.txt`</userinput>
basetest=&gt; <userinput>INSERT INTO ma_table VALUES (:'contenu');</userinput>
     </programlisting>
     (Notez que cela ne fonctionnera par si le fichier
     <filename>mon_fichier.txt</filename> contient des octets nuls. <application>psql</application> ne
     gère pas les octets nuls inclus dans les valeurs de variable.)
    </para>

    <para>
     Comme des caractères deux-points peuvent légitimement apparaître dans les
     commandes SQL, une tentative apparente d'interpolation (comme <literal>:nom</literal>,
     <literal>:'nom'</literal>, ou <literal>:"nom"</literal>) n'est pas remplacée, sauf si
     la variable nommée est actuellement positionnée. Dans tous les cas, vous pouvez échapper un
     caractère deux-points avec un antislash pour le protéger des substitutions.
    </para>

    <para>
     La syntaxe spéciale
     <literal>:{?<replaceable>name</replaceable>}</literal> renvoie TRUE ou
     FALSE suivant l'existence ou non de la variable, et est donc toujours
     substituée, sauf si le symbole deux-points est échappé avec un antislash.
    </para>

    <para>
     La syntaxe deux-points pour les variables est du <acronym>SQL</acronym> standard pour
     les langages de requête embarqués, comme <application>ECPG</application>.
     La syntaxe avec les deux-points pour les tranches de tableau et les conversions de types
     sont des extensions <productname>PostgreSQL</productname>, qui peut parfois
     provoquer un conflit avec l'utilisation standard.
     La syntaxe avec le caractère deux-points pour échapper la valeur d'une variable en tant
     que chaîne SQL litérale ou identifiant est une extension
     <application>psql</application>.
    </para>

   </refsect3>

   <refsect3 id="app-psql-prompting" xreflabel="Invite">
    <title>Invite</title>

    <para>
     Les invites <application>psql</application> peuvent être personnalisées
     suivant vos préférences. Les trois variables <varname>PROMPT1</varname>,
     <varname>PROMPT2</varname> et <varname>PROMPT3</varname> contiennent des
     chaînes et des séquences d'échappement spéciales décrivant l'apparence de
     l'invite. L'invite 1 est l'invite normale qui est lancée quand
     <application>psql</application> réclame une nouvelle commande. L'invite 2 est
     lancée lorsqu'une saisie supplémentaire est attendue lors de la saisie de la
     commande, par exemple parce que la commande n'a pas été terminée avec un
     point-virgule ou qu'un guillemet n'a pas été fermé.
     L'invite 3 est lancée lorsque vous
     exécutez une commande <acronym>SQL</acronym>
     <command>COPY FROM stdin</command> et que
     vous devez saisir les valeurs des lignes sur le terminal.
    </para>

    <para>
     La valeur de la variable prompt sélectionnée est affichée littéralement
     sauf si un signe pourcentage (<literal>%</literal>) est rencontré. Suivant
     le prochain caractère, certains autres textes sont substitués. Les
     substitutions définies sont&nbsp;:

     <variablelist>
      <varlistentry>
       <term><literal>%M</literal></term>
       <listitem>
        <para>
         Le nom complet de l'hôte (avec le nom du domaine) du serveur de la
         base de données ou <literal>[local]</literal> si la connexion est
         établie via une socket de domaine Unix ou
         <literal>[local:<replaceable>/répertoire/nom</replaceable>]</literal>,
         si la socket de domaine Unix n'est pas dans l'emplacement par défaut
         défini à la compilation.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%m</literal></term>
       <listitem>
        <para>
         Le nom de l'hôte du serveur de la base de données, tronqué au
         premier point ou <literal>[local]</literal> si la connexion se fait
         via une socket de domaine Unix.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%&gt;</literal></term>
       <listitem><para>Le numéro de port sur lequel le serveur de la base de
         données écoute.</para></listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%n</literal></term>
       <listitem>
        <para>
         Le nom d'utilisateur de la session. (L'expansion de cette valeur
         peut changer pendant une session après une commande <command>SET
          SESSION AUTHORIZATION</command>.)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%/</literal></term>
       <listitem><para>Le nom de la base de données courante.</para></listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%~</literal></term>
       <listitem><para>Comme <literal>%/</literal> mais l'affichage est un
         <literal>~</literal> (tilde) si la base de données est votre base de
         données par défaut.</para></listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%#</literal></term>
       <listitem>
        <para>
         Si l'utilisateur de la session est un superutilisateur, alors un
         <literal>#</literal> sinon un <literal>&gt;</literal>.
         (L'expansion de cette valeur peut changer durant une session
         après une commande <command>SET SESSION
          AUTHORIZATION</command>.)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%p</literal></term>
       <listitem>
        <para>L'identifiant du processus serveur (PID) pour cette connexion.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%R</literal></term>
       <listitem>
        <para>
         Dans le prompt 1 normalement <literal>=</literal>, mais
         <literal>@</literal> si la session est dans une branche inactive d'un
         bloc conditionnel, ou <literal>^</literal> en mode simple ligne,
         ou <literal>!</literal> si la session est
         déconnectée de la base (ce qui peut arriver si <command>\connect</command>
         échoue). Dans le prompt 2, <literal>%R</literal> est remplacé par un
         caractère qui dépend de la raison pour laquelle
         <application>psql</application> attend des entrées
         supplémentaires&nbsp;: <literal>-</literal> si la commande n'est juste pas
         terminée, mais <literal>*</literal> s'il y a un commentaire
         <literal>/* ... */</literal> non terminé,
         un guillemet simple pour une chaîne de caractères entre guillemets simples
         non terminée,
         un guillemet double pour un identifiant échappé non terminé,
         un signe dollar pour une chaîne de caractères entre dollars,
         ou <literal>(</literal> s'il y a une parenthèse ouvrante sans correspondance.
         Dans le prompt 3, <literal>%R</literal> n'a aucun effet.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%x</literal></term>
       <listitem>
        <para>
         État de la Transaction&nbsp;: une chaîne vide lorsque vous n'êtes pas
         dans un bloc de transaction, ou <literal>*</literal> si vous y êtes, ou
         <literal>!</literal> dans une transaction échouée, ou
         <literal>?</literal> lorsque l'état de la transaction est indéterminé (par
         exemple parce qu'il n'y a pas de connexion).
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%l</literal></term>
       <listitem>
        <para>
         Le numéro de ligne dans la requête courante, en partant
         de <literal>1</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%</literal><replaceable
        class="parameter">chiffres</replaceable></term>
       <listitem>
        <para>
         Le caractère avec ce code numérique est substitué.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%:</literal><replaceable
        class="parameter">nom</replaceable><literal>:</literal></term>
       <listitem>
        <para>
         La valeur de la variable <replaceable
         class="parameter">nom</replaceable> de <application>psql</application>.
         Voir la section <xref linkend="app-psql-variables"/> pour les détails.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%`</literal><replaceable
        class="parameter">commande</replaceable><literal>`</literal></term>
       <listitem>
        <para>
         La sortie de la <replaceable class="parameter">commande</replaceable>,
         similaire à la substitution
         par <quote>guillemets inverse</quote> classique.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%[</literal> ... <literal>%]</literal></term>
       <listitem>
        <para>
         Les invites peuvent contenir des caractères de contrôle du terminal
         qui, par exemple, modifient la couleur, le fond ou le style du texte
         de l'invite, ou modifient le titre de la fenêtre du terminal. Pour
         que les fonctionnalités d'édition de ligne de
         <application>Readline</application> fonctionnent correctement, les
         caractères de contrôle non affichables doivent être indiqués comme
         invisibles en les entourant avec <literal>%[</literal> et
         <literal>%]</literal>. Des paires multiples de ceux-ci peuvent
         survenir à l'intérieur de l'invite. Par exemple&nbsp;:
         <programlisting>basetest=&gt; \set PROMPT1 '%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%# '
         </programlisting>
         a pour résultat une invite en gras (<literal>1;</literal>), jaune sur
         noir (<literal>33;40</literal>) sur les terminaux compatibles
         VT100.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>%w</literal></term>
       <listitem>
        <para>
         Espace blanc de même taille que la sortie la plus récente de
         <varname>PROMPT1</varname>. Cela peut être utilisé comme paramètre
         <varname>PROMPT2</varname>, pour que les instructions multi-lignes soient
         alignées avec la première ligne, mais il n'y a pas de deuxième prompt visible.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

     Pour insérer un pourcentage dans votre invite, écrivez
     <literal>%%</literal>. Les invites par défaut sont
     <literal>'%/%R%x%# '</literal> pour les invites 1 et 2 et
     <literal>'&gt;&gt; '</literal> pour l'invite 3.
    </para>

    <note>
     <para>
      Cette fonctionnalité a été plagiée sans vergogne sur
      <application>tcsh</application>.
     </para>
    </note>

   </refsect3>

   <refsect3>
    <title>Édition de la ligne de commande</title>

    <para>
     <application>psql</application> supporte la bibliothèque
     <application>Readline</application> pour une édition et une recherche
     simplifiée et conviviale de la ligne de commande. L'historique des commandes
     est automatiquement sauvegardé lorsque <application>psql</application>
     quitte et est rechargé quand <application>psql</application> est lancé. La
     complétion par tabulation est aussi supportée bien que la logique de
     complétion n'ait pas la prétention d'être un analyseur
     <acronym>SQL</acronym>. Les requêtes générées par complétion peuvent aussi
     interférer avec les autres commandes SQL, par exemple <literal>SET
      TRANSACTION ISOLATION LEVEL</literal>. Si pour quelque raison que ce soit
     vous n'aimez pas la complétion par tabulation, vous pouvez la désactiver en
     plaçant ceci dans un fichier nommé <filename>.inputrc</filename> de votre
     répertoire personnel&nbsp;:
     <programlisting>$if psql
set disable-completion on
$endif
     </programlisting>
     (Ceci n'est pas une fonctionnalité <application>psql</application> mais
     <application>Readline</application>. Lisez sa documentation pour plus de
     détails.)
    </para>
   </refsect3>
  </refsect2>
 </refsect1>


 <refsect1 id="app-psql-environment" xreflabel="Environnement">
  <title>Environnement</title>

  <variablelist>
   <varlistentry>
    <term><envar>COLUMNS</envar></term>

    <listitem>
     <para>
      Si <literal>\pset columns</literal> vaut zéro, contrôle la largeur pour
      le format <literal>wrapped</literal> et la largeur pour déterminer si
      une sortie large a besoin du paginateur ou doit être basculé en format
      vertical dans le mode automatique étendu.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PGDATABASE</envar></term>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGPORT</envar></term>
    <term><envar>PGUSER</envar></term>

    <listitem>
     <para>
      Paramètres de connexion par défaut (voir <xref linkend="libpq-envars"/>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PG_COLOR</envar></term>
    <listitem>
     <para>
      Indique si la couleur doit être utilisée dans les messages de diagnostic.
      Les valeurs possibles sont <literal>always</literal>,
      <literal>auto</literal>, <literal>never</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_EDITOR</envar></term>
    <term><envar>EDITOR</envar></term>
    <term><envar>VISUAL</envar></term>

    <listitem>
     <para>
      Éditeur utilisé par les commandes <command>\e</command>
      <command>\ef</command> et <command>\ev</command>. Les variables sont
      examinées dans l'ordre donné&nbsp;; la première initialisée est
      utilisée. Si aucun des deux n'est configuré, le système utilise
      <filename>vi</filename> par défaut sur les systèmes Unix et
      <filename>notepad.exe</filename> sur les systèmes Windows.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_EDITOR_LINENUMBER_ARG</envar></term>

    <listitem>
     <para>
      Lorsque les commandes <command>\e</command> ou <command>\ef</command>
      sont utilisées avec un argument spécifiant le numéro de ligne,
      cette variable doit indiquer l'argument en ligne de commande à
      fournir à l'éditeur de texte. Pour les éditeurs les plus courants,
      tels qu'<productname>emacs</productname> ou
      <productname>vi</productname>, vous pouvez simplement initialiser
      cette variable avec le signe +. Il faut inclure le caractère
      d'espacement en fin de la valeur de la variable si la syntaxe de
      l'éditeur nécessite un espace entre l'option à spécifier et le
      numéro de ligne. Par exemple&nbsp;:
      <programlisting>
PSQL_EDITOR_LINENUMBER_ARG='+'
PSQL_EDITOR_LINENUMBER_ARG='--line '
      </programlisting>
     </para>

     <para>
      La valeur par défaut est <literal>+</literal> sur les systèmes Unix
      (ce qui correspond à la bonne configuration pour l'éditeur par
      défaut, <filename>vi</filename>, et est utilisable généralement
      avec la plupart des éditeurs courants)&nbsp;; par contre, il n'y
      a pas de valeur par défaut pour les systèmes Windows.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_HISTORY</envar></term>

    <listitem>
     <para>
      Emplacement alternatif pour le fichier d'historique des commandes.
      L'expansion du symbole <literal>~</literal> est réalisée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQL_PAGER</envar></term>
    <term><envar>PAGER</envar></term>

    <listitem>
     <para>
      Si les résultats d'une requête ne tiennent pas sur l'écran, ils sont
      envoyés à cette commande. Les valeurs typiques sont
      <literal>more</literal> ou <literal>less</literal>. L'utilisation du
      paginateur peut être désactivé en configurant <envar>PSQL_PAGER</envar>
      ou <envar>PAGER</envar> à une chaîne vide ou en ajustant les options
      relatives au paginateur avec la commande <command>\pset</command>. Ces
      variables sont examinées dans l'ordre listé&nbsp;; la première qui est
      configurée est utilisée. Si aucune n'est configurée, le comportement par
      défaut est d'utiliser <literal>more</literal> sur la plupart des
      plateformes et <literal>less</literal> sur Cygwin.
     </para>

    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PSQLRC</envar></term>

    <listitem>
     <para>
      Emplacement alternatif pour le fichier <filename>.psqlrc</filename> de l'utilisateur. L'expansion
      du symbôle <literal>~</literal> est réalisée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>SHELL</envar></term>

    <listitem>
     <para>
      Commande exécutée par la commande <command>\!</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>TMPDIR</envar></term>

    <listitem>
     <para>
      Répertoire pour stocker des fichiers temporaires. La valeur par défaut est
      <filename>/tmp</filename>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Cet outil, comme la plupart des autres outils <productname>PostgreSQL</productname>,
   utilise aussi les variables d'environnement supportées par la bibliothèque
   <application>libpq</application> (voir <xref linkend="libpq-envars"/>).
  </para>

 </refsect1>


 <refsect1>
  <title>Fichiers</title>

  <variablelist>
   <varlistentry>
    <term><filename>psqlrc</filename> et <filename>~/.psqlrc</filename></term>
    <listitem>
     <para>
      Sauf si une option <option>-X</option> est fournie,
      <application>psql</application> tente de lire et exécuter les commandes
      provenant du fichier global au système (<filename>psqlrc</filename>), puis
      du fichier utilisateur (<filename>~/.psqlrc</filename>) après la connexion
      à la base de données mais avant d'accepter les commandes interactives.
      Ces fichiers sont utilisés pour configurer le client et le serveur
      à votre goût, généralement en utilisant les commandes <command>\set</command>
      et <command>SET</command>.
     </para>
     <para>
      Le fichier de configuration au niveau système est nommé
      <filename>psqlrc</filename> et est placé dans le répertoire de
      configuration système de l'installation. Il est facilement identifiable
      en exécutant <literal>pg_config --sysconfdir</literal>. Par défaut, ce
      répertoire doit être <filename>../etc/</filename> relatif au répertoire
      contenant les exécutables <productname>PostgreSQL</productname>. Le nom de
      ce répertoire peut être configuré explicitement avec la variable
      d'environnement <envar>PGSYSCONFDIR</envar>.
     </para>
     <para>
      Le fichier de configuration personnel de l'utilisateur est nommé
      <filename>.psqlrc</filename> et est placé à la racine du répertoire
      personnel de l'utilisateur. Sur Windows, qui manque d'un tel concept,
      le fichier de configuration personnel est nommé
      <filename>%APPDATA%\postgresql\psqlrc.conf</filename>. L'emplacement
      du fichier de configuration personnel peut être configuré explicitement
      via la variable d'environnement <envar>PSQLRC</envar>.
     </para>
     <para>
      Le fichier niveau système et le fichier de l'utilisateur peuvent être
      spécifiques à la version de psql en ajoutant un tiret et la version mineure ou
      majeure, par exemple <filename>~/.psqlrc-9.2</filename> ou
      <filename>~/.psqlrc-9.2.5</filename>. Le fichier dont la version est la
      plus proche sera lu à la place d'un fichier sans indication de version.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>.psql_history</filename></term>
    <listitem>
     <para>
      L'historique de la ligne de commandes est stocké dans le fichier
      <filename>~/.psql_history</filename> ou
      <filename>%APPDATA%\postgresql\psql_history</filename> sur Windows.
     </para>
     <para>
      L'emplacement du fichier historique peut aussi être configuré explicitement
      avec la variable <application>psql</application> <varname>HISTFILE</varname>
      ou avec la variable d'environnement <envar>PSQL_HISTORY</envar>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>


 <refsect1>
  <title>Notes</title>

  <itemizedlist>
   <listitem>
    <para>
     <application>psql</application> fonctionne mieux avec des serveurs de la
     même version ou d'une version majeure plus ancienne. Les commandes
     antislashs peuvent échouer si le serveur est plus récent que
     <application>psql</application>. Néanmoins, les commandes antislashs
     de la famille <literal>\d</literal> devraient fonctionner avec tous
     les serveurs jusqu'à la version 7.4, bien que pas nécessairement avec
     des serveurs plus récents que <application>psql</application> lui-même.
     Les fonctionnalités générales d'exécution de commandes SQL et d'affichage
     des résultats des requêtes devraient aussi fonctionner avec les serveurs
     d'une version majeure plus récente mais ce ne peut être garanti dans
     tous les cas.
    </para>
    <para>
     Si vous voulez utiliser <application>psql</application> pour vous
     connecter à différentes versions majeures, il est recommandé d'utiliser
     la dernière version de <application>psql</application>. Autrement, vous
     pouvez conserver une copie de <application>psql</application>
     pour chaque version majeure utilisée
     et vous assurer que la version utilisée correspond au serveur respectif.
     En pratique, cette complication supplémentaire n'est pas nécessaire.
    </para>
   </listitem>

   <listitem>
    <para>
     Avant <productname>PostgreSQL</productname> 9.6, l'option
     <option>-c</option> impliquait <option>-X</option>
     (<option>--no-psqlrc</option>)&nbsp;; ceci n'est plus le cas.
    </para>
   </listitem>

   <listitem>
    <para>
     Avant <productname>PostgreSQL</productname> 8.4,
     <application>psql</application> autorisait le premier argument d'une
     commande antislash à une seule lettre à commencer directement après la
     commande, sans espace supplémentaire. Maintenant, un espace blanc est
     requis.
    </para>
   </listitem>
  </itemizedlist>
 </refsect1>


 <refsect1>
  <title>Notes pour les utilisateurs sous Windows</title>

  <para>
   <application>psql</application> est construit comme une
   <quote>application de type console</quote>. Comme les fenêtres console de
   Windows utilisent un codage différent du reste du système, vous devez
   avoir une attention particulière lors de l'utilisation de caractères sur
   8 bits à l'intérieur de <application>psql</application>. Si
   <application>psql</application> détecte une page de code problématique,
   il vous avertira au lancement. Pour modifier la page de code de la console,
   deux étapes sont nécessaires&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      Configurez la page code en saisissant <userinput>cmd.exe /c chcp
       1252</userinput>. (1252 est une page code appropriée pour
      l'Allemagne&nbsp;; remplacez-la par votre valeur.) Si vous
      utilisez Cygwin, vous pouvez placer cette commande dans
      <filename>/etc/profile</filename>.
     </para>
    </listitem>

    <listitem>
     <para>
      Configurez la police de la console par <literal>Lucida Console</literal>
      parce que la police raster ne fonctionne pas avec la page de code ANSI.
     </para>
    </listitem>
   </itemizedlist>
  </para>

 </refsect1>


 <refsect1 id="app-psql-examples" xreflabel="Exemples">
  <title>Exemples</title>

  <para>
   Le premier exemple montre comment envoyer une commande sur plusieurs lignes
   d'entrée. Notez le changement de l'invite&nbsp;:
   <programlisting>basetest=&gt; <userinput>CREATE TABLE ma_table (</userinput>
basetest(&gt; <userinput> premier integer not NULL default 0,</userinput>
basetest(&gt; <userinput> second text)</userinput>
basetest-&gt; <userinput>;</userinput>
CREATE TABLE
   </programlisting>
   Maintenant, regardons la définition de la table&nbsp;:
   <programlisting>basetest=&gt; <userinput>\d ma_table</userinput>
              Table "public.ma_table"
 Column  |  Type   | Collation | Nullable | Default
---------+---------+-----------+----------+---------
 premier | integer |           | not null | 0
 second  | text    |           |          |
   </programlisting>
   Maintenant, changeons l'invite par quelque chose de plus intéressant&nbsp;:
   <programlisting>basetest=&gt; <userinput>\set PROMPT1 '%n@%m %~%R%# '</userinput>
pierre@localhost basetest=&gt;
   </programlisting>
   Supposons que nous avons rempli la table de données et que nous voulons les
   regarder&nbsp;:
   <programlisting>pierre@localhost basetest=&gt; SELECT * FROM ma_table;
 premier | second
---------+--------
       1 | un
       2 | deux
       3 | trois
       4 | quatre
(4 rows)

   </programlisting>
   Vous pouvez afficher cette table de façon différente en utilisant la
   commande <command>\pset</command>&nbsp;:
   <programlisting>pierre@localhost basetest=&gt; <userinput>\pset border 2</userinput>
Border style is 2.
pierre@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
+---------+--------+
| premier | second |
+---------+--------+
|       1 | un     |
|       2 | deux   |
|       3 | trois  |
|       4 | quatre |
+---------+--------+
(4 rows)

pierre@localhost basetest=&gt; <userinput>\pset border 0</userinput>
Border style is 0.
pierre@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
premier second
------- ------
      1 un
      2 deux
      3 trois
      4 quatre
(4 rows)

pierre@localhost basetest=&gt; <userinput>\pset border 1</userinput>
Border style is 1.
pierre@localhost testdb=&gt; <userinput>\pset format csv</userinput>
Output format is csv.
pierre@localhost basetest=&gt; <userinput>\pset tuples_only</userinput>
Tuples only is on.
pierre@localhost basetest=&gt; <userinput>SELECT second, premier FROM
ma_table;</userinput>
un,1
deux,2
trois,3
quatre,4
pierre@localhost testdb=&gt; <userinput>\pset format unaligned</userinput>
Output format is unaligned.
pierre@localhost testdb=&gt; <userinput>\pset fieldsep '\t'</userinput>
Field separator is "    ".
pierre@localhost testdb=&gt; <userinput>SELECT second, first FROM my_table;</userinput>
un      1
deux    2
trois   3
quatre  4
   </programlisting>
   Vous pouvez aussi utiliser les commandes courtes&nbsp;:
   <programlisting>pierre@localhost basetest=&gt; <userinput>\a \t \x</userinput>
Output format is aligned.
Tuples only is off.
Expanded display is on.
pierre@localhost basetest=&gt; <userinput>SELECT * FROM ma_table;</userinput>
-[ RECORD 1 ]---
premier  | 1
second   | un
-[ RECORD 2 ]---
premier  | 2
second   | deux
-[ RECORD 3 ]---
premier  | 3
second   | trois
-[ RECORD 4 ]---
premier  | 4
second   | quatre
   </programlisting>
  </para>

  <para>
   De plus, ces options de format de sortie peuvent être affectées juste pour une requête en utilisant
   <literal>\g</literal>&nbsp;:
   <programlisting>
pierre@localhost basetest=&gt; <userinput>SELECT * FROM my_table</userinput>
pierre@localhost basetest-&gt; <userinput>\g (format=aligned tuples_only=off expanded=on)</userinput>
-[ RECORD 1 ]-
first  | 1
second | one
-[ RECORD 2 ]-
first  | 2
second | two
-[ RECORD 3 ]-
first  | 3
second | three
-[ RECORD 4 ]-
first  | 4
second | four
   </programlisting>
  </para>

  <para>
   En cas de besoin, les résultats de la requête peuvent être affichés dans une
   représentation croisée avec la commande <command>\crosstabview</command>&nbsp;:
   <programlisting>
testdb=&gt; <userinput>SELECT premier, second, premier &gt; 2 AS gt2 FROM my_table;</userinput>
premier | second | gt2
---------+--------+-----
      1 | un     | f
      2 | deux   | f
      3 | trois  | t
      4 | quatre | t
(4 rows)

testdb=&gt; <userinput>\crosstabview premier second</userinput>
premier | un | deux | trois | quatre
---------+----+------+-------+--------
      1 | f  |      |       |
      2 |    | f    |       |
      3 |    |      | t     |
      4 |    |      |       | t
(4 rows)
   </programlisting>

   Ce deuxième exemple montre une table de multiplication avec les lignes triées
   en ordre numérique inverse et les colonnes dans un ordre numérique ascendant
   indépendant.
   <programlisting>
testdb=&gt; <userinput>SELECT t1.premier as "A", t2.premier+100 AS "B", t1.premier*(t2.premier+100) as "AxB",</userinput>
testdb(&gt; <userinput>row_number() over(order by t2.premier) AS ord</userinput>
testdb(&gt; <userinput>FROM ma_table t1 CROSS JOIN ma_table t2 ORDER BY 1 DESC</userinput>
testdb(&gt; <userinput>\crosstabview "A" "B" "AxB" ord</userinput>
 A | 101 | 102 | 103 | 104
---+-----+-----+-----+-----
 4 | 404 | 408 | 412 | 416
 3 | 303 | 306 | 309 | 312
 2 | 202 | 204 | 206 | 208
 1 | 101 | 102 | 103 | 104
(4 rows)
   </programlisting>

  </para>

 </refsect1>

</refentry>
