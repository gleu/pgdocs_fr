<?xml version="1.0" encoding="UTF-8"?>
<refentry id="app-pgrewind">
 <indexterm zone="app-pgrewind">
  <primary>pg_rewind</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_rewind</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_rewind</refname>
  <refpurpose>synchronise le répertoire des données de
   <productname>PostgreSQL</productname> avec un autre répertoire de données
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_rewind</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <group choice="plain">
    <group choice="req">
     <arg choice="plain"><option>-D</option></arg>
     <arg choice="plain"><option>--target-pgdata</option></arg>
    </group>
    <replaceable> répertoire</replaceable>
    <group choice="req">
     <arg choice="plain"><option>--source-pgdata=<replaceable>répertoire</replaceable></option></arg>
     <arg choice="plain"><option>--source-server=<replaceable>chaine_de_connexion</replaceable></option></arg>
    </group>
   </group>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <application>pg_rewind</application> est un outil qui permet de
   synchroniser une instance PostgreSQL avec une copie de cette même instance,
   a postériori de la séparation des timelines. Le scénario classique consiste
   à réactiver un ancien serveur primaire, après une bascule, en tant que
   serveur secondaire répliqué depuis le nouveau serveur primaire.
  </para>

  <para>
   Après une synchronisation réussie, l'état du répertoire de données cible
   est analogue à une sauvegarde de base du répertoire source de données.
   Contrairement à l'exécution d'une sauvegarde de base ou l'utilisation d'un
   outil comme <application>rsync</application>,
   <application>pg_rewind</application> ne requiert pas de comparer ou copier
   les blocs inchangés des relations dans l'instance. Seuls les blocs modifiés
   de fichiers de relation existante sont copiés&nbsp;; tous les autres
   fichiers, incluant tout nouveau fichier de relation, fichier de
   configuration, et segment WAL, sont copiés en totalité. Ainsi, l'opération
   de synchronisation est significativement plus rapide que les autres
   approches si la base de données est volumineuse et que seule une petite
   fraction de blocs diffère entre les instances.
  </para>

  <para>
   <application>pg_rewind</application> inspecte l'historique de la timeline
   de l'instance source et de l'instance cible pour déterminer à quel moment a
   eu lieu la séparation, et s'attend à trouver tous les fichiers WAL jusqu'au
   moment de la bascule dans le répertoire <filename>pg_wal</filename>. Le
   point de divergence peut être trouvé soit sur la ligne de temps cible, soit
   sur la ligne de temps source, soit sur leur ancêtre commun. Dans un
   scénario de bascule classique, où l'instance cible a été arrêtée peu après
   le changement, cela ne pose aucun problème. En revanche, si l'instance
   cible a travaillé un certain temps après le changement, les anciens
   fichiers WAL peuvent ne plus être présents dans le répertoire
   <filename>pg_wal</filename>. Dans ce cas, ils peuvent être copiés à la main
   depuis les fichiers WAL archivés vers le répertoire
   <filename>pg_wal</filename> ou être réexécutés par
   <application>pg_rewind</application> avec l'option <literal>-c</literal>
   pour automatiquement les récupérer de l'archive WAL. L'utilisation de
   <application>pg_rewind</application> n'est pas limitée au failover&nbsp;:
   un serveur standby peut être promu, écrire quelques transactions, puis
   transformé de nouveau en standby avec cet outil.
  </para>

  <para>
   Après avoir exécuté <application>pg_rewind</application>, il est nécessaire
   que la réapplication des WAL se termine pour que le répertoire de données
   soit dans un état cohérent. Quand le serveur cible est redémarré, il va
   entrer en récupération d'archive et rejouer tous les WAL générés sur le
   serveur source depuis le dernier checkpoint avant le point de divergence.
   Si certains WAL ne sont plus disponibles sur le serveur source quand
   <application>pg_rewind</application> a été exécutée, et par conséquent ne
   peuvent plus être copiés par la session
   <application>pg_rewind</application>, ils doivent être rendus disponible
   quand le serveur cible est démarré. Ceci peut être effectué en créant un
   fichier <filename>recovery.signal</filename> dans le répertoire de données
   cible et en configurant un <xref linkend="guc-restore-command"/> approprié
   dans <filename>postgresql.conf</filename>.
  </para>

  <para>
   <application>pg_rewind</application> nécessite que l'instance cible ait
   l'option <xref linkend="guc-wal-log-hints"/> activée dans le fichier de
   configuration <filename>postgresql.conf</filename> ou que les sommes de
   contrôle sur les données aient été activées lorsque l'instance a été
   initialisée par la commande <application>initdb</application>. Aucune de
   ces options n'est active par défaut. Le paramètre <xref
   linkend="guc-full-page-writes"/> doit lui aussi être activé. Il l'est par
   défaut.
  </para>

  <warning>
   <para>
    Si <application>pg_rewind</application> échoue lors du traitement, le
    répertoire des données de la cible est très probablement dans un état
    inutilisable. Dans ce cas, réaliser une nouvelle sauvegarde est
    recommandé.
   </para>

   <para>
    Comme <application>pg_rewind</application> copie entièrement les fichiers
    de configuration de la source, il peut être requis de corriger la
    configuration employée pour la reprise avant de redémarrer le serveur
    cible, particulièrement si la cible est réintroduite comme un standby de
    la source. Si vous redémarrez le serveur après que l'opération de
    synchronisation soit terminée mais sans reprendre la configuration, la
    cible peut diverger du primaire.
   </para>

   <para>
    <application>pg_rewind</application> échouera immédiatement s'il trouve
    des fichiers qu'il ne peut pas modifier. Ceci peut arriver quand les
    serveurs source et cible utilisent les mêmes emplacements pour les clés et
    les certificats SSL qui sont habituellement en lecture seule. Si de tels
    fichiers sont présents sur le serveur cible, il est recommandé de les
    supprimer avant d'exécuter <application>pg_rewind</application>. Après
    l'avoir exécuté, certains de ces fichiers devront peut-être être copiés de
    la source, auquel cas il pourrait être nécessaire de supprimer les données
    copiées et de restaurer l'ensemble des liens utilisés avant l'exécution de
    l'outil.
   </para>
  </warning>
 </refsect1>

 <refsect1>
  <title>Options</title>

  <para>
   <application>pg_rewind</application> accepte les arguments suivants en
   ligne de commande&nbsp;:

   <variablelist>
    <varlistentry>
     <term><option>-D <replaceable class="parameter">répertoire</replaceable></option></term>
     <term><option>--target-pgdata=<replaceable class="parameter">répertoire</replaceable></option></term>
     <listitem>
      <para>
       Cette option définit le répertoire de données cible qui va être
       synchronisé avec le répertoire source. Cette option requiert que le
       serveur source ait été arrêté proprement.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>--source-pgdata=<replaceable class="parameter">répertoire</replaceable></option></term>
     <listitem>
      <para>
       Cette option définit le répertoire de données source qui va être
       synchronisé avec le répertoire cible. Si cette option est utilisée,
       l'instance source doit être arrêtée proprement.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>--source-server=<replaceable class="parameter">chaine de connexion</replaceable></option></term>
     <listitem>
      <para>
       Définit une chaine de connexion libpq permettant d'accéder à
       l'instance <productname>PostgreSQL</productname> source de façon à
       pouvoir la synchroniser avec la cible. Cette option requiert
       l'utilisation d'une connexion standard avec un rôle ayant les droits
       suffisants pour exécuter les fonctions utilisées par
       <application>pg_rewind</application> sur le serveur source (voir la
       section Notes pour les détails) ou un rôle super-utilisateur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>--no-ensure-shutdown</option></term>
     <listitem>
      <para>
       <application>pg_rewind</application> requiert que le serveur cible
       soit proprement arrêté avant d'être synchronisé. Par défaut, si le
       serveur cible n'est pas proprement arrêté,
       <application>pg_rewind</application> le démarre en mode
       simple-utilisateur pour effectuer d'abord une récupération après
       accident, et l'arrête. En utilisant cette option,
       <application>pg_rewind</application> ignore cela et tombe en erreur
       immédiatement si le serveur n'est pas proprement stoppé. Les
       utilisateurs doivent s'attendre à gérer la situation eux-même dans ce
       cas.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-R</option></term>
     <term><option>--write-recovery-conf</option></term>
     <listitem>
      <para>
       Crée <filename>standby.signal</filename> et ajoute les paramètres de
       connexion à <filename>postgresql.auto.conf</filename> dans le
       répertoire de sortie. <literal>--source-server</literal> est
       obligatoire avec cette option.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-n</option></term>
     <term><option>--dry-run</option></term>
     <listitem>
      <para>
       Réalise toutes les opérations sans modifier le répertoire cible.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-N</option></term>
     <term><option>--no-sync</option></term>
     <listitem>
      <para>
       Par défaut, <command>pg_rewind</command> attendra l'écriture certaine
       de tous les fichiers sur disque. Cette option permet de forcer le
       retour de <command>pg_rewind</command> sans attente, ce qui est plus
       rapide, mais signifie qu'un crash ultérieur du système d'exploitation
       pourrait laisser le répertoire des données synchronisé dans un état
       corrompu. En général, cette option est utile pour des tests, mais ne
       devrait pas être utilisée pour créer un serveur en production.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-P</option></term>
     <term><option>--progress</option></term>
     <listitem>
      <para>
       Permet d'activer les traces. Activer cette option vous fournira les
       informations au fil de l'eau sur l'avancée de la copie des données
       depuis l'instance source.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-c</option></term>
     <term><option>--restore-target-wal</option></term>
     <listitem>
      <para>
       Utilise <varname>restore_command</varname> définie dans la
       configuration de l'instance cible pour reprendre les fichiers WAL
       depuis l'archive WAL si ces fichiers ne sont plus disponibles dans le
       répertoire <filename>pg_wal</filename>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>--debug</option></term>
     <listitem>
      <para>
       Affiche les détails de la sortie de débogage, ce qui est surtout utile
       aux développeurs qui travaillent sur
       <application>pg_rewind</application>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-V</option></term>
     <term><option>--version</option></term>
     <listitem>
      <para>
       Affiche les informations concernant la version, puis quitte.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-?</option></term>
     <term><option>--help</option></term>
     <listitem>
      <para>
       Affiche l'aide, puis quitte.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </refsect1>

 <refsect1>
  <title>Environnement</title>

  <para>
   Lorsque l'option <option>--source-server</option> est utilisée,
   <application>pg_rewind</application> utilise aussi les variables
   d'environnement supportées par la bibliothèque
   <application>libpq</application> (voir <xref linkend="libpq-envars"/>).
  </para>

  <para>
   La variable d'environnement <envar>PG_COLOR</envar> indique s'il faut
   utiliser les couleurs dans les messages de diagnotiques. Les valeurs
   possibles sont <literal>always</literal>, <literal>auto</literal>,
   <literal>never</literal>.
  </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Lors de l'exécution de <application>pg_rewind</application> sur une
   instance en ligne comme source, un rôle doté des droits suffisants pour
   exécuter les fonctions utilisées par <application>pg_rewind</application>
   sur l'instance source peut être utilisé à la place d'un super-utilisateur.
   Voici comment créer ce rôle, nommé ici
   <literal>rewind_user</literal>&nbsp;:
   <programlisting>
CREATE USER rewind_user LOGIN;
GRANT EXECUTE ON function pg_catalog.pg_ls_dir(text, boolean, boolean) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_stat_file(text, boolean) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_read_binary_file(text) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean) TO rewind_user;
   </programlisting>
  </para>

  <para>
   Lors de l'exécution de <application>pg_rewind</application> sur une
   instance en ligne comme source récemment promue, il est nécessaire
   d'exécuter un <command>CHECKPOINT</command> après la promotion pour que son
   fichier de contrôle reflète des informations de timeline à jour, qui est
   utilisé par <application>pg_rewind</application> pour vérifier si
   l'instance cible peut être rembobiné en utilisant l'instance source
   désignée.
  </para>

  <refsect2>
   <title>Fonctionnement</title>

   <para>
    L'idée de base est de copier toutes les modifications de fichiers au
    niveau système de fichiers de l'instance source vers l'instance
    cible&nbsp;:
   </para>

   <procedure>
    <step>
     <para>
      Parcourir les journaux de transactions de l'instance cible, en
      commençant du dernier checkpoint avant le moment où l'historique de
      timeline de l'instance source a dévié de celle de l'instance cible. Pour
      chaque enregistrement dans les journaux de transactions, enregistrer
      chaque bloc de données modifié. Ceci a pour résultat une liste de tous
      les blocs de données modifiés dans l'instance cible, après la séparation
      avec l'instance source. Si certains fichiers WAL ne sont plus
      disponibles, essayez de ré-exécuter <application>pg_rewind</application>
      avec l'option <option>-c</option> pour chercher les fichiers manquants
      dans l'archive WAL.
     </para>
    </step>

    <step>
     <para>
      Copier tous les blocs modifiés de l'instance source vers l'instance
      cible, soit en utilisant un accès direct au système de fichiers
      (<option>--source-pgdata</option>) soit en SQL
      (<option>--source-server</option>). Les fichiers de relations sont
      maintenant dans un état équivalent au moment du dernier checkpoint
      effectué avant le point où les timelines WAL de la source et de la cible
      divergent, plus l'état actuel sur la source où il existe des blocs
      modifiés sur la cible après divergence.
     </para>
    </step>

    <step>
     <para>
      Copier tous les autres fichiers, incluant les nouveaux fichiers de
      relation, les segments WAL, <filename>pg_xact</filename>, et les
      fichiers de configuration de l'instance source sur l'instance cible. De
      manière similaire, les sauvegardes de base, le contenu des répertoires
      <filename>pg_dynshmem/</filename>, <filename>pg_notify/</filename>,
      <filename>pg_replslot/</filename>, <filename>pg_serial/</filename>,
      <filename>pg_snapshots/</filename>, <filename>pg_stat_tmp/</filename> et
      <filename>pg_subtrans/</filename> sont omis des données copiées depuis
      le serveur source. Les fichiers <filename>backup_label</filename>,
      <filename>tablespace_map</filename>,
      <filename>pg_internal.init</filename>,
      <filename>postmaster.opts</filename>, et
      <filename>postmaster.pid</filename>, aussi bien que tous fichiers ou
      répertoires commençant par <filename>pgsql_tmp</filename>, sont omis.
     </para>
    </step>

    <step>
     <para>
      Crée un ficher <filename>backup_label</filename> pour débuter la reprise
      des WAL au checkpoint créé lors de la bascule et configure le fichier
      <filename>pg_control</filename> avec une cohérence minimale du LSN
      définie comme le résultat de
      <literal>pg_current_wal_insert_lsn()</literal> lorsque la
      synchronisation s'effectue depuis une source activée ou le dernier
      checkpoint LSN quand la synchronisation s'effectue depuis une source
      stoppée.
     </para>
    </step>

    <step>
     <para>
      Quand la cible est démarrée, <productname>PostgreSQL</productname>
      reprend tous les WAL nécessaires, donnant ainsi un répertoire de données
      à un état cohérent.
     </para>
    </step>
   </procedure>
  </refsect2>
 </refsect1>

</refentry>
