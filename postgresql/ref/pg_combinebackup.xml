<?xml version="1.0" encoding="UTF-8"?>
<refentry id="app-pgcombinebackup">
 <indexterm zone="app-pgcombinebackup">
  <primary>pg_combinebackup</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_combinebackup</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_combinebackup</refname>
  <refpurpose>reconstruit une sauvegarde complète à partir d'une sauvegarde incrémentale et de toutes celles dont elle dépend</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_combinebackup</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg rep="repeat"><replaceable>repertoire_de_sauvegarde</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <para>
   <application>pg_combinebackup</application> est utilisé pour reconstruire une
   sauvegarde complète synthétique à partir d'une
   <link linkend="backup-incremental-backup">sauvegarde incrémentale</link> et de toutes
   les sauvegardes précédentes dont celle-ci dépend.
  </para>

  <para>
   Spécifier toutes les sauvegardes requises en ligne de commande de la plus ancienne à la plus récente.
   Dès lors, le premier répertoire de sauvegarde doit être le chemin vers la sauvegarde complète, et
   le dernier devrait être le chemin de la sauvegarde incrémentale finale
   que vous souhaitez restaurer. La sauvegarde ainsi reconstruite sera écrite dans le
   répertoire de sortie spécifié avec l'option <option>-o</option>.
  </para>

  <para>
   <application>pg_combinebackup</application> essaiera de vérifier
   que les sauvegardes fournies forment une chaîne de sauvegardes valide à partir de laquelle
   une sauvegarde complète correcte peut être reconstruite. Cependant, il n'est pas conçu pour vous aider
   à suivre quelles sauvegardes dépendent de quelles autres sauvegardes. Si vous supprimez
   une ou plusieurs des sauvegardes précédentes dont dépend votre sauvegarde incrémentale,
   vous ne pourrez pas la restaurer. De plus,
   <application>pg_combinebackup</application> tente seulement de vérifier que les
   sauvegardes sont correctement reliées entre-elles, et pas que chaque
   sauvegarde individuelle est intacte; pour cela, utiliser
   <xref linkend="app-pgverifybackup" />.
  </para>

  <para>
   Puisque la sortie de <application>pg_combinebackup</application> est une
   sauvegarde complète synthétique, elle peut elle-même être utilisée comme source d'une future invocation de
   <application>pg_combinebackup</application>. La sauvegarde complète synthétique serait
   fournie en ligne de commande à la place de la chaîne de sauvegardes à partir de laquelle
   elle fut reconstruite.
  </para>
 </refsect1>

 <refsect1>
  <title>Options</title>

   <para>
    <variablelist>
     <varlistentry>
      <term><option>-d</option></term>
      <term><option>--debug</option></term>
      <listitem>
       <para>
        Affiche plein de messages de debug sur <filename>stderr</filename>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--dry-run</option></term>
      <listitem>
       <para>
        L'option <option>-n</option>/<option>--dry-run</option> demande à
        <command>pg_combinebackup</command> de déterminer ce qui serait fait
        sans réellement créer le répertoire cible ou les fichiers de sortie éventuels.
        Elle est particulièrement utile en combinaison avec l'option <option>--debug</option>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N</option></term>
      <term><option>--no-sync</option></term>
      <listitem>
       <para>
        Par défaut, <command>pg_combinebackup</command> attend que tous les fichiers
        soient écrits sans encombre sur le disque. Cette option permet à
        <command>pg_combinebackup</command> de rendre la main sans attendre, ce qui est
        plus rapide, mais cela signifie qu'un crash ultérieur du système d'exploitation peut
        corrompre la sauvegarde obtenue. De manière générale, cette option est utile durant les tests
        mais ne devrait pas être utilisée dans un environnement de production.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-o <replaceable class="parameter">repertoire_de_sortie</replaceable></option></term>
      <term><option>--output=<replaceable class="parameter">repertoire_de_sortie</replaceable></option></term>
      <listitem>
       <para>
        Spécifie le répertoire de sortie dans lequel la sauvegarde complète synthétique
        doit être écrite. Actuellement, cet argument est obligatoire.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T <replaceable class="parameter">ancien_repertoire</replaceable>=<replaceable class="parameter">nouveau_repertoire</replaceable></option></term>
      <term><option>--tablespace-mapping=<replaceable class="parameter">ancien_repertoire</replaceable>=<replaceable class="parameter">nouveau_repertoire</replaceable></option></term>
      <listitem>
       <para>
        Déplace le tablespace du répertoire <replaceable>ancien_repertoire</replaceable>
        vers le répertoire <replaceable>nouveau_repertoire</replaceable> pendant la sauvegarde.
        <replaceable>ancien_repertoire</replaceable> est le chemin absolu du tablespace
        tel qu'il est actuellement défini dans la sauvegarde finale spécifiée en ligne de commande,
        et <replaceable>nouveau_repertoire</replaceable> est le chemin absolu à utiliser pour le
        tablespace dans la sauvegarde reconstruite. Si l'un des chemin doit contenir
        un signe égal (<literal>=</literal>), échappez-le avec un anti-slash.
        Cette option peut être spécifiée plusieurs fois pour différents tablespaces.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--clone</option></term>
      <listitem>
       <para>
        Use efficient file cloning (also known as <quote>reflinks</quote> on
        some systems) instead of copying files to the new data directory,
        which can result in near-instantaneous copying of the data files.
       </para>

       <para>
        If a backup manifest is not available or does not contain checksum of
        the right type, file cloning will be used to copy the file, but the
        file will be also read block-by-block for the checksum calculation.
       </para>

       <para>
        File cloning is only supported on some operating systems and file
        systems.  If it is selected but not supported, the
        <application>pg_combinebackup</application> run will error.  At present,
        it is supported on Linux (kernel 4.5 or later) with Btrfs and XFS (on
        file systems created with reflink support), and on macOS with APFS.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--copy-file-range</option></term>
      <listitem>
       <para>
        Use the <function>copy_file_range</function> system call for efficient
        copying.  On some file systems this gives results similar to
        <option>--clone</option>, sharing physical disk blocks, while on others
        it may still copy blocks, but do so via an optimized path.  At present,
        it is supported on Linux and FreeBSD.
       </para>

       <para>
        If a backup manifest is not available or does not contain checksum of
        the right type, <function>copy_file_range</function> will be used to
        copy the file, but the file will be also read block-by-block for the
        checksum calculation.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--manifest-checksums=<replaceable class="parameter">algorithm</replaceable></option></term>
      <listitem>
       <para>
        Like <xref linkend="app-pgbasebackup"/>,
        <application>pg_combinebackup</application> writes a backup manifest
        in the output directory. This option specifies the checksum algorithm
        that should be applied to each file included in the backup manifest.
        Currently, the available algorithms are <literal>NONE</literal>,
        <literal>CRC32C</literal>, <literal>SHA224</literal>,
        <literal>SHA256</literal>, <literal>SHA384</literal>,
        and <literal>SHA512</literal>.  The default is <literal>CRC32C</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-manifest</option></term>
      <listitem>
       <para>
        Disables generation of a backup manifest. If this option is not
        specified, a backup manifest for the reconstructed backup will be
        written to the output directory.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--sync-method=<replaceable class="parameter">method</replaceable></option></term>
      <listitem>
       <para>
        When set to <literal>fsync</literal>, which is the default,
        <command>pg_combinebackup</command> will recursively open and synchronize
        all files in the backup directory.  When the plain format is used, the
        search for files will follow symbolic links for the WAL directory and
        each configured tablespace.
       </para>
       <para>
        On Linux, <literal>syncfs</literal> may be used instead to ask the
        operating system to synchronize the whole file system that contains the
        backup directory.  When the plain format is used,
        <command>pg_combinebackup</command> will also synchronize the file systems
        that contain the WAL files and each tablespace.  See
        <xref linkend="guc-recovery-init-sync-method"/> for information about
        the caveats to be aware of when using <literal>syncfs</literal>.
       </para>
       <para>
        This option has no effect when <option>--no-sync</option> is used.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-V</option></term>
       <term><option>--version</option></term>
       <listitem>
       <para>
        Prints the <application>pg_combinebackup</application> version and
        exits.
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-?</option></term>
       <term><option>--help</option></term>
       <listitem>
       <para>
        Shows help about <application>pg_combinebackup</application> command
        line arguments, and exits.
       </para>
       </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect1>

 <refsect1 id="app-pgcombinebackup-limitations">
  <title>Limitations</title>

  <para>
   <literal>pg_combinebackup</literal> does not recompute page checksums when
   writing the output directory. Therefore, if any of the backups used for
   reconstruction were taken with checksums disabled, but the final backup was
   taken with checksums enabled, the resulting directory may contain pages
   with invalid checksums.
  </para>

  <para>
   To avoid this problem, taking a new full backup after changing the checksum
   state of the cluster using <xref linkend="app-pgchecksums "/> is
   recommended. Otherwise, you can disable and then optionally reenable
   checksums on the directory produced by <literal>pg_combinebackup</literal>
   in order to correct the problem.
  </para>
 </refsect1>

 <refsect1>
  <title>Environment</title>

  <para>
   This utility, like most other <productname>PostgreSQL</productname> utilities,
   uses the environment variables supported by <application>libpq</application>
   (see <xref linkend="libpq-envars"/>).
  </para>

  <para>
   The environment variable <envar>PG_COLOR</envar> specifies whether to use
   color in diagnostic messages. Possible values are
   <literal>always</literal>, <literal>auto</literal> and
   <literal>never</literal>.
  </para>
 </refsect1>

 <refsect1>
  <title>See Also</title>

  <simplelist type="inline">
   <member><xref linkend="app-pgbasebackup"/></member>
  </simplelist>
 </refsect1>

</refentry>
