<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createtransform">
 <indexterm zone="sql-createtransform">
  <primary>CREATE TRANSFORM</primary>
 </indexterm>
 
 <refmeta>
  <refentrytitle>CREATE TRANSFORM</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Commandes du langage</refmiscinfo>
 </refmeta>
 
 <refnamediv>
  <refname>CREATE TRANSFORM</refname>
  <refpurpose>définir une nouvelle transformation</refpurpose>
 </refnamediv>
 
 <refsynopsisdiv>
  <synopsis>
CREATE [ OR REPLACE ] TRANSFORM FOR <replaceable>nom_type</replaceable> LANGUAGE <replaceable>nom_lang</replaceable> (
    FROM SQL WITH FUNCTION <replaceable>nom_fonction_from_sql_</replaceable> [ (<replaceable>type_argument</replaceable> [, ...]) ],
    TO SQL WITH FUNCTION <replaceable>nom_fonction_to_sql_</replaceable> [ (<replaceable>type_argument</replaceable> [, ...]) ]
);
  </synopsis>
 </refsynopsisdiv>
 
 <refsect1 id="sql-createtransform-description">
  <title>Description</title>
  
  <para>
   <command>CREATE TRANSFORM</command> définit une nouvelle transformation.
   <command>CREATE OR REPLACE TRANSFORM</command> va soit créer une
   nouvelle transformation, soit en remplacer une déjà existante.
  </para>
  
  <para>
   Une transformation définit comment adapter un type de données à un
   langage procédural.
   Par exemple, pour une fonction en PL/Python écrite avec le type
   <type>hstore</type>, PL/Python n'a pas les informations permettant
   de déterminer comment il doit présenter ces valeurs dans un
   environnement Python.
   Par défaut, les implémentations d'un langage vont utiliser la
   représentation typée text, mais c'est loin d'être optimal lorsque la
   représentation devrait être typée en tableau associatif ou liste.
  </para>
  
  <para>
   Une transformation spécifie 2 fonctions :  
   <itemizedlist>
    <listitem>
     <para>
      Une fonction <quote>from SQL</quote> qui convertit le type depuis
      l'environnement SQL vers le langage.
      Cette fonction sera appelée pour un argument d'une fonction écrite
      dans ce langage.
     </para>
    </listitem>
    
    <listitem>
     <para>
      Une fonction <quote>to SQL</quote> qui convertit le type depuis
      le langage vers l'environnement SQL.
      Cette fonction sera appelée sur la valeur retournée par une
      fonction écrite dans ce langage.
     </para>
    </listitem>
   </itemizedlist>
   Il n'est pas nécessaire de définir l'ensemble de ces fonctions. Si
   l'une d'entre elle n'est pas spécifiée et au besoin le comportement
   par défaut du langage sera appliqué.
   (Pour éviter qu'une transformation soit effectuée dans un sens,
   vous pouvez aussi écrire une fonction de transformation qui renvoie
   systématiquement une erreur.)
  </para>
  
  <para>
   Pour pouvoir créer une transformation, vous devez être le
   propriétaire du type et avoir le droit <literal>USAGE</literal>
   sur le type et le droit <literal>USAGE</literal> sur le
   langage, ainsi qu'être le propriétaire et avoir le droit
   <literal>EXECUTE</literal> sur les fonctions from-SQL et to-SQL
   si spécifié.
  </para>
 </refsect1>
 
 <refsect1>
  <title>Paramètres</title>
  
  <variablelist>
   <varlistentry>
    <term><replaceable>nom_type</replaceable></term>
    
    <listitem>
     <para>
      Le nom du type de données de la transformation.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><replaceable>nom_lang</replaceable></term>
    
    <listitem>
     <para>
      Le nom du langage de la transformation.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal><replaceable>nom_fonction_from_sql</replaceable>[(<replaceable>type_argument</replaceable> [, ...])]</literal></term>
    
    <listitem>
     <para>
      Nom de la fonction qui va convertir le type depuis
      l'environnement SQL vers le langage. Il doit prendre un argument
      type <type>internal</type> et renvoyer un type <type>internal
      </type>.
      L'argument présent sera du type de la transformation, et la
      fonction devrait être codée en tant que tel.
      (Mais il n'est pas autorisé de déclarer une fonction de niveau
      SQL qui retournerait un type <type>internal</type> sans avoir au
      moins un argument de type <type>internal</type>.)
      La valeur retournée sera spécifique à ce qui est implémenté dans
      le langage.
      Si aucune liste n'est spécifiée en argument, le nom de la fonction doit
      être unique dans son schéma.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><literal><replaceable>nom_fonction_to_sql</replaceable>[(<replaceable>type_argument</replaceable> [, ...])]</literal></term>
    
    <listitem>
     <para>
      Nom de la fonction qui va convertir le type depuis le langage
      vers l'environnement SQL. Il doit prendre un argument de
      type <type>internal</type> et renvoyer un type qui est le type de
      la transformation.
      Cet argument sera spécifique à ce qui est implémenté dans le
      langage.
      Si aucune liste n'est spécifiée en argument, le nom de la fonction doit
      être unique dans son schéma.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 
 <refsect1 id="sql-createtransform-notes">
  <title>Notes</title>
  
  <para>
   Utiliser <xref linkend="sql-droptransform"/> pour supprimer des
   transformations.
  </para>
 </refsect1>
 
 <refsect1 id="sql-createtransform-examples">
  <title>Exemples</title>
  
  <para>
   Pour créer une transformation pour le type <type>hstore</type> et le
   langage <literal>plpythonu</literal>, il faut d'abord définir le type
   et le langage : 
   <programlisting>
CREATE TYPE hstore ...;

CREATE EXTENSION plpythonu;
   </programlisting>
   Puis créer les fonctions idoines :
   <programlisting>
CREATE FUNCTION hstore_to_plpython(val internal) RETURNS internal
LANGUAGE C STRICT IMMUTABLE
AS ...;

CREATE FUNCTION plpython_to_hstore(val internal) RETURNS hstore
LANGUAGE C STRICT IMMUTABLE
AS ...;
   </programlisting>
   Et enfin, créer la transformation pour les lier ensemble :
   <programlisting>
CREATE TRANSFORM FOR hstore LANGUAGE plpythonu (
    FROM SQL WITH FUNCTION hstore_to_plpython(internal),
    TO SQL WITH FUNCTION plpython_to_hstore(internal)
);
   </programlisting>
   En pratique, cette commande est encapsulée dans les extensions.
  </para>
  
  <para>
   La section <filename>contrib</filename> contient un certain nombre
   d'extensions fournissant des transformations, qui peuvent être
   utilisés comme des exemples concrets.
  </para>
 </refsect1>
 
 <refsect1 id="sql-createtransform-compat">
  <title>Compatibilité</title>
  
  <para>
   Cette forme de <command>CREATE TRANSFORM</command> est une extension
   <productname>PostgreSQL</productname>. Il existe une commande
   <command>CREATE TRANSFORM</command> dans le standard <acronym>SQL</acronym>,
   mais elle est utilisée pour adapter les types de données
   aux langages clients. Cette utilisation n'est pas supportée par
   <productname>PostgreSQL</productname>.
  </para>
 </refsect1>
 
 <refsect1 id="sql-createtransform-seealso">
  <title>Voir aussi</title>
  
  <para>
   <xref linkend="sql-createfunction"/>,
   <xref linkend="sql-createlanguage"/>,
   <xref linkend="sql-createtype"/>,
   <xref linkend="sql-droptransform"/>
  </para>
 </refsect1>
 
</refentry>

