<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-selectinto">
 <indexterm zone="sql-selectinto">
  <primary>SELECT INTO</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>SELECT INTO</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>SELECT INTO</refname>
  <refpurpose>définit une nouvelle table à partir des résultats d'une
   requête</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>[ WITH [ RECURSIVE ] <replaceable class="parameter">requête_with</replaceable> [, ...] ]
SELECT [ ALL | DISTINCT [ ON ( <replaceable class="parameter">expression</replaceable> [, ...] ) ] ]
    * | <replaceable class="parameter">expression</replaceable> [ [ AS ] <replaceable class="parameter">nom_en_sortie</replaceable> ] [, ...]
    INTO [ TEMPORARY | TEMP | UNLOGGED ] [ TABLE ] <replaceable
class="parameter">nouvelle_table</replaceable>
    [ FROM <replaceable class="parameter">élément_from</replaceable> [, ...] ]
    [ WHERE <replaceable class="parameter">condition</replaceable> ]
    [ GROUP BY <replaceable class="parameter">expression</replaceable> [, ...] ]
    [ HAVING <replaceable class="parameter">condition</replaceable> ]
    [ WINDOW <replaceable class="parameter">nom_window</replaceable> AS ( <replaceable class="parameter">définition_window</replaceable> ) [, ...] ]
    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] <replaceable class="parameter">select</replaceable> ]
    [ ORDER BY <replaceable class="parameter">expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">opérateur</replaceable> ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">nombre</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">début</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">nombre</replaceable> ] { ROW | ROWS } ONLY ]
    [ FOR { UPDATE | SHARE } [ OF <replaceable class="parameter">nomtable</replaceable> [, ...] ] [ NOWAIT ] [...] ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>SELECT INTO</command> crée une nouvelle table en la remplissant
   avec des données récupérées par une requête. Les données ne sont pas
   renvoyées au client comme le fait habituellement l'instruction
   <command>SELECT</command>. Les nouvelles colonnes de la table ont les noms
   et les types de données associés avec les colonnes en sortie du
   <command>SELECT</command>.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</literal> ou <literal>TEMP</literal></term>
    <listitem>
     <para>
      Si spécifié, la table est créée comme une table temporaire. Référez-vous
      à <xref linkend="sql-createtable"/> pour plus de détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>UNLOGGED</literal></term>
    <listitem>
     <para>
      Si spécifié, la table est créée comme une table non tracée dans les
      journaux de transactions. Voir <xref linkend="sql-createtable"/> pour
      plus de détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_table</replaceable></term>
    <listitem>
     <para>
      Le nom de la table à créer (pouvant être qualifié par le nom du schéma).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Tous les autres paramètres sont décrits en détail dans <xref
   linkend="sql-select"/>.
  </para>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   <xref linkend="sql-createtableas"/> est fonctionnellement équivalent à
   <command>SELECT INTO</command>. <command>CREATE TABLE AS</command> est la
   syntaxe recommandée car cette forme de <command>SELECT INTO</command> n'est
   pas disponible dans <application>ECPG</application> ou
   <application>PL/pgSQL</application>. En effet, ils interprètent la clause
   <literal>INTO</literal> différemment. De plus, <command>CREATE TABLE
    AS</command> offre un ensemble de fonctionnalités plus important que celui
   de <command>SELECT INTO</command>.
  </para>

  <para>
   En contraste à <command>CREATE TABLE AS</command>, <command>SELECT
    INTO</command> ne permet pas de spécifier les propriétés telles que la
   méthode d'accès à la table avec <xref linkend="sql-createtable-method" />
   ou le tablespace de la table avec <xref
   linkend="sql-createtable-tablespace" />. Utilisez <xref
   linkend="sql-createtableas"/> si nécessaire. De ce fait, la méthode d'accès
   par défaut de la table est choisie pour la nouvelle table. Voir <xref
   linkend="guc-default-table-access-method"/> pour plus d'informations.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Crée une nouvelle table <literal>films_recent</literal> ne contenant que
   les entrées récentes de la table <literal>films</literal>&nbsp;:

   <programlisting>SELECT * INTO films_recent FROM films WHERE date_prod &gt;= '2002-01-01';
   </programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL utilise <command>SELECT INTO</command> pour représenter la
   sélection de valeurs dans des variables scalaires d'un programme hôte
   plutôt que la création d'une nouvelle table. Ceci est en fait l'utilisation
   trouvée dans <application>ECPG</application> (voir <xref linkend="ecpg"/>)
   et dans <application>PL/pgSQL</application> (voir <xref
   linkend="plpgsql"/>). L'usage de <productname>PostgreSQL</productname> de
   <command>SELECT INTO</command> pour représenter une création de table est
   historique. Il est préférable d'utiliser <command>CREATE TABLE AS</command>
   dans un nouveau programme.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtableas"/></member>
  </simplelist>
 </refsect1>
</refentry>
