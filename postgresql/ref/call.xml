<?xml version="1.0" encoding="UTF-8"?>
<!--
doc/src/sgml/ref/call.sgml
PostgreSQL documentation
-->

<refentry id="sql-call">
 <indexterm zone="sql-call">
  <primary>CALL</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CALL</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CALL</refname>
  <refpurpose>Exécuter une procédure</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>
CALL <replaceable class="parameter">nom</replaceable> ( [ <replaceable class="parameter">argument</replaceable> ] [, ...] )
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CALL</command> exécute une procédure.
  </para>

  <para>
   Si la procédure a des arguments en sortie, alors une ligne de résultat sera
   retournée, contenant les valeurs de ces paramètres.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom (potientiellement qualifié du schéma) de la procédure.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argument</replaceable></term>
    <listitem>
     <para>
      Un argument en entrée pour l'appel de la procédure.
     </para>

     <para>
      Les arguments peuvent inclure des noms de paramètres, en utilisant la
      syntaxe <literal><replaceable class="parameter">nom</replaceable> =&gt;
      <replaceable class="parameter">valeur</replaceable></literal>. Ceci
      fonctionne de la même façon que des appels de fonctions
      ordinaires&nbsp;; voir <xref linkend="sql-syntax-calling-funcs"/> pour
      les détails.
     </para>

     <para>
      Les arguments doivent être fournis pour tous les paramètres de la
      procédure qui n'ont pas de valeurs par défaut, y compris pour les
      paramètres <literal>OUT</literal>. Néanmoins, les arguments
      correspondant aux paramètres <literal>OUT</literal> ne sont pas
      évalués, donc il est habituel de simplement écrire
      <literal>NULL</literal> pour eux.(Écrire autre chose pour un paramètre
      <literal>OUT</literal> pourrait causer des problèmes de compatibilité
      avec les prochaines versions de
      <productname>PostgreSQL</productname>.)
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   L'utilisateur doit avoir le droit <literal>EXECUTE</literal> sur la
   procédure pour être autorisé à l'exécuter.
  </para>

  <para>
   Pour appeler une fonction (pas une procédure), utilisez
   <command>SELECT</command> à la place.
  </para>

  <para>
   Si <command>CALL</command> est exécuté dans un bloc de transaction, alors
   la procédure appelée ne peut pas exécuter d'ordre de contrôle de transaction.
   Les ordres de contrôle de transaction ne sont autorisés que si
   <command>CALL</command> est exécuté dans sa propre transaction.
  </para>

  <para>
   <application>PL/pgSQL</application> gère différemment des paramètres en
   sortie dans les commandes  <command>CALL</command>&nbsp;; voir <xref
   linkend="plpgsql-statements-calling-procedure"/>.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>
  <programlisting>
CALL faire_maintenance_bd();
  </programlisting>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>CALL</command> est conforme au standard SQL, sauf pour la gestion
   des paramètres en sortie. Le standard dit que les utilisateurs devraient
   écrire des variables pour recevoir les valeurs des paramètres en sortie.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createprocedure"/></member>
  </simplelist>
 </refsect1>
</refentry>
