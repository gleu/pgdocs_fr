<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060618 -->

<refentry id="sql-createview">
 <refmeta>
  <refentrytitle>CREATE VIEW</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE VIEW</refname>
  <refpurpose>Définir une vue</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>CREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] [ RECURSIVE ] VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="PARAMETER">nom de l'option de vue</replaceable> [= <replaceable class="PARAMETER">valeur de l'option de vue</replaceable>] [, ... ] ) ]
    AS <replaceable class="parameter">requête</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <indexterm zone="sql-createview">
   <primary>CREATE VIEW</primary>
  </indexterm>

  <para>
   <command>CREATE VIEW</command> définit une vue d'après une requête. La
   vue n'est pas matérialisée physiquement. Au lieu de cela, la requête
   est lancée chaque fois qu'une vue est utilisée dans une requête.
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> a la même finalité, mais
   si une vue du même nom existe déjà, elle est remplacée. La nouvelle requête
   doit générer les mêmes colonnes que celles de l'ancienne requête (c-est-à-dire
   les mêmes noms de colonnes dans le même ordre avec les mêmes types de données).
   Par contre, elle peut ajouter des colonnes supplémentaires en fin de liste.
   Les traitements qui donnent les colonnes en sortie pourraient être complètement
   différents.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple
   <literal>CREATE VIEW monschema.mavue ...</literal>),
   alors la vue est créée dans ce schéma.
   Dans le cas contraire, elle est créée dans le schéma courant. Les vues
   temporaires existent dans un schéma spécial. Il n'est donc pas nécessaire
   de fournir de schéma pour les vues temporaires. Le
   nom de la vue doit être différent du nom de toute autre vue, table, séquence,
   index ou table distante du même schéma.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</literal> ou <literal>TEMP</literal></term>
    <listitem>
     <para>
      La vue est temporaire. Les vues temporaires sont automatiquement supprimées
	  en fin de session. Les relations permanentes qui portent le même nom ne sont plus
      visibles pour la session tant que la vue temporaire existe, sauf
      s'il y est fait référence avec le nom du schéma.
     </para>

     <para>
      Si l'une des tables référencées par la vue est temporaire, la vue est alors elle-aussi
      temporaire (que <literal>TEMPORARY</literal> soit spécifié ou non).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RECURSIVE</literal></term>
    <listitem>
     <para>
      Creates a recursive view.  The syntax
<synopsis>
CREATE RECURSIVE VIEW <replaceable>name</replaceable> (<replaceable>columns</replaceable>) AS SELECT <replaceable>...</replaceable>;
</synopsis>
      is equivalent to
<synopsis>
CREATE VIEW <replaceable>name</replaceable> AS WITH RECURSIVE <replaceable>name</replaceable> (<replaceable>columns</replaceable>) AS (SELECT <replaceable>...</replaceable>) SELECT <replaceable>columns</replaceable> FROM <replaceable>name</replaceable>;
</synopsis>
      A view column list must be specified for a recursive view.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
       Le nom de la vue à créer (éventuellement qualifié du nom du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom de colonne</replaceable></term>
    <listitem>
     <para>
      Une liste optionnelle de noms à utiliser pour les colonnes de la vue.
      Si elle n'est pas donnée, le nom des colonnes est déduit de la requête.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="PARAMETER">nom de l'option de vue</replaceable> [= <replaceable class="PARAMETER">valeur de l'option</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      Cette clause spécifie des paramètres optionnels pour une vue.
      Actuellement le seul nom de paramètre supporté est
      <literal>security_barrier</literal>, qui doit être activé si une vue est censée fournir une sécurité au niveau de la ligne.
      Voir <xref linkend="rules-privileges"/> pour plus de détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">requête</replaceable></term>
    <listitem>
     <para>
      Une commande <xref linkend="sql-select"/> ou
      <xref linkend="sql-values"/> qui fournira
      les colonnes et lignes de la vue.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

   <para>
    L'instruction <xref linkend="sql-dropview"/> est utilisée pour supprimer
    les vues.
   </para>

   <para>
	Il est important de s'assurer que le nom et le type des colonnes de la vue
	correspondent à ce qui est souhaité. Ainsi&nbsp;:
<programlisting>CREATE VIEW vista AS SELECT 'Hello World';
</programlisting>
    présente deux défauts majeurs&nbsp;: le nom de la colonne prend la valeur implicite
	<literal>?column?</literal> et son type de données le type implicite <type>unknown</type>.
	Pour obtenir une chaîne de caractères dans le résultat de la vue, on peut écrire&nbsp;:
<programlisting>CREATE VIEW vista AS SELECT text 'Hello World' AS hello;
</programlisting>
   </para>

   <para>
    L'accès aux tables référencées dans la vue est déterminé par les droits
    du propriétaire de la vue. Dans certains cas, cela peut être utilisé pour
    fournir un accès sécurisé. Cependant, toutes les vues ne sont pas
    sécurisables&nbsp;; voir <xref linkend="rules-privileges"/> pour des
    détails.  Les fonctions appelées dans la vue sont traitées de la même façon
    que si elles avaient été appelées directement dans la requête utilisant la
    vue. Du coup, l'utilisateur d'une vue doit avoir les droits pour appeler
    toutes les fonctions utilisées par la vue.
   </para>

   <para>
    Quand <command>CREATE OR REPLACE VIEW</command> est utilisé sur une vue
    existante, seule la règle SELECT définissant la vue est modifiée. Les
    autres propriétés, comme les droits, le propriétaire et les règles autres
    que le SELECT, ne sont pas modifiées. Vous devez être le propriétaire de
    la vue pour la remplacer (ceci incluant aussi les membres du rôle
    propriétaire).
   </para>

  <refsect2 id="SQL-CREATEVIEW-updatable-views">
   <title id="SQL-CREATEVIEW-updatable-views-title">Updatable Views</title>

   <indexterm zone="sql-createview-updatable-views">
    <primary>updatable views</primary>
   </indexterm>

   <para>
    Simple views are automatically updatable: the system will allow
    <command>INSERT</command>, <command>UPDATE</command> and <command>DELETE</command> statements
    to be used on the view in the same way as on a regular table.  A view is
    automatically updatable if it satisfies all of the following conditions:

    <itemizedlist>
     <listitem>
      <para>
       The view must have exactly one entry in its <literal>FROM</literal> list,
       which must be a table or another updatable view.
      </para>
     </listitem>

     <listitem>
      <para>
       The view definition must not contain <literal>WITH</literal>,
       <literal>DISTINCT</literal>, <literal>GROUP BY</literal>, <literal>HAVING</literal>,
       <literal>LIMIT</literal>, or <literal>OFFSET</literal> clauses at the top level.
      </para>
     </listitem>

     <listitem>
      <para>
       The view definition must not contain set operations (<literal>UNION</literal>,
       <literal>INTERSECT</literal> or <literal>EXCEPT</literal>) at the top level.
      </para>
     </listitem>

     <listitem>
      <para>
       All columns in the view's select list must be simple references to
       columns of the underlying relation.  They cannot be expressions,
       literals or functions.  System columns cannot be referenced, either.
      </para>
     </listitem>

     <listitem>
      <para>
       No column of the underlying relation can appear more than once in
       the view's select list.
      </para>
     </listitem>

     <listitem>
      <para>
       The view must not have the <literal>security_barrier</literal> property.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    If the view is automatically updatable the system will convert any
    <command>INSERT</command>, <command>UPDATE</command> or <command>DELETE</command> statement
    on the view into the corresponding statement on the underlying base
    relation.
   </para>

   <para>
    If an automatically updatable view contains a <literal>WHERE</literal>
    condition, the condition restricts which rows of the base relation are
    available to be modified by <command>UPDATE</command> and <command>DELETE</command>
    statements on the view.  However, an <command>UPDATE</command> is allowed to
    change a row so that it no longer satisfies the <literal>WHERE</literal>
    condition, and thus is no longer visible through the view.  Similarly,
    an <command>INSERT</command> command can potentially insert base-relation rows
    that do not satisfy the <literal>WHERE</literal> condition and thus are not
    visible through the view.
   </para>

   <para>
    A more complex view that does not satisfy all these conditions is
    read-only by default: the system will not allow an insert, update, or
    delete on the view.  You can get the effect of an updatable view by
    creating <literal>INSTEAD OF</literal> triggers on the view, which must
    convert attempted inserts, etc. on the view into appropriate actions
    on other tables.  For more information see <xref
    linkend="sql-createtrigger"/>.  Another possibility is to create rules
    (see <xref linkend="sql-createrule"/>), but in practice triggers are
    easier to understand and use correctly.
   </para>

   <para>
    Note that the user performing the insert, update or delete on the view
    must have the corresponding insert, update or delete privilege on the
    view.  In addition the view's owner must have the relevant privileges on
    the underlying base relations, but the user performing the update does
    not need any permissions on the underlying base relations (see
    <xref linkend="rules-privileges"/>).
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer une vue composée des comédies&nbsp;:

<programlisting>CREATE VIEW comedies AS
    SELECT *
    FROM films
    WHERE genre = 'Comédie';
</programlisting>
   Cette requête crée une vue contenant les colonnes de la table
   <literal>film</literal> au moment de la création de la vue. Bien que l'étoile
   (<literal>*</literal>) soit utilisée pour créer la vue, les colonnes
   ajoutées par la suite à la table <literal>film</literal> ne feront pas
   partie de la vue.
  </para>

  <para>
   Create a recursive view consisting of the numbers from 1 to 100:
<programlisting>
CREATE RECURSIVE VIEW nums_1_100 (n) AS
    VALUES (1)
UNION ALL
    SELECT n+1 FROM nums_1_100 WHERE n &lt; 100;
</programlisting>
  </para>
 </refsect1>
 
 <refsect1>
  <title>Compatibilité</title>

  <para>
   Le standard SQL spécifie quelques possibilités supplémentaires pour
   l'instruction <command>CREATE VIEW</command>&nbsp;:
<synopsis>CREATE VIEW <replaceable class="parameter">nom</replaceable> [ ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    AS <replaceable class="parameter">requête</replaceable>
    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]
</synopsis>
  </para>

  <para>
   Les clauses optionnelles de la commande SQL complète sont&nbsp;:

   <variablelist>
     <varlistentry>
      <term><literal>CHECK OPTION</literal></term>
      <listitem>
       <para>
        This option controls the behavior of automatically updatable views.
        When given, <command>INSERT</command> and <command>UPDATE</command> commands on
        the view will be checked to ensure new rows satisfy the
        view-defining condition (that is, the new rows would be visible
        through the view). If they do not, the update will be rejected.
        Without <literal>CHECK OPTION</literal>, <command>INSERT</command> and
        <command>UPDATE</command> commands on the view are allowed to create rows
        that are not visible through the view.  (The latter behavior is the
        only one currently provided by <productname>PostgreSQL</productname>.)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>LOCAL</literal></term>
      <listitem>
       <para>
        Contrôle d'intégrité de la vue.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CASCADED</literal></term>
      <listitem>
       <para>
        Contrôle d'intégrité de la vue et de toutes les
        vues dépendantes. <literal>CASCADED</literal> est implicite si
        ni <literal>CASCADED</literal> ni <literal>LOCAL</literal> ne sont
        précisés.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> est une extension
   <productname>PostgreSQL</productname>, tout comme le concept de vue temporaire.
   The <literal>WITH</literal> clause is an extension as well.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-creatematerializedview"/></member>
   <member><xref linkend="sql-alterview"/></member>
   <member><xref linkend="sql-dropview"/></member>
  </simplelist>
 </refsect1>
</refentry>
