<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createindex">
 <indexterm zone="sql-createindex">
  <primary>CREATE INDEX</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE INDEX</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE INDEX</refname>
  <refpurpose>Définir un nouvel index</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ [ IF NOT EXISTS ] <replaceable class="parameter">nom</replaceable> ] ON [ ONLY ] <replaceable class="parameter">nom_table</replaceable> [ USING <replaceable class="parameter">méthode</replaceable> ]
    ( { <replaceable class="parameter">nom_colonne</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) } [ COLLATE <replaceable class="parameter">collation</replaceable> ] [ <replaceable class="parameter">classeop</replaceable> [ ( <replaceable class="parameter">parametre_classeop</replaceable> = <replaceable class="parameter">valeur</replaceable> [, ... ] ) ] ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
    [ INCLUDE ( <replaceable class="parameter">nom_colonne</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="parameter">parametre_stockage</replaceable> = <replaceable class="parameter">valeur</replaceable> [, ... ] ) ]
    [ TABLESPACE <replaceable class="parameter">nom_espacelogique</replaceable> ]
    [ WHERE <replaceable class="parameter">prédicat</replaceable> ]
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE INDEX</command> construit un index sur le (ou les)
   colonne(s) spécifiée(s) de la relation spécifiée, qui peut être une table ou
   une vue matérialisée. Les index
   sont principalement utilisés pour améliorer les performances de la base de
   données (bien qu'une utilisation inappropriée puisse produire l'effet inverse).
  </para>

  <para>
   Les champs clé pour l'index sont spécifiés à l'aide de noms des colonnes ou
   par des expressions écrites entre parenthèses. Plusieurs champs peuvent
   être spécifiés si la méthode d'indexation supporte les index multi-colonnes.
  </para>

  <para>
   Un champ d'index peut être une expression calculée à partir des valeurs d'une
   ou plusieurs colonnes de la ligne de table. Cette fonctionnalité peut être
   utilisée pour obtenir un accès rapide à des données obtenues par
   transformation des données basiques. Par exemple, un index calculé sur
   <literal>upper(col)</literal> autorise la clause
   <literal>WHERE upper(col) = 'JIM'</literal> à utiliser un index.
  </para>

  <para>
   <productname>PostgreSQL</productname> fournit les méthodes d'indexation
   B-tree (NDT&nbsp;: arbres balancés), hash (NDT&nbsp;: hachage),
   GiST (NDT&nbsp;: arbres de recherche généralisés), SP-GiST, GIN et BRIN.
   Il est possible, bien que compliqué,
   de définir des méthodes d'indexation utilisateur.
  </para>

  <para>
   Lorsque la clause <literal>WHERE</literal> est présente, un
   <firstterm>index partiel</firstterm> est créé. Un index partiel est un index
   ne contenant des entrées que pour une portion d'une table, habituellement
   la portion sur laquelle l'indexation est la plus utile. Par
   exemple, si une table contient des ordres facturés et d'autres qui ne le sont pas,
   et que les ordres non facturés n'occupent qu'une petite fraction du total de
   la table, qui plus est fréquemment utilisée, les performances sont
   améliorées par la création d'un index sur cette portion. Une
   autre application possible est l'utilisation de la clause <literal>WHERE</literal>
   en combinaison avec <literal>UNIQUE</literal> pour assurer l'unicité sur un sous-ensemble
   d'une table. Voir <xref linkend="indexes-partial"/> pour plus de renseignements.
  </para>

  <para>
   L'expression utilisée dans la clause <literal>WHERE</literal> peut ne
   faire référence qu'à des colonnes de la table sous-jacente, mais elle peut
   utiliser toutes les colonnes, pas uniquement celles indexées.
   Actuellement, les sous-requêtes et les expressions d'agrégats sont aussi
   interdites dans la clause <literal>WHERE</literal>. Les mêmes restrictions
   s'appliquent aux champs d'index qui sont des expressions.
  </para>

  <para>
   Toutes les fonctions et opérateurs utilisés dans la définition d'index
   doivent être <quote>immutable</quote> (NDT&nbsp;: immuable), c'est-à-dire que leur résultat ne doit
   dépendre que de leurs arguments et jamais d'une influence externe
   (telle que le contenu d'une autre table ou l'heure). Cette
   restriction permet de s'assurer que le comportement de l'index est strictement
   défini. Pour utiliser une fonction utilisateur dans une
   expression d'index ou dans une clause <literal>WHERE</literal>, cette fonction
   doit être marquée immutable lors de sa création.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>UNIQUE</literal></term>
    <listitem>
     <para>
      Le système vérifie la présence de valeurs dupliquées dans la table à la
      création de l'index (si des données existent déjà) et à chaque fois
      qu'une donnée est ajoutée. Les tentatives d'insertion ou de mises à jour
      qui résultent en des entrées dupliquées engendrent une erreur.
     </para>

     <para>
      Des restrictions supplémentaires s'appliquent quand des index uniques
      sont appliquées aux tables partitionnées. Voir <xref
      linkend="sql-createtable" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONCURRENTLY</literal></term>
    <listitem>
     <para>
      Quand cette option est utilisée, <productname>PostgreSQL</productname>
      construira l'index sans prendre de verrous qui bloquent les insertions,
      mises à jour, suppression en parallèle sur cette table&nbsp;;
      la construction d'un index standard verrouille les écritures (mais pas
      les lectures) sur la table jusqu'à la fin de la construction. Il
      est nécessaire d'avoir quelques connaissances avant d'utiliser
      cette option &mdash; voir <xref linkend="sql-createindex-concurrently"/>.
     </para>

     <para>
      Pour les tables temporaires, <command>CREATE INDEX</command> est toujours
      non concurrent car aucune autre session n'y a accès, et la création d'index
      non concurrent est moins coûteuse.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>IF NOT EXISTS</literal></term>
    <listitem>
     <para>
      Ne renvoie pas une erreur si une relation existe avec le même nom. Un
      message est renvoyé dans ce cas. Notez qu'il n'existe pas de garantie
      que l'index existant ressemble à celui qui aurait été créé. Le nom
      d'index est requis quand <literal>IF NOT EXISTS</literal> est spécifié.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INCLUDE</literal></term>
    <listitem>
     <para>
      La clause optionnelle <literal>INCLUDE</literal> indique une liste de
      colonnes qui seront incluses dans l'index comme des colonnes
      <firstterm>non clés</firstterm>. Une colonne non clé ne peut pas être
      utilisée dans la qualification d'une recherche par parcours d'index, et
      elle est ignorée pour la contrainte d'unicité ou d'exclusion assurée par
      l'index. Néanmoins, un parcours d'index couvrant peut renvoyer le
      contenu des colonnes non clés sans avoir à visiter la table de l'index
      car il est directement disponible dans l'index. De façon, l'ajout de
      colonnes non clés autorise l'utilisation de parcours d'index couvrants
      pour les requêtes qui, autrement, ne les auraient pas utilisés.
     </para>

     <para>
      Il est conseillé de rester prudent sur l'ajout de colonnes non clés dans
      un index, tout spécialement pour les colonnes larges. Si un
      enregistrement d'un index dépasse la taille maximale autorisée pour le
      type de l'index l'insertion de données échouera. Dans tous les cas, les
      colonnes non clés dupliquent les données de la table et augmentent la
      taille de l'index, ralentissant potentiellement les recherches.
      Furthermore, B-tree deduplication is never used with indexes
      that have a non-key column.
     </para>

     <para>
      Les colonnes listées dans la clause <literal>INCLUDE</literal> n'ont pas
      besoin de classes d'opérateur appropriées. La clause peut contenir les
      colonnes dont les types de données n'ont pas de classes d'opérateur
      définis pour une méthode d'accès donnée.
     </para>

     <para>
      Les expressions ne sont pas supportées comme colonnes incluses car elles
      ne peuvent pas être utilisées dans des parcours d'index couvrants.
     </para>

     <para>
      Actuellement, seules les méthodes d'accès B-tree et GiST acceptent cette fonctionnalité.
      Dans les index B-tree et GiST, les valeurs des colonnes listées dans la clause
      <literal>INCLUDE</literal> sont incluses dans les enregistrements feuilles qui
      correspondent à des enregistrements de lignes de table, mais ne sont pas incluses
      dans les enregistrements de plus haut niveau.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom de l'index à créer. Aucun nom de schéma ne peut être inclus
      ici&nbsp;; l'index est toujours créé dans le même schéma que sa table
      parent. Si le nom est omis, <productname>PostgreSQL</productname>
      choisit un nom convenable basé sur le nom de la table parent et celui
      des colonnes indexées.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ONLY</literal></term>
    <listitem>
     <para>
      Indique de ne pas faire de récursion pour la création des index sur les
      partitions si la table est partitionnée. Par défaut, la récursion a
      lieu.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_table</replaceable></term>
    <listitem>
     <para>
      Le nom de la table à indexer (éventuellement qualifié du nom du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">méthode</replaceable></term>
    <listitem>
     <para>
      Le nom de la méthode à utiliser pour l'index. Les choix sont
      <literal>btree</literal>, <literal>hash</literal>,
      <literal>gist</literal>, <literal>spgist</literal>,
      <literal>gin</literal> et <literal>brin</literal>. La méthode par défaut
      est <literal>btree</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_colonne</replaceable></term>
    <listitem>
     <para>
      Le nom d'une colonne de la table.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">expression</replaceable></term>
    <listitem>
     <para>
      Une expression basée sur une ou plusieurs colonnes de la table.
      L'expression doit habituellement être écrite entre
      parenthèses, comme la syntaxe le précise. Néanmoins, les parenthèses
      peuvent être omises si l'expression a la forme d'un appel de
      fonction.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">collation</replaceable></term>
    <listitem>
     <para>
      Le nom du collationnement à utiliser pour l'index. Par défaut, l'index
      utilise le collationnement déclaré pour la colonne à indexer ou
      le collationnement résultant de l'expression à indexer. Les index
      avec des collationnements spécifiques peuvent être utiles pour les
      requêtes qui impliquent des expressions utilisant des collationnements
      spécifiques.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">classeop</replaceable></term>
    <listitem>
     <para>
      Le nom d'une classe d'opérateur. Voir plus bas pour les détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">opclass_parameter</replaceable></term>
    <listitem>
     <para>
      The name of an operator class parameter. See below for details.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ASC</literal></term>
    <listitem>
     <para>
      Spécifie un ordre de tri ascendant (valeur par défaut).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DESC</literal></term>
    <listitem>
     <para>
      Spécifie un ordre de tri descendant.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULLS FIRST</literal></term>
    <listitem>
     <para>
      Spécifie que les valeurs NULL sont présentées avant les valeurs non
      NULL. Ceci est la valeur par défaut quand <literal>DESC</literal> est
      indiqué.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULLS LAST</literal></term>
    <listitem>
     <para>
      Spécifie que les valeurs NULL sont présentées après les valeurs non
      NULL. Ceci est la valeur par défaut quand <literal>ASC</literal> est
      indiqué.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">paramètre_stockage</replaceable></term>
    <listitem>
     <para>
      Le nom d'un paramètre de stockage spécifique à la méthode d'indexage.
      Voir <xref linkend="sql-createindex-storage-parameters"/> pour les
      détails.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_espacelogique</replaceable></term>
    <listitem>
     <para>
      Le tablespace dans lequel créer l'index. S'il n'est pas précisé,
      <xref linkend="guc-default-tablespace"/> est consulté, sauf
      si la table est temporaire auquel cas <xref linkend="guc-temp-tablespaces"/>
      est utilisé.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">prédicat</replaceable></term>
    <listitem>
     <para>
      L'expression de la contrainte pour un index partiel.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <refsect2 id="sql-createindex-storage-parameters" xreflabel="Paramètres de stockage des index">
   <title>Paramètres de stockage des index</title>

   <para>
    La clause <literal>WITH</literal> optionnelle spécifie des
    <firstterm>paramètres de stockage</firstterm> pour l'index. Chaque méthode
    d'indexage peut avoir son propre ensemble de paramètres de stockage. Les
    méthodes d'index B-tree, hash, GiST et SP-GiST acceptent toutes ce
    paramètre&nbsp;:
   </para>

   <variablelist>
    <varlistentry id="index-reloption-fillfactor" xreflabel="fillfactor">
     <term><literal>fillfactor</literal> (<type>integer</type>)
      <indexterm>
       <primary>paramètre de stockage <varname>fillfactor</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Le facteur de remplissage pour un index est un pourcentage qui détermine
       à quel point les pages d'index seront remplies par la méthode
       d'indexage. Pour les B-tree, les pages enfants sont remplies jusqu'à ce
       pourcentage lors de la construction initiale de l'index, et aussi lors
       de l'extension de l'index sur la droite (ajoutant les valeurs de clé les
       plus importantes). Si les pages deviennent ensuite totalement remplies,
       elles seront partagées, amenant une dégradation graduelle de l'efficacité
       de l'index. Les arbres B-tree utilisent un facteur de remplissage de 90%
       par défaut mais toute valeur entière comprise entre 10 et 100 peut être
       choisie. Si la table est statique, alors un facteur de 100 est meilleur
       pour minimiser la taille physique de l'index. Pour les tables mises à jour
       régulièrement, un facteur de remplissage plus petit est meilleur pour
       minimiser le besoin de pages divisées. Les autres méthodes d'indexage
       utilisent un facteur de remplissage de façon différente mais en gros
       analogue&nbsp;; le facteur de remplissage varie suivant les méthodes.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    Les index B-tree acceptent aussi ces paramètres&nbsp;:
   </para>

   <variablelist>
    <varlistentry id="index-reloption-deduplicate-items" xreflabel="deduplicate_items">
     <term><literal>deduplicate_items</literal> (<type>boolean</type>)
      <indexterm>
       <primary><varname>deduplicate_items</varname> storage parameter</primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Controls usage of the B-tree deduplication technique described
       in <xref linkend="btree-deduplication"/>.  Set to
       <literal>ON</literal> or <literal>OFF</literal> to enable or
       disable the optimization.  (Alternative spellings of
       <literal>ON</literal> and <literal>OFF</literal> are allowed as
       described in <xref linkend="config-setting"/>.) The default is
       <literal>ON</literal>.
      </para>

      <note>
       <para>
        Turning <literal>deduplicate_items</literal> off via
        <command>ALTER INDEX</command> prevents future insertions from
        triggering deduplication, but does not in itself make existing
        posting list tuples use the standard tuple representation.
       </para>
      </note>
     </listitem>
    </varlistentry>

    <varlistentry id="index-reloption-vacuum-cleanup-index-scale-factor" xreflabel="vacuum_cleanup_index_scale_factor">
     <term><literal>vacuum_cleanup_index_scale_factor</literal> (<type>floating point</type>)
      <indexterm>
       <primary><varname>vacuum_cleanup_index_scale_factor</varname></primary>
       <secondary>paramètre de stockage</secondary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Valeur par index pour le <xref
       linkend="guc-vacuum-cleanup-index-scale-factor"/>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    Les index GiST acceptent en option ce paramètre&nbsp;:
   </para>

   <variablelist>
    <varlistentry id="index-reloption-buffering" xreflabel="buffering">
     <term><literal>buffering</literal> (<type>enum</type>)
      <indexterm>
       <primary>paramètre de stockage <varname>buffering</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Détermine si la technique de construction par tampon décrite dans <xref
       linkend="gist-buffering-build"/> est utilisé pour construire l'index. À
       <literal>OFF</literal>, cette technique est désactivée. À
       <literal>ON</literal>, elle est activée. À <literal>AUTO</literal>,
       elle est initialement désactivée mais peut être activée quand la taille
       de l'index atteint <xref linkend="guc-effective-cache-size"/>. La
       valeur par défaut est <literal>AUTO</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    Les index GIN acceptent plusieurs paramètres supplémentaires&nbsp;:
   </para>

   <variablelist>

    <varlistentry id="index-reloption-fastupdate" xreflabel="fastupdate">
     <term><literal>fastupdate</literal> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de stockage <varname>fastupdate</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Ce paramètre régit l'utilisation de la technique de mise à jour rapide
       décrite dans <xref linkend="gin-fast-update"/>. C'est un paramètre
       booléen&nbsp;: <literal>ON</literal> active la mise à jour rapide,
       <literal>OFF</literal> la désactive. La valeur par défaut est
       <literal>ON</literal>.
      </para>

      <note>
       <para>
        Désactiver <literal>fastupdate</literal> via <command>ALTER
         INDEX</command> empêche les insertions futures d'aller dans la liste
        d'entrées d'index à traiter, mais ne nettoie pas les entrées précédentes
        de cette liste. Vous voudrez peut être ensuite exécuter un
        <command>VACUUM</command> sur la table ou exécuter la fonction
        <function>gin_clean_pending_list</function>, afin de garantir que
        la liste à traiter soit vidée.
       </para>
      </note>
     </listitem>
    </varlistentry>

    <varlistentry id="index-reloption-gin-pending-list-limit" xreflabel="gin_pending_list_limit">
     <term><literal>gin_pending_list_limit</literal> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_pending_list_limit</varname></primary>
       <secondary>paramètre de stockage</secondary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Personnalise le paramètre <xref linkend="guc-gin-pending-list-limit"/>.
       Cette valeur est spécifiée en ko.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    Les index <acronym>BRIN</acronym> acceptent différents paramètres&nbsp;:
   </para>

   <variablelist>
    <varlistentry id="index-reloption-pages-per-range" xreflabel="pages_per_range">
     <term><literal>pages_per_range</literal> (<type>integer</type>)
      <indexterm>
       <primary>paramètre de stockage <varname>pages_per_range</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Définit le nombre de blocs de table qui sera résumé en un intervalle de
       blocs pour chaque entrée dans un index <acronym>BRIN</acronym> (voir
       <xref linkend="brin-intro"/> pour plus de détails). La valeur par
       défaut est <literal>128</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="index-reloption-autosummarize" xreflabel="autosummarize">
     <term><literal>autosummarize</literal> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de stockage <varname>autosummarize</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Définit si le lancement d'un calcul de résumé doit être effectuée pour
       l'intervalle de blocs précédent chaque fois qu'une insertion est détectée
       sur l'intervalle suivant.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    Les index GiST acceptent en plus ce paramètre&nbsp;:
   </para>

   <variablelist>
    <varlistentry>
     <term><literal>buffering</literal></term>
     <listitem>
      <para>
       Détermine si la technique de construction avec tampons décrite dans
       <xref linkend="gist-buffering-build"/> est utilisée pour construire l'index.
       À <literal>OFF</literal>, cette technique n'est pas utilisée. À
       <literal>ON</literal>, elle est utilisée. À <literal>AUTO</literal>, elle
       est au départ désactivée mais elle est activée une fois que la taille de
       l'index atteint <xref linkend="guc-effective-cache-size"/>. La valeur
       par défaut est <literal>AUTO</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

  </refsect2>

  <refsect2 id="sql-createindex-concurrently" xreflabel="Construire des index en parallèle">
   <title>Construire des index en parallèle</title>

   <indexterm zone="sql-createindex-concurrently">
    <primary>index</primary>
    <secondary>construction en parallèle</secondary>
   </indexterm>

   <para>
    Créer un index peut interférer avec les opérations normales d'une base de
    données. Habituellement, <productname>PostgreSQL</productname> verrouille
    la table à indexer pour la protéger des écritures et construit l'index
    complet avec un seul parcours de la table. Les autres transactions peuvent
    toujours lire la table mais s'ils essaient d'insérer, mettre à jour,
    supprimer des lignes dans la table, elles seront bloquées jusqu'à la fin
    de la construction de l'index. Ceci peut avoir un effet sérieux si le
    système est une base en production. Les très grosses tables peuvent demander
    plusieurs heures pour être indexées. Même pour les petites tables, une
    construction d'index peut bloquer les processus qui voudraient écrire
    dans la table pendant des périodes longues sur un système de production.
   </para>

   <para>
    <productname>PostgreSQL</productname> supporte la construction des index
    sans verrouillage des écritures. Cette méthode est appelée en précisant
    l'option <literal>CONCURRENTLY</literal> de <command>CREATE INDEX</command>.
    Quand cette option est utilisée, <productname>PostgreSQL</productname>
    doit réaliser deux parcours de table et, en plus, il doit attendre que toutes
    les transactions existantes qui peuvent modifier ou utiliser cet index se terminent.
    Du coup, cette méthode requiert
    plus de temps qu'une construction standard de l'index et est bien plus
    longue à se terminer. Néanmoins, comme cela autorise la poursuite des
    opérations pendant la construction de l'index, cette méthode est utile
    pour ajouter de nouveaux index dans un environnement en production. Bien
    sûr, la charge CPU et I/O supplémentaire imposée par la création de l'index
    peut ralentir les autres opérations.
   </para>

   <para>
    Dans la construction en parallèle d'un index, l'index est enregistré
    dans les catalogues systèmes dans une transaction, puis les deux
    parcours de table interviennent dans deux transactions supplémentaires.
    Avant chaque parcours de table, la construction de l'index doit attendre
    la fin des transactions en cours qui ont modifié la table. Après le deuxième
    parcours, la construction doit attendre la fin de toute transactions ayant
    une image de base (un snapshot, voir <xref linkend="mvcc"/>) datant d'avant
    le deuxième parcours pour se terminer. Ensuite, l'index peut être marqué
    comme utilisable, et la commande <command>CREATE INDEX</command> se
    termine. Néanmoins, même après cela, l'index pourrait ne pas être
    immédiatement utilisable pour les autres requêtes&nbsp;: dans le pire des
    cas, il ne peut pas être utilisé tant que des transactions datant d'avant
    le début de la création de l'index existent.
   </para>

   <para>
    Si un problème survient lors du parcours de la table, comme un deadlock ou
    une violation d'unicité dans un index unique, la commande <command>CREATE
     INDEX</command> échouera mais laissera derrière un index
    <quote>invalide</quote>. Cet index sera ignoré
    par les requêtes car il pourrait être incomplet&nbsp;; néanmoins il
    consommera quand même du temps lors des mises à jour de l'index. La
    commande <command>\d</command> de <application>psql</application> rapportera
    cet index comme <literal>INVALID</literal>&nbsp;:

    <programlisting>
	postgres=# \d tab
	Table "public.tab"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 col    | integer |           |          |
	Indexes:
	"idx" btree (col) INVALID
    </programlisting>

    La méthode de récupération
    recommandée dans de tels cas est de supprimer l'index et de tenter de
    nouveau un <command>CREATE INDEX CONCURRENTLY</command>. (Une autre
    possibilité est de reconstruire l'index avec <command>REINDEX CONCURRENTLY</command>.)
   </para>

   <para>
    Lors de la construction d'un index unique en parallèle, la contrainte d'unicité
    est déjà placée pour les autres transactions quand le deuxième parcours de
    table commence. Cela signifie que des violations de contraintes pourraient
    être rapportées dans les autres requêtes avant que l'index ne soit disponible,
    voire même dans des cas où la construction de l'index va échouer. De plus,
    si un échec survient dans le deuxième parcours, l'index
    <quote>invalide</quote> continue à forcer la contrainte d'unicité.
   </para>

   <para>
    Les constructions en parallèle d'index avec expression et d'index partiels
    sont supportées. Les erreurs survenant pendant l'évaluation de ces expressions
    pourraient causer un comportement similaire à celui décrit ci-dessus pour
    les violations de contraintes d'unicité.
   </para>

   <para>
    Les constructions d'index standards permettent d'autres constructions
    d'index en simultanée sur la même table mais seul une construction d'index
    en parallèle peut survenir sur une table à un même moment. Dans les deux
    cas, la modification du schéma de la table n'est pas autorisé pendant la
    construction de l'index. Une autre différence est qu'une commande
    <command>CREATE INDEX</command> normale peut être réalisée à l'intérieur
    d'un bloc de transactions alors que <command>CREATE INDEX
     CONCURRENTLY</command> ne le peut pas.
   </para>

   <para>
    Les constructions en parallèle des index sur les tables partitionnées ne
    sont pas actuellement supportées. Néanmoins, vous pouvez construire
    l'index en parallèle sur chaque partition individuel, puis créer l'index
    partitionné sans CONCURRENTLY pour réduire le temps où les écritures
    seront bloquées sur la table partitionnée. Dans ce cas, construire l'index
    partitionné est une opération sur les méta-données uniquement.
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   <xref linkend="indexes"/> présente des informations sur le moment où les
   index peuvent être utilisés, quand ils ne le sont pas et dans quelles situations
   particulières ils peuvent être utiles.
  </para>

  <para>
   Actuellement, seules les méthodes d'indexation B-tree, GiST, GIN et BRIN supportent les
   index multi-colonnes. Jusqu'à 32 champs peuvent être spécifiés par défaut.
   (Cette limite peut être modifiée à la compilation de
   <productname>PostgreSQL</productname>.) Seul B-tree supporte actuellement les
   index uniques.
  </para>

  <para>
   Une <firstterm>classe d'opérateur</firstterm> with optional parameters
   peut être spécifiée pour
   chaque colonne d'un index. La classe d'opérateur identifie les opérateurs à
   utiliser par l'index pour cette colonne. Par exemple, un index B-tree sur des
   entiers codés sur quatre octets utilise la classe
   <literal>int4_ops</literal>, qui contient des
   fonctions de comparaison pour les entiers sur quatre octets. En pratique, la
   classe d'opérateur par défaut pour le type de données de la colonne est
   généralement suffisant. Les classes d'opérateur trouvent leur intérêt principal
   dans l'existence, pour certains types de données, de plusieurs
   ordonnancements significatifs.
  </para>
  <para>
   Soit l'exemple d'un type de données
   <quote>nombre complexe</quote> qui doit être classé par sa valeur absolue
   ou par sa partie réelle. Cela peut être réalisé par la définition de deux
   classes d'opérateur pour le type de données, puis par la sélection de la
   classe appropriée lors de la création d'un index.
  </para>
  <para>
   De plus amples informations sur les classes d'opérateurs sont disponibles
   dans <xref linkend="indexes-opclass"/> et dans <xref linkend="xindex"/>.
  </para>

  <para>
   Quand <literal>CREATE INDEX</literal> est appelé sur une table
   partitionnée, le comportement par défaut est de vérifier que toutes les
   partitions ont un index correspondant. Chaque partition est tout d'abord
   vérifiée pour déterminer si un index équivalent existe déjà. Si c'est le
   cas, cet index sera attaché comme index la partition avec l'index en cours
   de création, qui deviendra son index parent. Si aucun index correspondant
   n'existe, un nouvel index sera créé et attaché automatiquement. Le nom du
   nouvel index dans chaque partition sera déterminé comme si aucun nom
   d'index n'avait été spécifié dans la commande. Si l'option
   <literal>ONLY</literal> est indiquée, aucune récursion n'est réalisée et
   l'index est marqué invalide. (<command>ALTER INDEX ... ATTACH
    PARTITION</command> marque l'index comme valide une fois que toutes les
   partitions ont acquis l'index correspondant.) Néanmoins, notez que toute
   partition créée dans le futur en utilisant <command>CREATE TABLE ... PARTITION
    OF</command> contiendra automatiquement l'index correspondant que cette option
   soit spécifiée ou non.
  </para>

  <para>
   Pour les méthodes d'indexage qui supportent les parcours ordonnés (actuellement
   seulement pour les B-tree), les clauses optionnelles <literal>ASC</literal>,
   <literal>DESC</literal>, <literal>NULLS FIRST</literal> et/ou <literal>NULLS
    LAST</literal> peuvent être spécifiées pour modifier l'ordre de tri
   normal de l'index. Comme un index ordonné peut être parcouru en avant et en
   arrière, il n'est habituellement pas utile de créer un index
   <literal>DESC</literal> sur une colonne &mdash; ce tri est déjà disponible
   avec un index standard. L'intérêt de ces options se révèle avec les
   index multi-colonnes. Ils peuvent être créés pour correspondre à un tri
   particulier demandé par une requête, comme <literal>SELECT ... ORDER BY x ASC,
    y DESC</literal>. Les options <literal>NULLS</literal> sont utiles si vous
   avez besoin de supporter le comportement <quote>nulls sort low</quote>,
   plutôt que le <quote>nulls sort high</quote> par défaut, dans les requêtes
   qui dépendent des index pour éviter l'étape du tri.
  </para>

  <para>
   Pour la plupart des méthodes d'indexation, la vitesse de création d'un
   index est dépendante du paramètre <xref linkend="guc-maintenance-work-mem"/>.
   Une plus grande valeur réduit le temps nécessaire à la création d'index,
   tant qu'elle ne dépasse pas la quantité de mémoire vraiment disponible, afin
   d'éviter que la machine ne doive paginer.
  </para>

  <para>
   <productname>PostgreSQL</productname> peut construire des index en
   utilisant plusieurs CPU pour traiter plus rapidement les lignes de la
   table. Cette fonctionnalité est connue sous le nom de
   <firstterm>construction d'index parallélisée</firstterm>. Pour les méthodes
   d'indexage qui supportent la construction d'index en parallèle
   (actuellement seulement les B-tree),
   <varname>maintenance_work_mem</varname> indique la quantité maximale de
   mémoire pouvant être utilisée pour chaque opération de construction
   d'index, quelque soit le nombre de processus workers démarrés.
   Habituellement, un modèle de coût détermine automatiquement le nombre de
   workers à exécuter.
  </para>

  <para>
   Les constructions d'index parallélisées pourraient bénéficier d'une
   augmentation du <varname>maintenance_work_mem</varname>, là où une
   construction équivalente mais non parallélisée ne verrait que peu ou pas de
   bénéfices. Notez que <varname>maintenance_work_mem</varname> peut
   influencer le nombre de processus workers demandés car les workers
   parallélisés doivent avoir au moins <literal>32 Mo</literal> provenant du
   <varname>maintenance_work_mem</varname> global. Il doit aussi rester
   <literal>32 Mo</literal> pour le processus leader. Augmenter <xref
   linkend="guc-max-parallel-workers-maintenance"/> pourrait permettre
   l'utilisation d'un plus grand nombre de workers, ce qui réduirait le temps
   nécessaire pour la création de l'index, à condition que cette création ne
   soit pas déjà freiné par les disques. Bien sûr, il doit rester suffisamment
   de CPU qui auraient été autrement inutilisés.
  </para>

  <para>
   Configurer une valeur pour <literal>parallel_workers</literal> via <xref
   linkend="sql-altertable"/> contrôle directement le nombre de processus
   workers parallélisés réclamé par un <command>CREATE INDEX</command> sur la
   table. Ceci contourne complètement le modèle de coût, et empêche
   <varname>maintenance_work_mem</varname> d'affcter le nombre demandé de
   workers parallélisés. Configurer <literal>parallel_workers</literal> à 0
   via <command>ALTER TABLE</command> désactivera les constructions d'index
   parallélisées sur la table dans tous les cas.
  </para>

  <tip>
   <para>
    Vous pourriez vouloir réinitialiser <literal>parallel_workers</literal>
    après l'avoir configuré pour permettre une construction d'index. Ceci
    évite des changements inattendus dans les plans de requêtes, vu que
    <literal>parallel_workers</literal> affecte <emphasis>tous</emphasis> les
    parcours parallélisés de table.
   </para>
  </tip>

  <para>
   Bien que <command>CREATE INDEX</command> avec l'option
   <literal>CONCURRENTLY</literal> accepte les constructions parallélisées
   sans restrictions particulières, seul le premier parcours de table est
   réellement exécuté en parallèle.
  </para>

  <para>
   <xref linkend="sql-dropindex"/> est utilisé
   pour supprimer un index.
  </para>

  <para>
   Les versions précédentes de <productname>PostgreSQL</productname> ont aussi
   une méthode d'index R-tree. Cette méthode a été supprimée car elle n'a pas
   d'avantages par rapport à la méthode GiST.
   Si <literal>USING rtree</literal> est indiqué, <command>CREATE INDEX</command>
   l'interprétera comme <literal>USING gist</literal> pour simplifier la
   conversions des anciennes bases à GiST.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Créer un index B-tree sur la colonne <literal>titre</literal> dans la
   table <literal>films</literal>&nbsp;:
   <programlisting>CREATE UNIQUE INDEX title_idx ON films (title);
   </programlisting>
  </para>

  <para>
   Pour créer un index B-tree unique sur la colonne <literal>title</literal>
   avec les colonnes incluses <literal>director</literal> et <literal>rating</literal>
   de la table <literal>films</literal>&nbsp;:
   <programlisting>
CREATE UNIQUE INDEX title_idx ON films (title) INCLUDE (director, rating);
   </programlisting>
  </para>

  <para>
   To create a B-Tree index with deduplication disabled:
   <programlisting>
CREATE INDEX title_idx ON films (title) WITH (deduplicate_items = off);
   </programlisting>
  </para>

  <para>
   Pour créer un index sur l'expression <literal>lower(titre)</literal>,
   permettant une recherche efficace quelque soit la casse&nbsp;:
   <programlisting>CREATE INDEX ON films ((lower(titre)));
   </programlisting>
   (dans cet exemple, nous avons choisi d'omettre le nom de l'index, donc le
   système choisira un nom, typiquement <literal>films_lower_idx</literal>.)
  </para>

  <para>
   Pour créer un index avec un collationnement spécifique&nbsp;:
   <programlisting>
CREATE INDEX title_idx_german ON films (title COLLATE "de_DE");
   </programlisting>
  </para>

  <para>
   Pour créer un index avec un ordre de tri des valeurs NULL différent du
   standard&nbsp;:
   <programlisting>
CREATE INDEX title_idx_nulls_low ON films (title NULLS FIRST);
   </programlisting>
  </para>

  <para>
   Pour créer un index avec un facteur de remplissage différent&nbsp;:
   <programlisting>CREATE UNIQUE INDEX idx_titre ON films (titre) WITH (fillfactor = 70);
   </programlisting>
  </para>

  <para>
   Pour créer un index <acronym>GIN</acronym> avec les mises à jour rapides
   désactivées&nbsp;:
   <programlisting>
CREATE INDEX gin_idx ON documents_table USING GIN (locations) WITH (fastupdate = off);
   </programlisting>
  </para>

  <para>
   Créer un index sur la colonne <literal>code</literal> de la table
   <literal>films</literal> et donner à l'index l'emplacement du tablespace
   <literal>espaceindex</literal>&nbsp;:
   <programlisting>CREATE INDEX code_idx ON films (code) TABLESPACE espaceindex;
   </programlisting>
  </para>

  <para>
   Pour créer un index GiST sur un attribut point, de façon à ce que nous
   puissions utiliser rapidement les opérateurs box sur le résultat de la
   fonction de conversion&nbsp;:
   <programlisting>
CREATE INDEX pointloc
    ON points USING gist (box(location,location));
SELECT * FROM points
    WHERE box(location,location) &amp;&amp; '(0,0),(1,1)'::box;
   </programlisting>
  </para>

  <para>
   Pour créer un index sans verrouiller les écritures dans la table&nbsp;:
   <programlisting>CREATE INDEX CONCURRENTLY index_quentite_ventes ON table_ventes (quantité);
   </programlisting>
  </para>

 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>CREATE INDEX</command> est une extension du langage
   <productname>PostgreSQL</productname>. Les index n'existent pas dans le
   standard SQL.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterindex"/></member>
   <member><xref linkend="sql-dropindex"/></member>
   <member><xref linkend="sql-reindex"/></member>
  </simplelist>
 </refsect1>
</refentry>
