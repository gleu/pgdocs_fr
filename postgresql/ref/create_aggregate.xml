<?xml version="1.0" encoding="UTF-8"?>
<refentry id="sql-createaggregate">
 <indexterm zone="sql-createaggregate">
  <primary>CREATE AGGREGATE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE AGGREGATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE AGGREGATE</refname>
  <refpurpose>Définir une nouvelle fonction d'agrégat</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>CREATE AGGREGATE [ OR REPLACE ] <replaceable class="parameter">nom</replaceable> ( [ <replaceable class="parameter">mode_arg</replaceable> ] [ <replaceable class="parameter">nom_arg</replaceable> ] <replaceable class="parameter">type_donnees_arg</replaceable> [ , ... ] ) (
     SFUNC = <replaceable class="parameter">sfonc</replaceable>,
     STYPE = <replaceable class="parameter">type_donnée_état</replaceable>
    [ , SSPACE = <replaceable class="parameter">taille_donnée_état</replaceable> ]
    [ , FINALFUNC = <replaceable class="parameter">ffonc</replaceable> ]
    [ , FINALFUNC_EXTRA ]
    [ , FINALFUNC_MODIFY = { READ_ONLY | SHAREABLE | READ_WRITE } ]
    [ , COMBINEFUNC = <replaceable class="parameter">combinefunc</replaceable> ]
    [ , SERIALFUNC = <replaceable class="parameter">serialfunc</replaceable> ]
    [ , DESERIALFUNC = <replaceable class="parameter">deserialfunc</replaceable> ]
    [ , INITCOND = <replaceable class="parameter">condition_initiale</replaceable> ]
    [ , MSFUNC = <replaceable class="parameter">msfonc</replaceable> ]
    [ , MINVFUNC = <replaceable class="parameter">minvfonc</replaceable> ]
    [ , MSTYPE = <replaceable class="parameter">type_donnée_état_m</replaceable> ]
    [ , MSSPACE = <replaceable class="parameter">taille_donnée_état_m</replaceable> ]
    [ , MFINALFUNC = <replaceable class="parameter">mffonc</replaceable> ]
    [ , MFINALFUNC_EXTRA ]
    [ , MFINALFUNC_MODIFY = { READ_ONLY | SHAREABLE | READ_WRITE } ]
    [ , MINITCOND = <replaceable class="parameter">condition_initiale_m</replaceable> ]
    [ , SORTOP = <replaceable class="parameter">operateur_tri</replaceable> ]
    [ , PARALLEL = { SAFE | RESTRICTED | UNSAFE } ]
    [ , HYPOTHETICAL ]
 )

CREATE [ OR REPLACE ] AGGREGATE <replaceable class="parameter">nom</replaceable> ( [ [ <replaceable class="parameter">mode_arg</replaceable> ] [ <replaceable class="parameter">nom_arg</replaceable> ] <replaceable class="parameter">type_donnees_arg</replaceable> [ , ... ] ]
                        ORDER BY [ <replaceable class="parameter">mode_arg</replaceable> ] [ <replaceable class="parameter">nom_arg</replaceable> ] <replaceable class="parameter">type_donnees_arg</replaceable> [ , ... ] ) (
    SFUNC = <replaceable class="parameter">sfonc</replaceable>,
    STYPE = <replaceable class="parameter">type_donnée_état</replaceable>
    [ , SSPACE = <replaceable class="parameter">taille_donnée_état</replaceable> ]
    [ , FINALFUNC = <replaceable class="parameter">ffonc</replaceable> ]
    [ , FINALFUNC_EXTRA ]
    [ , FINALFUNC_MODIFY = { READ_ONLY | SHAREABLE | READ_WRITE } ]
    [ , INITCOND = <replaceable class="parameter">condition_initiale</replaceable> ]
    [ , PARALLEL = { SAFE | RESTRICTED | UNSAFE } ]
)

<phrase>ou l'ancienne syntaxe</phrase>

CREATE [ OR REPLACE ] AGGREGATE <replaceable class="parameter">nom</replaceable> (
    BASETYPE = <replaceable class="parameter">type_base</replaceable>,
    SFUNC = <replaceable class="parameter">sfonc</replaceable>,
    STYPE = <replaceable class="parameter">type_donnée_état</replaceable>
    [ , SSPACE = <replaceable class="parameter">taille_donnée_état</replaceable> ]
    [ , FINALFUNC = <replaceable class="parameter">ffonc</replaceable> ]
    [ , FINALFUNC_EXTRA ]
    [ , FINALFUNC_MODIFY = { READ_ONLY | SHAREABLE | READ_WRITE } ]
    [ , COMBINEFUNC = <replaceable class="parameter">combinefunc</replaceable> ]
    [ , SERIALFUNC = <replaceable class="parameter">serialfunc</replaceable> ]
    [ , DESERIALFUNC = <replaceable class="parameter">deserialfunc</replaceable> ]
    [ , SERIALTYPE = <replaceable class="parameter">serialtype</replaceable> ]
    [ , INITCOND = <replaceable class="parameter">condition_initiale</replaceable> ]
    [ , MSFUNC = <replaceable class="parameter">sfunc</replaceable> ]
    [ , MINVFUNC = <replaceable class="parameter">invfunc</replaceable> ]
    [ , MSTYPE = <replaceable class="parameter">state_data_type</replaceable> ]
    [ , MSSPACE = <replaceable class="parameter">taille_donnée_état</replaceable> ]
    [ , MFINALFUNC = <replaceable class="parameter">ffunc</replaceable> ]
    [ , MFINALFUNC_EXTRA ]
    [ , MFINALFUNC_MODIFY = { READ_ONLY | SHAREABLE | READ_WRITE } ]
    [ , MINITCOND = <replaceable class="parameter">condition_initiale</replaceable> ]
    [ , SORTOP = <replaceable class="parameter">operateur_tri</replaceable> ]
)
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE AGGREGATE</command> définit une nouvelle fonction d'agrégat.
   <command>CREATE OR REPLACE AGGREGATE</command> définit une nouvelle fonction
   d'agrégat ou remplace une définition existante.
   Quelques fonctions d'agrégat basiques et largement utilisées sont fournies
   dans la distribution standard&nbsp;; elles sont documentées dans le
   <xref linkend="functions-aggregate"/>.
   <command>CREATE AGGREGATE</command> est utilisée pour ajouter des
   fonctionnalités lors de la définition de nouveaux
   types ou si une fonction d'agrégat n'est pas fournie.
  </para>

  <para>
   Lorsqu'une définition existante est remplacée, les types d'arguments,
   le type de résultat, et le nombre d'arguments directs ne peuvent être
   changés. La nouvelle définition doit également être du même type
   (agrégat ordinaire, ou d'ensemble trié, ou d'ensemble hypothétique)
   que l'ancien.
  </para>

  <para>
   Si un nom de schéma est donné (par exemple, <literal>CREATE AGGREGATE
    monschema.monagg ...</literal>), alors la fonction d'agrégat est créée dans le
   schéma précisé. Sinon, elle est créée dans le schéma courant.
   Ce comportement est identique à la surcharge de noms de fonctions ordinaires
   (voir <xref linkend="sql-createfunction"/>).
  </para>

  <para>
   Une fonction d'agrégat simple est identifiée par son nom et son (ou ses) types de données en
   entrée. Deux agrégats dans le même schéma peuvent avoir le même nom s'ils
   opèrent sur des types différents en entrée. Le nom et le(s) type(s) de données en
   entrée d'un agrégat doivent aussi être distincts du nom et du type de données
   de toutes les fonctions ordinaires du même schéma.
  </para>

  <para>
   Une fonction d'agrégat est réalisée à partir d'une ou deux fonctions
   ordinaires&nbsp;:
   une fonction de transition d'état
   <replaceable class="parameter">sfonc</replaceable>,
   et une fonction de traitement final optionnelle
   <replaceable class="parameter">ffonc</replaceable>.
   Elles sont utilisées ainsi&nbsp;:
   <programlisting><replaceable class="parameter">sfonc</replaceable>( état-interne, nouvelle-valeur-données ) ---&gt; prochain-état-interne
  <replaceable class="parameter">ffonc</replaceable>( état-interne ) ---&gt; valeur-agrégat
   </programlisting>
  </para>

  <para>
   <productname>PostgreSQL</productname> crée une variable temporaire de type
   <replaceable class="parameter">stype</replaceable> pour contenir l'état
   interne courant de l'agrégat. À chaque ligne en entrée,
   la valeur de l'argument de l'agrégat est calculée et la fonction
   de transition d'état est appelé avec la valeur d'état courante et la valeur
   du nouvel argument pour calculer une nouvelle valeur d'état interne.
   Une fois que toutes les lignes sont traitées, la fonction
   finale est appelée une seule fois pour calculer la valeur de retour de l'agrégat.
   S'il n'existe pas de fonction finale, alors la valeur d'état final est
   retournée en l'état.
  </para>

  <para>
   Une fonction d'agrégat peut fournir une condition initiale, c'est-à-dire une
   valeur initiale pour la valeur de l'état interne. Elle est spécifiée et stockée
   en base comme une valeur de type <type>text</type> mais doit
   être une représentation externe valide d'une constante du type de donnée de
   la valeur d'état. Si elle n'est pas fournie, la valeur d'état est initialement
   positionnée à NULL.
  </para>

  <para>
   Si la fonction de transition d'état est déclarée <quote>strict</quote>,
   alors elle ne peut pas être appelée avec des entrées NULL. Avec une telle
   fonction de transition, l'exécution d'agrégat se comporte comme suit. Les
   lignes avec une valeur NULL en entrée sont ignorées (la fonction n'est pas
   appelé et la valeur de l'état précédent est conservé). Si la valeur de
   l'état initial est NULL, alors, à la première ligne sans valeur NULL, la
   première valeur de l'argument remplace la valeur de l'état, et la fonction
   de transition est appelée pour chacune des lignes suivantes avec toutes les valeurs
   non NULL en entrée. Cela est pratique pour implémenter des agrégats comme
   <function>max</function>. Ce comportement n'est possible que
   quand <replaceable class="parameter">type_donnée_état</replaceable> est
   identique au premier <replaceable class="parameter">type_donnée_argument</replaceable>.
   Lorsque ces types sont différents, une condition initiale
   non NULL doit être fournie, ou une fonction de transition non stricte utilisée.
  </para>

  <para>
   Si la fonction de transition d'état n'est pas stricte, alors elle sera
   appelée sans condition pour chaque ligne en entrée et devra gérer les
   entrées NULL et les valeurs de transition NULL. Cela permet à l'auteur de
   l'agrégat d'avoir le contrôle complet sur la gestion des valeurs NULL par
   l'agrégat.
  </para>

  <para>
   Si la fonction finale est déclarée <quote>strict</quote>, alors elle ne sera
   pas appelée quand la valeur d'état finale est NULL&nbsp;; à la place, un
   résultat NULL sera retourné automatiquement. C'est le
   comportement normal de fonctions strictes. Dans tous les cas, la fonction
   finale peut retourner une valeur NULL. Par exemple, la fonction
   finale pour <function>avg</function> renvoie NULL lorsqu'elle n'a aucune
   lignes en entrée.
  </para>

  <para>
   Quelque fois, il est utile de déclarer la fonction finale comme ne retournant
   pas seulement la valeur d'état, mais des paramètres supplémentaires
   correspondant aux valeurs en entrée de l'agrégat. La raison principale pour
   faire ainsi est si la fonction finale est polymorphique et que le type de
   données de la valeur de l'état serait inadéquate pour trouver le type du
   résultat. Ces paramètres supplémentaires sont toujours passés en tant que
   valeurs NULL (et donc la fonction finale ne doit pas être stricte quand
   l'option <literal>FINALFUNC_EXTRA</literal> est utilisée). Néanmoins, ce sont
   des paramètres valides. Par exemple, la fonction finale pourrait faire usage
   de <function>get_fn_expr_argtype</function> pour identifier le type d'argument
   réel dans l'appel actuel.
  </para>

  <para>
   Un agrégat peut accepter en option un <firstterm>mode d'agrégat glissant</firstterm>,
   comme décrit dans <xref linkend="xaggr-moving-aggregates"/>. Ceci requiert
   de spécifier les paramètres <literal>MSFUNC</literal>, <literal>MINVFUNC</literal>,
   et <literal>MSTYPE</literal> et, en option, les paramètres
   <literal>MSSPACE</literal>, <literal>MFINALFUNC</literal>,
   <literal>MFINALFUNC_EXTRA</literal>, <literal>MFINALFUNC_MODIFY</literal>, et
   <literal>MINITCOND</literal>. En dehors de <literal>MINVFUNC</literal>, ces
   paramètres fonctionnement comme les paramètres d'agrégat simple sans
   <literal>M</literal>&nbsp;; ils définissent une implémentation séparée de
   l'agrégat qui inclut une fonction de transition inverse.
  </para>

  <para>
   La syntaxe avec <literal>ORDER BY</literal> dans la liste des paramètres
   crée un type spécial d'agrégat appelé un <firstterm>agrégat d'ensemble
    trié</firstterm>. Si le mot clé <literal>HYPOTHETICAL</literal> est ajouté,
   un <firstterm>agrégat d'ensemble hypothétique</firstterm> est créé. Ces
   agrégats opèrent sur des groupes de valeurs triées, donc la spécification
   d'un ordre de tri en entrée est une partie essentielle d'un appel. De plus,
   ils peuvent avoir des arguments <firstterm>directs</firstterm>, qui sont
   des arguments évalués une fois seulement par agrégat plutôt qu'une fois par
   ligne en entrée. Les agrégats d'ensemble hypothétique sont une sous-classe
   des agrégats d'ensemble trié pour lesquels certains des arguments directs
   doivent correspondre, en nombre et type de données aux colonnes en argument
   de l'agrégat. Ceci permet aux valeurs de ces arguments directs d'être
   ajoutées à la collection de lignes en entrée de l'agrégat comme des lignes
   supplémentaires <quote>hypothétiques</quote>.
  </para>

  <para>
   Un agrégat peut supporter en option l'<firstterm>agrégat partiel</firstterm>,
   comme décrit dans <xref linkend="xaggr-partial-aggregates"/>. Ceci requiert
   la spécification du paramètre <literal>COMBINEFUNC</literal>. Si le paramètre
   <replaceable class="parameter">state_data_type</replaceable> vaut
   <type>internal</type>, il est généralement approprié de fournir les
   paramètres <literal>SERIALFUNC</literal> et <literal>DESERIALFUNC</literal>
   pour qu'un agrégat parallèle soit possible. Notez que l'agrégat doit aussi
   être marqué <literal>PARALLEL SAFE</literal> pour activer l'agrégation
   parallélisée.
  </para>

  <para>
   Les agrégats qui se comportent comme  <function>MIN</function> ou <function>MAX</function>
   peuvent parfois être optimisés en cherchant un index au lieu de parcourir
   toutes les lignes en entrée. Si un agrégat peut être optimisé, un
   <firstterm>opérateur de tri</firstterm> est spécifié. Dans ce cas, il est nécessaire
   que l'agrégat fournisse le premier élément dans l'ordre imposé par
   l'opérateur&nbsp;; en d'autres mots&nbsp;:
   <programlisting>SELECT agg(col) FROM tab;
   </programlisting>
   doit être équivalent à&nbsp;:
   <programlisting>SELECT col FROM tab ORDER BY col USING sortop LIMIT 1;
   </programlisting>
   On suppose également que l'agrégat ignore les entrées NULL et qu'il
   fournit un résultat NULL si et seulement s'il n'y a aucune entrée NULL.
   D'ordinaire, l'opérateur <literal>&lt;</literal> d'un type de données est le bon
   opérateur de tri pour <function>MIN</function> et <literal>&gt;</literal> celui
   pour <function>MAX</function>. L'optimisation ne prend
   jamais effet sauf si l'opérateur spécifié est membre de la stratégie
   <quote>less than</quote> (NdT&nbsp;: plus petit que) ou <quote>greater
    than</quote> (NdT&nbsp;: plus grand que) d'une classe d'opérateur pour un
   index B-tree.
  </para>

  <para>
   Pour pouvoir créer une fonction d'agrégat, vous devez avoir le droit
   <literal>USAGE</literal> sur le type des arguments, le type de l'état et le
   type du code retour. Vous devez aussi voir le droit
   <literal>EXECUTE</literal> sur les fonction de support.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom de la fonction d'agrégat à créer (éventuellement qualifié du nom
      du schéma).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">mode_arg</replaceable></term>

    <listitem>
     <para>
      Le mode d'un argument&nbsp;: <literal>IN</literal> ou <literal>VARIADIC</literal>.
      (Les fonctions d'agrégat n'acceptent pas les arguments <literal>OUT</literal>.)
      Si le mode est omis, la valeur par défaut est <literal>IN</literal>. Seul
      le dernier argument peut être marqué comme <literal>VARIADIC</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_arg</replaceable></term>

    <listitem>
     <para>
      Le nom d'un argument. Ceci est seulement utile pour de la documentation.
      S'il est omis, l'argument n'a pas de nom.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_données_arg</replaceable></term>
    <listitem>
     <para>
      Un type de donnée en entrée sur lequel opère la fonction d'agrégat.
      Pour créer une fonction d'agrégat sans argument, placez <literal>*</literal>
      à la place de la liste des types de données en argument. (la fonction
      <function>count(*)</function> en est un bon exemple.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_base</replaceable></term>
    <listitem>
     <para>
      Dans l'ancienne syntaxe de <command>CREATE AGGREGATE</command>, le type
      de données en entrée est spécifiée par un paramètre
      <literal>type_base</literal> plutôt que d'être écrit à la suite du nom de
      l'agrégat. Notez que cette syntaxe autorise seulement un paramètre en
      entrée. Pour définir une fonction d'agrégat sans argument avec cette syntaxe, indiquez
      seulement un paramètre en entrée. Pour définir une fonction d'agrégat sans argument,
      utilisez <literal>"ANY"</literal> (et non pas <literal>*</literal>) pour le
      <literal>type_base</literal>. Les agrégats d'ensemble trié ne peuvent
      pas être définis avec l'ancienne syntaxe.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sfonc</replaceable></term>
    <listitem>
     <para>
      Le nom de la fonction de transition de l'état à appeler pour chaque ligne
      en entrée. Pour une fonction d'agrégat simple avec <replaceable
      class="parameter">N</replaceable> arguments, <replaceable
      class="parameter">sfonc</replaceable> doit prendre
      <replaceable class="parameter">N</replaceable>+1 arguments, le premier
      étant de type <replaceable class="parameter">type_données_état</replaceable>
      et le reste devant correspondre aux types de données en entrée déclarés
      pour l'agrégat. La fonction doit renvoyer une valeur de type
      <replaceable class="parameter">type_données_état</replaceable>. Cette
      fonction prend la valeur actuelle de l'état  et les valeurs actuelles des
      données en entrée. Elle renvoit la prochaine valeur de l'état.
     </para>

     <para>
      Pour les agrégats d'ensemble trié (incluant les ensembles hypothétiques),
      la fonction de transition d'état reçoit seulement la valeur de l'état
      actuel et les arguments agrégés, pas les arguments directs.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_donnée_état</replaceable></term>
    <listitem>
     <para>
      Le type de donnée pour la valeur d'état de l'agrégat.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">taille_données_état</replaceable></term>
    <listitem>
     <para>
      La taille moyenne approximative (en octets) de la valeur d'état de
      l'agrégat. Si ce paramètre est omis ou s'il vaut zéro, une estimation par
      défaut est utilisé en se basant sur
      <replaceable>type_données_état</replaceable>. Le planificateur utilise
      cette valeur pour estimer la mémoire requise pour une requête d'agrégat
      par groupe.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">ffonc</replaceable></term>
    <listitem>
     <para>
      Le nom de la fonction finale à appeler pour traiter le résultat de
      l'agrégat une fois que toutes les lignes en entrée ont été parcourues.
      Pour un agrégat normal, la fonction prend un seul argument de type <replaceable
      class="parameter">type_donnée_état</replaceable>. Le type de retour de
      l'agrégat de la fonction est défini comme le type de retour de cette
      fonction. Si <replaceable class="parameter">ffonc</replaceable> n'est pas
      spécifiée, alors la valeur d'état finale est utilisée comme résultat de
      l'agrégat et le type de retour est <replaceable
      class="parameter">type_donnée_état</replaceable>.
     </para>

     <para>
      Pour les agrégats d'ensemble trié (incluant les ensembles hypothétiques),
      la fonction finale reçoit non seulement la valeur de l'état final, mais
      aussi les valeurs de tous les arguments directs.
     </para>

     <para>
      Si <literal>FINALFUNC_EXTRA</literal> est indiqué, en plus de la valeur
      de l'état final et des arguments directs, la fonction finale reçoit des
      valeurs NULL supplémentaires correspondant aux arguments agrégés standards
      de l'agrégat. Ceci est principalement utile pour permettre une bonne
      résolution du type de données pour le résultat agrégé quand un agrégat
      polymorphique est en cours de définition.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FINALFUNC_MODIFY</literal> = { <literal>READ_ONLY</literal> | <literal>SHAREABLE</literal> | <literal>READ_WRITE</literal> }</term>
    <listitem>
     <para>
      Cette option spécifie si la fonction finale est une fonction pure qui ne
      modifie pas ses arguments. <literal>READ_ONLY</literal> indique qu'il
      n'y a pas de modification. Les deux autres valeurs indiquent la valeur
      d'état de transition pourrait changer. Voir <xref
      linkend="sql-createaggregate-notes"/> ci-dessous pour plus de
      détail. La valeur par défaut est <literal>READ_ONLY</literal>, sauf pour
      les agrégats à ensemble ordonné dont la valeur par défaut est
      <literal>READ_WRITE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">combinefunc</replaceable></term>
    <listitem>
     <para>
      La fonction <replaceable class="parameter">combinefunc</replaceable>
      peut être indiquée en option pour permettre à la fonction d'agrégat de
      supporter l'agrégation partielle. Si elle est fournie, la fonction
      <replaceable class="parameter">combinefunc</replaceable> doit combiner
      deux valeurs <replaceable
      class="parameter">state_data_type</replaceable>, chacune contenant le
      résultat de l'agrégation sur un certain sous-ensemble des valeurs en
      entrée pour produire un nouveau <replaceable
      class="parameter">state_data_type</replaceable> qui représente le
      résultat de l'agrégation sur les différents ensembles en entrée. Cette
      fonction peut être vue comme un <replaceable
      class="parameter">sfunc</replaceable>, où, au lieu d'agir sur une ligne
      individuelle en entrée et de l'ajouter à l'état de l'agrégat en cours,
      elle ajoute un autre état d'agrégat à l'état en cours.
     </para>

     <para>
      La fonction <replaceable class="parameter">combinefunc</replaceable>
      doit être déclarée comme prenant deux arguments de type <replaceable
      class="parameter">state_data_type</replaceable> et renvoyant une valeur
      de type <replaceable class="parameter">state_data_type</replaceable>. En
      option, cette fonction pourrait être <quote>strict</quote>. Dans ce cas,
      la fonction ne sera pas appelé quand l'un des états en entrée est
      null&nbsp;; l'autre état sera utilisé comme résultat.
     </para>

     <para>
      Pour les fonctions d'agrégat où <replaceable
      class="parameter">state_data_type</replaceable> vaut
      <type>internal</type>, la fonction <replaceable
      class="parameter">combinefunc</replaceable> ne doit pas être stricte.
      Dans ce cas, la fonction <replaceable
      class="parameter">combinefunc</replaceable> doit s'assurer que les états
      null sont gérés correctement et que l'état à renvoyer est correctement
      enregistré dans le contexte mémoire de l'agrégat.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">serialfunc</replaceable></term>
    <listitem>
     <para>
      Une fonction d'agrégat dont <replaceable
      class="parameter">state_data_type</replaceable> est
      <type>internal</type> peut participer à une agrégation en parallèle
      seulement si elle a une fonction <replaceable
      class="parameter">serialfunc</replaceable>, qui doit sérialiser l'état
      d'agrégat en une valeur <type>bytea</type> pour sa transmission à un
      autre processus. Cette fonction doit prendre un seul argument de type
      <type>internal</type> et renvoyer le <type>bytea</type>. Une fonction
      <replaceable class="parameter">deserialfunc</replaceable> correspondante
      est aussi requise.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">deserialfunc</replaceable></term>
    <listitem>
     <para>
      Désérialise un état d'agrégat préalablement sérialisé dans son type
      <replaceable class="parameter">state_data_type</replaceable>. Cette
      fonction doit prendre deux arguments de type <type>bytea</type>
      et <type>internal</type>, et produire un résultat de type <type>internal</type>.
      (Note&nbsp;: le second argument, de type <type>internal</type>, n'est
      pas utilisé mais est requis pour des raisons de sécurité.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition_initiale</replaceable></term>
    <listitem>
     <para>
      La configuration initiale pour la valeur de l'état. Elle doit être une
      constante de type chaîne de caractères dans la forme acceptée par le type
      de données <replaceable class="parameter">type_donnée_état</replaceable>.
      Si non spécifié, la valeur d'état est initialement positionnée à NULL.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">msfonc</replaceable></term>
    <listitem>
     <para>
      Le nom de la fonction de transition d'état à appeler pour chaque ligne en
      entrée dans le mode d'agrégat en déplacement. Elle est identique à la
      fonction de transition standard, sauf que son premier argument et son
      résultat sont de type <replaceable>type_données_état_m</replaceable>,
      qui pourrait être différent de <replaceable>type_données_état</replaceable>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">minvfonc</replaceable></term>
    <listitem>
     <para>
      Le nom de la fonction de transition d'état inverse à utiliser dans le mode
      d'agrégat en déplacement. Cette fonction a les mêmes types d'argument et
      de résultat que <replaceable>msfonc</replaceable>, mais il est utilisé pour
      supprimer une valeur de l'état courant de l'agrégat, plutôt que pour y
      ajouter une valeur. La fonction de transition inverse doit avoir le même
      attribut strict que la fonction de transaction d'état.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">type_données_état_m</replaceable></term>
    <listitem>
     <para>
      Le type de données pour la valeur d'état de l'agrégat dans le mode
      d'agrégat en déplacement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">taille_données_état_m</replaceable></term>
    <listitem>
     <para>
      La taille moyenne approximative (en octets) de la valeur d'état de
      l'agrégat. Ceci fonctionne de la même façon que
      <replaceable>taille_données_état</replaceable>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">mffonc</replaceable></term>
    <listitem>
     <para>
      Le nom de la fonction finale appelée pour calculer le résultat de
      l'agrégat après que toutes les lignes en entrée aient été traversées,
      lors de l'utilisation du mode d'agrégat en déplacement. Ceci fonctionne
      de la même façon que <replaceable>ffonc</replaceable>, sauf que le type
      du premier argument est <replaceable>type_données_état_m</replaceable>
      et des arguments supplémentaires sont indiqués en écrivant
      <literal>MFINALFUNC_EXTRA</literal>. Le type en résultat de l'agrégat
      déterminé par <replaceable>mffonc</replaceable> ou
      <replaceable>mstate_data_type</replaceable> doit correspondre à celui
      déterminé par l'implémentation standard de l'agrégat.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>MFINALFUNC_MODIFY</literal> = { <literal>READ_ONLY</literal> | <literal>SHAREABLE</literal> | <literal>READ_WRITE</literal> }</term>
    <listitem>
     <para>
      Cette option est identique à <literal>FINALFUNC_MODIFY</literal>, mais
      elle décrit le comportement de la fonction finale pour un agrégat en
      déplacement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition_initiale_m</replaceable></term>
    <listitem>
     <para>
      La configuration initiale de la valeur d'état lors de l'utilisation du
      mode d'agrégat en déplacement. Ceci fonctionne de la même façon que
      <replaceable>condition_initiale</replaceable>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sort_operator</replaceable></term>
    <listitem>
     <para>
      L'opérateur de tri associé pour un agrégat de type <function>MIN</function> ou
      <function>MAX</function>. C'est seulement le nom de l'opérateur (éventuellement qualifié
      du nom du schéma). L'opérateur est supposé avoir les mêmes
      types de données en entrée que l'agrégat (qui doit être un agrégat normal à un seul
      argument).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PARALLEL</literal></term>
    <listitem>
     <para>
      La signification de <literal>PARALLEL SAFE</literal>, <literal>PARALLEL
       RESTRICTED</literal> et <literal>PARALLEL UNSAFE</literal> est la même
      que pour <xref linkend="sql-createfunction"/>. Un agrégat ne sera pas
      considéré pour la parallélisation s'il est marqué <literal>PARALLEL
       UNSAFE</literal> (ce qui est le cas par défaut&nbsp;!) ou
      <literal>PARALLEL RESTRICTED</literal>. Notez que le marquage de
      parallélisation des fonctions de support des agrégats ne sont pas
      consultés par le planificateur. Ce dernier ne prend en considération que
      le marquage de l'agrégat lui-même.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>HYPOTHETICAL</literal></term>
    <listitem>
     <para>
      Pour les agrégats d'ensembles triés seulement, cette option indique que
      les arguments de l'agrégat sont à traiter suivant les prérequis des
      agrégats d'ensembles hypothétiques&nbsp;: les derniers arguments directs
      doivent correspondre aux types de données des arguments agrégés
      (<literal>WITHIN GROUP</literal>). L'option <literal>HYPOTHETICAL</literal>
      n'a pas d'effet sur le comportement à l'exécution, seulement sur la durée
      de résolution de l'analyse des types de données et des collationnements
      des arguments de l'agrégat.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Les paramètres de <command>CREATE AGGREGATE</command> peuvent être écrits
   dans n'importe quel ordre, pas uniquement dans l'ordre illustré ci-dessus.
  </para>
 </refsect1>

 <refsect1 id="sql-createaggregate-notes" xreflabel="Notes">
  <title>Notes</title>

  <para>
   Dans les paramètres qui indiquent les noms de fonction de support, vous
   pouvez écrire un nom de schéma si nécessaire, par exemple
   <literal>SFUNC = public.sum</literal>. N'écrivez pas de types d'argument
   ici, néanmoins &mdash; les types d'argument des fonctions de support sont
   déterminés avec d'autres paramètres.
  </para>

  <para>
   D'ordinaire, les fonctions PostgreSQL sont de vraies fonctions qui ne
   modifient pas leurs valeurs en entrée. Néanmoins, une fonction transition
   d'agrégat, <emphasis>quand elle est utilisée dans le contexte d'un
    agrégat</emphasis>, est autorisée à tricher et à modifier son argument
   d'état de transition. Ceci apporte des améliorations substantielles de
   performance en comparaison à une copie fraîche de l'état de transition à
   chaque exécution.
  </para>

  <para>
   De la même façon, quand une fonction finale d'agrégat ne modifie pas
   habituellement ses arguments, il n'est parfois pas pratique d'éviter la
   modification de l'argument d'état de transition. Un tel comportement doit
   être déclaré en utilisant le paramètre <literal>FINALFUNC_MODIFY</literal>.
   La valeur <literal>READ_WRITE</literal> indique que la fonction finale
   modifie l'état de transaction de façon non spécifiée. Cette valeur empêche
   l'utilisation de l'agrégat comme fonction de fenêtrage et il empêche aussi
   l'assemblage des états de transition pour les appels d'agrégat qui
   partagent les mêmes valeurs en entrée et de transition. La valeur
   <literal>SHAREABLE</literal> indique que la fonction de transition ne peut
   être appliquée après la fonction finale mais que plusieurs appels de la
   fonction finale peuvent être réalisés sur la valeur d'état de transition
   final. Cette valeur empêche l'utilisation de l'agrégat comme fonction de
   fenêtrage mais permet l'assemblage des états des transition.
   (l'optimisation intéressante ici n'est pas d'appliquer la même fonction
   finale de façon répétée mais d'appliquer plusieurs fonctions finales
   différentes à la même valeur d'état de transition final. Ceci est permis
   tant qu'aucune des fonctions finales n'est marquées
   <literal>READ_WRITE</literal>.)
  </para>

  <para>
   Si un agrégat accepte le mode d'agrégat par déplacement, cela améliorera
   l'efficacité du calcul quand l'agrégat est utilisé comme fonction de
   fenêtrage pour une fenêtre avec un début d'échelle qui se déplace
   (autrement dit, un mode de début d'échelle autre que <literal>UNBOUNDED
    PRECEDING</literal>). Conceptuellement, la fonction de transition ajoute
   des valeurs en entrée à l'état de l'agrégat quand elles entrent dans
   la fenêtre à partir du bas, et la fonction de transition inverse les
   supprime de nouveau quand elles quittent la fenêtre par le haut. Donc,
   quand les valeurs sont supprimées, elles sont toujours supprimées dans
   le même ordre qu'elles ont été ajoutées. Quand la fonction de transition
   inverse est appelée, elle va de ce fait recevoir l'entrée la plus récemment
   ajoutée, mais pas supprimée. La fonction de transition inverse peut
   assumer qu'au moins une ligne restera dans l'état courant après avoir
   supprimé la ligne la plus ancienne. (Quand cela n'est pas le cas, le
   mécanisme de la fonction de fenêtrage lance une nouvelle agrégation,
   plutôt que d'utiliser la fonction de transition inverse.)
  </para>

  <para>
   La fonction de transition pour le mode d'agrégat en déplacement n'est pas
   autorisée NULL comme nouvelle valeur d'état. Si la fonction de transition
   inverse renvoie NULL, c'est pris comme une indication que la fonction
   inverse ne peut pas inverser le calcul d'état pour cette entrée particulière
   et donc que le calcul d'agrégat sera fait depuis le début à partir du début
   de l'échelle. Cette convention permet l'utilisation du mode d'agrégat en
   déplacement dans des situations où il existe certains cas peu courants où
   il serait difficile d'inverser la valeur d'état courante.
  </para>

  <para>
   Si aucune implémentation des agrégats en déplacement n'est fournie, l'agrégat
   peut toujours être utilisé avec des échelles en déplacement mais
   <productname>PostgreSQL</productname> devra recalculer l'agrégat complet
   à partir du débat du déplacement de l'échelle. Notez que si l'agrégat
   supporte ou non le mode d'agrégat en déplacement,
   <productname>PostgreSQL</productname> peut gérer la fin d'une échelle en
   déplacement sans recalcul&nbsp;; ceci se fait en continuant d'ajouter de
   nouvelles valeurs à l'état de l'agrégat. C'est pourquoi l'utilisation d'un
   agrégat comme fonction de fenêtrage nécessite que la fonction finale soit en
   lecture seule&nbsp;: elle ne doit pas endommager la valeur d'état de
   l'agrégat, pour que l'agrégation puisse être continuée même après qu'une
   valeur de résultat de l'agrégat soit obtenue par un ensemble.
  </para>

  <para>
   La syntaxe pour des agrégats d'ensemble trié permet d'utiliser
   <literal>VARIADIC</literal> pour à la fois le dernier paramètre direct
   et le dernier paramètre agrégé (<literal>WITHIN GROUP</literal>). Néanmoins,
   l'implémentation actuelle restreint l'utilisation de
   <literal>VARIADIC</literal> de deux façons. Tout d'abord, les agrégats
   d'ensemble trié peuvent seulement utiliser <literal>VARIADIC
    "any"</literal>, et pas les autres types de tableaux variadiques. Ensuite,
   si le dernier paramètre direct est <literal>VARIADIC "any"</literal>, alors
   il peut y avoir seulement un paramètre agrégé et il doit aussi être
   <literal>VARIADIC "any"</literal>. (Dans la représentation utilisée dans les
   catalogues systèmes, ces deux paramètres sont assemblés en un seul élément
   <literal>VARIADIC "any"</literal>, car <structname>pg_proc</structname> ne
   peut pas représenter des fonctions avec plus d'un argument
   <literal>VARIADIC</literal>.) Si l'agrégat est un agrégat d'ensemble
   hypothétique, les arguments directs qui correspondent au paramètre
   <literal>VARIADIC "any"</literal> sont les paramètres hypothétiques. Tous
   les paramètres précédents représentent des arguments directs supplémentaires
   qui ne sont pas contraint à correspondre aux arguments agrégés.
  </para>

  <para>
   Actuellement, les agrégats d'ensemble trié neont pas besoin de supporter le
   mode d'agrégat en déplacement puisqu'elles ne peuvent pas être utilisées
   en tant que fonction de fenêtrage.
  </para>

  <para>
   L'agrégat partiel (y compris parallélisé) n'est pas encore supporté pour les
   agrégats avec des ensembles de données triés. De plus, il ne sera jamais
   utilisé pour les appels d'agrégat incluant les clauses <literal>DISTINCT</literal>
   ou <literal>ORDER BY</literal> car ces sémantiques ne peuvent pas être supportées
   lors d'un agrégat partiel.
  </para>
 </refsect1>

 <refsect1>
  <title>Exemples</title>

  <para>
   Voir <xref linkend="xaggr"/>.
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibilité</title>

  <para>
   <command>CREATE AGGREGATE</command> est une extension
   <productname>PostgreSQL</productname>. Le standard SQL ne fournit pas de
   fonctions d'agrégat utilisateur.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteraggregate"/></member>
   <member><xref linkend="sql-dropaggregate"/></member>
  </simplelist>
 </refsect1>
</refentry>
