<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060618 -->

<refentry id="sql-createtrigger">
 <indexterm zone="sql-createtrigger">
  <primary>CREATE TRIGGER</primary>
 </indexterm>

 <indexterm>
  <primary>tables de transition</primary>
  <seealso>relation nommée éphémère</seealso>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE TRIGGER</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRIGGER</refname>
  <refpurpose>Définir un nouveau déclencheur</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>CREATE [ CONSTRAINT ] TRIGGER <replaceable class="parameter">nom</replaceable> { BEFORE | AFTER | INSTEAD OF } { <replaceable class="parameter">événement</replaceable> [ OR ... ] }
    ON <replaceable class="parameter">nom_table</replaceable>
    [ FROM <replaceable class="parameter">nom_table_referencee</replaceable> ]
    [ NOT DEFERRABLE | [ DEFERRABLE ] [ INITIALLY IMMEDIATE | INITIALLY DEFERRED ] ]
    [ REFERENCING { { OLD | NEW } TABLE [ AS ] <replaceable class="parameter">nom_relation_transition</replaceable> } [ ... ] ]
    [ FOR [ EACH ] { ROW | STATEMENT } ]
    [ WHEN ( <replaceable class="parameter">condition</replaceable> ) ]
    EXECUTE { FUNCTION | PROCEDURE } <replaceable class="parameter">nom_fonction</replaceable> ( <replaceable class="parameter">arguments</replaceable> )

<phrase>où <replaceable class="parameter">événement</replaceable> fait partie de&nbsp;:</phrase>

    INSERT
    UPDATE [ OF <replaceable class="parameter">nom_colonne</replaceable> [, ... ] ]
    DELETE
    TRUNCATE
  </synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE TRIGGER</command> crée un nouveau déclencheur. Le
   déclencheur est associé à la table, à la vue ou à la table distante
   spécifiée et exécute la fonction
   <replaceable class="parameter">nom_fonction</replaceable> lorsque
   certaines opérations sont réalisées sur cette table.
  </para>

  <para>
   L'appel du déclencheur peut avoir lieu avant que l'opération
   ne soit tentée sur une ligne (avant la vérification des contraintes et
   la tentative d'<command>INSERT</command>, <command>UPDATE</command> ou
   <command>DELETE</command>) ou une fois que l'opération est
   terminée (après la vérification des contraintes et la fin de la commande
   <command>INSERT</command>, <command>UPDATE</command> ou
   <command>DELETE</command>)&nbsp;; ou bien en remplacement de l'opération
   (dans le cas d'opérations INSERT, UPDATE ou DELETE sur une vue). Si le déclencheur est lancé avant
   l'événement ou en remplacement de l'événement, le déclencheur peut ignorer l'opération sur la ligne
   courante ou modifier la ligne en cours d'insertion (uniquement pour les
   opérations <command>INSERT</command> et <command>UPDATE</command>). Si le
   déclencheur est activé après l'événement, toute modification, dont celles effectuées par les
   autres déclencheurs, est <quote>visible</quote>
   par le déclencheur.
  </para>

  <para>
   Un déclencheur marqué <literal>FOR EACH ROW</literal> est appelé pour
   chaque ligne que l'opération modifie. Par exemple, un
   <command>DELETE</command> affectant dix lignes entraîne dix appels
   distincts de tout déclencheur <literal>ON DELETE</literal> sur la relation
   cible, une fois par ligne supprimée. Au contraire, un déclencheur marqué
   <literal>FOR EACH STATEMENT</literal> ne s'exécute qu'une fois pour une
   opération donnée, quelque soit le nombre de lignes modifiées (en
   particulier, une opération qui ne modifie aucune ligne résulte toujours en
   l'exécution des déclencheurs <literal>FOR EACH STATEMENT</literal>
   applicables).
  </para>

  <para>
   Les déclencheurs définis en remplacement (<literal>INSTEAD OF</literal>) doivent obligatoirement être marqués
   <literal>FOR EACH ROW</literal>, et ne peuvent être définis que sur des vues.
   Les déclencheurs <literal>BEFORE</literal> et <literal>AFTER</literal> portant sur des vues
   devront quant à eux être marqués <literal>FOR EACH STATEMENT</literal>.
  </para>

  <para>
   Les déclencheurs peuvent également être définis pour l'événement <command>TRUNCATE</command>,
   mais ne pourront, dans ce cas, qu'être marqués <literal>FOR EACH STATEMENT</literal>.
  </para>

  <para>
   Le tableau suivant récapitule quels types de déclencheurs peuvent être
   utilisés sur les tables, les vues et les tables distantes&nbsp;:
  </para>

  <informaltable id="supported-trigger-types">
   <tgroup cols="4">
    <thead>
     <row>
      <entry>Déclenchement</entry>
      <entry>Événement</entry>
      <entry>Niveau ligne</entry>
      <entry>Niveau instruction</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry align="center" morerows="1"><literal>BEFORE</literal></entry>
      <entry align="center"><command>INSERT</command>/<command>UPDATE</command>/<command>DELETE</command></entry>
      <entry align="center">Tables et tables distantes</entry>
      <entry align="center">Tables, vues et tables distantes</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</command></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">Tables</entry>
     </row>
     <row>
      <entry align="center" morerows="1"><literal>AFTER</literal></entry>
      <entry align="center"><command>INSERT</command>/<command>UPDATE</command>/<command>DELETE</command></entry>
      <entry align="center">Tables et tables distantes</entry>
      <entry align="center">Tables, vues et tables distantes</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</command></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">Tables</entry>
     </row>
     <row>
      <entry align="center" morerows="1"><literal>INSTEAD OF</literal></entry>
      <entry align="center"><command>INSERT</command>/<command>UPDATE</command>/<command>DELETE</command></entry>
      <entry align="center">Vues</entry>
      <entry align="center">&mdash;</entry>
     </row>
     <row>
      <entry align="center"><command>TRUNCATE</command></entry>
      <entry align="center">&mdash;</entry>
      <entry align="center">&mdash;</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

  <para>
   De plus, les triggers peuvent être définis pour être déclenchés suite à
   l'exécution d'un <command>TRUNCATE</command>, mais seulement dans le cas d'un
   trigger <literal>FOR EACH STATEMENT</literal>.
  </para>

  <para>
   En outre, la définition d'un trigger peut spécifier une condition
   <literal>WHEN</literal> qui sera testée pour vérifier si le trigger doit
   réellement être déclenché. Dans les triggers au niveau ligne, la condition
   <literal>WHEN</literal> peut examiner l'ancienne et/ou la nouvelle valeurs
   des colonnes de la ligne. Les triggers au niveau instruction peuvent aussi
   avoir des conditions <literal>WHEN</literal>, bien que la fonctionnalité
   n'est pas aussi utile pour elles car la condition ne peut pas faire
   référence aux valeurs de la table.
  </para>

  <para>
   Si plusieurs déclencheurs du même genre sont définis pour le même événement,
   ils sont déclenchés suivant l'ordre alphabétique de leur nom.
  </para>

  <para>
   Lorsque l'option <literal>CONSTRAINT</literal> est spécifiée, cette
   commande crée un <firstterm>déclencheur contrainte</firstterm>.  Ce nouvel
   objet est identique aux déclencheurs normaux excepté le fait que le moment
   de déclenchement peut alors être ajusté via l'utilisation de <xref
   linkend="sql-set-constraints"/>. Les déclencheurs contraintes ne peuvent
   être que de type <literal>AFTER ROW</literal> sur des tables standards (pas
   des tables distantes).  Ils peuvent être déclenchés soit à la fin de
   l'instruction causant l'événement, soit à la fin de la transaction ayant
   contenu l'instruction de déclenchement&nbsp;; dans ce dernier cas, ils sont
   alors définis comme <firstterm>différés</firstterm>. L'exécution d'un
   déclencheur différé peut également être forcée en utilisant l'option
   <command>SET CONSTRAINTS</command>. Le comportement attendu des
   déclencheurs contraintes est de générer une exception en cas de violation
   de la contrainte qu'ils implémentent.
  </para>

  <para>
   L'option <literal>REFERENCING</literal> active la récupération des
   <firstterm>relations de transition</firstterm>, qui sont des ensembles de
   lignes incluant toutes les lignes insérées, supprimées ou modifiées par
   l'instruction SQL en cours. Cette fonctionnalité donne au trigger une vue
   globale de ce qu'a réalisé l'instruction, et non pas une vue ligne par
   ligne. Cette option est seulement autorisée pour un trigger
   <literal>AFTER</literal> qui n'est pas un trigger de contrainte. De plus,
   si le trigger est un trigger <literal>UPDATE</literal>, il ne doit pas
   indiquer une liste de <replaceable
   class="parameter">nom_colonne</replaceable>. <literal>OLD TABLE</literal>
   peut seulement être indiqué une fois, et seulement pour un trigger qui est
   déclenché par un <literal>UPDATE</literal> ou un
   <literal>DELETE</literal>&nbsp;; il crée une relation de transition
   contenant les <firstterm>images-avant</firstterm> de toutes les lignes
   mises à jour ou supprimées par l'instruction. De la même façon,
   <literal>NEW TABLE</literal> ne peut être indiqué qu'une seule fois, et
   seulement pour un trigger déclenché par un <literal>UPDATE</literal> ou un
   <literal>INSERT</literal>&nbsp;; il crée une relation de transition
   contenant les <firstterm>images-après</firstterm> de toutes les lignes
   mises à jour ou insérées par l'instruction.
  </para>

  <para>
   <command>SELECT</command> ne modifie aucune ligne&nbsp;; la création de
   déclencheurs sur <command>SELECT</command> n'est donc pas possible. Les
   règles et vues peuvent fournir des solutions fonctionnelles aux problèmes
   qui nécessitent des triggers sur <command>SELECT</command>.
  </para>

  <para>
   <xref linkend="triggers"/> présente de plus amples informations sur les
   déclencheurs.
  </para>
 </refsect1>

 <refsect1>
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>
    <listitem>
     <para>
      Le nom du nouveau déclencheur. Il doit être distinct du nom de
      tout autre déclencheur sur la table.
      Le nom ne peut pas être qualifié d'un nom de schéma, le déclencheur héritant
      du schéma de sa table. Pour un déclencheur contrainte, c'est également le nom à
      utiliser lorsqu'il s'agira de modifier son comportement via la commande
      <command>SET CONSTRAINTS</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BEFORE</literal></term>
    <term><literal>AFTER</literal></term>
    <term><literal>INSTEAD OF</literal></term>
    <listitem>
     <para>
      Détermine si la fonction est appelée avant, après ou en remplacement de l'événement.
      Un déclencheur contrainte ne peut être spécifié qu'<literal>AFTER</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">événement</replaceable></term>
    <listitem>
     <para>
      Peut-être <literal>INSERT</literal>, <literal>UPDATE</literal> ou
      <literal>DELETE</literal> ou <literal>TRUNCATE</literal>&nbsp;; précise
      l'événement qui active le déclencheur. Plusieurs événements peuvent être
      précisés en les séparant par <literal>OR</literal>, sauf quand les
      tables de transitions sont demandées.
     </para>

     <para>
      Pour les triggers se déclenchant suite à un <literal>UPDATE</literal>,
      il est possible de spécifier une liste de colonnes utilisant cette
      syntaxe&nbsp;:
      <synopsis>
UPDATE OF <replaceable>nom_colonne_1</replaceable> [, <replaceable>nom_colonne_2</replaceable> ... ]
      </synopsis>
      Le trigger se déclenchera seulement si au moins une des colonnes listées
      est mentionnée comme cible de la commande <command>UPDATE</command>
      ou si une des colonnes listées est une colonne générée qui dépend
      d'une colonne cible d'une commande <command>UPDATE</command>.
     </para>

     <para>
      Les événements <literal>INSTEAD OF UPDATE</literal> n'acceptent pas de
      listes de colonnes. Une liste de colonnes ne peut pas être indiquée
      lorsque les tables de transition sont nécessaires.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_table</replaceable></term>
    <listitem>
     <para>
      Le nom (éventuellement qualifié du nom du schéma) de la table, de la
      vue ou de la table distante à laquelle est rattaché le déclencheur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_table_referencee</replaceable></term>
    <listitem>
     <para>
      Le nom d'une autre table (possiblement qualifiée par un nom de schéma)
      référencée par la contrainte. Cette option est à utiliser pour les contraintes
      de clés étrangères et n'est pas recommandée pour d'autres types d'utilisation.
      Elle ne peut être spécifiée que pour les déclencheurs contraintes.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFERRABLE</literal></term>
    <term><literal>NOT DEFERRABLE</literal></term>
    <term><literal>INITIALLY IMMEDIATE</literal></term>
    <term><literal>INITIALLY DEFERRED</literal></term>
    <listitem>
     <para>
      La spécification du moment de déclenchement par défaut.
      Voir la partie <xref linkend="sql-createtable"/> pour plus de détails sur cette option.
      Elle ne peut être spécifiée que pour les déclencheurs contraintes.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>REFERENCING</literal></term>
    <listitem>
     <para>
      Ce mot-clé précède immédiatement la déclaration d'une ou deux noms de
      table fournissant l'accès aux relations de transition de l'instruction
      déclencheur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OLD TABLE</literal></term>
    <term><literal>NEW TABLE</literal></term>
    <listitem>
     <para>
      Cette clause indique si le nom de la relation suivante est pour la
      relation de transition précédente ou suivante.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_relation_transition</replaceable></term>
    <listitem>
     <para>
      Le nom (non qualifié) à utiliser au sein du déclencheur pour cette
      relation de transition.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>FOR EACH ROW</literal></term>
    <term><literal>FOR EACH STATEMENT</literal></term>

    <listitem>
     <para>
      Précise si la fonction trigger doit être lancée
      pour chaque ligne affectée par l'événement ou
      simplement pour chaque instruction SQL. <literal>FOR EACH STATEMENT</literal>
      est la valeur par défaut. Constraint triggers can only
      be specified <literal>FOR EACH ROW</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">condition</replaceable></term>
    <listitem>
     <para>
      Une expression booléenne qui détermine si la fonction trigger sera
      réellement exécutée. Si <literal>WHEN</literal> est indiqué, la fonction
      sera seulement appelée si la <replaceable
      class="parameter">condition</replaceable> renvoie <literal>true</literal>.
      Pour les triggers <literal>FOR EACH ROW</literal>, la condition
      <literal>WHEN</literal> peut faire référence aux valeurs des colonnes
      des ancienne et nouvelle lignes en utilisant la notation
      <literal>OLD.<replaceable
       class="parameter">nom_colonne</replaceable></literal> ou
      <literal>NEW.<replaceable
       class="parameter">nom_colonne</replaceable></literal>, respectivement.
      Bien sûr, le triggers sur <literal>INSERT</literal> ne peuvent pas
      faire référence à <literal>OLD</literal> et ceux sur
      <literal>DELETE</literal> ne peuvent pas faire référence à
      <literal>NEW</literal>.
     </para>

     <para>
      Les déclencheurs <literal>INSTEAD OF</literal> ne supportent pas de condition
      <literal>WHEN</literal>.
     </para>

     <para>
      Actuellement, les expressions <literal>WHEN</literal> ne peuvent pas
      contenir de sous-requêtes.
     </para>

     <para>
      À noter que pour les déclencheurs contraintes, l'évaluation de la clause
      <literal>WHEN</literal> n'est pas différée mais intervient immédiatement
      après que l'opération de mise à jour de la ligne soit effectuée. Si la
      condition n'est pas évaluée à vrai, alors le déclencheur n'est pas placé
      dans la file d'attente des exécutions différées.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom_fonction</replaceable></term>
    <listitem>
     <para>
      Une fonction utilisateur, déclarée sans argument et renvoyant le type
      <literal>trigger</literal>, exécutée à l'activation du trigger.
     </para>

     <para>
      Dans la syntaxe de <literal>CREATE TRIGGER</literal>, les mots-clés
      <literal>FUNCTION</literal> et <literal>PROCEDURE</literal> sont
      équivalents mais la fonction référencée doit dans tous les cas être une
      fonction, et non pas une procédure. L'utilisation du mot-clé
      <literal>PROCEDURE</literal> est ici historique et dépréciée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">arguments</replaceable></term>
    <listitem>
     <para>
      Une liste optionnelle d'arguments séparés par des virgules à fournir à la
      fonction lors de l'activation du déclencheur. Les arguments sont des
      chaînes littérales constantes. Il est possible d'écrire ici de
      simples noms et des constantes numériques mais ils sont tous convertis
      en chaîne. L'accès aux arguments du trigger depuis la fonction peut
      différer de l'accès aux arguments d'une fonction standard&nbsp;; la consultation
      des caractéristiques d'implantation du langage de la fonction peut alors s'avérer
      utile.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-createtrigger-notes">
  <title>Notes</title>

  <para>
   Pour créer un déclencheur sur une table, l'utilisateur doit posséder le droit
   <literal>TRIGGER</literal> sur la table. L'utilisateur doit aussi avoir
   le droit <literal>EXECUTE</literal> sur la fonction trigger.
  </para>

  <para>
   Utiliser <xref linkend="sql-droptrigger"/>
   pour supprimer un déclencheur.
  </para>

  <para>
   Un trigger sur colonne spécifique (définie en utilisant la syntaxe
   <literal>UPDATE OF <replaceable>nom_colonne</replaceable></literal>) se
   déclenchera quand une des colonnes indiquées est listée comme cible de la
   liste
   <literal>SET</literal> pour la commande <command>UPDATE</command>. Il est
   possible qu'une valeur de colonne change même si le trigger n'est pas
   déclenché parceque les modifications au contenu de la ligne par les triggers
   <literal>BEFORE UPDATE</literal> ne sont pas pris en compte. De même, une
   commande comme <literal>UPDATE ... SET x = x ...</literal> déclenchera le
   trigger sur la colonne <literal>x</literal>, bien que la valeur de cette
   colonne ne change pas.
  </para>

  <para>
   Il existe quelques fonctions triggers natives qui peuvent être utilisées
   pour résoudre des problèmes communs sans avoir à écrire son propre code
   pour le trigger. Voir <xref linkend="functions-trigger"/>.
  </para>

  <para>
   Dans un trigger <literal>BEFORE</literal>, la condition
   <literal>WHEN</literal> est évaluée juste avant l'exécution de la fonction,
   donc utiliser <literal>WHEN</literal> n'est pas matériellement différent
   de tester la même condition au début de la fonction trigger. Notez en
   particulier que la ligne <literal>NEW</literal> vu par la condition est sa
   valeur courante et possiblement modifiée par des triggers précédents. De
   plus, la condition <literal>WHEN</literal> d'un trigger
   <literal>BEFORE</literal> n'est pas autorisé à examiner les colonnes
   système de la ligne <literal>NEW</literal> (comme le <literal>ctid</literal>),
   car elles n'auront pas encore été initialisées.
  </para>

  <para>
   Dans un trigger <literal>AFTER</literal>, la condition
   <literal>WHEN</literal> est évaluée juste après la mise à jour de la ligne
   et elle détermine si un événement doit déclencher le trigger à la fin de
   l'instruction. Donc, quand la condition <literal>WHEN</literal> d'un
   trigger <literal>AFTER</literal> ne renvoie pas true, il n'est pas
   nécessaire de préparer un événement ou de relire la ligne à la fin de
   l'instruction. Cela peut apporter une amélioration significative des
   performances dans les instructions qui modifient de nombreuses lignes, si
   le trigger a besoin d'être déclencher pour quelques lignes.
  </para>

  <para>
   Dans certains cas, il est possible pour une seule commande SQL de
   déclencher plus d'un type de trigger. Par exemple, un
   <command>INSERT</command> avec une clause <literal>ON CONFLICT DO
   UPDATE</literal> peut être la cause du déclenchement d'opérations
   d'insertion et de mise à jour, donc il déclenchera l'exécution des deux
   types de trigger. Les relations de transition fournies par les triggers
   sont spécifique au type de l'événement. Donc un trigger
   <command>INSERT</command> ne verra que les lignes insérées, alors qu'un
   <command>UPDATE</command> ne verra que les lignes mises à jour.
  </para>

  <para>
   Les mises à jour et suppressions de lignes causées par des actions dûes aux
   clés étrangères, comme un <literal>ON UPDATE CASCADE</literal> ou un
   <literal>ON DELETE SET NULL</literal>, sont traitées comme faisant partie
   de la commande SQL qui les a causé (notez que ces actions ne sont jamais
   différées). Les triggers adéquats sur la table impactée seront déclenchées,
   donc cela fournit un autre moyen avec lequel une commande SQL pourrait
   déclencher des triggers ne correspondant pas directement à son type. Dans
   les cas simples, les triggers demandant les relations de transition verront
   tous les changements causés dans leur table par une commande SQL simple
   comme une relation de transition unique. Néanmoins, il existe des cas où la
   présence d'un trigger <literal>AFTER ROW</literal> réclament les relations
   de transition causera que les actions des clés étrangères déclenchées par
   une commande SQL simple soient séparées en plusieurs étapes, chacune avec
   ses propres relations de transition. Dans de tels cas, tout trigger de
   niveau instruction présent se déclenchera une fois par ensemble de relation
   de transition créé, s'assurant ainsi que les triggers voient bien chaque
   ligne affectée dans une seul relation de transition.
  </para>

  <para>
   Créer un trigger niveau ligne sur une table partitionnée impliquera la
   création de triggers identiques sur toutes les partitions existantes. De
   plus, toute partition créée ou attachée après coup contiendra elle-aussi un
   trigger identique. Si la partition est détachée de son parent, le trigger
   est supprimé. Les triggers sur les tables partitionnées ne peuvent pas être
   des triggers <literal>INSTEAD OF</literal>.
  </para>

  <para>
   Modifier une table partitionnée ou une table avec des enfants héritées
   déclenche les triggers au niveau requête attachés à cette table
   spécifiquement nommée, mais pas les triggers au niveau requête de ses
   partitions ou tables filles. Par contre, les triggers au niveau ligne sont
   déclenchés pour pour toutes les partitions et tables enfants affectées. Si
   un trigger au niveau requête a été défini avec des relations de
   transactions nommées par une clause <literal>REFERENCING</literal>, alors
   les images avant et après des lignes sont visibles pour toutes les
   partitions affectées et pour toutes les tables filles. Dans le cas de
   l'héritage, les images de ligne incluent seulement les colonnes présentes
   dans la table où le trigger est attaché. Actuellement, les triggers au
   niveau ligne avec des relations de transition ne peuvent être définis sur
   les partitions ou les tables filles.
  </para>

  <para>
   Les triggers de niveau instruction sur une vue sont déclenchés uniquement
   si l'action sur la vue est géré par un trigger niveau ligne
   <literal>INSTEAD OF</literal>. Si l'action est gérée par une règle
   <literal>INSTEAD</literal>, alors toute instruction émise par la règle est
   exécutée à la place de l'instruction originale nommant la vue, pour que les
   triggers qui seront déclenchés soient ceux des tables nommées dans les
   instructions de remplacement. De façon similaire, si la vue est en mise à
   jour automatique, alors l'action est gérée en réécrivant automatiquement
   l'instruction en une action sur la table de base de la vue pour que les
   triggers niveau instruction de la table de base soient déclenchés.
  </para>
 </refsect1>

 <refsect1 id="r1-sql-createtrigger-examples">
  <title>Exemples</title>

  <para>
   Exécutez la fonction <function>check_account_update</function> quand une
   ligne de la table <literal>accounts</literal> est sur le point d'être mise
   à jour&nbsp;:

   <programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE FUNCTION check_account_update();
   </programlisting>

   Idem, mais avec une exécution de la fonction seulement si la colonne
   <literal>balance</literal> est spécifiée comme cible de la commande
   <command>UPDATE</command>&nbsp;:

   <programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE OF balance ON accounts
    FOR EACH ROW
    EXECUTE FUNCTION check_account_update();
   </programlisting>

   Cette forme exécute la fonction seulement si la colonne
   <literal>balance</literal> a réellement changé de valeur&nbsp;:

   <programlisting>
CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.balance IS DISTINCT FROM NEW.balance)
    EXECUTE FUNCTION check_account_update();
   </programlisting>

   Appelle une fonction pour tracer les mises à jour de la table
   <literal>accounts</literal>, mais seulement si quelque chose a changé&nbsp;:

   <programlisting>
CREATE TRIGGER log_update
    AFTER UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
    EXECUTE FUNCTION log_account_update();
   </programlisting>

   Éxecute la fonction <function>view_insert_row</function> pour chacune des lignes
   à insérer dans la table sous-jacente à la vue my_view&nbsp;:

   <programlisting>
CREATE TRIGGER view_insert
    INSTEAD OF INSERT ON my_view
    FOR EACH ROW
    EXECUTE FUNCTION view_insert_row();
   </programlisting>

   Exécute la fonction <function>check_transfer_balances_to_zero</function>
   pour chaque commande pour confirmer que les lignes de
   <literal>transfert</literal> engendrent un net de zéro :

<programlisting>
CREATE TRIGGER transfer_insert
    AFTER INSERT ON transfer
    REFERENCING NEW TABLE AS inserted
    FOR EACH STATEMENT
    EXECUTE FUNCTION check_transfer_balances_to_zero();
</programlisting>

   Exécute la fonction <function>check_matching_pairs</function> pour chaque
   ligne pour confirmer que les changement sont fait sur des pairs
   correspondantes au même moment (par la même commande) :

<programlisting>
CREATE TRIGGER paired_items_update
    AFTER UPDATE ON paired_items
    REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab
    FOR EACH ROW
    EXECUTE PROCEDURE check_matching_pairs();
</programlisting>
  </para>

  <para>
   <xref linkend="trigger-example"/> contient un exemple complet d'une
   fonction trigger écrit en C.
  </para>
 </refsect1>

 <refsect1 id="sql-createtrigger-compatibility">
  <title>Compatibilité</title>

  <!--
   It's not clear whether SQL/MED contemplates triggers on foreign tables.
   Its <drop basic column definition> General Rules do mention the possibility
   of a reference from a trigger column list.  On the other hand, nothing
   overrides the fact that CREATE TRIGGER only targets base tables.  For now,
   do not document the compatibility status of triggers on foreign tables.
  -->

  <para>
   L'instruction <command>CREATE TRIGGER</command> de
   <productname>PostgreSQL</productname> implante un sous-ensemble du standard
   <acronym>SQL</acronym>. Les fonctionnalités manquantes sont&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      Bien que les tables de transition pour les déclencheurs
      <literal>AFTER</literal> triggers sont spécifiés en utilisant la clause
      <literal>REFERENCING</literal> de la manière standard, les variables de
      lignes utilisées dans les déclencheurs <literal>FOR EACH ROW</literal>
      peuvent ne pas être spécifiées dans la clause
      <literal>REFERENCING</literal>.  Ils sont disponibles d'une façon qui
      dépend du langage dans lequel la fonction déclencheur est écrite, mais
      est fixe sur un langage. Certains langages se comportent effectivement
      comme s'il y avait une clause <literal>REFERENCING</literal> contenant
      <literal>OLD ROW AS OLD NEW ROW AS NEW</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      Le standard autorise l'utilisation de tables de transition avec les
      triggers <literal>UPDATE</literal> spécifique à une colonne mais dans ce
      cas, l'ensemble des lignes qui doit être visible dans les tables de
      transition dépend de la liste de colonnes du trigger. Ceci n'est pas
      encore implémenté dans <productname>PostgreSQL</productname>.
     </para>
    </listitem>

    <listitem>
     <para>
      <productname>PostgreSQL</productname> n'autorise comme action déclenchée
      que l'exécution d'une fonction utilisateur. Le standard SQL, en revanche,
      autorise l'exécution d'autres commandes SQL, telles que
      <command>CREATE TABLE</command>. Cette limitation de <productname>PostgreSQL</productname>
      peut être facilement contournée par la création d'une fonction
      utilisateur qui exécute les commandes désirées.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Le standard SQL définit l'ordre de création comme ordre de lancement
   des déclencheurs multiples. <productname>PostgreSQL</productname> utilise
   l'ordre alphabétique de leur nom, jugé plus pratique.
  </para>

  <para>
   Le standard SQL précise que les déclencheurs <literal>BEFORE DELETE</literal> sur des
   suppressions en cascade se déclenchent <emphasis>après</emphasis> la fin du
   <literal>DELETE</literal> en cascade.
   <productname>PostgreSQL</productname> définit que <literal>BEFORE DELETE</literal>
   se déclenche toujours avant l'action de suppression, même lors
   d'une action en cascade. Cela semble plus cohérent. Il existe aussi un
   comportement non standard quand les triggers <literal>BEFORE</literal>
   modifient les lignes ou empêchent les mises à jour causées par une action
   référente. Ceci peut amener à des violations de contraintes ou au stockage
   de données qui n'honorent pas la contrainte référentielle.
  </para>

  <para>
   La capacité à préciser plusieurs actions pour un seul déclencheur avec
   <literal>OR</literal> est une extension <productname>PostgreSQL</productname>.
  </para>

  <para>
   La possibilité d'exécuter un trigger suite à une commande
   <command>TRUNCATE</command> est une extension
   <productname>PostgreSQL</productname> du standard SQL, tout comme la
   possibilité de définir des déclencheurs de niveau instruction sur des vues.
  </para>

  <para>
   <command>CREATE CONSTRAINT TRIGGER</command> est une extension spécifique à
   <productname>PostgreSQL</productname> du standard <acronym>SQL</acronym>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-altertrigger"/></member>
   <member><xref linkend="sql-droptrigger"/></member>
   <member><xref linkend="sql-set-constraints"/></member>
   <member><xref linkend="sql-createfunction"/></member>
  </simplelist>
 </refsect1>
</refentry>
