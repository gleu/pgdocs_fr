<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->
<!-- SAS 20060618 -->

<refentry id="sql-createlanguage">
 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Instructions du langage</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
  <refpurpose>Définir un nouveau langage procédural</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <synopsis>CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">nom</replaceable>
    HANDLER <replaceable class="parameter">gestionnaire_appel</replaceable> [ VALIDATOR <replaceable>fonction_validation</replaceable> ]
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">nom</replaceable></synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createlanguage-description">
  <title>Description</title>

  <para>
   <command>CREATE LANGUAGE</command> enregistre un nouveau langage
   procédural à une base de données <productname>PostgreSQL</productname>. En
   conséquence, les fonctions et procédures peuvent être
   définies dans ce nouveau langage.
  </para>

  <para>
   <command>CREATE LANGUAGE</command> associe en fait le nom du langage à
   un ou des fonctions de gestion qui sont responsable de l'exécution des fonctions
   écrites dans le langage. <xref linkend="xplang"/> offre de plus amples
   informations sur les gestionnaires de fonctions.
  </para>

  <para>
   <command>CREATE OR REPLACE LANGUAGE</command> will either create a
   new language, or replace an existing definition.  If the language
   already exists, its parameters are updated according to the command,
   but the language's ownership and permissions settings do not change,
   and any existing functions written in the language are assumed to still
   be valid.
  </para>

  <para>
   Un utilisateur doit être un superutilisateur
   <productname>PostgreSQL</productname> pour enregistrer un nouveau langage
   or change an existing language's parameters. However, once the language is
   created it is valid to assign ownership of it to a non-superuser, who may
   then drop it, change its permissions, rename it, or assign it to a new
   owner.  (Do not, however, assign ownership of the underlying C functions to
   a non-superuser; that would create a privilege escalation path for that
   user.)
  </para>

  <para>
   The form of <command>CREATE LANGUAGE</command> that does not supply
   any handler function is obsolete.  For backwards compatibility with
   old dump files, it is interpreted as <command>CREATE EXTENSION</command>.
   That will work if the language has been packaged into an extension of
   the same name, which is the conventional way to set up procedural
   languages.
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-parameters">
  <title>Paramètres</title>

  <variablelist>
   <varlistentry>
    <term><literal>TRUSTED</literal></term>

    <listitem>
     <para>
      <literal>TRUSTED</literal> indique que le langage ne donne pas accès
      aux données auquel l'utilisateur n'a pas normalement accès. Si ce mot
      clé est omis à l'enregistrement du langage, seuls les superutilisateurs
      peuvent utiliser ce langage pour créer de nouvelles fonctions.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PROCEDURAL</literal></term>

    <listitem>
     <para>
      Sans objet.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">nom</replaceable></term>

    <listitem>
     <para>
      Le nom du nouveau langage procédural.
      Il ne peut y avoir deux langages portant le même nom au sein
      de la base de données.
     </para>

     <para>
      Pour des raisons de compatibilité descendante, le nom doit être entouré de
      guillemets simples.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>HANDLER</literal> <replaceable class="parameter">gestionnaire_appel</replaceable></term>

    <listitem>
     <para>
      <replaceable class="parameter">gestionnaire_appel</replaceable> est le
      nom d'une fonction précédemment enregistrée. C'est elle qui est appelée pour
      exécuter les fonctions du langage procédural. Le gestionnaire d'appels
      d'un langage procédural doit être écrit dans un langage compilé,
      tel que le C, avec la convention d'appel version 1 et enregistré dans
      <productname>PostgreSQL</productname> comme une fonction ne prenant aucun
      argument et retournant le type <type>language_handler</type>, type
      servant essentiellement à identifier la fonction comme gestionnaire
      d'appels.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INLINE</literal> <replaceable class="parameter">gestionnaire_en_ligne</replaceable></term>

    <listitem>
     <para>
      <replaceable class="parameter">gestionnaire_en_ligne</replaceable> est
      le nom d'une fonction déjà enregistrée qui sera appelée pour exécuter
      un bloc de code anonyme (voir la commande <xref linkend="sql-do"/>)
      dans ce langage. Si aucune fonction <replaceable
      class="parameter">gestionnaire_en_ligne</replaceable> n'est indiquée,
      le langage ne supporte pas les blocs de code anonymes. La fonction de
      gestion doit prendre un argument du type <type>internal</type>, qui
      sera la représentation interne de la commande <command>DO</command>, et
      il renverra le type <type>void</type>. La valeur de retour du
      gestionnaire est ignorée.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VALIDATOR</literal> <replaceable class="parameter">fonction_validation</replaceable></term>

    <listitem>
     <para>
      <replaceable class="parameter">fonction_validation</replaceable> est le
      nom d'une fonction précédemment enregistrée. C'est elle qui est appelée
      pour valider toute nouvelle fonction écrite dans ce langage.
      Si aucune fonction de validation n'est spécifiée, alors toute
      nouvelle fonction n'est pas vérifiée à sa création. La fonction de
      validation prend obligatoirement un argument de type <type>oid</type>, OID de
      la fonction à créer, et renvoie par convention <type>void</type>.
     </para>

     <para>
      Une fonction de validation contrôle généralement le corps de la
      fonction pour s'assurer de sa justesse syntaxique mais peut également
      vérifier d'autres propriétés de la fonction (l'incapacité du langage
      à gérer certains types d'argument, par exemple). Le signalement d'erreur
      se fait à l'aide de la fonction <function>ereport()</function>.
      La valeur de retour de la fonction est ignorée.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 id="sql-createlanguage-notes">
  <title>Notes</title>

  <para>
   Utiliser <xref linkend="sql-droplanguage"/> pour supprimer un langage
   procédural.
  </para>

  <para>
   Le catalogue système <classname>pg_language</classname> (voir
   <xref linkend="catalog-pg-language"/>) contient des informations sur les langages
   installés. De plus, la commande <application>psql</application>&nbsp;
   <command>\dL</command> liste les langages installées.
  </para>

  <para>
   Pour créer des fonctions dans un langage procédural, l'utilisateur doit
   posséder le droit <literal>USAGE</literal> pour ce langage. Par défaut,
   <literal>USAGE</literal> est donné à <literal>PUBLIC</literal> (c'est-à-dire tout le monde)
   pour les langages de confiance. Ce droit peut être révoqué si nécessaire.
  </para>

  <para>
   Les langages procéduraux sont installées par base. Néanmoins, un
   langage peut être installé dans la base de données
   <literal>template1</literal>, ce qui le rend automatiquement disponible
   dans toutes les bases de données créées par la suite.
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-examples">
  <title>Exemples</title>

  <para>
   A minimal sequence for creating a new procedural language is:
   <programlisting>CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
   </programlisting>
   Typically that would be written in an extension's creation script,
   and users would do this to install the extension:
<programlisting>
CREATE EXTENSION plsample;
</programlisting>
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-compat">
  <title>Compatibilité</title>

  <para>
   <command>CREATE LANGUAGE</command> est un extension de
   <productname>PostgreSQL</productname>.
  </para>
 </refsect1>

 <refsect1>
  <title>Voir aussi</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterlanguage"/></member>
   <member><xref linkend="sql-createfunction"/></member>
   <member><xref linkend="sql-droplanguage"/></member>
   <member><xref linkend="sql-grant"/></member>
   <member><xref linkend="sql-revoke"/></member>
  </simplelist>
 </refsect1>
</refentry>
