<?xml version="1.0" encoding="UTF-8"?>
<!-- $PostgreSQL: pgsql/doc/src/sgml/recovery-config.sgml,v 2.6 2010-04-28 07:34:11 heikki Exp $ -->

<chapter id="recovery-config">
 <title>Configuration de la récupération</title>

 <indexterm>
  <primary>configuration</primary>
  <secondary>de la récupération</secondary>
  <tertiary>d'un serveur de standby</tertiary>
 </indexterm>

 <para>
  <indexterm><primary>recovery.conf</primary></indexterm>
  Ce chapitre décrit les paramètres disponibles dans le fichier
  <filename>recovery.conf</filename>. Ils ne s'appliquent que pendant la
  durée de la récupération. Ils doivent être repositionnés pour toute récupération
  ultérieure que vous souhaiterez effectuer. Ils ne peuvent pas être modifiés
  une fois que la récupération a commencé.
 </para>

 <para>
  Les paramètres de <filename>recovery.conf</filename> sont spécifiés dans le
  format <literal>nom = 'valeur'</literal>. Un paramètre est déclaré par ligne.
  Les caractères dièse (<literal>#</literal>)  indiquent que le reste de la
  ligne est un commentaire. Pour inclure un guillemet dans une valeur
  de paramètre, écrivez deux guillemets (<literal>''</literal>).
 </para>

 <para>
  Un fichier d'exemple , <filename>share/recovery.conf.sample</filename>,
  est fourni dans le répertoire <filename>share/</filename> de l'installation.
 </para>

 <sect1 id="archive-recovery-settings">

  <title>Paramètres de récupération de l'archive</title>
  <variablelist>

   <varlistentry id="restore-command" xreflabel="restore_command">
    <term><varname>restore_command</varname> (<type>chaîne de caractères</type>)</term>
    <indexterm>
     <primary>paramètre de récupération <varname>restore_command</varname></primary>
    </indexterm>
    <listitem>
     <para>
      La commande d'interpréteur à exécuter pour récupérer un segment de la série
      de fichiers WAL archivés. Ce paramètre est nécessaire pour la récupération
      à partir de l'archive, mais optionnel pour la réplication à flux continu.
      Tout <literal>%f</literal> dans la chaîne est remplacé par le nom du fichier
      à récupérer de l'archive, et tout <literal>%p</literal> est remplacé par
      le chemin de destination de la copie sur le serveur.
      (Le chemin est relatif au répertoire courant de travail, c'est à dire
      le répertoire de données de l'instance.)
      Tout <literal>%r</literal> est remplacé par le nom du fichier contenant
      le dernier point de reprise (restartpoint) valide. Autrement dit, le
      fichier le plus ancien qui doit être gardé pour permettre à la récupération
      d'être redémarrable. Cette information peut donc être utilisée pour tronquer
      l'archive au strict minimum nécessaire pour permettre de reprendre la
      restauration en cours. <literal>%r</literal> n'est typiquement utilisé
      que dans des configurations de warn-standby.
      (voir <xref linkend="warm-standby"/>).
      Écrivez <literal>%%</literal> pour inclure un vrai caractère
      <literal>%</literal>.
     </para>

     <para>
      Il est important que la commande ne retourne un code retour égal à zéro
      que si elle réussit. La commande <emphasis>recevra</emphasis> des
      demandes concernant des fichiers n'existant pas dans l'archive&nbsp;; elle
      doit avoir un code retour différent de zéro dans ce cas. Par exemple&nbsp;:
      <programlisting>
restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy "C:\\server\\archivedir\\%f" "%p"'  # Windows
      </programlisting>
      Seule exception, si la commande est terminée par un signal (autre que
      <systemitem>SIGTERM</systemitem>, qui est utilisé pour un arrêt du
      serveur) ou une erreur du shell (comme une commande introuvable), alors
      la restauration va s'annuler et le serveur ne redémarrera pas.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="archive-cleanup-command" xreflabel="archive_cleanup_command">
    <term><varname>archive_cleanup_command</varname> (<type>string</type>)</term>
    <indexterm>
     <primary>paramètre de récupération <varname>archive_cleanup_command</varname></primary>
    </indexterm>
    <listitem>
     <para>
      Ce paramètre optionel spécifie une commande d'interpréteur qui sera
      exécuté à chaque point de reprise. Le but de
      <varname>archive_cleanup_command</varname> est de fournir un mécanisme
      de nettoyage des vieux fichiers WAL archivés qui ne sont plus
      nécessaires au serveur de standby. Tout <literal>%r</literal> est
      remplacé par le nom du fichier contenant le dernier point de reprise
      (restartpoint) valide. Autrement dit, le fichier le plus ancien qui
      doit être <emphasis>conservé</emphasis> pour permettre à la
      récupération d'être redémarrable. Du coup, tous les fichiers créés
      avant <literal>%r</literal> peuvent être supprimés sans problème.
      Cette information peut être utilisée pour tronquer les archives au
      minimum nécessaire pour redémarrer à partir de la restauration en
      Le module <xref linkend="pgarchivecleanup"/> est souvent utilisé dans
      <varname>archive_cleanup_command</varname>
      dans des configurations de standby seuls. Par exemple&nbsp;:
      <programlisting>archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r' </programlisting>
        Notez néanmoins que si plusieurs serveurs en standby sont mis à jour
        à partir du même répertoire d'archives, vous devez vous assurer que
        vous ne supprimez que les journaux de transactions qui ne sont plus
        utiles à tous les serveurs. <varname>archive_cleanup_command</varname>
        n'est typiquement utilisé que dans des configurations de warm-standby
        (voir <xref linkend="warm-standby"/>). Écrivez <literal>%%</literal>
        pour inclure un vrai caractère <literal>%</literal>.
       </para>
       <para>
        Si la commande retourne un code de retour différent de zéro alors
        un message de journal WARNING sera écrit. Seule exception, une erreur
        de niveau FATAL est renvoyée si la commande a été terminée par un signal
        ou par une erreur du shell (comme une commande introuvable).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-end-command" xreflabel="recovery_end_command">
      <term><varname>recovery_end_command</varname> (<type>chaîne de caractéres</type>)</term>
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_end_command</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Ce paramètre spécifie une commande d'interpréteur qui sera exécutée une
        fois seulement, à la fin de la récupération. Ce paramètre est optionnel.
        Le but de <varname>recovery_end_command</varname> est de fournir un
        mécanisme pour un nettoyage à la fin de la réplication ou de la récupération.
        Tout <literal>%r</literal> est remplacé par le nom du fichier contenant le
        dernier point de reprise valide, comme dans <xref linkend="archive-cleanup-command" />.
       </para>
       <para>
        Si la commande retourne un code de retour différent de zéro alors
        un message de journal WARNING sera écrit et la base continuera son
        démarrage malgré tout. Par contre, si la commande a été terminée par
        un signal ou une erreur provenant du shell (comme une commande introuvable), la base n'effectuera pas son démarrage.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect1>

  <sect1 id="recovery-target-settings">

    <title>Paramètres de cible de récupération</title>
     <para>

      Par défaut, la restauration continuera jusqu'à la fin du dernier journal
      de transactions. Les paramètres suivants peuvent être utilisés pour
      spécifier un point d'arrêt précédent. Une des cibles suivantes peut être
      indiquée : <varname>recovery_target</varname>,
      <varname>recovery_target_lsn</varname>,
      <varname>recovery_target_name</varname>,
      <varname>recovery_target_time</varname> ou
      <varname>recovery_target_xid</varname>. Si plus d'un parmi eux est spécifié
      dans le fichier de configuration, seule la dernière valeur sera conservée.
     </para>
     <variablelist>

     <varlistentry id="recovery-target" xreflabel="recovery_target">
      <term><varname>recovery_target</varname><literal> = 'immediate'</literal>
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_target</varname></primary>
      </indexterm>
       </term>
      <listitem>
       <para>
        Ce paramètre spécifie que la restauration doit se terminer dès que l'état
        de cohérence est atteint, autrement dit dès que possible. Lors de la
        restauration à partir d'une sauvegarde en ligne, cela signifie le moment
        où la sauvegarde s'est terminée.
       </para>
       <para>
        Au niveau technique, c'est une chaîne de caractères mais
        <literal>'immediate'</literal> est la seule valeur actuellement
        autorisée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-name" xreflabel="recovery_target_name">
      <term><varname>recovery_target_name</varname> (<type>string</type>)
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_target_name</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ce paramètre spécifie le point de restauration nommé (créé précédemment
        avec la fonction <function>pg_create_restore_point()</function>) où la
        restauration se terminera.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-time" xreflabel="recovery_target_time">
      <term><varname>recovery_target_time</varname>
           (<type>timestamp</type>)
      </term>
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_target_time</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Ce paramètre spécifie l'horodatage (timestamp) jusqu'auquel la récupération
        se poursuivra. Le point précis d'arrêt dépend aussi de
        <xref linkend="recovery-target-inclusive"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-xid" xreflabel="recovery_target_xid">
      <term><varname>recovery_target_xid</varname> (<type>chaîne de caractères</type>)</term>
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_target_xid</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Ce paramètre spécifie l'identifiant de transaction jusqu'auquel la
        récupération se poursuivra. Gardez à l'esprit que, bien que
        les identifiants de transactions sont assignés séquentiellement au
        démarrage des transactions, elles peuvent se terminer dans un ordre
        numérique différent. Les transactions qui seront récupérées sont
        celles qui auront réalisé leur COMMIT avant
        la transaction spécifiée (optionnellement incluse).
        Le point précis d'arrêt dépend aussi de
        <xref linkend="recovery-target-inclusive"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-lsn" xreflabel="recovery_target_lsn">
      <term><varname>recovery_target_lsn</varname> (<type>pg_lsn</type>)
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_target_lsn</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ce paramètre spécifie le LSN de l'emplacement dans le journal de
        transaction jusqu'auquel la récupération se poursuivra.  Le point
        d'arrêt précis est aussi influencé par
        <xref linkend="recovery-target-inclusive"/>.  Ce paramètre est parsé
        en utilisant le type de données système
        <link linkend="datatype-pg-lsn"><type>pg_lsn</type></link>.
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

     <para>
       Les options suivantes indiquent la cible de restauration et ont un effet
       sur ce qui arrive une fois la cible atteinte&nbsp;:
     </para>

     <variablelist>

     <varlistentry id="recovery-target-inclusive"
                   xreflabel="recovery_target_inclusive">
      <term><varname>recovery_target_inclusive</varname>
        (<type>booléen</type>)
      </term>
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_target_inclusive</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Spécifie si il faut s'arrêter juste après la cible de récupération spécifiée
        (<literal>true</literal>), ou juste avant la cible de récupération
        (<literal>false</literal>).
        S'applique quand soit <xref linkend="recovery-target-time"/> soit
        <xref linkend="recovery-target-xid"/> est indiqué. Ce paramètre
        contrôle si les transactions qui ont exactement le même
        horodatage ou le même identifiant de transaction, respectivement,
        seront inclues dans la restauration. La valeur par défaut est
        (<literal>true</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-timeline"
                   xreflabel="recovery_target_timeline">
      <term><varname>recovery_target_timeline</varname>
        (<type>chaîne de caractères</type>)
      </term>
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_target_timeline</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Spécifie la ligne de temps (timeline) précise sur laquelle effectuer la récupération.
        Le comportement par défaut est de récupérer sur la même timeline que
        celle en cours lorsque la sauvegarde de base a été effectuée.
        Configurer ce paramètre à <literal>latest</literal> permet de
        restaurer jusqu'à la dernière ligne de temps disponible dans les
        archives, ce qui est utile pour un serveur standby. Sinon, vous
        n'aurez besoin de positionner ce paramètre que dans des cas complexes
        de re-récupération, où vous aurez besoin d'atteindre un état lui même
        atteint après une récupération à un moment dans le temps (point-in-time
        recovery). Voir <xref linkend="backup-timelines"/> pour plus d'informations.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="recovery-target-action"
                   xreflabel="recovery_target_action">
      <term><varname>recovery_target_action</varname> (<type>enum</type>)</term>
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_target_action</varname></primary>
      </indexterm>
      <listitem>
       <para>
        Indique l'action que doit prendre le serveur une fois que la cible de
        récupération est atteinte. La valeur par défaut est
        <literal>pause</literal>, ce qui signifie que la récupération sera
        mise en pause. <literal>promote</literal> signifie que le processus de
        récupération terminera et que le serveur se lancera pour accepter des
        connexions. Enfin, <literal>shutdown</literal> arrêtera le serveyr
        après avoir atteint la cible de récupération.
       </para>
       <para>
        Le but du paramétrage <literal>pause</literal> est d'autoriser l'exécution des
        requêtes sur la base pour vérifier si la cible de récupération actuelle est la
        bonne. La pause peut être annulée en utilisant la fonction
        <function>pg_wal_replay_resume()</function> (voir
        <xref linkend="functions-recovery-control-table"/>), ce qui termine la
        restauration. Si la cible actuelle de restauration ne correspond pas
        au point d'arrêt souhaité, arrêtez le serveur, modifiez la
        configuration de la cible de restauration à une cible plus lointaine,
        et enfin redémarrez pour continuer la restauration.
       </para>
       <para>
        Le paramétrage <literal>shutdown</literal> est intéressant pour que l'instance
        soit prête au point de rejeu souhaité. L'instance pourra toujours rejoué les
        enregistrements WAL suivants (et de fait devra rejouer les enregistrements WAL
        depuis le dernier checkpoint à son prochain lancement).
       </para>
       <para>
        Notez que, comme le fichier de configuration <filename>recovery.conf</filename>
        n'est pas renommé, <varname>recovery_target_action</varname> reste configuré à
        <literal>shutdown</literal>, et toute tentative de lancement se terminera avec
        un arrêt immédiat sauf si la configuration est changée ou que le fichier
        <filename>recovery.conf</filename> est supprimé manuellement.
       </para>
       <para>
        Ce paramétrage n'a pas d'effet si aucune cible de récupération n'est configurée.
        Si <xref linkend="guc-hot-standby"/> n'est pas activé, un paramétrage à
        <literal>pause</literal> agira de la même façon que <literal>shutdown</literal>.
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
   </sect1>

  <sect1 id="standby-settings">

    <title>Paramètres de serveur de Standby</title>
     <variablelist>

       <varlistentry id="standby-mode" xreflabel="standby_mode">
        <term><varname>standby_mode</varname> (<type>booléen</type>)</term>
        <indexterm>
          <primary>paramètre de récupération <varname>standby_mode</varname></primary>
        </indexterm>
        <listitem>
         <para>
          Spécifie s'il faut démarrer le serveur <productname>PostgreSQL</productname>
          en tant que standby. Si ce paramètre est à <literal>on</literal>, le
          serveur n'arrête pas la récupération quand la fin du WAL archivé est
          atteinte, mais continue d'essayer de poursuivre la récupération
          en récupérant de nouveaux segments en utilisant <varname>restore_command</varname>
          et/ou en se connectant au serveur primaire comme spécifié par le paramètre
          <varname>primary_conninfo</varname>.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="primary-conninfo" xreflabel="primary_conninfo">
        <term><varname>primary_conninfo</varname> (<type>chaîne de caractères</type>)</term>
        <indexterm>
          <primary>paramètre de récupération <varname>primary_conninfo</varname></primary>
        </indexterm>
        <listitem>
         <para>
          Spécifie au serveur de standby la chaîne de connexion à utiliser
          pour atteindre le primaire. Cette chaîne est dans le format décrie
          dans <xref linkend="libpq-connstring"/>. Si une option n'est pas
          spécifiée dans cette chaîne, alors la variable d'environnement
          correspondante (voir <xref linkend="libpq-envars"/>) est examinée.
          Si la variable d'environnement n'est pas positionnée non plus, la
          valeur par défaut est utilisée.
         </para>
         <para>
          La chaîne de connexion devra spécifier le nom d'hôte (ou adresse) du
          serveur primaire, ainsi que le numéro de port si ce n'est pas le même
          que celui par défaut du serveur de standby.
          Spécifiez aussi un nom d'utilisateur disposant des droits adéquats
          sur le primaire (voir <xref linkend="streaming-replication-authentication"/>).
          Un mot de passe devra aussi être fourni, si le primaire demande une
          authentification par mot de passe. Il peut être fourni
          soit dans la chaîne <varname>primary_conninfo</varname> soit
          séparément dans un fichier <filename>~/.pgpass</filename> sur le serveur
          de standby (utilisez <literal>replication</literal> comme nom de
          base de données).
          Ne spécifiez pas de nom de base dans la chaîne<varname>primary_conninfo</varname>
         </para>
         <para>
          Ce paramètre n'a aucun effet si  <varname>standby_mode</varname> vaut <literal>off</literal>.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="primary-slot-name" xreflabel="primary_slot_name">
        <term><varname>primary_slot_name</varname> (<type>string</type>)
        <indexterm>
          <primary>paramètre de récupération <varname>primary_slot_name</varname></primary>
        </indexterm>
        </term>
        <listitem>
         <para>
          Indique en option un slot de réplication existant à utiliser lors de
          la connexion au serveur principal via la réplication en vue, dans le
          but de contrôler la suppression des ressources sur le serveur principal
          (voir <xref linkend="streaming-replication-slots"/>). Ce paramètre n'a
          aucun effet si le paramètre <varname>primary_conninfo</varname> n'est pas
          configuré.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="trigger-file" xreflabel="trigger_file">
        <term><varname>trigger_file</varname> (<type>chaîne de caractères</type>)</term>
        <indexterm>
          <primary>paramètre de récupération <varname>trigger_file</varname></primary>
        </indexterm>
        <listitem>
         <para>
          Spécifie un fichier trigger dont la présence met fin à la récupération
          du standby. Même si cette valeur n'est pas configurée, vous pouvez
          toujours promouvoir le serveur en attente en utilisant
          <command>pg_ctl promote</command>.
          Ce paramètre n'a aucun effet si <varname>standby_mode</varname> vaut <literal>off</literal>.
         </para>
        </listitem>
       </varlistentry>

     <varlistentry id="recovery-min-apply-delay" xreflabel="recovery_min_apply_delay">
      <term><varname>recovery_min_apply_delay</varname> (<type>integer</type>)
      <indexterm>
        <primary>paramètre de récupération <varname>recovery_min_apply_delay</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Par défaut, un serveur standby restaure les enregistrements des journaux
        de transactions provenant du serveur primaire dès que possible. Dans
        certains cas, il peut se révéler utile d'avoir une copie des données dont
        la restauration accuse un certain retard programmé. Cela ouvre notamment
        différentes options pour corriger les erreurs de perte de données. Ce
        paramètre vous permet de retarder la restauration pr une période de temps
        fixe, spécifiée en millisecondes si aucune unité n'est spécifiée. Par
        exemple, si vous configurez ce paramètre à <literal>5min</literal>, le
        serveur standby rejouera chaque transaction seulement quand l'horloge
        système de l'esclave dépasse de cinq minutes l'heure de validation
        rapportée par le serveur maître.
       </para>
       <para>
        Il est possible que le délai de réplication entre serveurs dépasse la
        valeur de ce paramètre, auquel cas aucun délai n'est ajouté. Notez que
        le délai est calculé entre l'horodatage du journal de transactions
        écrit sur le maître et la date et heure courante sur le standby. Les
        délais de transfert dûs aux réseaux et aux configurations de réplication
        en cascade peuvent réduire le temps d'attente réel de façon significative.
        Si les horloges systèmes du maître et de l'esclave ne sont pas
        synchronisés, cela peut amener à la restauration d'enregistrements avant
        le délai prévu&nbsp;; mais ce n'est pas un problème grave car les valeurs
        intéressantes pour ce paramètre sont bien au dessus des déviations d'horloge
        typiques.
       </para>
       <para>
        Le délai survient seulement sur les validations (COMMIT) des transactions.
        D'autres enregistrements sont rejoués aussi rapidement que possible, ce
        qui n'est pas un problème car les règles de visibilité MVCC nous assurent
        que leurs effets ne sont pas visibles jusqu'à l'application de
        l'enregistrement du COMMIT.
       </para>
       <para>
        Le délai est observé une fois que la base de données en restauration a
        atteint un état cohérent jusqu'à ce que le serveur standby soit promu ou
        déclenché. Après cela, le serveur standby terminera la restauration sans
        attendre.
       </para>
       <para>
        Ce paramètre cible principalement les déploiements de la réplication en
        flux. Cependant, si le paramètre est spécifié, il honorera tous les cas.
        <varname>hot_standby_feedback</varname> sera retardé par l'utilisation
        de cette fonctionnalité, qui peut aboutir à de la fragmentation sur le
        maître. Faites attention en utilisant les deux.
       </para>

       <warning>
        <para>
         La réplication synchrone est affectée par ce paramètre quand
         <varname>synchronous_commit</varname> est configuré à
         <literal>remote_apply</literal>&nbsp;; chaque
         <literal>COMMIT</literal> devra attendre son rejeu.
        </para>
       </warning>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect1>

</chapter>
