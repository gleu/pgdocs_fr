<?xml version="1.0" encoding="UTF-8"?>
<chapter id="storage">
 <title>Stockage physique de la base de données</title>

 <para>
  Ce chapitre fournit un aperçu du format de stockage physique utilisé par les
  bases de données <productname>PostgreSQL</productname>.
 </para>

 <sect1 id="storage-file-layout">

  <title>Emplacement des fichiers de la base de données</title>

  <para>
   Cette section décrit le format de stockage au niveau des fichiers et
   répertoires.
  </para>

  <para>
   Traditionnellement, les fichiers de configuration et les fichiers de données utilisés
   par une instance du serveur sont stockés ensemble dans le répertoire des données,
   habituellement référencé en tant que <varname>PGDATA</varname> (d'après le nom de
   la variable d'environnement qui peut être utilisé pour le définir). Un emplacement
   courant pour <varname>PGDATA</varname> est <filename>/var/lib/pgsql/data</filename>.
   Plusieurs groupes, gérés par différentes instances du serveur, peuvent exister sur
   la même machine.
  </para>


  <para>
   Le répertoire <varname>PGDATA</varname> contient plusieurs sous-répertoires et
   fichiers de contrôle, comme indiqué dans le <xref linkend="pgdata-contents-table"/>.
   En plus de ces éléments requis, les fichiers
   de configuration du groupe, <filename>postgresql.conf</filename>,
   <filename>pg_hba.conf</filename> et <filename>pg_ident.conf</filename> sont
   traditionnellement stockés dans <varname>PGDATA</varname> (bien qu'il soit possible de
   les placer ailleurs).
  </para>

  <table tocentry="1" id="pgdata-contents-table">
   <title>Contenu de <varname>PGDATA</varname></title>
   <tgroup cols="2">
    <colspec colnum="1" colwidth="0.5*"/>
    <colspec colnum="2" colwidth="1.5*"/>
    <thead>
     <row>
      <entry>Élément</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>

     <row>
      <entry><filename>PG_VERSION</filename></entry>
      <entry>Un fichier contenant le numéro de version majeur de
       <productname>PostgreSQL</productname></entry>
     </row>

     <row>
      <entry><filename>base</filename></entry>
      <entry>Sous-répertoire contenant les sous-répertoires par base de
       données</entry>
     </row>

     <row>
      <entry><filename>current_logfiles</filename></entry>
      <entry>Fichier contenant le ou les fichiers de trace en cours d'écriture
       par le gestionnaire de traces.</entry>
     </row>

     <row>
      <entry><filename>global</filename></entry>
      <entry>Sous-répertoire contenant les tables communes au groupe, telles que
       <structname>pg_database</structname></entry>
     </row>

     <row>
      <entry><filename>pg_commit_ts</filename></entry>
      <entry>Sous-répertoire contenant des données d'horodatage des
       validations de transactions</entry>
     </row>

     <row>
      <entry><filename>pg_dynshmem</filename></entry>
      <entry>Sous-répertoire contenant les fichiers utilisés par le système de gestion
       de la mémoire partagée dynamique</entry>
     </row>

     <row>
      <entry><filename>pg_logical</filename></entry>
      <entry>Sous-répertoire contenant les données de statut pour le décodage logique</entry>
     </row>

     <row>
      <entry><filename>pg_multixact</filename></entry>
      <entry>Sous-répertoire contenant des données sur l'état des
       multi-transactions (utilisé pour les verrous de lignes partagées)</entry>
     </row>

     <row>
      <entry><filename>pg_notify</filename></entry>
      <entry>Sous-répertoire contenant les données de statut de LISTEN/NOTIFY</entry>
     </row>

     <row>
      <entry><filename>pg_replslot</filename></entry>
      <entry>Sous-répertoire contenant les données des slots de réplication</entry>
     </row>

     <row>
      <entry><filename>pg_serial</filename></entry>
      <entry>Sous-répertoire contenant des informations sur les transactions
       sérialisables validées</entry>
     </row>

     <row>
      <entry><filename>pg_snapshots</filename></entry>
      <entry>Sous-répertoire contenant les snapshots (images) exportés</entry>
     </row>

     <row>
      <entry><filename>pg_stat</filename></entry>
      <entry>Sous-répertoire contenant les fichiers permanents pour le sous-système de
       statistiques</entry>
     </row>

     <row>
      <entry><filename>pg_stat_tmp</filename></entry>
      <entry>Sous-répertoire contenant les fichiers temporaires pour le sous-système
       des statistiques</entry>
     </row>

     <row>
      <entry><filename>pg_subtrans</filename></entry>
      <entry>Sous-répertoire contenant les données d'états des
       sous-transaction</entry>
     </row>

     <row>
      <entry><filename>pg_tblspc</filename></entry>
      <entry>Sous-répertoire contenant les liens symboliques vers les espaces
       logiques</entry>
     </row>

     <row>
      <entry><filename>pg_twophase</filename></entry>
      <entry>Sous-répertoire contenant les fichiers d'état pour les transactions
       préparées</entry>
     </row>

     <row>
      <entry><filename>pg_wal</filename></entry>
      <entry>Sous-répertoire contenant les fichiers WAL (Write Ahead Log)</entry>
     </row>

     <row>
      <entry><filename>pg_xact</filename></entry>
      <entry>Sous-répertoire contenant les données d'état de validation des
       transactions</entry>
     </row>

     <row>
      <entry><filename>postgresql.auto.conf</filename></entry>
      <entry>Fichier utilisé pour les paramètres configurés avec la commande
       <command>ALTER SYSTEM</command></entry>
     </row>

     <row>
      <entry><filename>postmaster.opts</filename></entry>
      <entry>Un fichier enregistrant les options en ligne de commande avec
       lesquelles le serveur a été lancé la dernière fois</entry>
     </row>

     <row>
      <entry><filename>postmaster.pid</filename></entry>
      <entry>Un fichier verrou contenant l'identifiant du processus postmaster en
       cours d'exécution (PID), le chemin du répertoire de données, la date et
       l'heure du lancement de postmaster, le numéro de port, le chemin du
       répertoire du socket de domaine Unix (pourrait être vide), la première adresse
       valide dans listen_address (adresse IP ou <literal>*</literal>, ou vide s'il
       n'y a pas d'écoute TCP) et l'identifiant du segment de mémoire partagé (ce
       fichier est supprimé à l'arrêt du serveur)</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   Pour chaque base de données dans le groupe, il existe un sous-répertoire dans
   <varname>PGDATA</varname><filename>/base</filename>, nommé d'après l'OID de la base de données
   dans <structname>pg_database</structname>. Ce sous-répertoire est l'emplacement par
   défaut pour les fichiers de la base de données; en particulier, ses
   catalogues système sont stockés ici.
  </para>

  <para>
   Notez que les sections suivantes décrivent le comportement de la <link
   linkend="tableam">méthode d'accès table</link> interne nommée
   <literal>heap</literal> et des <link linkend="indexam">méthodes d'accès
    index</link> internes. Du fait de la nature extensible de
   <productname>PostgreSQL</productname>, d'autres méthodes d'accès pourraient
   fonctionner différemment.
  </para>

  <para>
   Chaque table et index est stocké dans un fichier séparé. Pour les relations
   ordinaires, ces fichiers sont nommés d'après le numéro
   <firstterm>filenode</firstterm> de la table ou de l'index. Ce numéro est stocké
   dans <structname>pg_class</structname>.<structfield>relfilenode</structfield>.
   Pour les relations temporaires, le nom du fichier est de la forme
   <literal>t<replaceable>BBB</replaceable>_<replaceable>FFF</replaceable></literal>,
   où <replaceable>BBB</replaceable> est l'identifiant du processus serveur qui a
   créé le fichier, et <replaceable>FFF</replaceable> et le numéro
   <firstterm>filenode</firstterm>. Dans tous les cas, en plus du fichier principal
   (aussi appelé <foreignphrase>main fork</foreignphrase>), chaque table et index
   a une <firstterm>carte des espaces libres</firstterm> (voir <xref
   linkend="storage-fsm"/>), qui enregistre des informations sur l'espace libre
   disponible dans la relation. La carte des espaces libres est stockée dans un
   fichier dont le nom est le numéro filenode suivi du suffixe
   <literal>_fsm</literal>. Les tables ont aussi une <firstterm>carte des
    visibilités</firstterm>, stockée dans un fichier de suffixe
   <literal>_vm</literal>, pour tracer les pages connues comme n'ayant pas de
   lignes mortes. La carte des visibilités est décrite dans <xref
   linkend="storage-vm"/>. Les tables non tracées et les index disposent d'un
   troisième fichier, connu sous le nom de fichier d'initialisation. Son nom a
   pour suffixe <literal>_init</literal> (voir <xref linkend="storage-init"/>).
  </para>

  <caution>
   <para>
    Notez que, bien que le filenode de la table correspond souvent à son OID,
    cela n'est <emphasis>pas</emphasis> nécessairement le cas&nbsp;; certaines
    opérations, comme <command>TRUNCATE</command>, <command>REINDEX</command>,
    <command>CLUSTER</command> et quelques formes d'<command>ALTER TABLE</command> peuvent
    modifier le filenode tout en préservant l'OID. Évitez de supposer que filenode
    et OID sont identiques.
    De plus, pour certains catalogues système incluant
    <structname>pg_class</structname> lui-même,
    <structname>pg_class</structname>.<structfield>relfilenode</structfield>
    contient zéro.  Le numéro filenode en cours est stocké dans une structure de
    données de bas niveau, et peut être obtenu avec la fonction
    <function>pg_relation_filenode()</function>.
   </para>
  </caution>

  <para>
   Quand une table ou un index dépasse 1&nbsp;Go, il est divisé en
   <firstterm>segments</firstterm> d'un&nbsp;Go. Le nom du fichier du premier
   segment est identique au filenode&nbsp;; les segments suivants sont nommés
   filenode.1, filenode.2, etc. Cette disposition évite des problèmes sur les
   plateformes qui ont des limitations sur les tailles des fichiers.
   (Actuellement, 1&nbsp;Go est la taille du segment par défaut. Cette taille est
   ajustable en utilisant l'option <option>--with-segsize</option> pour configure
   avant de construire <productname>PostgreSQL</productname>.)
   En principe, les fichiers de la carte des espaces libres et de la carte de
   visibilité pourraient aussi nécessiter plusieurs segments, bien qu'il y ait
   peu de chance que cela arrive réellement.
  </para>

  <para>
   Une table contenant des colonnes avec des entrées potentiellement volumineuses
   aura une table <firstterm>TOAST</firstterm> associée, qui est
   utilisée pour le stockage de valeurs de champs trop importantes pour
   conserver des lignes adéquates.
   <structname>pg_class</structname>.<structfield>reltoastrelid</structfield> établit un lien entre
   une table et sa table <acronym>TOAST</acronym>, si elle existe. Voir <xref
   linkend="storage-toast"/> pour plus d'informations.
  </para>

  <para>
   Le contenu des tables et des index est discuté plus en détails dans <xref
   linkend="storage-page-layout"/>.
  </para>

  <para>
   Les tablespaces rendent ce scénario plus compliqué. Chaque espace
   logique défini par l'utilisateur contient un lien symbolique dans le répertoire
   <varname>PGDATA</varname><filename>/pg_tblspc</filename>, pointant vers le répertoire physique
   du tablespace (celui spécifié dans la commande <command>CREATE
    TABLESPACE</command>). Ce lien symbolique est nommé d'après l'OID du tablespace.
   À l'intérieur du répertoire du tablespace, il existe un sous-répertoire
   avec un nom qui dépend de la version du serveur <productname>PostgreSQL</productname>,
   comme par exemple <literal>PG_9.0_201008051</literal>. (La raison de l'utilisation
   de ce sous-répertoire est que des versions successives de la base de données
   puissent utiliser le même emplacement indiqué par <command>CREATE
    TABLESPACE</command> sans que cela provoque des conflits.) À l'intérieur de
   ce répertoire spécifique à la version, il existe un sous-répertoire
   pour chacune des bases de données contenant des éléments dans ce tablespace. Ce
   sous-répertoire est nommé d'après l'OID de la base. Les tables et les index
   sont enregistrés dans ce répertoire et suivent le schéma de nommage des filenodes. Le tablespace
   <literal>pg_default</literal> n'est pas accédé via <filename>pg_tblspc</filename> mais
   correspond à <varname>PGDATA</varname><filename>/base</filename>. De façon similaire,
   le tablespace <literal>pg_global</literal> n'est pas accédé via
   <filename>pg_tblspc</filename> mais correspond à <varname>PGDATA</varname><filename>/global</filename>.
  </para>

  <para>
   La fonction <function>pg_relation_filepath()</function> affiche le chemin
   entier (relatif à <varname>PGDATA</varname>) de toute relation. Il est souvent
   utile pour ne pas avoir à se rappeler toutes les différentes règles ci-dessus.
   Gardez néanmoins en tête que cette fonction donne seulement le nom du premier
   segment du fichier principal de la relation &mdash; vous pourriez avoir
   besoin d'ajouter le numéro de segment et/ou les extensions
   <literal>_fsm</literal>, <literal>_vm</literal> ou <literal>_init</literal> pour trouver tous les
   fichiers associés avec la relation.
  </para>

  <para>
   Les fichiers temporaires (pour des opérations comme le tri de plus de données
   que ce que la mémoire peut contenir) sont créés à l'intérieur de <varname>PGDATA</varname><filename>/base/pgsql_tmp</filename>,
   ou dans un sous-répertoire <filename>pgsql_tmp</filename> du répertoire du
   tablespace si un tablespace autre que <literal>pg_default</literal> est
   indiqué pour eux. Le nom du fichier temporaire est de la forme
   <filename>pgsql_tmp<replaceable>PPP</replaceable>.<replaceable>NNN</replaceable></filename>,
   où <replaceable>PPP</replaceable> est le PID du serveur propriétaire et
   <replaceable>NNN</replaceable> distingue les différents fichiers temporaires de ce
   serveur.
  </para>

 </sect1>

 <sect1 id="storage-toast">

  <title>TOAST</title>

  <indexterm>
   <primary>TOAST</primary>
  </indexterm>
  <indexterm><primary>sliced bread</primary><see>TOAST</see></indexterm>

  <para>
   Cette section fournit un aperçu de <acronym>TOAST</acronym> (<foreignphrase>The
    Oversized-Attribute Storage Technique</foreignphrase>, la technique de
   stockage des attributs trop grands).
  </para>

  <para>
   Puisque <productname>PostgreSQL</productname> utilise une taille de page fixe
   (habituellement 8&nbsp;ko) et n'autorise pas qu'une ligne s'étende sur plusieurs
   pages. Du coup, il n'est pas possible de stocker de grandes valeurs directement
   dans les champs. Pour dépasser cette limitation, les valeurs de champ
   volumineuses sont compressées et/ou divisées en plusieurs lignes physiques. Ceci
   survient de façon transparente pour l'utilisateur, avec seulement un petit
   impact sur le code du serveur. Cette technique est connu sous l'acronyme
   affectueux de <acronym>TOAST</acronym> (ou <quote>the best thing since sliced
    bread</quote>). L'infrastructure <acronym>TOAST</acronym> est aussi utilisé pour
   améliorer la gestion des valeurs de grande taille en mémoire.
  </para>

  <para>
   Seuls certains types de données supportent <acronym>TOAST</acronym> &mdash;
   il n'est pas nécessaire d'imposer cette surcharge sur les types de données
   qui ne produisent pas de gros volumes. Pour supporter
   <acronym>TOAST</acronym>, un type de données doit avoir une représentation
   (<firstterm>varlena</firstterm>) à longueur variable, dans laquelle,
   généralement, le premier mot de quatre octets contient la longueur totale
   de la valeur en octets (en incluant ce mot). <acronym>TOAST</acronym> ne
   restreint pas le reste de la représentation de la donnée. Les
   représentations spéciales appelées collectivement <firstterm>valeurs
    <acronym>TOAST</acronym>ées</firstterm> fonctionnement en modifiant et en
   ré-interprétant ce mot de longueur initial. De ce fait, les fonctions C
   supportant un type de données <acronym>TOAST</acronym>-able doivent faire
   attention à la façon dont elles gèrent les valeurs en entrées
   potentiellement <acronym>TOAST</acronym>ées&nbsp;: une entrée pourrait ne
   pas consister en un mot longueur de quatre octets et son contenu situé
   après tant qu'elle n'a pas été <firstterm>dé-toastée</firstterm>. (Ceci se
   fait habituellement en appelant <function>PG_DETOAST_DATUM</function> avant
   toute action sur une valeur en entrée, mais dans certains cas, des
   approches plus efficaces sont possibles. Voir <xref
   linkend="xtypes-toast"/> pour plus de détails.)
  </para>

  <para>
   <acronym>TOAST</acronym> récupère deux bits du mot contenant la longueur
   d'un varlena (ceux de poids fort sur les machines big-endian, ceux de poids
   faible sur les machines little-endian), limitant du coup la taille logique
   de toute valeur d'un type de données <acronym>TOAST</acronym> à 1&nbsp;Go
   (2<superscript>30</superscript> - 1 octets). Quand les deux bits sont à
   zéro, la valeur est une valeur non <acronym>TOAST</acronym>é du type de
   données et les bits restants dans le mot contenant la longueur indiquent la
   taille total du datum (incluant ce mot) en octets. Quand le bit de poids
   fort (ou de poids faible) est à un, la valeur a un en-tête de seulement un
   octet alors qu'un en-tête normal en fait quatre. Les bits restants donnent
   la taille total du datum (incluant ce mot) en octets. Cette alternative
   supporte un stockage efficace en espace de valeurs plus petites que 127
   octets, tout en permettant au type de données de grossir jusqu'à 1 Go si
   besoin. Les valeurs avec un en-tête sur un octet ne sont pas alignées par
   rapport à une limite particulière, alors que les valeurs avec des en-têtes
   à quatre octets sont au moins alignées sur une limite de quatre
   octets&nbsp;; la suppression de cet alignement permet de gagner encore un
   peu d'espace supplémentaire qui est significatif quand on le compare au
   stockage d'une petite valeur. Voici un cas particulier. Si les bits
   restants d'un en-tête sur un octet sont tous à zéro (ce qui serait
   impossible pour une longueur auto-inclue), la valeur est un pointeur vers
   la donnée sur disque, avec d'autres alternatives décrites ci-dessous. Le
   type et la taille d'un tel <firstterm>pointeur TOAST</firstterm> sont
   déterminés par le code enregistré dans le deuxième octet du datum. Enfin,
   quand le premier ou dernier bit vaut 0 mais que le bit adjacent vaut 1, le
   contenu du datum a été compressé et doit être décompressé avant de pouvoir
   être utilisé. Dans ce cas, les bits restants du mot longueur de quatre
   octets donnent une taille totale du datum compressé, pas celles des données
   au départ. Notez que la compression est aussi possible pour les données de
   la table TOAST mais l 'en-tête varlena n'indique pas si c'est le cas
   &mdash; le contenu du pointeur <acronym>TOAST</acronym> le précise.
  </para>

  <para>
   La technique de compression utilisée soit pour les données en ligne ou hors
   ligne est sélectionnable pour chaque colonne en configurant l'option de
   colonne <literal>COMPRESSION</literal> avec les commandes <command>CREATE
   TABLE</command> et <command>ALTER TABLE</command>. La valeur par défaut
   pour les colonnes sans paramétrage spécifique correspond à la valeur du
   paramètre <xref linkend="guc-default-toast-compression"/> au moment où la
   donnée est insérée.
  </para>

  <para>
   Comme mentionné, il existe plusieurs types de pointeurs
   <acronym>TOAST</acronym>. Le type le plus ancien et le plus commun est un
   pointeur vers des données disques stockées dans une <firstterm>table
    <acronym>TOAST</acronym></firstterm> qui est séparée, bien qu'associée, de
   la table contenant le pointeur <acronym>TOAST</acronym>. Ces pointeurs
   <firstterm>sur disque</firstterm> sont créés par le code de gestion des
   <acronym>TOAST</acronym> (dans
   <filename>access/common/toast_internals.c</filename>) quand un enregistrement à
   stocker sur disque est trop gros pour être stocké comme d'habitude. Plus de
   détails sont disponibles dans <xref linkend ="storage-toast-ondisk"/>.
   Alternativement, un pointeur <acronym>TOAST</acronym> peut contenir un
   pointeur vers des données hors-ligne qui apparaissent ailleurs en mémoire.
   De tels datums ont une vie courte, et n'iront jamais sur disque. Elles sont
   cependant utiles pour éviter de copier et de traiter plusieurs fois de
   grosses données. <xref linkend="storage-toast-inmemory"/> fournit plus de
   détails.
  </para>

  <sect2 id="storage-toast-ondisk">
   <title>Stockage TOAST sur disque</title>

   <para>
    Si une des colonnes d'une table est <acronym>TOAST</acronym>-able, la table
    aura une table <acronym>TOAST</acronym> associée, dont l'OID est enregistré
    dans la colonne
    <structname>pg_class</structname>.<structfield>reltoastrelid</structfield>
    pour cette table. Les valeurs <acronym>TOAST</acronym>ées sur disque sont
    conservées dans la table <acronym>TOAST</acronym>, comme décrit en détails
    ci-dessous.
   </para>

   <para>
    Les valeurs hors-ligne sont divisées (après compression si nécessaire) en
    morceaux d'au plus <literal>TOAST_MAX_CHUNK_SIZE</literal> octets
    (par défaut, cette valeur est choisie pour que quatre morceaux de ligne
    tiennent sur une page, d'où les 2000 octets). Chaque morceau est stocké
    comme une ligne séparée dans la table <acronym>TOAST</acronym> de la
    table propriétaire. Chaque table <acronym>TOAST</acronym> contient les
    colonnes <structfield>chunk_id</structfield> (un OID identifiant la
    valeur <acronym>TOAST</acronym>ée particulière),
    <structfield>chunk_seq</structfield> (un numéro de séquence pour le
    morceau de la valeur) et <structfield>chunk_data</structfield> (la donnée
    réelle du morceau). Un index unique sur
    <structfield>chunk_id</structfield> et
    <structfield>chunk_seq</structfield> offre une récupération rapide des
    valeurs. Un pointeur datum représentant une valeur
    <acronym>TOAST</acronym>ée hors-ligne a par conséquent besoin de stocker
    l'OID de la table <acronym>TOAST</acronym> dans laquelle chercher et
    l'OID de la valeur spécifique (son <structfield>chunk_id</structfield>).
    Par commodité, les pointeurs datums stockent aussi la taille logique du
    datum (taille de la donnée originale non compressée), la taille stockée
    réelle (différente si la compression a été appliquée), et la méthode de
    compression utilisée, si nécessaire. À partir des octets d'en-tête
    varlena, la taille totale d'un pointeur datum <acronym>TOAST</acronym>
    est par conséquent de 18 octets quelque soit la taille réelle de la
    valeur représentée.
   </para>

   <para>
    Le code <acronym>TOAST</acronym> est déclenché seulement quand une valeur de ligne
    à stocker dans une table est plus grande que <symbol>TOAST_TUPLE_THRESHOLD</symbol> octets (habituellement
    2&nbsp;ko). Le code <acronym>TOAST</acronym> compressera et/ou déplacera les valeurs
    de champ hors la ligne jusqu'à ce que la valeur de la ligne soit plus petite que
    <symbol>TOAST_TUPLE_TARGET</symbol> octets  (habituellement là-aussi
    2&nbsp;ko) ou que plus aucun gain ne puisse être réalisé.
    Lors d'une opération UPDATE, les valeurs des champs non modifiées sont habituellement
    préservées telles quelles&nbsp;; donc un UPDATE sur une ligne avec des valeurs hors
    ligne n'induit pas de coûts à cause de <acronym>TOAST</acronym> si aucune des valeurs
    hors-ligne n'est modifiée.
   </para>

   <para>
    Le code <acronym>TOAST</acronym> connaît quatre stratégies différentes pour stocker
    les colonnes <acronym>TOAST</acronym>-ables&nbsp;:

    <itemizedlist>
     <listitem>
      <para>
       <literal>PLAIN</literal> empêche soit la compression soit le stockage
       hors-ligne&nbsp;; de plus, il désactive l'utilisation d'en-tête sur
       un octet pour les types varlena. Ceci est la seule stratégie possible
       pour les colonnes des types de données non
       <acronym>TOAST</acronym>-ables.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>EXTENDED</literal> permet à la fois la compression et le
       stockage hors-ligne. Ceci est la valeur par défaut de la plupart des
       types de données <acronym>TOAST</acronym>-ables. La compression sera tentée en
       premier, ensuite le stockage hors-ligne si la ligne est toujours trop
       grande.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>EXTERNAL</literal> autorise le stockage hors-ligne mais pas la
       compression. L'utilisation d'<literal>EXTERNAL</literal> rendra plus rapides les
       opérations sur des sous-chaînes d'importantes colonnes de type
       <type>text</type> et <type>bytea</type> (au dépens d'un
       espace de stockage accrus) car ces opérations sont optimisées pour
       récupérer seulement les parties requises de la valeur hors-ligne
       lorsqu'elle n'est pas compressée.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>MAIN</literal> autorise la compression mais pas le stockage
       hors-ligne. (En réalité le stockage hors-ligne sera toujours réalisé
       pour de telles colonnes mais seulement en dernier ressort s'il n'existe
       aucune autre solution pour diminuer suffisamment la taille de la ligne
       pour qu'elle tienne sur une page.)
      </para>
     </listitem>
    </itemizedlist>

    Chaque type de données <acronym>TOAST</acronym>-able spécifie une stratégie par défaut
    pour les colonnes de ce type de donnée, mais la stratégie pour une colonne d'une table
    donnée peut être modifiée avec <link linkend="sql-altertable"><command>ALTER
      TABLE ... SET STORAGE</command></link>.
   </para>

   <para>
    <symbol>TOAST_TUPLE_TARGET</symbol> peut être ajusté pour chaque table en
    utilisant <link linkend="sql-altertable"><command>ALTER TABLE ... SET
      (toast_tuple_target = N)</command></link>
   </para>

   <para>
    Cette combinaison a de nombreux avantages comparés à une approche plus directe
    comme autoriser le stockage des valeurs de lignes sur plusieurs pages. En
    supposant que les requêtes sont habituellement qualifiées par comparaison avec
    des valeurs de clé relativement petites, la grosse partie du travail de
    l'exécuteur sera réalisée en utilisant l'entrée principale de la ligne. Les
    grandes valeurs des attributs <acronym>TOAST</acronym>és seront seulement récupérées
    (si elles sont sélectionnées) au moment où l'ensemble de résultats est
    envoyé au client. Ainsi, la table principale est bien plus petite
    et un plus grand nombre de ses lignes tiennent dans le cache du tampon partagé,
    ce qui ne serait pas le cas sans aucun stockage hors-ligne.
    Le tri l'utilise aussi, et les tris seront plus souvent réalisés entièrement
    en mémoire. Un petit test a montré qu'une table contenant des pages HTML
    typiques ainsi que leurs URL étaient stockées en à peu près la moitié de la
    taille des données brutes en incluant la table <acronym>TOAST</acronym> et que la
    table principale contenait moins de 10&nbsp;% de la totalité des données (les
    URL et quelques petites pages HTML). Il n'y avait pas de différence à l'exécution
    en comparaison avec une table non <acronym>TOAST</acronym>ée, dans laquelle toutes les
    pages HTLM avaient été coupées à 7&nbsp;ko pour tenir.
   </para>
  </sect2>

  <sect2 id="storage-toast-inmemory">
   <title>Stockage TOAST en mémoire, hors-ligne</title>

   <para>
    Les pointeurs <acronym>TOAST</acronym> peuvent pointer vers des données
    qui ne sont pas sur disque, mais ailleurs, dans la mémoire du processus
    serveur en cours d'exécution. De toute évidence, de tels pointeurs ont
    une durée de vie courte, mais ils n'en restent pas moins utiles. Il
    existe actuellement deux cas&nbsp;: les pointeurs vers des données
    <firstterm>indirectes</firstterm> et les pointeurs vers des données
    <firstterm>étendues</firstterm>.
   </para>

   <para>
    Les pointeurs <acronym>TOAST</acronym> indirectes pointent simplement vers
    une valeur varlena dite <foreignphrase>non-indirect</foreignphrase> en
    mémoire. Ce cas a été créé à la base comme un PoC (<foreignphrase>Proof of
     Concept</foreignphrase>), mais il est actuellement utilisé lors du
    décodage logique pour éviter d'avoir potentiellement à créer des
    enregistrements physiques dépassant 1 Go (ce que le déplacement des
    valeurs hors-ligne du champ dans l'enregistrement pourrait faire).
    L'intérêt est limité car le création du datum pointeur est totalement
    responsable de la survie de la donnée référencée tant que le pointeur
    existe, et aucune infrastructure n'a été mise en place pour aider à ça.
   </para>

   <para>
    Les pointeurs <acronym>TOAST</acronym> étendus sont utiles pour les types
    de données complexes dont la représentation sur disque n'est pas
    particulièrement adaptée pour un traitement. Par exemple, la représentation
    varlena standard d'un tableau <productname>PostgreSQL</productname> inclut
    des informations sur les dimensions, un champ de bits pour les éléments
    NULL s'il y en a, et enfin les valeurs de tous les éléments dans l'ordre.
    Quand l'élément est lui-même de longueur variable, la seule façon de
    trouver l'élément <replaceable>N</replaceable> est de parcourir tous les
    éléments précédents. Cette représentation est appropriée pour le stockage
    sur disque car elle prend peu de place mais pour le traitement du tableau,
    il est mieux d'avoir une représentation <quote>étendue</quote> ou
    <quote>déconstruite</quote> pour laquelle l'emplacement de chaque élément
    est identifié. Le mécanisme du pointeur <acronym>TOAST</acronym> supporte
    ce besoin en autorisant un Datum passé par référencer à pointer vers soit
    une valeur varlena standard (la représentation sur disque) soit un pointeur
    <acronym>TOAST</acronym> vers une représentation étendue quelque part en
    mémoire. Les détails de cette représentation étendue sont à la discrétion
    du type de données, bien qu'elle doive avoir un en-tête standard et
    accepter les autres prérequis de l'API indiqués dans
    <filename>src/include/utils/expandeddatum.h</filename>. Les fonctions C
    travaillant avec le type de données doivent choisir de gérer une ou l'autre
    représentation. Les fonctions qui ne connaissant pas la représentation
    étendue, et qui de ce fait appliquent <function>PG_DETOAST_DATUM</function>
    à leurs données en entrée, recevront automatiquement la représentation
    varlena traditionnelle. De ce fait, le support d'une représentation étendue
    peut se faire petit à petit, une fonction à la fois.
   </para>

   <para>
    Les pointeurs <acronym>TOAST</acronym> vers des valeurs étendues sont
    encore divisés en pointeurs <firstterm>read-write</firstterm>
    (lecture/écriture) et <firstterm>read-only</firstterm> (lecture seule). La
    représentation pointée est la même dans les deux cas, mais une fonction
    qui reçoit un pointeur read-write est autorisée à modifier directement la
    valeur référencée alors qu'une fonction qui reçoit un pointeur read-only
    ne l'est pas&nbsp;; elle doit tout d'abord créer une copie si elle veut
    avoir une version modifiée de la valeur. Cette distinction et certaines
    conventions associées rendent possible d'éviter des copies inutiles de
    valeurs étendues pendant l'exécution de la requête.
   </para>

   <para>
    Pour tous les types de pointeurs <acronym>TOAST</acronym> en mémoire, le
    code de gestion des <acronym>TOAST</acronym> s'assurer qu'aucun datum
    pointeur ne puisse être enregistré par erreur sur disque. Les pointeurs
    <acronym>TOAST</acronym> en mémoire sont automatiquement étendus en des
    valeurs varlena en ligne tout à fait standards avant leur enregistrement
    &mdash; puis potentiellement convertis en pointeurs
    <acronym>TOAST</acronym> sur disque si l'enregistrement devient trop gros.
   </para>
  </sect2>
 </sect1>

 <sect1 id="storage-fsm">

  <title>Carte des espaces libres</title>

  <indexterm>
   <primary>Free Space Map</primary>
  </indexterm>
  <indexterm><primary>FSM</primary><see>Free Space Map</see></indexterm>

  <para>
   Chaque table et index, en dehors des index hash, a une carte des espaces libres
   (appelée aussi <acronym>FSM</acronym>, acronyme de <foreignphrase>Free Space
    Map</foreignphrase>) pour conserver la trace des emplacements disponibles dans
   la relation. Elle est stockée dans un fichier séparé du fichier des données. Le
   nom de fichier est le numéro relfilenode suivi du suffixe
   <literal>_fsm</literal>. Par exemple, si le relfilenode d'une relation est
   12345, la FSM est stockée dans un fichier appelé
   <filename>12345_fsm</filename>, dans le même répertoire que celui utilisé pour le
   fichier des données.
  </para>

  <para>
   La carte des espaces libres est organisée comme un arbre de pages
   <acronym>FSM</acronym>. Les pages <acronym>FSM</acronym> de niveau bas stockent
   l'espace libre disponible dans chaque page de la relation. Les niveaux
   supérieurs agrégent l'information des niveaux bas.
  </para>

  <para>
   À l'intérieur de chaque page <acronym>FSM</acronym> se trouve un arbre binaire
   stocké dans un tableau avec un octet par nœud. Chaque nœud final
   représente une page de la relation, ou une page FSM de niveau bas. Dans chaque
   nœud non final, la valeur la plus haute des valeurs enfants est stockée.
   Du coup, la valeur maximum de tous les nœuds se trouve à la racine.
  </para>

  <para>
   Voir <filename>src/backend/storage/freespace/README</filename> pour plus de
   détails sur la façon dont la <acronym>FSM</acronym> est structurée, et comment
   elle est mise à jour et recherchée. Le module <xref linkend="pgfreespacemap"/>
   peut être utilisé pour examiner l'information stockée dans les cartes d'espace
   libre.
  </para>

 </sect1>

 <sect1 id="storage-vm">

  <title>Carte de visibilité</title>

  <indexterm>
   <primary>Carte de visibilité</primary>
  </indexterm>
  <indexterm><primary>VM</primary><see>Carte de visibilité</see></indexterm>

  <para>
   Chaque relation a une carte de visibilité (<acronym>VM</acronym> acronyme de
   <foreignphrase>Visibility Map</foreignphrase>) pour garder trace des pages
   contenant seulement des lignes connues pour être visibles par toutes les
   transactions actives&nbsp;; elle conserve aussi la liste des blocs contenant
   uniquement des lignes gelées. Elle est stockée en dehors du fichier de données dans
   un fichier séparé nommé suivant le numéro relfilenode de la relation, auquel
   est ajouté le suffixe <literal>_vm</literal>. Par exemple, si le relfilenode
   de la relation est 12345, la VM est stockée dans un fichier appelé
   <filename>12345_vm</filename>, dans le même répertoire que celui du fichier
   de données. Notez que les index n'ont pas de VM.
  </para>

  <para>
   La carte de visibilité enregistre deux bits pour chaque bloc de la table.
   Le premier bit, s'il vaut 1, indique si le bloc associé ne contient
   que des enregistrements visibles ou, pour le dire autrement, si le bloc ne
   contient aucune ligne devait être nettoyée par un VACUUM. Cette information
   peut aussi être utilisée par les <link
   linkend="indexes-index-only-scans"><firstterm>parcours d'index
     seul</firstterm></link> pour répondre à des requêtes n'utilisant que les
   informations stockées dans les entrées de l'index. Le deuxième bit, quand il
   est
   The second bit, s'il vaut 1, signifie que toutes les lignes du bloc associé
   ont été gelées. Cela signifie que même un vacuum anti-wraparound n'a pas
   besoin de traiter ce bloc.
  </para>

  <para>
   Chaque fois qu'un bit est à 1, la condition est vraie à coup sûr. Par contre,
   dans le cas contraire, la condition peut être vraie comme fausse. Les bits de la
   carte de visibilité ne sont initialisés que par le VACUUM, mais sont
   désinitialisés par toutes opérations de modification des données sur une page.
  </para>

  <para>
   Le module <xref linkend="pgvisibility"/> peut être utilisé pour examiner les
   informations enregistrées dans la carte de visibilité.
  </para>

 </sect1>

 <sect1 id="storage-init">

  <title>Fichier d'initialisation</title>

  <indexterm>
   <primary>Fichier d'initialisation</primary>
  </indexterm>

  <para>
   Chaque table non journalisée et chaque index d'une table non journalisée
   disposent d'un fichier d'initialisation. Il s'agit d'une table ou d'un index
   vide du type approprié. Quand une table non journalisée doit être
   réinitialisée à cause d'un crash, le fichier d'initialisation est copié sur
   le fichier principal, et les autres fichiers de cette table sont supprimés
   (ils seront de nouveau créés automatiquement si nécessaire).
  </para>

 </sect1>

 <sect1 id="storage-page-layout">

  <title>Emplacement des pages de la base de données</title>

  <para>
   Cette section fournit un aperçu du format des pages utilisées par les tables et
   index de <productname>PostgreSQL</productname>.<footnote>
    <para>
     Actuellement, l'utilisation de ce format de page n'est pas requis, que ce
     soit pour les méthodes d'accès aux tables comme aux index. La méthode
     d'accès aux tables <literal>heap</literal> utilise toujours ce format.
     Toutes les méthodes existantes d'accès aux index utilisent le format
     basique mais les données conservées dans les pages de métadonnées ne
     suivent généralement pas les règles de placement des éléments.
    </para>
   </footnote>
   Les séquences et les tables <acronym>TOAST</acronym> sont formatées comme des
   tables standards.
  </para>

  <para>
   Dans l'explication qui suit, un <firstterm>octet</firstterm> contient huit
   bits. De plus, le terme <firstterm>élément</firstterm> fait référence à une
   valeur de données individuelle qui est stockée dans une page. Dans une table,
   un élément est une ligne&nbsp;; dans un index, un élément est une entrée
   d'index.
  </para>

  <para>
   Chaque table et index est stocké comme un tableau de <firstterm>pages</firstterm> d'une
   taille fixe (habituellement 8&nbsp;ko, bien qu'une taille de page différente
   peut être sélectionnée lors de la compilation du serveur). Dans une table,
   toutes les pages sont logiquement équivalentes pour qu'un élément (ligne)
   particulier puisse être stocké dans n'importe quelle page. Dans les index, la
   première page est généralement réservée comme <firstterm>métapage</firstterm> contenant
   des informations de contrôle, et il peut exister différents types de pages à
   l'intérieur de l'index, suivant la méthode d'accès à l'index. Les tables ont
   aussi une carte de visibilité dans un fichier de suffixe <literal>_vm</literal>,
   pour tracer les pages dont on sait qu'elles ne contiennent pas de lignes mortes
   et qui n'ont pas du coup besoin de VACUUM.
  </para>

  <para>
   <xref linkend="page-table"/> affiche le contenu complet d'une page. Il existe
   cinq parties pour chaque page.
  </para>

  <table tocentry="1" id="page-table">
   <title>Disposition générale d'une page</title>
   <titleabbrev>Disposition d'une page</titleabbrev>
   <tgroup cols="2">
    <colspec colnum="1" colwidth="0.5*"/>
    <colspec colnum="2" colwidth="1.5*"/>
    <thead>
     <row>
      <entry>Élément</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>

     <row>
      <entry>PageHeaderData</entry>
      <entry>Longueur de 24 octets. Contient des informations générales sur la page y compris
       des pointeurs sur les espaces libres.</entry>
     </row>

     <row>
      <entry>ItemIdData</entry>
      <entry>Tableau d'identifiants d'élément pointant vers les éléments réels.
       Chaque enregistrement est une paire (décalage, longueur). 4 octets par
       élément.</entry>
     </row>

     <row>
      <entry>Free space</entry>
      <entry>L'espace non alloué. Les pointeurs de nouveaux éléments sont alloués
       à partir du début de cette région, les nouveaux éléments à partir de la
       fin.</entry>
     </row>

     <row>
      <entry>Items</entry>
      <entry>Les éléments eux-mêmes.</entry>
     </row>

     <row>
      <entry>Special space</entry>
      <entry>Données spécifiques des méthodes d'accès aux index. Différentes
       méthodes stockent différentes données. Vide pour les tables
       ordinaires.</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>

   Les 24 premiers octets de chaque page consistent en un en-tête de page
   (<structname>PageHeaderData</structname>). Son format est détaillé dans
   <xref linkend="pageheaderdata-table"/>. Le premier champ trace l'entrée la
   plus récente dans les journaux de transactions pour cette page. Le deuxième
   champ contient la somme de contrôle de la page si <xref
   linkend="app-initdb-data-checksums"/> est activé. Ensuite se trouve un champ
   sur deux octets contenant des drapeaux. Il est suivi de champs entiers sur
   deux octets (<structfield>pd_lower</structfield>,
   <structfield>pd_upper</structfield> et
   <structfield>pd_special</structfield>). Ils contiennent les décalages en
   octets du début de page vers le début de l'espace non alloué, vers la fin de
   l'espace non alloué et vers le début de l'espace spécial. Les deux octets
   suivants de l'en-tête de page,
   <structfield>pd_pagesize_version</structfield>, enregistrent la taille de la
   page et un indicateur de version. À partir de la version 8.3 de
   <productname>PostgreSQL</productname>, le numéro de version est 4&nbsp;;
   <productname>PostgreSQL</productname> 8.1 et 8.2 ont utilisé le numéro de version 3&nbsp;;
   <productname>PostgreSQL</productname> 8.0 a utilisé le numéro de version 2&nbsp;;
   <productname>PostgreSQL</productname> 7.3 et 7.4 ont utilisé le numéro de
   version 1&nbsp;; les versions précédentes utilisaient le numéro de version 0.
   (La disposition fondamentale de la page et le format de l'en-tête n'ont pas changé
   dans la plupart de ces versions mais la disposition de l'en-tête des lignes de tête a
   changé.) La taille de la page est seulement présente comme vérification
   croisée&nbsp;; il n'existe pas de support pour avoir plus d'une taille de
   page dans une installation.
   Le dernier champ est une aide indiquant si traiter la page serait
   profitable&nbsp;: il garde l'information sur le plus vieux XMAX non traité
   de la page.
  </para>

  <table tocentry="1" id="pageheaderdata-table">
   <title>Disposition de PageHeaderData</title>
   <titleabbrev>Disposition de PageHeaderData</titleabbrev>
   <tgroup cols="4">
    <colspec colnum="1" colwidth="0.8*"/>
    <colspec colnum="2" colwidth="0.5*"/>
    <colspec colnum="3" colwidth="0.5*"/>
    <colspec colnum="4" colwidth="2.2*"/>
    <thead>
     <row>
      <entry>Champ</entry>
      <entry>Type</entry>
      <entry>Longueur</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>pd_lsn</entry>
      <entry>PageXLogRecPtr</entry>
      <entry>8 octets</entry>
      <entry>LSN&nbsp;: octet suivant le dernier octet de l'enregistrement
       WAL pour la dernière modification de cette page</entry>
     </row>
     <row>
      <entry>pd_checksum</entry>
      <entry>uint16</entry>
      <entry>2 octets</entry>
      <entry>Somme de contrôle de la page</entry>
     </row>
     <row>
      <entry>pd_flags</entry>
      <entry>uint16</entry>
      <entry>2 octets</entry>
      <entry>Bits d'état</entry>
     </row>
     <row>
      <entry>pd_lower</entry>
      <entry>LocationIndex</entry>
      <entry>2 octets</entry>
      <entry>Décalage jusqu'au début de l'espace libre</entry>
     </row>
     <row>
      <entry>pd_upper</entry>
      <entry>LocationIndex</entry>
      <entry>2 octets</entry>
      <entry>Décalage jusqu'à la fin de l'espace libre</entry>
     </row>
     <row>
      <entry>pd_special</entry>
      <entry>LocationIndex</entry>
      <entry>2 octets</entry>
      <entry>Décalage jusqu'au début de l'espace spécial</entry>
     </row>
     <row>
      <entry>pd_pagesize_version</entry>
      <entry>uint16</entry>
      <entry>2 octets</entry>
      <entry>Taille de la page et disposition de l'information du numéro de
       version</entry>
     </row>
     <row>
      <entry>pd_prune_xid</entry>
      <entry>TransactionId</entry>
      <entry>4 bytes</entry>
      <entry>Plus vieux XMAX non traité sur la page, ou zéro si aucun</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Tous les détails se trouvent dans
   <filename>src/include/storage/bufpage.h</filename>.
  </para>

  <para>

   Après l'en-tête de la page se trouvent les identificateurs d'élément
   (<type>ItemIdData</type>), chacun nécessitant quatre octets. Un identificateur
   d'élément contient un décalage d'octet vers le début d'un élément, sa
   longueur en octets, et quelques bits d'attributs qui affectent son
   interprétation. Les nouveaux identificateurs d'éléments sont alloués si
   nécessaire à partir du début de l'espace non alloué. Le nombre d'identificateurs
   d'éléments présents peut être déterminé en regardant
   <structfield>pd_lower</structfield>, qui est augmenté pour allouer un nouvel
   identificateur. Comme un identificateur d'élément n'est jamais déplacé tant qu'il
   n'est pas libéré, son index pourrait être utilisé sur une base à long terme
   pour référencer un élément, même quand l'élément lui-même est déplacé le long de
   la page pour compresser l'espace libre. En fait, chaque pointeur vers un
   élément (<type>ItemPointer</type>, aussi connu sous le nom de
   <type>CTID</type>), créé par <productname>PostgreSQL</productname> consiste
   en un numéro de page et l'index de l'identificateur d'élément.

  </para>

  <para>

   Les éléments eux-mêmes sont stockés dans l'espace alloué en marche arrière,
   à partir de la fin de l'espace non alloué. La structure exacte varie
   suivant le contenu de la table. Les tables et les séquences utilisent toutes
   les deux une structure nommée <type>HeapTupleHeaderData</type>, décrite
   ci-dessous.

  </para>

  <para>

   La section finale est la <quote>section spéciale</quote> qui pourrait
   contenir tout ce que les méthodes d'accès souhaitent stocker. Par exemple,
   les index b-tree stockent des liens vers les enfants gauche et droit de la
   page ainsi que quelques autres données sur la structure de l'index. Les
   tables ordinaires n'utilisent pas du tout de section spéciale (indiquée
   en configurant <structfield>pd_special</structfield> à la taille de la page).

  </para>

  <para>
   <xref linkend="storage-page-layout-figure"/> illustre comment ces parties
   sont placées dans un bloc.
  </para>

  <figure id="storage-page-layout-figure">
   <title>Disposition d'une page</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="images/pagelayout.svg" format="SVG" width="100%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <sect2 id="storage-tuple-layout">

   <title>Disposition d'une ligne de table</title>

   <para>
    Toutes les lignes de la table sont structurées de la même façon. Il existe
    un en-tête à taille fixe (occupant 23 octets sur la plupart des machines),
    suivi par un bitmap NULL optionnel, un champ ID de l'objet optionnel et les
    données de l'utilisateur. L'en-tête est détaillé dans <xref
    linkend="heaptupleheaderdata-table"/>. Les données réelles de l'utilisateur
    (les colonnes de la ligne) commencent au décalage indiqué par
    <structfield>t_hoff</structfield>, qui doit toujours être un multiple de la distance
    MAXALIGN pour la plateforme. Le bitmap NULL est seulement présent si le bit
    <firstterm>HEAP_HASNULL</firstterm> est initialisé dans
    <structfield>t_infomask</structfield>. S'il est présent, il commence juste
    après l'en-tête fixe et occupe suffisamment d'octets pour avoir un bit par colonne
    de données (c'est-à-dire le nombre de bits identique au nombre d'attribut dans
    <structfield>t_infomask2</structfield>). Dans cette
    liste de bits, un bit 1 indique une valeur non NULL, un bit 0 une valeur
    NULL. Quand le bitmap n'est pas présent, toutes les colonnes sont supposées
    non NULL. L'ID de l'objet est seulement présent si le bit
    <firstterm>HEAP_HASOID_OLD</firstterm> est initialisé dans
    <structfield>t_infomask</structfield>. S'il est présent, il apparaît juste
    avant la limite <structfield>t_hoff</structfield>. Tout ajout nécessaire pour faire
    de <structfield>t_hoff</structfield> un multiple de MAXALIGN apparaîtra entre le
    bitmap NULL et l'ID de l'objet. (Ceci nous assure en retour que l'ID de
    l'objet est convenablement aligné.)

   </para>

   <table tocentry="1" id="heaptupleheaderdata-table">
    <title>Disposition de HeapTupleHeaderData</title>
    <titleabbrev>Disposition de HeapTupleHeaderData</titleabbrev>
    <tgroup cols="4">
     <colspec colnum="1" colwidth="0.5*"/>
     <colspec colnum="2" colwidth="0.5*"/>
     <colspec colnum="3" colwidth="0.5*"/>
     <colspec colnum="4" colwidth="2.5*"/>
     <thead>
      <row>
       <entry>Champ</entry>
       <entry>Type</entry>
       <entry>Longueur</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>t_xmin</entry>
       <entry>TransactionId</entry>
       <entry>4 octets</entry>
       <entry>XID d'insertion</entry>
      </row>
      <row>
       <entry>t_xmax</entry>
       <entry>TransactionId</entry>
       <entry>4 octets</entry>
       <entry>XID de suppression</entry>
      </row>
      <row>
       <entry>t_cid</entry>
       <entry>CommandId</entry>
       <entry>4 octets</entry>
       <entry>CID d'insertion et de suppression (surcharge avec t_xvac)</entry>
      </row>
      <row>
       <entry>t_xvac</entry>
       <entry>TransactionId</entry>
       <entry>4 octets</entry>
       <entry>XID pour l'opération VACUUM déplaçant une version de ligne</entry>
      </row>
      <row>
       <entry>t_ctid</entry>
       <entry>ItemPointerData</entry>
       <entry>6 octets</entry>
       <entry>TID en cours pour cette version de ligne ou pour une version plus
        récente</entry>
      </row>
      <row>
       <entry>t_infomask2</entry>
       <entry>uint16</entry>
       <entry>2 octets</entry>
       <entry>nombre d'attributs et quelques bits d'état</entry>
      </row>
      <row>
       <entry>t_infomask</entry>
       <entry>uint16</entry>
       <entry>2 octets</entry>
       <entry>différents bits d'options (flag bits)</entry>
      </row>
      <row>
       <entry>t_hoff</entry>
       <entry>uint8</entry>
       <entry>1 octet</entry>
       <entry>décalage vers les données utilisateur</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    Tous les détails sont disponibles dans
    <filename>src/include/access/htup_details.h</filename>.
   </para>

   <para>

    Interpréter les données réelles peut seulement se faire avec des informations
    obtenues à partir d'autres tables, principalement
    <structname>pg_attribute</structname>. Les valeurs clés nécessaires pour
    identifier les emplacements des champs sont
    <structfield>attlen</structfield> et <structfield>attalign</structfield>.
    Il n'existe aucun moyen pour obtenir directement un attribut particulier,
    sauf quand il n'y a que des champs de largeur fixe et aucune colonne NULL.
    Tout ceci est emballé dans les fonctions
    <firstterm>heap_getattr</firstterm>, <firstterm>fastgetattr</firstterm>
    et <firstterm>heap_getsysattr</firstterm>.
   </para>
   <para>

    Pour lire les données, vous avez besoin d'examinez chaque attribut à son
    tour. Commencez par vérifier si le champ est NULL en fonction du bitmap NULL.
    S'il l'est, allez au suivant. Puis, assurez-vous que vous avez le bon
    alignement. Si le champ est un champ à taille fixe, alors tous les octets
    sont placés simplement. S'il s'agit d'un champ à taille variable
    (attlen = -1), alors c'est un peu plus compliqué. Tous les types de données
    à longueur variable partagent la même structure commune d'en-tête,
    <type>struct varlena</type>, qui inclut la longueur totale de la valeur stockée
    et quelques bits d'option. Suivant les options, les données pourraient être
    soit dans la table de base soit dans une table <acronym>TOAST</acronym>&nbsp;;
    elles pourraient aussi être compressées (voir <xref
    linkend="storage-toast"/>).

   </para>
  </sect2>
 </sect1>

</chapter>
