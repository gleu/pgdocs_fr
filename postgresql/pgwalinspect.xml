<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="pgwalinspect" xreflabel="pg_walinspect">
 <title>pg_walinspect &mdash; inspection bas niveau des journaux de
  transactions</title>

 <indexterm zone="pgwalinspect">
  <primary>pg_walinspect</primary>
 </indexterm>

 <para>
  Le module <filename>pg_walinspect</filename> fournit des fonctions SQL qui
  vous permettent d'inspecter à bas niveau, le contenu des journaux de
  transactions d'une instance <productname>PostgreSQL</productname> en cours
  d'exécution, ce qui est utile pour le débogage, l'analyse, la création de
  rapports ou à des fins pédagogiques. Il est similaire à <xref
  linkend="pgwaldump"/>, mais est accessible via SQL plutôt que via un
  utilitaire séparé.
 </para>

 <para>
  Toutes les fonctions de ce module fournissent des informations sur les WAL
  utilisant l'identifiant de la timeline actuelle du serveur.
 </para>

 <note>
  <para>
   Les fonctions <filename>pg_walinspect</filename> sont souvent appelées
   en utilisant un argument LSN qui indique l'emplacement auquel un enregistrement
   WAL d'intérêt <emphasis>commence</emphasis>. Néanmoins, certaines fonctions,
   comme
   <function><link linkend="pg-logical-emit-message">pg_logical_emit_message</link></function>,
   renvoie le LSN <emphasis>après</emphasis> l'enregistrement qui a été inséré.
  </para>
 </note>

 <tip>
  <para>
   Toutes les fonctions de <filename>pg_walinspect</filename> qui affichent des
   informations sur les enregistrements qui tombent dans un certain intervalle
   LSN acceptent des arguments <replaceable>end_lsn</replaceable> qui sont après
   le LSN actuel du serveur. Utiliser un <replaceable>end_lsn</replaceable>
   <quote>du futur</quote> ne renverra pas une erreur.
  </para>
  <para>
   Il pourrait être intéressant de fournir la valeur
   <literal>FFFFFFFF/FFFFFFFF</literal> (la valeur maximale d'un
   <type>pg_lsn</type>) comme argument <replaceable>end_lsn</replaceable>.
   C'est équivalent à fournir un argument <replaceable>end_lsn</replaceable>
   correspondant au LSN actuel du serveur.
  </para>
 </tip>

 <para>
  Par défaut, l'utilisation de ces fonctions est réservée aux superutilisateurs
  et aux membres du rôle <literal>pg_read_server_files</literal>. L'accès peut
  être accordé par des superutilisateurs à d'autres utilisateurs grâce à la
  commande <command>GRANT</command>.
 </para>

 <sect2 id="pgwalinspect-funcs">
  <title>Fonctions générales</title>

  <variablelist>
   <varlistentry id="pgwalinspect-funcs-pg-get-wal-record-info">
    <term>
     <function>pg_get_wal_record_info(in_lsn pg_lsn) returns record</function>
    </term>

    <listitem>
     <para>
      Obtient les informations d'un enregistrement WAL situé sur ou après
      l'argument <replaceable>in_lsn</replaceable>. Par exemple&nbsp;:
<screen>
postgres=# SELECT * FROM pg_get_wal_record_info('0/E419E28');
-[ RECORD 1 ]----+-------------------------------------------------
start_lsn        | 0/E419E28
end_lsn          | 0/E419E68
prev_lsn         | 0/E419D78
xid              | 0
resource_manager | Heap2
record_type      | VACUUM
record_length    | 58
main_data_length | 2
fpi_length       | 0
description      | nunused: 5, unused: [1, 2, 3, 4, 5]
block_ref        | blkref #0: rel 1663/16385/1249 fork main blk 364
</screen>
     </para>
     <para>
      Si <replaceable>in_lsn</replaceable> n'est pas au début d'un enregistrement
      WAL, l'information sur le prochain enregistrement WAL valide est affichée à
      la place. S'il n'y a pas d'enregistrement WAL valide, la fonction renvoie
      une erreur.
     </para>
    </listitem>
   </varlistentry>

    <varlistentry id="pgwalinspect-funcs-pg-get-wal-records-info">
    <term>
     <function>
      pg_get_wal_records_info(start_lsn pg_lsn, end_lsn pg_lsn)
     </function>
    </term>

    <listitem>
     <para>
      Obtient des informations sur tous les enregistrements WAL valides entre
      <replaceable>start_lsn</replaceable> et <replaceable>end_lsn</replaceable>.
      Renvoie une ligne par enregistrement WAL. Par exemple&nbsp;:

<screen>
postgres=# SELECT * FROM pg_get_wal_records_info('0/1E913618', '0/1E913740') LIMIT 1;
-[ RECORD 1 ]----+--------------------------------------------------------------
start_lsn        | 0/1E913618
end_lsn          | 0/1E913650
prev_lsn         | 0/1E9135A0
xid              | 0
resource_manager | Standby
record_type      | RUNNING_XACTS
record_length    | 50
main_data_length | 24
fpi_length       | 0
description      | nextXid 33775 latestCompletedXid 33774 oldestRunningXid 33775
block_ref        |
</screen>
     </para>
     <para>
      Cette fonction renvoie une erreur si
      <replaceable>start_lsn</replaceable> n'est pas disponible.
     </para>
    </listitem>
   </varlistentry>

    <varlistentry id="pgwalinspect-funcs-pg-get-wal-block-info">
    <term>
     <function>pg_get_wal_block_info(start_lsn pg_lsn, end_lsn pg_lsn, show_data boolean DEFAULT true) returns setof record</function>
    </term>

    <listitem>
     <para>
      Obtient des informations sur chaque référence de bloc à partir de tous les
      enregistrements WAL valides entre <replaceable>start_lsn</replaceable> et
      <replaceable>end_lsn</replaceable> avec une ou plusieurs références de blocs.
      Renvoie une ligne par référence de bloc par enregistrement WAL. Par
      exemple&nbsp;:
<screen>
postgres=# SELECT * FROM pg_get_wal_block_info('0/1230278', '0/12302B8');
-[ RECORD 1 ]-----+-----------------------------------
start_lsn         | 0/1230278
end_lsn           | 0/12302B8
prev_lsn          | 0/122FD40
block_id          | 0
reltablespace     | 1663
reldatabase       | 1
relfilenode       | 2658
relforknumber     | 0
relblocknumber    | 11
xid               | 341
resource_manager  | Btree
record_type       | INSERT_LEAF
record_length     | 64
main_data_length  | 2
block_data_length | 16
block_fpi_length  | 0
block_fpi_info    |
description       | off: 46
block_data        | \x00002a00070010402630000070696400
block_fpi_data    |
</screen>
     </para>
     <para>
      Cet exemple implique un enregistrement WAL qui contient seulement une
      référence de bloc, mais beaucoup d'enregistrements WAL contiennent
      plusieurs références de blocs. Les lignes en sortie de
      <function>pg_get_wal_block_info</function> sont garanties avoir une
      combinaison unique de valeurs
      <replaceable>start_lsn</replaceable> et
      <replaceable>block_id</replaceable>.
     </para>
     <para>
      Beaucoup des informations affichées ici correspondent à la sortie de
      <function>pg_get_wal_records_info</function>, en utilisant les mêmes
      arguments. Néanmoins, <function>pg_get_wal_block_info</function>
      désimbrique l'information pour chaque enregistrement WAL dans une
      forme étendue en affichant une ligne par référence de bloc, donc
      certains détails sont tracés au niveau de la référence de bloc plutôt
      qu'au niveau enregistrement. Cette structure est utile avec les
      requêtes qui tracent comment les blocs individuels changent dans le temps.
      Notez que les enregistrements sans référence de bloc (enregistrement
      WAL des <literal>COMMIT</literal>) n'auront pas de lignes renvoyées,
      donc <function>pg_get_wal_block_info</function> pourrait en fait renvoyer
      <emphasis>moins</emphasis> de lignes que
      <function>pg_get_wal_records_info</function>.
     </para>
     <para>
      Les paramètres <structfield>reltablespace</structfield>,
      <structfield>reldatabase</structfield> et
      <structfield>relfilenode</structfield> référencent respectivement
      <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.<structfield>oid</structfield>,
      <link linkend="catalog-pg-database"><structname>pg_database</structname></link>.<structfield>oid</structfield> et
      <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relfilenode</structfield>.
      Le champ <structfield>relforknumber</structfield> est le numéro de
      fork dans la relation pour la référence de bloc&nbsp;; voir
      <filename>common/relpath.h</filename> pour les détails.
     </para>
     <tip>
      <para>
       La fonction <function>pg_filenode_relation</function> (voir
       <xref linkend="functions-admin-dblocation"/>) peut vous aider à
       déterminer la relation modifiée pendant l'exécution originale.
      </para>
     </tip>
     <para>
      Il est possible que les clients évitent la surcharge de la matérialisation
      des données. Ceci peut accélérer l'exécution de la fonction. Quand
      <replaceable>show_data</replaceable> vaut <literal>false</literal>,
      les valeurs de <structfield>block_data</structfield>
      et <structfield>block_fpi_data</structfield> sont omises
      (c'est-à-dire les arguments <literal>OUT</literal>
      <structfield>block_data</structfield> et
      <structfield>block_fpi_data</structfield> valent
      <literal>NULL</literal> pour toutes les lignes renvoyées).
      À l'évidence, cette optimisation est seulement faisable pour les requêtes
      où les données de bloc ne sont pas réellement demandées.
     </para>
     <para>
      La fonction renvoie une erreur si
      <replaceable>start_lsn</replaceable> n'est pas disponible.
     </para>
    </listitem>
   </varlistentry>

    <varlistentry id="pgwalinspect-funcs-pg-get-wal-stats">
    <term>
     <function>
      pg_get_wal_stats(start_lsn pg_lsn, end_lsn pg_lsn, per_record boolean DEFAULT false)
      returns setof record
     </function>
    </term>

    <listitem>
     <para>
      Récupère les statistiques de tous les enregistrements WAL valides entre
      <replaceable>start_lsn</replaceable> et <replaceable>end_lsn</replaceable>.
      Par défaut, elle renvoie une ligne par type
      <replaceable>resource_manager</replaceable>. Lorsque
      <replaceable>per_record</replaceable> est défini sur
      <literal>true</literal>, elle renvoie une ligne par
      <replaceable>record_type</replaceable>. Par exemple&nbsp;:
<screen>
postgres=# SELECT * FROM pg_get_wal_stats('0/1E847D00', '0/1E84F500')
             WHERE count > 0 LIMIT 1 AND
                   "resource_manager/record_type" = 'Transaction';
-[ RECORD 1 ]----------------+-------------------
resource_manager/record_type | Transaction
count                        | 2
count_percentage             | 8
record_size                  | 875
record_size_percentage       | 41.23468426013195
fpi_size                     | 0
fpi_size_percentage          | 0
combined_size                | 875
combined_size_percentage     | 2.8634072910530795
</screen>
      La fonction renvoie une erreur si
      <replaceable>start_lsn</replaceable> n'est pas disponible.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 id="pgwalinspect-author">
  <title>Auteur</title>

  <para>
   Bharath Rupireddy <email>bharath.rupireddyforpostgres@gmail.com</email>
  </para>
 </sect2>

</sect1>
