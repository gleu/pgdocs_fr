<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="contrib-spi" xreflabel="spi">
 <title>spi</title>

 <indexterm zone="contrib-spi">
  <primary>SPI</primary>
  <secondary>examples</secondary>
 </indexterm>

 <para>
  Le module <application>spi</application> fournit plusieurs exemples
  fonctionnels d'utilisation de l'<link linkend="spi">interface de
   programmation du serveur (<foreignphrase>Server Programming
    Interface</foreignphrase>)</link> (<acronym>SPI</acronym>) et des
  déclencheurs. Bien que ces fonctions aient un
  intérêt certain, elles sont encore plus utiles en tant qu'exemples
  à modifier pour atteindre ses propres buts. Les fonctions sont suffisamment
  généralistes pour être utilisées avec une table quelconque, mais la création d'un
  déclencheur impose que les noms des tables et des champs soient précisés
  (comme cela est décrit ci-dessous).
 </para>

 <para>
  Chaque groupe de fonctions décrits ci-dessous est fourni comme une extension
  installable séparément.
 </para>

 <sect2>
  <title>refint &mdash; fonctions de codage de l'intégrité
   référentielle</title>

  <para>
   <function>check_primary_key()</function> et
   <function>check_foreign_key()</function> sont utilisées pour vérifier les
   contraintes de clé étrangère. (Cette fonctionnalité est dépassée depuis
   longtemps par le mécanisme interne, mais le module conserve un rôle
   d'exemple.)
  </para>

  <para>
   <function>check_primary_key()</function> vérifie la table de référence.
   Pour l'utiliser, on crée un déclencheur <literal>BEFORE INSERT OR UPDATE</literal>
   qui utilise cette fonction sur une table référençant une autre table.
   En arguments du déclencheur, on trouve&nbsp;: le nom de la colonne
   de la table référençant qui forme la clé étrangère, le nom de la table
   référencée et le nom de la colonne de la table référencée qui forme la
   clé primaire/unique. Il peut y avoir plusieurs colonnes. Pour gérer
   plusieurs clés étrangères, on crée un déclencheur pour chaque référence.
  </para>

  <para>
   <function>check_foreign_key()</function> vérifie la table référencée.
   Pour l'utiliser, on crée un déclencheur <literal>BEFORE DELETE OR UPDATE</literal>
   qui utilise cette fonction sur une table référencée par d'autres tables.
   En arguments du déclencheur, on trouve&nbsp;: le nombre de tables référençant pour
   lesquelles la fonction réalise la vérification, l'action à exécuter si une clé
   de référence est trouvée (<literal>cascade</literal> &mdash; pour supprimer
   une ligne qui référence, <literal>restrict</literal> &mdash; pour annuler la
   transaction si des clés de référence existent, <literal>setnull</literal>
   &mdash; pour initialiser les champs des clés référençant à NULL), les noms
   des colonnes de la table surveillées par le déclencheur, colonnes qui
   forment la clé primaire/unique, puis le nom de la table référençant et les noms des
   colonnes (répétés pour autant de tables référençant que cela est précisé par
   le premier argument). Les colonnes de clé
   primaire/unique doivent être marquées NOT NULL et posséder un index
   d'unicité.
  </para>

  <para>
   Il y a des exemples dans <filename>refint.example</filename>.
  </para>
 </sect2>

 <sect2>
  <title>autoinc &mdash; fonctions pour l'incrémentation automatique
   d'un champ</title>

  <para>
   <function>autoinc()</function> est un déclencheur qui stocke la prochaine valeur
   d'une séquence dans un champ de type integer. Cela recouvre quelque peu
   la fonctionnalité interne de la colonne <quote>serial</quote>, mais
   ce n'est pas strictement identique&nbsp;: <function>autoinc()</function>
   surcharge les tentatives de substitution d'une valeur différente pour ce
   champ lors des insertions et, optionnellement, peut aussi être utilisé pour
   incrémenter le champ lors des mises à jour.
  </para>

  <para>
   Pour l'utiliser, on crée un déclencheur <literal>BEFORE INSERT</literal> (ou
   en option <literal>BEFORE INSERT OR UPDATE</literal>) qui utilise cette
   fonction. Le déclencheur accepte deux arguments&nbsp;: le nom de la
   colonne de type integer à modifier et le nom de la séquence qui fournit
   les valeurs. (En fait, plusieurs paires de noms peuvent être indiquées pour
   actualiser plusieurs colonnes.)
  </para>

  <para>
   Un exemple est fourni dans <filename>autoinc.example</filename>.
  </para>

 </sect2>

 <sect2>
  <title>insert_username &mdash; fonctions pour tracer les utilisateurs qui
   ont modifié une table</title>

  <para>
   <function>insert_username()</function> est un déclencheur qui stocke le
   nom de l'utilisateur courant dans un champ texte. C'est utile pour
   savoir quel est le dernier utilisateur à avoir modifié une ligne particulière d'une
   table.
  </para>

  <para>
   Pour l'utiliser, on crée un déclencheur <literal>BEFORE INSERT</literal> et/ou
   <literal>UPDATE</literal> qui utilise cette fonction. Le déclencheur prend
   pour seul argument le nom de la colonne texte à modifier.
  </para>

  <para>
   Un exemple est fourni dans <filename>insert_username.example</filename>.
  </para>

 </sect2>

 <sect2>
  <title>moddatetime &mdash; fonctions pour tracer la date et l'heure
   de la dernière modification</title>

  <para>
   <function>moddatetime()</function> est un déclencheur qui stocke la date et
   l'heure de la dernière modification dans un champ de type
   <type>timestamp</type>. C'est utile pour savoir quand a eu lieu la
   dernière modification sur une ligne particulière d'une table.
  </para>

  <para>
   Pour l'utiliser, on crée un déclencheur <literal>BEFORE UPDATE</literal> qui
   utilise cette fonction. Le déclencheur prend pour seul argument le
   nom de la colonne de type à modifier.
   La colonne doit être de type <type>timestamp</type> ou <type>timestamp with
    time zone</type>.
  </para>

  <para>
   Un exemple est fourni dans <filename>moddatetime.example</filename>.
  </para>

 </sect2>

</sect1>
