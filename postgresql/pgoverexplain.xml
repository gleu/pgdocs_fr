<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/pgoverexplain.sgml -->

<sect1 id="pgoverexplain" xreflabel="pg_overexplain">
 <title>pg_overexplain &mdash; permet à EXPLAIN d'afficher encore plus de détails</title>

 <indexterm zone="pgoverexplain">
  <primary>pg_overexplain</primary>
 </indexterm>

 <para>
    Le module <filename>pg_overexplain</filename> étend la commande <command>EXPLAIN</command>
  avec de nouvelles options fournissant des sorties supplémentaires. Il est principalement destiné
  à aider au débogage et au développement du planificateur, plutôt qu'à une utilisation générale.
  Étant donné que ce module affiche des détails internes des structures de données du planificateur,
  il peut être nécessaire se référer au code source pour en comprendre la sortie. De plus,
  cette sortie est susceptible d'évoluer aussi souvent que les structures de données qu'elle expose.
 </para>

 <sect2 id="pgoverexplain-debug">
  <title>EXPLAIN (DEBUG)</title>

  <para>
   Lo'ption <literal>DEBUG</literal> affiche des informations diverses issues
   de l'arbre de planification qui ne sont normalement pas affichées, car elles ne sont
   pas censées être d'intérêt général. Pour chaque nœud de plan individuel, les champs suivants
   seront affichés. Voir <literal>Plan</literal> dans <literal>nodes/plannodes.h</literal>
   pour une documentation plus détaillée de ces champs.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <literal>Disabled Nodes</literal>. La commande  <command>EXPLAIN</command>
     classique détermine si un nœud est désactivé en comparant le nombre de noeuds désactivés
     à la somme de ceux des nœuds sous-jacents. Cette option affiche la valeur brute du compteur.
    </para>
   </listitem>

   <listitem>
    <para>
     <literal>Parallel Safe</literal>. Indique si un nœud de l'arbre de planification
     peut apparaître en toute sécurité sous un nœud <literal>Gather</literal> ou
     <literal>Gather Merge</literal>, indépendamment du fait qu'il y figure
     réellement ou non.
    </para>
   </listitem>

   <listitem>
    <para>
     <literal>Plan Node ID</literal>. Un identifiant interne unique pour chaque nœud
     de planification. Il est utilisé pour coordonner l'activité des requêtes parallèles.
    </para>
   </listitem>

   <listitem>
    <para>
     <literal>extParam</literal> et <literal>allParam</literal>. Informations sur les paramètres numérotés
     affectant ce nœud de plan ou ses enfants. En mode texte, ces champs ne sont affichés que s’ils
     ne sont pas vides.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Une fois par requête, l’option <literal>DEBUG</literal> affichera également les champs suivants.
   Voir <literal>PlannedStmt</literal> dans <literal>nodes/plannodes.h</literal> pour plus de détails.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <literal>Command Type</literal>. Par exemple, <literal>select</literal>
     ou <literal>update</literal>.
    </para>
   </listitem>

   <listitem>
    <para>
     <literal>Flags</literal>. Une liste séparée par des virgules des membres
     booléens de la structure <literal>PlannedStmt</literal> ayant la valeur
     <literal>true</literal>. Cela inclut :
     <literal>hasReturning</literal>, <literal>hasModifyingCTE</literal>,
     <literal>canSetTag</literal>, <literal>transientPlan</literal>,
     <literal>dependsOnRole</literal>, <literal>parallelModeNeeded</literal>.
    </para>
   </listitem>

   <listitem>
    <para>
     <literal>Subplans Needing Rewind</literal>. Identifiants entiers des sous-plans
     susceptibles de devoir être relus par l'exécuteur.
    </para>
   </listitem>

   <listitem>
    <para>
     <literal>Relation OIDs</literal>. OIDs des relations dont dépend ce plan.
    </para>
   </listitem>

   <listitem>
    <para>
     <literal>Executor Parameter Types</literal>. OID de type pour chaque paramètre d'exécuteur
     (par exemple, lorsqu'une boucle imbriquée est choisie et qu'un paramètre est utilisé pour
     transmettre une valeur à une recherche d'index interne). Cela n'inclut pas les paramètres
     fournis par l'utilisateur à une instruction préparée.
    </para>
   </listitem>

   <listitem>
    <para>
     <literal>Parse Location</literal>. Indique l'emplacement dans la chaîne de requête
     transmise au planificateur où le texte de la requête peut être trouvé.
     Peut valoir <literal>Unknown</literal> dans certains contextes.
     Sinon, cela peut être
     <literal>NNN to end</literal> pour certain entier <literal>NNN</literal> ou
     <literal>NNN for MMM bytes</literal> pour certains entiers
     <literal>NNN</literal> et <literal>MMM</literal>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 id="pgoverexplain-range-table">
  <title>EXPLAIN (RANGE_TABLE)</title>

  <para>
   L’option <literal>RANGE_TABLE</literal> affiche les informations de l’arbre de plan
   concernant spécifiquement la table de portée (range table) de la requête. Les entrées
   de la table de portée correspondent grossièrement aux éléments figurant dans la clause
   <literal>FROM</literal> de la requête, mais il existe de nombreuses exceptions. Par exemple,
   les sous-requêtes jugées inutiles peuvent être supprimées entièrement de la table de portée,
   tandis que l’expansion des héritages ajoute des entrées pour les tables filles non nommées
   directement dans la requête.
  </para>

  <para>
   Les entrées de la table de portée sont généralement référencées dans le plan de requête
   par un indice de table de portée (RTI). Les nœuds de plan qui référencent un ou
   plusieurs RTI seront annotés à l'aide de l'un des champs suivants :
   <literal>Scan RTI</literal>, <literal>Nominal RTI</literal>,
   <literal>Exclude Relation RTI</literal>, <literal>Append RTIs</literal>.
  </para>

  <para>
   De plus, la requête dans son ensemble peut maintenir des listes d'indices de table de portée
   nécessaires à divers traitements. Ces listes seront affichées une fois par requête
   et étiquetées comme <literal>Unprunable RTIs</literal> ou <literal>Result RTIs</literal>.
   En mode texte, ces champs ne sont affichés que s'ils ne sont pas vides.
  </para>

  <para>
   Enfin, et surtout, l'option <literal>RANGE_TABLE</literal> affichera un
   vidage complet de la table de portée de la requête. Chaque entrée est annotée
   avec son indice, son type (par exemple, <literal>relation</literal>,
    <literal>subquery</literal>, ou <literal>join</literal>), suivi du contenu de
   divers champs supplémentaires. Certains de ces champs ne sont affichés que
   pour certains types d'entrés. Par exemple, <literal>Eref</literal> est affiché
   pour tous les types d'entrées, mais <literal>CTE Name</literal> l'est uniquement
   pour les entrées de type <literal>cte</literal>.
  </para>

  <para>
   Pour plus d'informations sur les entrées de la table de portée, se référer à la définition
   de <literal>RangeTblEntry</literal> dans <literal>nodes/plannodes.h</literal>.
  </para>
 </sect2>

 <sect2 id="pgoverexplain-author">
  <title>Auteur</title>

  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
 </sect2>

</sect1>
