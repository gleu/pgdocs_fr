<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/custom-scan.sgml -->

<chapter id="custom-scan">
 <title>Écrire un module de parcours personnalisé</title>

 <indexterm zone="custom-scan">
  <primary>module de parcours personnalisé</primary>
  <secondary>module pour</secondary>
 </indexterm>

 <para>
  <productname>PostgreSQL</productname> supporte un ensemble de
  facilités expérimentales qui sont destinées à permettre à
  des modules d'extension d'ajouter de nouveaux types de parcours au
  système. Contrairement aux <link linkend="fdwhandler">wrapper de
  données distantes</link>, qui sont seulement en charge de savoir
  comment parcourir leurs propres tables distantes, un module de parcours
  personnalisé peut fournir une méthode alternative de parcours de
  n'importe quelle relation du système. Typiquement, la motivation pour
  écrire un module de parcours personnalisé serait d'utiliser des
  optimisations non supportées par le système de base, telles que la
  mise en cache ou certaines formes d'accélération matérielles. Ce
  chapitre décrit les grandes lignes de l'écriture d'un mouveau module
  de parcours personnalisé.
 </para>

 <para>
  Développer un nouveau type de parcours personnalisé est un
  processus en trois étapes. Premièrement, lors de la planification,
  il est nécessaire de générer des chemins d'accès représentant un
  parcours utilisant la stratégie proposée. Deuxièmement, si l'un de
  ces chemins d'accès est sélectionné par le planificateur comme
  la stratégie optimale pour parcourir une relation particulière,
  le chemin d'accès doit être converti en plan. Finalement, il doit
  être possible d'exécuter le plan et de générer le même résultat
  qui aurait été généré pour tous les autres chemins d'accès visant
  la même relation.
 </para>

 <sect1 id="custom-scan-path">
  <title>Créer des parcours de chemin personnalisés</title>

  <para>
    Un module de parcours personnalisé ajoutera classiquement des chemins
    pour une relation de base en mettant en place le hook suivant, qui est
    appelé après que le code de base ait généré ce qu'il pense être
    l'ensemble complet et correct des chemins d'accès pour la relation.
<programlisting>
typedef void (*set_rel_pathlist_hook_type) (PlannerInfo *root,
                                            RelOptInfo *rel,
                                            Index rti,
                                            RangeTblEntry *rte);
extern PGDLLIMPORT set_rel_pathlist_hook_type set_rel_pathlist_hook;
</programlisting>
  </para>

  <para>
   Bien que cette fonction puisse être utilisée pour examiner, modifier,
   ou supprimer des chemins générés par le système de base, un
   module de parcours personnalisé se limitera généralement lui
   même à générer des objets <structname>CustomPath</structname>
   et à les ajouter à <literal>rel</literal> en utilisant la fonction
   <function>add_path</function>. Le module de parcours personnalisé à
   la charge d'initialiser l'objet <structname>CustomPath</structname>,
   qui est déclaré comme suit&nbsp;:
<programlisting>
typedef struct CustomPath
{
    Path      path;
    uint32    flags;
    List     *custom_paths;
    List     *custom_private;
    const CustomPathMethods *methods;
} CustomPath;
</programlisting>
  </para>

  <para>
   <structfield>path</structfield> doit être initialisé comme pour
   tous les autres chemins, y compris l'estimation du nombre de lignes,
   coût de départ et coût total, et l'ordre de tri fourni par ce
   chemin. <structfield>flags</structfield> est un masque de bits, qui
   devrait inclure <literal>CUSTOMPATH_SUPPORT_BACKWARD_SCAN</literal>
   si le chemin personnalisé supporte le parcours inversé
   et <literal>CUSTOM_SUPPORT_MARK_RESTORE</literal> si
   il peut supporter le marquage et la restauration. Les
   deux fonctionnalités sont optionnelles. Une liste
   optionnelle <structfield>custom_paths</structfield>
   est une liste de nœuds <structname>Path</structname>
   utilisés par ce nœud de chemin personnalisé; ils seront
   transformés en nœuds <structname>Plan</structname> par le
   planificateur. <structfield>custom_private</structfield>
   peut être utilisé pour stocker les données privées
   du chemin personnalisé. Les données privées devraient
   être stockées dans une forme qui puissent être traitée par
   <literal>nodeToString</literal>, de telle manière que les routines de
   debuggage qui essaient d'imprimer le chemin personnalisé fonctionnent
   comme prévu. <structfield>methods</structfield> doit pointer vers un
   objet (généralement alloué statiquement) implémentant les méthodes
   obligatoires d'un chemin personnalisé, qui sont actuellement de deux,
   comme détaillé ci-dessous.
  </para>

  <para>
   Un module de parcours personnalisé peut également fournir des
   chemins de jointure. De la même manière que pour les relations
   de base, un tel chemin doit produire la même sortie qui serait
   normalement produite par la jointure qu'il remplace. Pour réaliser
   ceci le module de jointure devrait mettre en place le hook suivant,
   puis à l'intérieur de cette fonction, créer un ou des chemins
   <structname>CustomPath</structname> pour la relation de jointure.
<programlisting>
typedef void (*set_join_pathlist_hook_type) (PlannerInfo *root,
                                             RelOptInfo *joinrel,
                                             RelOptInfo *outerrel,
                                             RelOptInfo *innerrel,
                                             JoinType jointype,
                                             JoinPathExtraData *extra);
extern PGDLLIMPORT set_join_pathlist_hook_type set_join_pathlist_hook;
</programlisting>

   Cette fonction sera appelée de manière répétée pour la même
   relation de jointure, avec différentes combinaisons de relations
   internes ou externes; la fonction à la charge de minimiser la
   duplication des travaux.
  </para>

  <sect2 id="custom-scan-path-callbacks">
  <title>Fonctions callbacks d'un parcours de chemin personnalisé</title>

  <para>
<programlisting>
Plan *(*PlanCustomPath) (PlannerInfo *root,
                         RelOptInfo *rel,
                         CustomPath *best_path,
                         List *tlist,
                         List *clauses,
                         List *custom_plans);
</programlisting>
    Converti un chemin personnalisé en un plan finalisé. La valeur de
    retour sera généralement un objet <literal>CustomScan</literal>,
    que la fonction callback doit alloué et initialisé. Voir <xref
    linkend="custom-scna-plan"/> pour plus de détails.
   </para>

   <para>
<programlisting>
void (*TextOutCustomPath) (StringInfo str,
                           const CustomPath *node);
</programlisting>
    Génère une sortie additionnelle lorsque la fonction
    <function>nodeToString</function> est appelée avec ce chemin
    personnalisé. Cette fonction callback est optionnelle. Dans
    la mesure où <function>nodeToString</function> enverra sur
    la sortie tous les champs de la structure qu'il voit, y compris
    <structfield>custom_private</structfield>, ceci est seulement utile
    si <structname>CustomPath</structname> est actuellement inclus dans
    une structure plus large contenant des champs additionnels.
   </para>
  </sect2>
 </sect1>

 <sect1 id="custom-scan-plan">
  <title>Créer des parcours de plans personnalisés</title>

  <para>
    Un parcours personnalisé est représenté dans un arbre de plans
    finalisé en utilisant la structure suivante&nbsp;:
<programlisting>
typedef struct CustomScan
{
    Scan      scan;
    uint32    flags;
    List     *custom_plans;
    List     *custom_exprs;
    List     *custom_private;
    List     *custom_scan_tlist;
    Bitmapset *custom_relids;
    const CustomScanMethods *methods;
} CustomScan;
</programlisting>
  </para>

  <para>
   <structfield>scan</structfield> doit être initialisé
   comme pour tous les autres parcours, y compris le coût
   estimé, les listes cibles, les qualifications, et ainsi de
   suite. <structfield>flags</structfield> est un masque de bits avec la
   même signification que dans <structname>CustomPath</structname>.
   <structfield>custom_plans</structfield> peut
   être utilisé pour stocker des nœuds enfants de type
   <structname>Plan</structname>. <structfield>custom_exprs</structfield>
   devrait être utilisé pour stocker des arbres d'expressions
   qui devront être corrigés par <filename>setrefs.c</filename>
   et <filename>subselect.c</filename>, tandis que
   <structfield>custom_private</structfield> devrait être
   utilisé pour stocker d'autres données privées qui sont
   seulement utilisées par le module de parcours personnalisé
   lui-même. <structfield>custom_scan_tlist</structfield> peut être
   à NIL lors du parcours d'une relation de base, indiquant que le
   parcours personnalisé renvoi des lignes parcourues qui correspondent
   au type des lignes de la relation de base. Dans le cas contraire
   il s'agit d'une liste de cibles décrivant les lignes actuellement
   parcourues. <structfield>custom_scan_tlist</structfield> devrait être
   fourni pour les jointures, et peut être fourni pour les parcours
   dont le module de parcours personnalisé peut calculer certaines
   expressions non variables. <structfield>custom_relids</structfield>
   est positionné par le code du serveur sur l'ensemble des relations
   (index de l'ensemble des tables) que ce nœud de parcours gère; sauf
   lorsque ce parcours remplace une jointure, il aura alors un seul
   membre. <structfield>methods</structfield> doit pointer sur un objet
   (généralement alloué statiquement) implémentant les méthodes
   requises d'un parcours personnalisé, lesquelles sont détaillées
   ci-dessous.
  </para>

  <para>
   Lorsqu'un <structname>CustomScan</structname> parcourt une simple
   relation; <structfield>scan.scanrelid</structfield> doit être l'index
   dans l'ensemble des tables de la table à parcourir. Lorsqu'il
   remplace une jointure, <structfield>scan.scanrelid</structfield>
   devrait être à zéro.
  </para>

  <para>
   Les arbres de plan doivent pouvoir être dupliqués en utilisant
   la fonction <function>copyObject</function>, aussi les données
   stockées dans les champs <quote>custom</quote> doivent consister
   en des nœuds que cette fonction peut gérer. De plus, les
   modules de parcours personnalisés ne peuvent pas substituer une
   structure plus large qui incorporerait une structure de type
   <structname>CustomScan</structname>, comme il est possible
   pour les structures <structname>CustomPath</structname> ou
   <structname>CustomScanState</structname>.
  </para>

  <sect2 id="custom-scan-plan-callbacks">
   <title>Fonctions callbacks d'un plan de parcours personnalisé</title>
   <para>
<programlisting>
Node *(*CreateCustomScanState) (CustomScan *cscan);
</programlisting>
	Alloue une structure <structname>CustomScanState</structname>
	pour ce <structname>CustomScan</structname>. L'allocation actuelle
	sera souvent plus grande que requis pour une structure ordinaire
	<structname>CustomScanState</structname>, car beaucoup de modules
	voudront incorporer celui-ci comme le premier champ d'une structure
	plus large. La valeur renvoyée doit avoir la marque du nøeud et le
	champ <structfield>methods</structfield> positionnés correctement, les
	autres champs devraient être laissés à zéro à ce stade; après que
	la fonction <function>ExecInitCustomScan</function> ait effectué une
	initialisation basique, la fonction <function>BeginCustomScan</function>
	sera appelée pour permettre au module de parcours personnalisé
	d'effectuer ce qu'il a besoin de faire.
   </para>

   <para>
<programlisting>
void (*TextOutCustomScan) (StringInfo str,
                           const CustomScan *node);
</programlisting>
    Générer une sortie additionnelle lorsque la fonction
    <function>nodeToString</function> est appelée sur ce nœud de
    plan personnalisé. Cette fonction callback est facultative. Dans
    la mesure où la fonction <function>nodeToString</function> enverra
    automatiquement sur la sortie l'ensemble des champs de la structure,
    y compris les sous-structures des champs <quote>custom</quote>,
    il n'y a généralement pas besoin de cette fonction callback.
   </para>
  </sect2>
 </sect1>

 <sect1 id="custom-scan-execution">
  <title>Exécution de parcours personnalisés</title>

  <para>
   Lorsqu'un <structfield>CustomScan</structfield> est
   exécuté, l'état de son exécution est représenté par un
   <structfield>CustomScanState</structfield>, qui est déclaré comme
   suit&nbsp;:
<programlisting>
typedef struct CustomScanState
{
    ScanState ss;
    uint32    flags;
    const CustomExecMethods *methods;
} CustomScanState;
</programlisting>
  </para>

  <para>
   <structfield>ss</structfield> est initialisé comme
   tous les autres états de parcours, sauf que si le
   parcours est pour une jointure plutôt qu'une relation,
   <literal>ss.ss_currentRelation</literal> est laissé à
   NULL. <structfield>flags</structfield> est un masque de bits avec la
   même signification que dans <structname>CustomPath</structname> et
   <structname>CustomScan</structname>. <structfield>methods</structfield>
   doit pointer vers un objet (généralement alloué statiquement)
   implémentant les méthodes requises d'un état de parcours
   personnalisé, qui sont détaillées ci-dessous. Typiquement, une
   structure <structname>CustomScanState</structname>, qui n'a pas
   besoin de supporter la fonction <function>copyObject</function>,
   sera actuellement une structure plus grande incorporant la structure
   ci-dessus comme premier membre.
  </para>

  <sect2 id="custom-scan-execution-callbacks">
   <title>Fonction callbacks d'exécution d'un parcours personnalisé</title>

   <para>
<programlisting>
void (*BeginCustomScan) (CustomScanState *node,
                         EState *estate,
                         int eflags);
</programlisting>
	Complète l'initialisation de la structure
	<structname>CustomScanState</structname>. Les champs standards ont été
	initialisés par la fonction <function>ExecInitCustomScan</function>,
	mais tous les champs privés devraient être initialisés ici.
   </para>

   <para>
<programlisting>
TupleTableSlot *(*ExecCustomScan) (CustomScanState *node);
</programlisting>
    Récupère la ligne suivante du parcours. Si il
    existe des lignes restantes, la fonction devrait remplir
    <literal>pg_ResultTupleSlot</literal> avec la ligne suivante dans
    le sens actuel du parcours, puis renvoyer le slot de la ligne. Dans
    le cas contraire, <literal>NULL</literal> ou un slot vide devrait
    être renvoyé.
   </para>

   <para>
<programlisting>
void (*EndCustomScan) (CustomScanState *node);
</programlisting>
    Nettoie les données privées associées avec le
    <literal>CustomScanState</literal>. Cette méthode est obligatoire,
    mais elle n'a pas besoin de faire quoi que ce soit si il n'y a
    pas de données associées ou des données qui seront nettoyées
    automatiquement.
   </para>

   <para>
<programlisting>
void (*ReScanCustomScan) (CustomScanState *node);
</programlisting>
    Repositionne au début le parcours en cours et prépare à reparcourir
    la relation.
   </para>

   <para>
<programlisting>
void (*MarkPosCustomScan) (CustomScanState *node);
</programlisting>
    Enregistre la position du parcours courant de telle manière
    qu'elle puisse être restaurée par la fonction callback
    <function>RestrPosCustomScan</function>. Cette fonction callback
    est facultative, et n'a besoin d'être fournie que si le drapeau
    <literal>CUSTOMPATH_SUPPORT_MARK_RESTORE</literal> est positionné.
   </para>

   <para>
<programlisting>
void (*RestrPosCustomScan) (CustomScanState *node);
</programlisting>
    Restaure la position précédente du parcours telle que sauvegardée
    par la fonction <function>MarkPosCustomScan</function>. Cette
    fonction callback est facultative, et n'a besoin d'être fournie
    que si le drapeau <literal>CUSTOMPATH_SUPPORT_MARK_RESTORE</literal>
    est positionné.
   </para>

   <para>
<programlisting>
void (*ExplainCustomScan) (CustomScanState *node,
                           List *ancestors,
                           ExplainState *es);
</programlisting>
    Envoi sur la sortie des informations additionnelles pour la commande
    <command>EXPLAIN</command> d'un nøeud du plan d'un parcours
    personnalisé. Cette fonction est facultative. Les données communes
    enregistrées dans la structure <structname>ScanState</structname>,
    tel que la liste des cibles et la relation parcourue, seront
    montrés même sans cette fonction callback, mais la fonction permet
    l'affichage d'états additionnels, privés.
   </para>
  </sect2>
 </sect1>
</chapter>
