<?xml version="1.0" encoding="UTF-8"?>

<chapter id="managing-databases">

 <title>Administration des bases de données</title>

 <indexterm zone="managing-databases"><primary>base de données</primary></indexterm>

 <para>
  Chaque instance d'un serveur <productname>PostgreSQL</productname> gère une
  ou plusieurs bases de données. Les bases de données sont donc le niveau
  hiérarchique le plus élevé pour organiser des objets <acronym>SQL</acronym>
  (<quote>objets de base de données</quote>). Ce chapitre décrit les
  propriétés des bases de données et comment les créer, les administrer et les
  détruire.
 </para>

 <sect1 id="manage-ag-overview">

  <title>Aperçu</title>

  <indexterm zone="manage-ag-overview">
   <primary>schéma</primary>
  </indexterm>

  <para>
   Un petit nombre d'objets, comme les rôles, les bases de données et les
   tablespaces, sont définis au niveau de l'instance et stockés dans le
   tablespace <literal>pg_global</literal>. À l'intérieur de l'instrance
   résident plusieurs bases de données, isolées les unes des autres mais
   pouvant accéder aux objets du niveau instance. Dans chaque base se trouvent
   plusieurs schémas contenant des objets comme les tables et les fonctions.
   La hiérarchie complète est donc&nbsp;: instance, base de données, schéma,
   table (et autre type d'objet comme une fonction).
  </para>

  <para>
   Lors de la connexion à un serveur de bases de données, un client doit
   indiquer le nom de la base dans sa demande de connexion. Il n'est pas
   possible d'accéder à plus d'une base par connexion. Néanmoins, les clients
   peuvent ouvrir plusieurs connexions à la même base ou à des bases
   différentes. La sécurité au niveau de la base a deux composantes&nbsp;: le
   contrôle d'accès (voir <xref linkend="auth-pg-hba-conf"/>), géré au niveau
   de la connexion, et le contrôle d'autorisation (voir <xref
   linkend="ddl-priv"/>), géré par le système de droits. Les
   <foreignphrase>foreign data wrappers</foreignphrase> (voir <xref
   linkend="postgres-fdw"/>) permettent à des objets d'une base d'agir comme
   des proxys pour les objets d'une autre base ou d'une autre instance.
   L'ancien module dblink (voir <xref linkend="dblink"/>) fournit la même
   fonctionnalité. Par défaut, tous les utilisateurs peuvent se connecter à
   toutes les bases en utilisant toutes les méthodes d'authentification.
  </para>

  <para>
   Si une instance <productname>PostgreSQL</productname> doit contenir des
   projets différents, sans relation, ou des utilisateurs qui, pour la plupart
   ne devraient pas être au courant des autres, il est recommandé de les
   placer dans des bases séparées et d'ajuster les autorisations et les
   contrôles d'accès de façon approprié. Si les projets et les utilisateurs
   sont liés et, de ce fait, devraient être capables d'utiliser les ressources
   des autres, ils devraient être placés dans la même base mais probablement
   dans des schémas différents&nbsp;; ceci fournit une structure modulaire
   avec une isolation par espace de nom et un contrôle d'autorisation. <xref
   linkend="ddl-schemas"/> fournit plus d'informations sur la gestion des
   schémas.
  </para>

  <para>
   Quand plusieurs bases sont créées dans la même instance, il est conseillé
   de faire bien attention que les bénéfices dépassent les risques et
   limitations. En particulier, l'impact qu'avoir des journaux de transactions
   partagés (voir <xref linkend="wal"/>) a sur les options de sauvegarde et de
   restauration. Alors que des bases individuelles dans l'instance sont
   isolées de la perspective de l'utilisateur, elles sont fortement liées du
   point de vue de l'administrateur de bases de données.
  </para>

  <para>
   Les bases de données sont créées avec la commande <command>CREATE
   DATABASE</command> (voir la <xref linkend="manage-ag-createdb"/>) et
   détruites avec la commande <command>DROP DATABASE</command> (voir la <xref
   linkend="manage-ag-dropdb"/>). Pour déterminer l'ensemble des bases de
   données existantes, examinez le catalogue système
   <structname>pg_database</structname>, par exemple <synopsis>SELECT datname
   FROM pg_database;</synopsis> La méta-commande <literal>\l</literal> du
   programme <xref linkend="app-psql"/> et l'option en ligne de commande
   <option>-l</option> sont aussi utiles pour afficher les bases de données
   existantes.
  </para>

  <note>
   <para>
    Le standard <acronym>SQL</acronym> appelle les bases de données des
    <quote>catalogues</quote> mais il n'y a aucune différence en pratique.
   </para>
  </note>

 </sect1>

 <sect1 id="manage-ag-createdb">

  <title>Création d'une base de données</title>

  <indexterm><primary>CREATE DATABASE</primary></indexterm>

  <para>
   Pour pouvoir créer une base de données, il faut que le serveur
   <productname>PostgreSQL</productname> soit lancé (voir la <xref
   linkend="server-start"/>).
  </para>

  <para>
   Les bases de données sont créées à l'aide de la commande SQL <xref
   linkend="sql-createdatabase"/>&nbsp;: <synopsis>CREATE DATABASE
   <replaceable>nom</replaceable>;</synopsis> ou
   <replaceable>nom</replaceable> suit les règles habituelles pour les
   identifiants <acronym>SQL</acronym>. Le rôle actuel devient automatiquement
   le propriétaire de la nouvelle base de données. C'est au propriétaire de la
   base de données qu'il revient de la supprimer par la suite (ce qui supprime
   aussi tous les objets qu'elle contient, même s'ils ont un propriétaire
   différent).
  </para>

  <para>
   La création de bases de données est une opération protégée. Voir la <xref
   linkend="role-attributes"/> sur la manière d'attribuer des droits.
  </para>

  <para>
   Comme vous devez être connecté au serveur de base de données pour exécuter
   la commande <command>CREATE DATABASE</command>, reste à savoir comment
   créer la première base de données d'un site. La première base de données
   est toujours créée par la commande <command>initdb</command> quand l'aire
   de stockage des données est initialisée (voir la <xref
   linkend="creating-cluster"/>). Cette base de données est appelée
   <literal>postgres</literal>.
   <indexterm><primary>postgres</primary></indexterm> Donc, pour créer la
   première base de données <quote>ordinaire</quote>, vous pouvez vous
   connecter à <literal>postgres</literal>.
  </para>

  <para>
   Une deuxième base de données,
   <literal>template1</literal>,<indexterm><primary>template1</primary></indexterm>
   est aussi créée durant l'initialisation du cluster de bases de données.
   Quand une nouvelle base de données est créée à l'intérieur du groupe,
   <literal>template1</literal> est généralement cloné. Cela signifie que tous
   les changements effectués sur <literal>template1</literal> sont propagés à
   toutes les bases de données créées ultérieurement. À cause de cela, évitez
   de créer des objets dans <literal>template1</literal> sauf si vous voulez
   les propager à chaque nouvelle base de données créée. Pour plus de détails,
   voir la <xref linkend="manage-ag-templatedbs"/>.
  </para>

  <para>
   Pour plus de confort, il existe aussi un programme que vous pouvez exécuter
   à partir du shell pour créer de nouvelles bases de données,
   <command>createdb</command>.<indexterm><primary>createdb</primary></indexterm>
   <synopsis>createdb <replaceable
   class="parameter">nom_base</replaceable></synopsis>
   <command>createdb</command> ne fait rien de magique. Il se connecte à la
   base de données <literal>postgres</literal> et exécute la commande
   <command>CREATE DATABASE</command>, exactement comme ci-dessus. La page de
   référence sur <xref linkend="app-createdb"/> contient les détails de son
   invocation. Notez que <command>createdb</command> sans aucun argument crée
   une base de donnée portant le nom de l'utilisateur courant.
  </para>

  <note>
   <para>
    Le <xref linkend="client-authentication"/> contient des informations sur
    la manière de restreindre l'accès à une base de données.
   </para>
  </note>

  <para>
   Parfois, vous voulez créer une base de données pour quelqu'un d'autre. Ce
   rôle doit devenir le propriétaire de la nouvelle base de données afin de
   pouvoir la configurer et l'administrer lui-même. Pour faire ceci, utilisez
   l'une des commandes suivantes&nbsp;:
<programlisting>CREATE DATABASE <replaceable>nom_base</replaceable> OWNER <replaceable>nom_role</replaceable>;</programlisting>
   dans l'environment SQL ou
<programlisting>createdb -O <replaceable>nom_role</replaceable> <replaceable>nom_base</replaceable></programlisting>
   dans le shell. Seul le super-utilisateur est autorisé à créer une base de
   données pour quelqu'un d'autre c'est-à-dire pour un rôle dont vous n'êtes
   pas membre.
  </para>
 </sect1>

 <sect1 id="manage-ag-templatedbs">
  <title>Bases de données modèles</title>

  <para>
   En fait, <command>CREATE DATABASE</command> fonctionne en copiant une base
   de données préexistante. Par défaut, cette commande copie la base de
   données système standard
   <literal>template1</literal>.<indexterm><primary>template1</primary></indexterm>
   Ainsi, cette base de données est le <quote>modèle</quote> à partir duquel
   de nouvelles bases de données sont créées. Si vous ajoutez des objets à
   <literal>template1</literal>, ces objets seront copiés dans les bases de
   données utilisateur créées ultérieurement. Ce comportement permet
   d'apporter des modifications locales au jeu standard d'objets des bases de
   données. Par exemple, si vous installez le langage de procédures
   <application>PL/Perl</application> dans <literal>template1</literal>,
   celui-ci sera automatiquement disponible dans les bases de données
   utilisateur sans qu'il soit nécessaire de faire quelque chose de spécial au
   moment où ces bases de données sont créées.
  </para>

  <para>
   Il y a une seconde base de données système standard appelée
   <literal>template0</literal>.<indexterm><primary>template0</primary></indexterm>
   Cette base de données contient les mêmes données que le contenu initial de
   <literal>template1</literal>, c'est-à-dire seulement les objets standards
   prédéfinis dans votre version de <productname>PostgreSQL</productname>.
   <literal>template0</literal> ne devrait jamais être modifiée après que le
   cluster des bases de données ait été créé. En indiquant à <command>CREATE
   DATABASE</command> de copier <literal>template0</literal> au lieu de
   <literal>template1</literal>, vous pouvez créer une base de données
   utilisateur <quote>vierge</quote> (une base où aucun objet défini par un
   utilisateur n'existe et où les objets systèmes n'ont pas été modifiés) qui
   ne contient aucun des ajouts locaux à <literal>template1</literal>. Ceci
   est particulièrement pratique quand on restaure une sauvegarde réalisé avec
   <literal>pg_dump</literal>&nbsp;: le script de dump devrait être restauré
   dans une base de données vierge pour être sûr de recréer le contenu correct
   de la base de données sauvegardée, sans survenue de conflits avec des
   objets qui auraient été ajoutés à <literal>template1</literal>.
  </para>

  <para>
   Une autre raison habituelle de copier <literal>template0</literal> au lieu
   de <literal>template1</literal> est que les nouvelles options d'encodage et
   de locale peuvent être indiquées lors de la copie de
   <literal>template0</literal>, alors qu'une copie de
   <literal>template1</literal> doit utiliser les même options. Ceci est dû au
   fait que <literal>template1</literal> pourrait contenir des données
   spécifiques à l'encodage ou à la locale alors que
   <literal>template0</literal> n'est pas modifiable.
  </para>

  <para>
   Pour créer une base de données à partir de <literal>template0</literal>, on
   écrit&nbsp;:
<programlisting>CREATE DATABASE <replaceable>nom_base</replaceable> TEMPLATE template0;</programlisting>
   dans l'environnement SQL ou
<programlisting>createdb -T template0 <replaceable>nom_base</replaceable></programlisting>
   dans le shell.
  </para>

  <para>
   Il est possible de créer des bases de données modèles supplémentaires et, à
   vrai dire, on peut copier n'importe quelle base de données d'un cluster en
   la désignant comme modèle pour la commande <command>CREATE
   DATABASE</command>. Cependant, il importe de comprendre, que ceci n'est pas
   (encore) à prendre comme une commande <quote><command>COPY
   DATABASE</command></quote> de portée générale. La principale limitation est
   qu'aucune autre session ne peut être connectée à la base source tant
   qu'elle est copiée. <command>CREATE DATABASE</command> échouera si une
   autre connexion existe à son lancement. Lors de l'opération de copie, les
   nouvelles connexions à la base source sont empêchées.
  </para>

  <para>
   Deux drapeaux utiles existent dans
   <literal>pg_database</literal><indexterm><primary>pg_database</primary></indexterm>
   pour chaque base de données&nbsp;: les colonnes
   <literal>datistemplate</literal> et <literal>datallowconn</literal>.
   <literal>datistemplate</literal> peut être positionné à vrai pour indiquer
   qu'une base de données a vocation à servir de modèle à <command>CREATE
   DATABASE</command>. Si ce drapeau est positionné à vrai, la base de données
   peut être clonée par tout utilisateur ayant le droit
   <literal>CREATEDB</literal>&nbsp;; s'il est positionné à faux, seuls les
   super-utilisateurs et le propriétaire de la base de données peuvent la
   cloner. Si <literal>datallowconn</literal> est positionné à faux, alors
   aucune nouvelle connexion à cette base de données n'est autorisée (mais les
   sessions existantes ne sont pas terminées simplement en positionnant ce
   drapeau à faux). La base de données <literal>template0</literal> est
   normalement marquée <literal>datallowconn = false</literal> pour empêcher
   qu'elle ne soit modifiée. Aussi bien <literal>template0</literal> que
   <literal>template1</literal> devraient toujours être marquées
   <literal>datistemplate = true</literal>.
  </para>

  <note>
   <para>
    <literal>template1</literal> et <literal>template0</literal> n'ont pas de
    statut particulier en dehors du fait que <literal>template1</literal> est
    la base de données source par défaut pour la commande <command>CREATE
    DATABASE</command>. Par exemple, on pourrait supprimer
    <literal>template1</literal> et la recréer à partir de
    <literal>template0</literal> sans effet secondaire gênant. Ce procédé peut
    être utile lorsqu'on a encombré <literal>template1</literal> d'objets
    inutiles. (Pour supprimer <literal>template1</literal>, cette dernière
    doit avoir le statut <literal>pg_database.datistemplate</literal> à
    <literal>false</literal>.
   </para>

   <para>
    La base de données <literal>postgres</literal> est aussi créé quand le
    groupe est initialisé. Cette base de données a pour but de devenir une
    base de données par défaut pour la connexion des utilisateurs et
    applications. C'est une simple copie de <literal>template1</literal> et
    peut être supprimée et re-créée si nécessaire.
   </para>
  </note>
 </sect1>

 <sect1 id="manage-ag-config">
  <title>Configuration d'une base de données</title>

  <para>
   Comme il est dit dans le <xref linkend="runtime-config"/>, le serveur
   <productname>PostgreSQL</productname> offre un grand nombre de variables de
   configuration à chaud. Vous pouvez spécifier des valeurs par défaut,
   valables pour une base de données particulière, pour nombre de ces
   variables.
  </para>

  <para>
   Par exemple, si pour une raison quelconque vous voulez désactiver
   l'optimiseur <acronym>GEQO</acronym> pour une base de donnée particulière,
   vous n'avez pas besoin de le désactiver pour toutes les bases de données ou
   de faire en sorte que tout client se connectant exécute la commande
   <literal>SET geqo TO off;</literal>. Pour appliquer ce réglage par défaut à
   la base de données en question, vous pouvez exécuter la commande&nbsp;:
   <programlisting>ALTER DATABASE ma_base SET geqo TO off;</programlisting>
   Cela sauvegarde le réglage (mais ne l'applique pas immédiatement). Lors des
   connexions ultérieures à cette base de données, tout se passe comme si la
   commande <literal>SET geqo TO off</literal> est exécutée juste avant de
   commencer la session. Notez que les utilisateurs peuvent cependant modifier
   ce réglage pendant la session&nbsp;; il s'agit seulement d'un réglage par
   défaut. Pour annuler un tel réglage par défaut, utilisez <literal>ALTER
   DATABASE <replaceable>nom_base</replaceable> RESET
   <replaceable>nomvariable</replaceable></literal>.
  </para>
 </sect1>

 <sect1 id="manage-ag-dropdb">
  <title>Détruire une base de données</title>

  <para>
   Les bases de données sont détruites avec la commande <xref
   linkend="sql-dropdatabase"/>&nbsp;:<indexterm><primary>DROP
   DATABASE</primary></indexterm>
<synopsis>DROP DATABASE <replaceable>nom</replaceable>;</synopsis>
   Seul le propriétaire de la base de données ou un superutilisateur peut
   supprimer une base de données. Supprimer une base de données supprime tous
   les objets qui étaient contenus dans la base. La destruction d'une base de
   données ne peut pas être annulée.
  </para>

  <para>
   Vous ne pouvez pas exécuter la commande <command>DROP DATABASE</command> en
   étant connecté à la base de données cible. Néanmoins, vous pouvez être
   connecté à une autre base de données, ceci incluant la base
   <literal>template1</literal>. <literal>template1</literal> pourrait être la
   seule option pour supprimer la dernière base utilisateur d'un groupe donné.
  </para>

  <para>
   Pour une certaine facilité, il existe un script shell qui supprime les
   bases de données, <xref
   linkend="app-dropdb"/>&nbsp;:<indexterm><primary>dropdb</primary></indexterm>
<synopsis>dropdb <replaceable class="parameter">nom_base</replaceable></synopsis>
   (Contrairement à <command>createdb</command>, l'action par défaut n'est pas
   de supprimer la base possédant le nom de l'utilisateur en cours.)
  </para>
 </sect1>

 <sect1 id="manage-ag-tablespaces">
  <title>Tablespaces</title>

  <indexterm zone="manage-ag-tablespaces">
   <primary>tablespace</primary>
  </indexterm>

  <para>
   Les tablespaces dans <productname>PostgreSQL</productname> permettent aux
   administrateurs de bases de données de définir l'emplacement dans le
   système de fichiers où seront stockés les fichiers représentant les objets
   de la base de données. Une fois créé, un tablespace peut être référencé
   par son nom lors de la création d'objets.
  </para>

  <para>
   En utilisant les tablespaces, un administrateur peut contrôler les
   emplacements sur le disque d'une installation
   <productname>PostgreSQL</productname>. Ceci est utile dans au moins deux
   cas. Tout d'abord, si la partition ou le volume sur lequel le groupe a été
   initialisé arrive à court d'espace disque mais ne peut pas être étendu, un
   tablespace peut être créé sur une partition différente et utilisé jusqu'à
   ce que le système soit reconfiguré.
  </para>

  <para>
   Deuxièmement, les tablespaces permettent à un administrateur d'utiliser sa
   connaissance des objets de la base pour optimiser les performances. Par
   exemple, un index qui est très utilisé peut être placé sur un disque très
   rapide et disponible, comme un périphérique mémoire. En même temps, une
   table stockant des données archivées et peu utilisée ou dont les
   performances ne portent pas à conséquence pourra être stockée sur un disque
   système plus lent, moins cher.
  </para>

  <warning>
   <para>
    Même s'ils sont positionnés en dehors du répertoire de données principal
    de PostgreSQL, les tablespaces font partie intégrante de l'instance et
    <emphasis>ne peuvent pas</emphasis> être considérés comme des ensembles
    autonomes de fichiers de données et ne peuvent par conséquent pas être
    rattachés à une autre instance ou sauvegardés individuellement.  De la
    même façon, si un tablespace est perdu (fichier supprimé, défaillance du
    disque dur, etc),  l'instance pourrait devenir illisible ou même incapable
    de démarrer.  Positionner un tablespace sur un système de fichiers
    temporaire comme un disque RAM met en péril la fiabilité de l'instance
    entière.
   </para>
  </warning>

  <para>
   Pour définir un tablespace, utilisez la commande <xref
   linkend="sql-createtablespace"/>, par exemple&nbsp;:
   <indexterm><primary>CREATE TABLESPACE</primary></indexterm>

<programlisting>CREATE TABLESPACE espace_rapide LOCATION '/ssd1/postgresql/data';</programlisting>
   L'emplacement doit être un répertoire existant, dont le propriétaire doit
   être l'utilisateur du système d'exploitation démarrant
   <productname>PostgreSQL</productname>. Tous les objets créés par la suite
   dans le tablespace seront stockés dans des fichiers contenus dans ce
   répertoire. Cet emplacement ne doit pas être amovible ou volatile, sinon
   l'instance pourrait cesser de fonctionner si le tablespace venait à
   manquer ou être perdu.
  </para>

  <note>
   <para>
    Il n'y a généralement aucune raison de créer plus d'un tablespace sur un
    système de fichiers logique car vous ne pouvez pas contrôler
    l'emplacement des fichiers individuels à l'intérieur de ce système de
    fichiers logique. Néanmoins, <productname>PostgreSQL</productname> ne
    vous impose aucune limitation et, en fait, il n'est pas directement
    conscient des limites du système de fichiers sur votre système. Il stocke
    juste les fichiers dans les répertoires que vous lui indiquez.
   </para>
  </note>

  <para>
   La création d'un tablespace lui-même doit être fait en tant que
   superutilisateur de la base de données mais, après cela, vous pouvez
   autoriser des utilisateurs standards de la base de données à l'utiliser.
   Pour cela, donnez-leur le droit <literal>CREATE</literal> sur le
   tablespace.
  </para>

  <para>
   Les tables, index et des bases de données entières peuvent être affectés à
   des tablespaces particuliers. Pour cela, un utilisateur disposant du droit
   <literal>CREATE</literal> sur un tablespace donné doit passer le nom du
   tablespace comme paramètre de la commande. Par exemple, ce qui suit crée
   une table dans le tablespace <literal>espace1</literal>&nbsp;:
<programlisting>CREATE TABLE foo(i int) TABLESPACE espace1;</programlisting>
  </para>

  <para>
   Autrement, utilisez le paramètre <xref
   linkend="guc-default-tablespace"/>&nbsp;:
<programlisting>SET default_tablespace = espace1;
CREATE TABLE foo(i int);</programlisting>
   Quand <varname>default_tablespace</varname> est configuré avec autre chose
   qu'une chaîne vide, il fournit une clause <literal>TABLESPACE</literal>
   implicite pour les commandes <command>CREATE TABLE</command> et
   <command>CREATE INDEX</command> qui n'en ont pas d'explicites.
  </para>

  <para>
   Il existe aussi un paramètre <xref linkend="guc-temp-tablespaces"/>, qui
   détermine l'emplacement des tables et index temporaires, ainsi les
   fichiers temporaires qui sont utilisés pour le tri de gros ensembles de
   données. Ce paramètre peut aussi contenir une liste de tablespaces, plutôt
   qu'une seule, pour que la charge associée aux objets temporaires soit
   répartie sur plusieurs tablespaces. Un membre de la liste est pris au
   hasard à chaque fois qu'un objet temporaire doit être créé.
  </para>

  <para>
   Le tablespace associé avec une base de données est utilisé pour stocker
   les catalogues système de la base. De plus, il est l'espace par défaut
   pour les tables, index et fichiers temporaires créés à l'intérieur de
   cette base de données si aucune clause <literal>TABLESPACE</literal> n'est
   fournie et qu'aucune sélection n'est spécifiée par
   <varname>default_tablespace</varname> ou
   <varname>temp_tablespaces</varname> (comme approprié). Si une base de
   données est créée sans spécifier de tablespace pour elle, le serveur
   utilise le même tablespace que celui de la base modèle utilisée comme
   copie.
  </para>

  <para>
   Deux tablespaces sont automatiquement créés lors de l'initialisation du
   cluster de bases de données. Le tablespace <literal>pg_global</literal>
   est utilisé pour les catalogues système partagés. Le tablespace
   <literal>pg_default</literal> est l'espace logique par défaut des bases de
   données <literal>template1</literal> et <literal>template0</literal> (et,
   du coup, sera le tablespace par défaut pour les autres bases de données
   sauf en cas de surcharge par une clause <literal>TABLESPACE</literal> dans
   <command>CREATE DATABASE</command>).
  </para>

  <para>
   Une fois créé, un tablespace peut être utilisé à partir de toute base de
   données si l'utilisateur le souhaitant dispose du droit nécessaire. Ceci
   signifie qu'un tablespace ne peut pas supprimé tant que tous les objets de
   toutes les bases de données utilisant le tablespace n'ont pas été
   supprimés.
  </para>

  <para>
   Pour supprimer un tablespace vide, utilisez la commande <xref
   linkend="sql-droptablespace"/>.
  </para>

  <para>
   Pour déterminer l'ensemble des tablespaces existants, examinez le
   catalogue système <link
   linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>,
   par exemple
<synopsis>SELECT spcname FROM pg_tablespace;</synopsis>
   La métacommande <literal>\db</literal> du programme <xref
   linkend="app-psql"/> est aussi utile pour afficher les tablespaces
   existants.
  </para>

  <para>
   <productname>PostgreSQL</productname> utilise des liens symboliques pour
   simplifier l'implémentation des tablespaces. Ceci signifie que les
   tablespaces peuvent être utilisés <emphasis>seulement</emphasis> sur les
   systèmes supportant les liens symboliques.
  </para>

  <para>
   Le répertoire <filename>$PGDATA/pg_tblspc</filename> contient des liens
   symboliques qui pointent vers chacun des tablespaces utilisateur dans le
   groupe. Bien que non recommandé, il est possible d'ajuster la
   configuration des tablespaces à la main en redéfinissant ces liens. Cette
   opération ne doit jamais être réalisée alors que le serveur est en cours
   d'exécution. Notez qu'avec les versions 9.1 et antérieures de PostgreSQL
   9.1, vous aurez aussi besoin de mettre à jour le catalogue
   <structname>pg_tablespace</structname> avec les nouveaux emplacements. (Si
   vous ne le faites pas, <literal>pg_dump</literal> continuera à afficher
   les anciens emplacements des tablespaces.)
  </para>
 </sect1>
</chapter>
