<?xml version="1.0" encoding="UTF-8"?>
<chapter id="user-manag">
 <title>Rôles de la base de données</title>

 <para>
  <productname>PostgreSQL</productname> gère les droits d'accès aux bases de
  données en utilisant le concept de <firstterm>rôles</firstterm>. Un rôle peut être
  vu soit comme un utilisateur de la base de données, soit comme un groupe
  d'utilisateurs de la base de données, suivant la façon dont le rôle est
  configuré. Les rôles peuvent posséder des objets de la base de données (par
  exemple des tables et des fonctions) et peuvent affecter des droits sur ces objets à d'autres
  rôles pour contrôler qui a accès à ces objets. De plus, il est possible de
  donner l'<firstterm>appartenance</firstterm> d'un rôle à un autre rôle, l'autorisant
  du coup à utiliser les droits affectés à un autre rôle.
 </para>

 <para>
  Le concept des rôles comprend les concepts des <quote>utilisateurs</quote> et des
  <quote>groupes</quote>. Dans les versions de <productname>PostgreSQL</productname>
  antérieures à la 8.1, les utilisateurs et les groupes étaient des types
  d'entité distincts mais, maintenant, ce ne sont que des rôles. Tout rôle peut
  agir comme un utilisateur, un groupe ou les deux.
 </para>

 <para>
  Ce chapitre décrit comment créer et gérer des rôles. <xref
  linkend="ddl-priv"/> donne plus d'informations sur les effets des droits
  des rôles pour les différents objets de la base de données.
 </para>

 <sect1 id="database-roles">
  <title>Rôles de la base de données</title>

  <indexterm zone="database-roles">
   <primary>rôle</primary>
  </indexterm>

  <indexterm>
   <primary>CREATE ROLE</primary>
  </indexterm>

  <indexterm>
   <primary>DROP ROLE</primary>
  </indexterm>

  <para>
   Conceptuellement, les rôles de la base sont totalement
   séparés des utilisateurs du système d'exploitation. En pratique,
   il peut être commode de maintenir une correspondance mais cela
   n'est pas requis. Les rôles sont globaux à toute une
   installation de groupe de bases de données (et non individuelle pour
   chaque base). Pour créer un rôle, utilisez la commande SQL
   <link
   linkend="sql-createrole"><command>CREATE ROLE</command></link>&nbsp;:
   <synopsis>CREATE ROLE <replaceable>nom_utilisateur</replaceable>;</synopsis>
   <replaceable>nom_utilisateur</replaceable> suit les règles des
   identifiants SQL&nbsp;: soit sans guillemets et sans caractères spéciaux,
   soit entre double guillemets (en pratique, vous voudrez surtout ajouter
   des options supplémentaires, comme <literal>LOGIN</literal>, à cette commande.
   Vous trouverez plus de détails ci-dessous). Pour supprimer un rôle existant,
   utilisez la commande analogue <link linkend="sql-droprole"><command>DROP
   ROLE</command></link>&nbsp;:
<synopsis>DROP ROLE <replaceable>nom_utilisateur</replaceable>;</synopsis>
  </para>

  <indexterm>
   <primary>createuser</primary>
  </indexterm>

  <indexterm>
   <primary>dropuser</primary>
  </indexterm>

  <para>
   Pour une certaine facilité d'utilisation, les programmes
   <xref linkend="app-createuser"/> et <xref linkend="app-dropuser"/> sont
   fournis comme emballage de ces commandes SQL et peuvent être appelés depuis
   la ligne de commande du shell&nbsp;:
<synopsis>createuser <replaceable>nom_utilisateur</replaceable>
dropuser <replaceable>nom_utilisateur</replaceable></synopsis>
  </para>

  <para>
   Pour déterminer l'ensemble des rôles existants, examinez le catalogue
   système <structname>pg_roles</structname> existant, par exemple
<synopsis>SELECT rolname FROM pg_roles;</synopsis>
   pour voir uniquement ceux capables de se connecter&nbsp;:
<synopsis>SELECT rolname FROM pg_roles WHERE rolcanlogin;</synopsis>
   La méta-commande <literal>\du</literal> du programme <xref linkend="app-psql"/> est
   aussi utile pour lister les rôles existants.
  </para>

  <para>
   Afin d'amorcer le système de base de données, un système récemment
   installé contient toujours un rôle prédéfini capable de se connecter.
   Ce rôle est un
   superutilisateur et aura le même nom que l'utilisateur
   du système d'exploitation qui a initialisé le groupe de bases de
   données, à moins que cela ne soit modifié en lançant la commande
   <command>initdb</command>. C'est habituel mais non requis de faire en
   sorte que ce rôle s'appelle
   <literal>postgres</literal>. Pour créer plus de rôles, vous devez
   d'abord vous connecter en tant que ce rôle initial.
  </para>

  <para>
   Chaque connexion au serveur de la base de données est faite au nom d'un
   certain rôle et ce rôle détermine les droits d'accès initiaux pour les
   commandes lancées sur cette connexion. Le nom du rôle
   à employer pour une connexion à une base particulière est indiqué
   par le client initialisant la demande de connexion, et ce, de la
   manière qui lui est propre.  Par exemple, le programme
   <command>psql</command> utilise l'option de ligne de commandes
   <option>-U</option> pour préciser sous quel rôle il se
   connecte. Beaucoup d'applications (incluant <command>createuser</command>
   et <command>psql</command>) utilisent par défaut le nom courant de
   l'utilisateur du système d'exploitation. Par conséquence, il peut souvent
   être pratique de maintenir une correspondance de nommage entre les rôles et
   les utilisateurs du système d'exploitation.
  </para>

  <para>
   La configuration de l'authentification du client détermine avec
   quel rôle de la base, la connexion cliente donnée se
   connectera, comme cela est expliqué dans le
   <xref linkend="client-authentication"/> (donc, un client n'est pas
   obligé de se connecter avec le rôle du même nom que
   son nom d'utilisateur dans le système d'exploitation&nbsp;; de la même
   façon que le nom de connexion d'un utilisateur peut ne pas correspondre à
   son vrai nom). Comme le rôle détermine l'ensemble des
   droits disponibles pour le client connecté, il est important de configurer
   soigneusement les droits quand un environnement multi-utilisateurs est mis en
   place.
  </para>
 </sect1>

 <sect1 id="role-attributes">
  <title>Attributs des rôles</title>

   <para>
    Un rôle de bases de données peut avoir un certain nombre
    d'attributs qui définissent ses droits et interagissent avec
    le système d'authentification du client.

    <variablelist>
     <varlistentry>
      <term>droit de connexion<indexterm><primary>droit de connexion</primary></indexterm></term>
      <listitem>
       <para>
        Seuls les rôles disposant de l'attribut <literal>LOGIN</literal> peuvent être
        utilisés comme nom de rôle initial pour une connexion à une base de
        données. Un rôle avec l'attribut <literal>LOGIN</literal> peut être considéré
        de la même façon qu'un <quote>utilisateur de la base de données</quote>.
        Pour créer un rôle disposant du droit de connexion, utilisez&nbsp;:
<programlisting>CREATE ROLE <replaceable>nom</replaceable> LOGIN;
CREATE USER <replaceable>nom</replaceable>;</programlisting>
        (<command>CREATE USER</command> est équivalent à <command>CREATE ROLE</command>
        sauf que <command>CREATE USER</command> utilise <literal>LOGIN</literal> par défaut
        alors que <command>CREATE ROLE</command> ne le fait pas)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>statut de superutilisateur<indexterm><primary>superutilisateur</primary></indexterm></term>
      <listitem>
       <para>
        Les superutilisateurs ne sont pas pris en compte dans les vérifications
        des droits, sauf le droit de connexion ou d'initier la réplication.
        Ceci est un droit dangereux et ne devrait pas être
        utilisé sans faire particulièrement attention&nbsp;; il est préférable
        de faire la grande majorité de votre travail avec un rôle qui n'est pas
        superutilisateur. Pour créer un nouveau superutilisateur, utilisez
        <literal>CREATE ROLE <replaceable>nom</replaceable>
        SUPERUSER</literal>. Vous devez le faire en tant que superutilisateur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>création de bases de données<indexterm><primary>base de
	données</primary><secondary>droit de création</secondary></indexterm></term>
      <listitem>
       <para>
        Les droits de création de bases doivent être
        explicitement données à un rôle (à l'exception des
        superutilisateurs qui passent au travers de toute
        vérification de droits). Pour créer un tel rôle,
        utilisez <literal>CREATE ROLE
        <replaceable>nom_utilisateur</replaceable> CREATEDB</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term id="role-creation">création de rôle<indexterm><primary>rôle</primary><secondary>droit de création</secondary></indexterm></term>
      <listitem>
       <para>
        Un rôle doit se voir explicitement donné le droit de créer plus de rôles
        (sauf pour les superutilisateurs vu qu'ils ne sont pas pris en compte
        lors des vérifications de droits). Pour créer un tel rôle, utilisez
        <literal>CREATE ROLE <replaceable>nom</replaceable>
        CREATEROLE</literal>.  Un rôle disposant de l'attribut
        <literal>CREATEROLE</literal> peut aussi modifier et supprime
        les rôles qui avaient l'attribut <literal>CREATEROLE</literal>
        avec l'option <literal>ADMIN</literal>. Cela survient automatiquement
        quand un utilisateur avec l'attribut <literal>CREATEROLE</literal> mais
        sans l'attribut <literal>SUPERUSER</literal> crée un nouveau rôle, pour
        que, par défaut, un utilisateur avec l'attribut
        <literal>CREATEROLE</literal> puissent modifier et supprimer les rôles
        qu'ils ont créés.
        Modifier un rôle inclut beaucoup de changements possibles en utilisant
        la commande <literal>ALTER ROLE</literal>, ceci incluant, par exemple,
        le changement de mot de passe. Cela inclut aussi les modifications à un
        rôle qui peuvent se faire en utilisant les commandes
        <literal>COMMENT</literal> et <literal>SECURITY LABEL</literal>.
       </para>
       <para>
        Néanmoins, <literal>CREATEROLE</literal> ne donne pas la possibilité de
        créer des rôles <literal>SUPERUSER</literal>, pas plus qu'il ne donne de
        pouvoirs sur les rôles existants disposant de l'attribut
        <literal>SUPERUSER</literal>.  De plus, <literal>CREATEROLE</literal>
        n'offre pas la possibilité de créer des utilisateurs disposant de
        l'attribut <literal>REPLICATION</literal>, pas plus que la capacité de
        donner ou supprimer l'attribut <literal>REPLICATION</literal> ou que la
        possibilité de modifier les propriétés de ce genre d'utilisateurs.
        Néanmoins, il permet l'utilisation des commandes <literal>ALTER ROLE ...
        SET</literal> et <literal>ALTER ROLE ... RENAME</literal> sur des rôles
        disposant de l'attribut <literal>REPLICATION</literal>, ainsi que
        l'utilisation des commandes <literal>COMMENT ON ROLE</literal>,
        <literal>SECURITY LABEL ON ROLE</literal> et <literal>DROP
        ROLE</literal>.  Enfin, <literal>CREATEROLE</literal> n'offre pas la
        possibilité de donner ou supprimer l'attribut
        <literal>BYPASSRLS</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>initier une réplication<indexterm><primary>role</primary><secondary>droit d'initier une réplication</secondary></indexterm></term>
      <listitem>
       <para>
        Un rôle doit se voir explicitement donné le droit d'initier une
        réplication en flux (sauf pour les superutilisateurs, puisqu'ils ne sont pas
        soumis aux vérifications de permissions). Un rôle utilisé pour la réplication en flux doit
        avoir le droit <literal>LOGIN</literal>. Pour créer un tel
        rôle, utilisez <literal>CREATE ROLE <replaceable>nom</replaceable>
        REPLICATION LOGIN</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>mot de passe<indexterm><primary>mot de passe</primary></indexterm></term>
      <listitem>
       <para>
        Un mot de passe est seulement significatif si la méthode
        d'authentification du client exige que le client fournisse
        un mot de passe quand il se connecte à la base.  Les
        méthodes d'authentification par <option>mot de passe</option> et
        <option>md5</option> utilisent des mots de
        passe.  Les mots de passe de la base de données ne sont pas
        les mêmes que ceux du système d'exploitation.  Indiquez un
        mot de passe lors de la création d'un rôle avec
        <literal>CREATE ROLE
        <replaceable>nom_utilisateur</replaceable> PASSWORD
        '<replaceable>le_mot_de_passe</replaceable>'</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>héritage des droits<indexterm><primary>rôle</primary><secondary>droit à hériter</secondary></indexterm></term>
      <listitem>
       <para>
        Un rôle hérite des droits des rôles dont il est membre par défaut.
        Néanmoins, pour créer un rôle qui n'hérite pas des droits par défaut,
        utilisez <literal>CREATE ROLE <replaceable>nom</replaceable>
        NOINHERIT</literal>. Autrement, l'héritage peut être surchargé sur les
        droits individuels en utilisant <literal>WITH INHERIT TRUE</literal>
        ou <literal>WITH INHERIT FALSE</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>contourner la sécurité niveau lignes<indexterm><primary>rôle</primary><secondary>droit de contourner</secondary></indexterm></term>
      <listitem>
       <para>
        Un rôle doit se voir donner explicitement le droit de contourner chaque
        politique de sécurité niveau lignes (RLS) (sauf pour les
        superutilisateurs car ils contournent toutes les vérifications de
        droits). Pour créer un tel rôle, utilisez <literal>CREATE ROLE
        <replaceable>nom</replaceable> BYPASSRLS</literal> en tant que
        superutilisateur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>limite de connexions<indexterm><primary>rôle</primary><secondary>possibilité de limiter les connexions</secondary></indexterm></term>
      <listitem>
       <para>
        La limite de connexions peut indiquer combien de connexions concurrentes
        un rôle peut faire.  -1 (la valeur par défaut) signifie qu'il n'y a pas de limite.
        Précisez une limite de connexion lors de la création d'un rôle avec
        <literal>CREATE ROLE <replaceable>nom</replaceable> CONNECTION LIMIT
        '<replaceable>integer</replaceable>'</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>héritage des droits<indexterm><primary>rôle</primary><secondary>droit à hériter</secondary></indexterm></term>
      <listitem>
       <para>
        Un rôle se voit donner par défaut le droit d'hériter des droits des rôles dont
        il est membre. Néanmoins, pour créer un rôle sans le droit, utilisez
        <literal>CREATE ROLE <replaceable>nom</replaceable> NOINHERIT</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>contourner la sécurité niveau ligne<indexterm><primary>rôle</primary><secondary>droit à contourner</secondary></indexterm></term>
      <listitem>
       <para>
        Un rôle doit se voir donner explicitement le droit de contourner chaque
        politique de sécurité niveau ligne (RLS), sauf pour les
        super-utilisateurs, car ces derniers contournent toutes les
        vérifications de droits). Pour créer un tel rôle, utilisez
        <literal>CREATE ROLE <replaceable>nom</replaceable> BYPASSRLS</literal>
        comme un super-utilisateur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>limite de connexion<indexterm><primary>rôle</primary><secondary>droit pour limiter les connexions</secondary></indexterm></term>
      <listitem>
       <para>
        La limite de connexions peut indiquer combien de connexions concurrentes
        un même rôle peut réaliser. La valeur par défaut, -1, signifie qu'il n'y a
        aucune limite.  Indiquez une limite de connexion lors de la création d'un rôle
        avec
        <literal>CREATE ROLE <replaceable>nom</replaceable> CONNECTION LIMIT '<replaceable>integer</replaceable>'</literal>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    Les attributs d'un rôle peuvent être modifiés après sa
    création avec <command>ALTER ROLE</command>.<indexterm><primary>ALTER ROLE</primary></indexterm>
    Regardez les pages de références de <xref linkend="sql-createrole"/> et de
    <xref linkend="sql-alterrole"/> pour plus de détails.
   </para>

  <para>
   Un rôle peut aussi configurer ses options par défaut pour de
   nombreux paramètres de configuration décris dans le
   <xref linkend="runtime-config"/>. Par exemple, si, pour une raison
   ou une autre, vous voulez désactiver les parcours d'index (conseil&nbsp;:
   ce n'est pas une bonne idée) à chaque fois que vous vous connectez, vous
   pouvez utiliser&nbsp;:
<programlisting>ALTER ROLE myname SET enable_indexscan TO off;</programlisting>
   Cela sauve les paramètres (mais ne les applique pas immédiatement).
   Dans les connexions ultérieures de ce rôle, c'est comme si
   <literal>SET enable_indexscan TO off</literal> avait été appelé
   juste avant le démarrage de la session. Vous pouvez toujours
   modifier les paramètres durant la session. Pour supprimer une configuration
   par défaut spécifique à un rôle, utilisez <literal>ALTER ROLE
   <replaceable>nom_utilisateur</replaceable> RESET <replaceable>nom_variable</replaceable></literal>.
   Notez que les valeurs par défaut spécifiques aux rôles sans droit de connexion
   (<literal>LOGIN</literal>) sont vraiment inutiles car ils ne seront jamais appelés.
  </para>

  <para>
   Quand un non-superutilisateur crée un rôle en utilisant l'attribut
   <literal>CREATEROLE</literal>, le rôle créé est automatiquement attribué au
   créateur de l'utilisateur, tout comme si le superutilisateur original a
   exécuté la commande <literal>GRANT created_user TO creating_user WITH ADMIN
   TRUE, SET FALSE, INHERIT FALSE</literal>. Comme un utilisateur
   <literal>CREATEROLE</literal> peut seulement exercer des droits spéciaux
   en regard au rôle existant s'ils ont <literal>ADMIN OPTION</literal> sur ce
   droit, ce droit est juste suffisant pour qu'un utilisateur
   <literal>CREATEROLE</literal> administre les rôles qu'ils ont créés.
   Néanmoins, comme il est créé avec <literal>INHERIT FALSE, SET
   FALSE</literal>, l'utilisateur <literal>CREATEROLE</literal> n'hérite pas
   des droits du rôle créé, par plus qu'il ne peut accéder aux droits de ce
   rôle en utilisant <literal>SET ROLE</literal>. Néanmoins, comme tout utilisateur
   qui a <literal>ADMIN OPTION</literal> sur un rôle peut donner l'appartenance à
   ce rôle à n'importe quel rôle, l'utilisateur <literal>CREATEROLE</literal> peut
   gagner l'accès au rôle en donnant simplement ce rôle à eux-mêmes avec les
   options <literal>INHERIT</literal> et/ou <literal>SET</literal>. De ce fait,
   le fait que les droits ne sont pas hérités par défaut et que
   <literal>SET ROLE</literal> n'est pas donné par défaut est une fonctionnalité
   contre les accidents, pas une fonctionnalité de sécurité. De plus, notez que,
   comme ce don automatique est donné par le superutilisateur de démarrage, il
   ne peut être ni
   supprimé ni modifié par l'utilisateur <literal>CREATEROLE</literal>&nbsp;; néanmoins,
   tout superutilisateur peut le revoquer, le modifier ou donner des droits
   supplémentaires à d'autres utilisateurs <literal>CREATEROLE</literal>. Tout
   utilisateur <literal>CREATEROLE</literal> qui a <literal>ADMIN
   OPTION</literal> sur un rôle peut l'administrer à tout moment.
  </para>
 </sect1>

 <sect1 id="role-membership">
  <title>Appartenance d'un rôle</title>

  <indexterm zone="role-membership">
   <primary>rôle</primary><secondary>appartenance</secondary>
  </indexterm>

  <para>
   Il est souvent intéressant de grouper les utilisateurs pour faciliter la
   gestion des droits&nbsp;: de cette façon, les droits peuvent être donnés ou
   supprimés pour tout un groupe. Dans <productname>PostgreSQL</productname>,
   ceci se fait en créant un rôle représentant le groupe, puis en ajoutant
   les rôles utilisateurs individuels <firstterm>membres</firstterm> de ce groupe.
  </para>

  <para>
   Pour configurer un rôle en tant que groupe, créez tout d'abord le rôle&nbsp;:
<synopsis>CREATE ROLE <replaceable>nom</replaceable>;</synopsis>
   Typiquement, un rôle utilisé en tant que groupe n'aura pas l'attribut
   <literal>LOGIN</literal> bien que vous puissiez le faire si vous le souhaitez.
  </para>

  <para>
   Une fois que ce rôle existe, vous pouvez lui ajouter et lui supprimer des
   membres en utilisant les commandes <link
   linkend="sql-grant"><command>GRANT</command></link> et
   <link linkend="sql-revoke"><command>REVOKE</command></link>&nbsp;:
<synopsis>GRANT <replaceable>role_groupe</replaceable> TO <replaceable>role1</replaceable>, ... ;
REVOKE <replaceable>role_groupe</replaceable> FROM <replaceable>role1</replaceable>, ... ;</synopsis>
   Vous pouvez aussi faire en sorte que d'autres rôles groupes appartiennent à
   ce groupe (car il n'y a pas réellement de distinction entre les rôles groupe
   et les rôles non groupe). La base de données ne vous laissera pas configurer
   des boucles circulaires d'appartenance. De plus, il est interdit de faire en
   sorte qu'un membre appartienne à <literal>PUBLIC</literal>.
  </para>

  <para>
   Les membres d'un rôle groupe peuvent utiliser les droits du rôle de deux façons.
   Tout d'abord, les rôles membres qui se sont vus attribuer l'appartenance avec l'option
   <literal>SET</literal> peuvent exécuter
   <link linkend="sql-set-role"><command>SET ROLE</command></link> pour
   <quote>devenir</quote> temporairement le rôle groupe. Dans cet état, la session
   de la base de données a accès aux droits du rôle groupe plutôt qu'à ceux
   du rôle de connexion original et tous les objets créés sont considérés comme
   appartenant au rôle groupe, et non pas au rôle utilisé lors de la connexion.
   Deuxièmement, les rôles membres qui se sont vus attribuer l'appartenance avec
   l'option <literal>INHERIT</literal> peuvent automatiquement utiliser les droits
   des rôles dont ils sont membres directement ou indirectement, bien que la
   chaîne s'arrête aux rôles sans option d'héritage.
   Comme exemple, supposons que nous avons lancé les commandes
   suivantes&nbsp;:
<programlisting>CREATE ROLE joe LOGIN;
CREATE ROLE admin;
CREATE ROLE wheel;
CREATE ROLE island;
GRANT admin TO joe WITH INHERIT TRUE;
GRANT wheel TO admin WITH INHERIT FALSE;
GRANT island TO joe WITH INHERIT TRUE, SET FALSE;</programlisting>
   Immédiatement après connexion en tant que <literal>joe</literal>, la session de la
   base de données peut utiliser les droits donnés directement à
   <literal>joe</literal> ainsi que ceux donnés à <literal>admin</literal> et
   <literal>island</literal> parce que
   <literal>joe</literal> <quote>hérite</quote> des droits de <literal>admin</literal>. Néanmoins,
   les droits donnés à <literal>wheel</literal> ne sont pas disponibles parce que,
   même si <literal>joe</literal> est un membre indirect de <literal>wheel</literal>,
   l'appartenance se fait via <literal>admin</literal> qui a été donné en utilisant
   <literal>WITH INHERIT FALSE</literal>. Après&nbsp;:
<programlisting>SET ROLE admin;</programlisting>
   la session aura la possibilité d'utiliser les droits donnés à
   <literal>admin</literal> mais n'aura plus accès à ceux de <literal>joe</literal> or
   <literal>island</literal>. Après&nbsp;:
<programlisting>SET ROLE wheel;</programlisting>
   la session pourra utiliser uniquement ceux de <literal>wheel</literal>, mais ni
   ceux de <literal>joe</literal> ni ceux de <literal>admin</literal>. L'état du droit initial
   peut être restauré avec une des instructions suivantes&nbsp;:
<programlisting>SET ROLE joe;
SET ROLE NONE;
RESET ROLE;</programlisting>
  </para>

  <note>
   <para>
    La commande <command>SET ROLE</command> autorisera toujours la sélection de tout
    rôle dont le rôle de connexion est membre directement ou indirectement,
    à condition qu'il y ait une chaîne d'appartenances, chacune ayant l'option
    <literal>SET TRUE</literal> (ce qui est le cas par défaut).
    Du coup, dans l'exemple précédent, il n'est pas nécessaire de devenir
    <literal>admin</literal> pour devenir <literal>wheel</literal>.
    D'un autre côté, il n'est pas du tout possible de devenir
    <literal>island</literal>&nbsp;; <literal>joe</literal> peut seulement
    accéder aux droits via l'héritage.
   </para>
  </note>

  <note>
   <para>
    Dans le standard SQL, il existe une distinction claire entre les
    utilisateurs et les rôles. Les utilisateurs ne peuvent pas hériter
    automatiquement alors que les rôles le peuvent. Ce comportement est obtenu
    dans <productname>PostgreSQL</productname> en donnant aux rôles utilisés
    comme des rôles SQL l'attribut <literal>INHERIT</literal>, mais en donnant aux
    rôles utilisés en tant qu'utilisateurs SQL l'attribut
    <literal>NOINHERIT</literal>. Néanmoins, par défaut,
    <productname>PostgreSQL</productname> donne à tous les rôles l'attribut
    <literal>INHERIT</literal> pour des raisons de compatibilité avec les versions
    précédant la 8.1 dans lesquelles les utilisateurs avaient toujours les
    droits des groupes dont ils étaient membres.
   </para>
  </note>

  <para>
   Les attributs <literal>LOGIN</literal>, <literal>SUPERUSER</literal>, <literal>CREATEDB</literal>
   et <literal>CREATEROLE</literal> peuvent être vus comme des droits spéciaux qui ne
   sont jamais hérités contrairement aux droits ordinaires sur les objets de la
   base. Vous devez réellement utiliser <command>SET ROLE</command> vers un rôle
   spécifique pour avoir un de ces attributs et l'utiliser. Pour continuer avec
   l'exemple précédent, nous pourrions très bien choisir de donner les droits
   <literal>CREATEDB</literal> et <literal>CREATEROLE</literal> au rôle <literal>admin</literal>.
   Puis, une session connectée en tant que le rôle <literal>joe</literal> n'aurait pas
   ces droits immédiatement, seulement après avoir exécuté <command>SET ROLE
   admin</command>.
  </para>

  <para>
  </para>

  <para>
   Pour détruire un rôle groupe, utilisez <link
   linkend="sql-droprole"><command>DROP ROLE</command></link>&nbsp;:
<synopsis>DROP ROLE <replaceable>nom</replaceable>;</synopsis>
   Toute appartenance à ce rôle est automatiquement supprimée (mais les rôles
   membres ne sont pas autrement affectés).
  </para>
 </sect1>

 <sect1 id="role-removal">
  <title>Supprimer des rôles</title>

  <para>
   Comme les rôles peuvent posséder des objets dans une base de données et
   peuvent détenir des droits pour accéder à d'autres objets, supprimer un
   rôle n'est généralement pas la seule exécution d'un
   <link linkend="sql-droprole"><command>DROP ROLE</command></link>. Tout
   objet appartenant à un rôle doit d'abord être
   supprimé ou réaffecté à d'autres propriétaires&nbsp;; et tout droit donné à
   un rôle doit être révoqué.
  </para>

  <para>
   L'appartenance des objets doit être transférée, un à la fois, en utilisant
   des commandes <command>ALTER</command>, par exemple&nbsp;:
<programlisting>
ALTER TABLE table_de_bob OWNER TO alice;
   </programlisting>
   Il est aussi possible d'utiliser la commande
   <link linkend="sql-reassign-owned"><command>REASSIGN OWNED</command></link>
   pour réaffecter tous les objets du rôle à
   supprimer à un autre rôle. Comme <command>REASSIGN OWNED</command> ne peut
   pas accéder aux objets dans les autres bases, il est nécessaire de l'exécuter
   dans chaque base qui contient des objets possédés par le rôle. (Notez que la
   première exécution de <command>REASSIGN OWNED</command> changera le
   propriétaire de tous les objets partagés entre bases de données, donc les
   bases et les tablespaces, qui appartiennent au rôle à supprimer.)
  </para>

  <para>
   Une fois que tous les objets importants ont été transférés aux nouveaux
   propriétaires, tout objet restant possédé par le rôle à supprimer peut
   être supprimé avec la commande
   <link linkend="sql-drop-owned"><command>DROP OWNED</command></link>. Encore
   une fois, cette commande ne peut pas accéder aux objets des autres bases
   de données, donc il est nécessaire de l'exécuter sur chaque base qui
   contient des objets dont le propriétaire correspond au rôle à supprimer.
   De plus, <command>DROP OWNED</command> ne supprimera pas des bases ou
   tablespaces entiers, donc il est nécessaire de le faire manuellement si
   le rôle possède des bases et/ou des tablespaces qui n'auraient pas été
   transférés à d'autres rôles.
  </para>

  <para>
   <command>DROP OWNED</command> fait aussi attention à supprimer tout droit
   donné au rôle cible pour les objets qui ne lui appartiennent pas. Comme
   <command>REASSIGN OWNED</command> ne touche pas à ces objets, il est
   souvent nécessaire d'exécuter à la fois <command>REASSIGN OWNED</command>
   et <command>DROP OWNED</command> (dans cet ordre&nbsp;!) pour supprimer
   complètement les dépendances d'un rôle à supprimer.
  </para>

  <para>
   En bref, les actions de suppression d'un rôle propriétaire d'objets
   sont&nbsp;:
  </para>
  <programlisting>
REASSIGN OWNED BY role_a_supprimer TO role_remplacant;
DROP OWNED BY role_a_supprimer;
-- répétez les commandes ci-dessus pour chaque base de données de l'instance
DROP ROLE role_a_supprimer;
  </programlisting>

  <para>
   Lorsque les objets ne sont pas tous transférés au même rôle, il est
   préférable de gérer les exceptions manuellement, puis de réaliser les étapes
   ci-dessus pour le reste.
  </para>

  <para>
   Si <command>DROP ROLE</command> est tenté alors que des objets dépendants
   sont toujours présents, il enverra des messages identifiant les objets à
   réaffecter ou supprimer.
  </para>
 </sect1>

 <sect1 id="predefined-roles">
  <title>Rôles prédéfinis</title>

  <indexterm zone="predefined-roles">
   <primary>role</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</productname> fournit un ensemble de rôles prédéfinis
   qui permettent d'accéder à certaines fonctionnalités et informations
   privilégiées, couramment nécessaires. Les administrateurs (y compris les
   rôles qui ont le privilège <literal>CREATEROLE</literal>) peuvent
   octroyer (<command>GRANT</command>) ces rôles aux utilisateurs et/ou à
   d'autres rôles dans leur environnement, fournissant à ces utilisateurs un
   accès aux fonctionnalités et informations spécifiées.
  </para>

  <para>
   Les rôles prédéfinis sont décrits dans <xref linkend="predefined-roles-table"/>.
   Notez que les autorisations spécifiques pour chacun des rôles peuvent changer
   à l'avenir à mesure que des fonctionnalités supplémentaires sont ajoutées.
   Les administrateurs doivent surveiller les notes de version pour les
   changements.
  </para>

  <table tocentry="1" id="predefined-roles-table">
   <title>Rôles prédéfinis</title>
   <tgroup cols="2">
    <colspec colname="col1" colwidth="1*"/>
    <colspec colname="col2" colwidth="2*"/>
    <thead>
     <row>
      <entry>Rôle</entry>
      <entry>Accès autorisé</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>pg_read_all_data</entry>
      <entry>Lit toutes les données (tables, vues, séquences), comme si le
       rôle avait le droit <command>SELECT</command> sur ces objets, et le
       droit <command>USAGE</command> sur tous les schémas, même sans les
       avoir explicitement. Ce rôle n'a pas l'attribut
       <literal>BYPASSRLS</literal> de configuré. Si RLS est utilisé, un
       administrateur pourrait vouloir ajouter <literal>BYPASSRLS</literal>
       sur les rôles ayant cet accès.</entry>
     </row>
     <row>
      <entry>pg_write_all_data</entry>
      <entry>Écrit toutes les données (tables, vues, séquences), comme si le
       rôle avait les droits <command>INSERT</command>,
       <command>UPDATE</command>, and <command>DELETE</command> sur ces
       objets, et le droit <command>USAGE</command> sur tous les schémas,
       même sans les avoir explicitement. Ce rôle n'a pas l'attribut
       <literal>BYPASSRLS</literal> de configuré. Si RLS est utilisé, un
       administrateur pourrait vouloir ajouter <literal>BYPASSRLS</literal>
       sur les rôles ayant cet accès.</entry>
     </row>
     <row>
      <entry>pg_read_all_settings</entry>
      <entry>Lit toutes les variables de configuration, y compris celles
       normalement visibles des seuls superutilisateurs.</entry>
     </row>
     <row>
      <entry>pg_read_all_stats</entry>
      <entry>Lit toutes les vues pg_stat_* et utilise plusieurs extensions
       relatives aux statistiques, y compris celles normalement visibles des
       seuls superutilisateurs.</entry>
     </row>
     <row>
      <entry>pg_database_owner</entry>
      <entry>None.  Membership consists, implicitly, of the current database owner.</entry>
     </row>
     <row>
      <entry>pg_stat_scan_tables</entry>
      <entry>Exécute des fonctions de monitoring pouvant prendre des verrous
       <literal>ACCESS SHARE</literal> sur les tables, potentiellement
       pour une longue durée.</entry>
     </row>
     <row>
      <entry>pg_monitor</entry>
      <entry>Lit et exécute plusieurs vues et fonctions de monitoring.
       Ce rôle est membre de <literal>pg_read_all_settings</literal>,
       <literal>pg_read_all_stats</literal> et
       <literal>pg_stat_scan_tables</literal>.</entry>
     </row>
     <row>
      <entry>pg_signal_backend</entry>
      <entry>Envoie un signal à un autre processus serveur (par exemple pour
       annuler une requête ou fermer une session).</entry>
     </row>
     <row>
      <entry>pg_read_server_files</entry>
      <entry>Autoriser la lecture de fichiers sur tous les emplacements
       accessibles par le serveur de bases de données avec COPY et les autres
       fonctions d'accès de fichiers.</entry>
     </row>
     <row>
      <entry>pg_write_server_files</entry>
      <entry>Autoriser l'écriture de fichiers sur tous les emplacements
       accessibles par le serveur de bases de données avec COPY et les autres
       fonctions d'accès de fichiers.</entry>
     </row>
     <row>
      <entry>pg_execute_server_program</entry>
      <entry>Autoriser l'exécution de programmes sur le serveur de bases de
       données en tant que l'utilisateur qui exécute le moteur de bases de
       données, avec COPY et les autres fonctions qui permettent l'exécution
       d'un programme sur le serveur.</entry>
     </row>
     <row>
      <entry>pg_checkpoint</entry>
      <entry>Autoriser l'exécution de la commande
      <link linkend="sql-checkpoint"><command>CHECKPOINT</command></link>.</entry>
     </row>
      <row>
       <entry>pg_maintain</entry>
       <entry>Autoriser l'exécution de
       <link linkend="sql-vacuum"><command>VACUUM</command></link>,
       <link linkend="sql-analyze"><command>ANALYZE</command></link>,
       <link linkend="sql-cluster"><command>CLUSTER</command></link>,
       <link linkend="sql-refreshmaterializedview"><command>REFRESH MATERIALIZED VIEW</command></link>,
       <link linkend="sql-reindex"><command>REINDEX</command></link>,
       et <link linkend="sql-lock"><command>LOCK TABLE</command></link> sur
       toutes les relations, comme si le rôle avait le droit
       <literal>MAINTAIN</literal> sur ces objets, même sans l'avoir
       explicitement.</entry>
      </row>
     <row>
      <entry>pg_use_reserved_connections</entry>
      <entry>Autorise l'utilisation des slots de connexion réservés via
      <xref linkend="guc-reserved-connections"/>.</entry>
     </row>
     <row>
      <entry>pg_create_subscription</entry>
      <entry>Donne le droit <literal>CREATE</literal> sur la base de données
      pour exécuter
      <link linkend="sql-createsubscription"><command>CREATE SUBSCRIPTION</command></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Les rôles <literal>pg_monitor</literal>,
   <literal>pg_read_all_settings</literal>,
   <literal>pg_read_all_stats</literal> et
   <literal>pg_stat_scan_tables</literal> ont pour but de permettre aux
   administrateurs de configurer aisément un rôle en vue de superviser le
   serveur de base de données. Ils accordent un ensemble de privilèges
   permettant au rôle de lire plusieurs paramètres de configuration,
   statistiques et information système normalement réservés aux
   superutilisateurs.
  </para>

  <para>
   Le rôle <literal>pg_database_owner</literal> a un membre implicite, à savoir
   le propriétaire de la base de données en cours. Comme tout rôle, il peut être
   propriétaire des objets et recevoir des autorisations d'accès.  En
   conséquence, une fois que <literal>pg_database_owner</literal> a des droits
   dans une base modèle, chaque propriétaire d'une base créée à partir de ce
   modèle peut exercer ces droits.  <literal>pg_database_owner</literal> ne peut
   pas être un membre d'un autre rôle, et il ne peut pas avoir de membres non
   implicites. Au départ, ce rôle est le propriétaire du schéma
   <literal>public</literal>, pour que chaque propriétaire de base gouverne
   l'utilisation locale de ce schéma.
  </para>

  <para>
   Le rôle <literal>pg_signal_backend</literal> a pour but de permettre aux
   administrateurs d'autoriser des rôles de confiance mais non
   superutilisateurs à envoyer des signaux à d'autres processus. Actuellement,
   ce rôle active l'envoi de signaux pour annuler une requête exécutée par un
   autre processus ou pour terminer une session. Néanmoins, un utilisateur
   membre de ce rôle ne peut pas envoyer ce type de signaux à un processus
   appartenant à un superutilisateur. Voir <xref
   linkend="functions-admin-signal"/>.
  </para>

  <para>
   Les rôles <literal>pg_read_server_files</literal>,
   <literal>pg_write_server_files</literal> et
   <literal>pg_execute_server_program</literal> ont pour but de permettre aux
   administrateurs de disposer de rôles de confiance, mais non
   superutilisateur, capables d'accéder à des fichiers et d'exécuter des
   programmes sur le serveur de bases de données en tant que l'utilisateur qui
   exécute le moteur de bases de données. Comme ces rôles sont capables
   d'accéder à tout fichier sur le système de fichiers du serveur, ils
   contournent toutes les vérifications d'accès au niveau de la base de
   données lors d'accès directs aux fichiers. Ils peuvent utiliser cela pour
   obtenir un accès de niveau superutilisateur. De ce fait, une attention
   toute particulière doit être prise lors de l'affectation de ces rôles aux
   utilisateurs.
  </para>

  <para>
   On portera une attention particulière en accordant ces rôles afin de
   garantir qu'ils ne sont utilisés qu'en cas de nécessiter et en comprenant
   que ces rôles donnent accès à des informations importantes.
  </para>

  <para>
   Les administrateurs peuvent autoriser l'accès à ces rôles aux utilisateurs en utilisant
   la commande <link linkend="sql-grant"><command>GRANT</command></link>&nbsp;:

   <programlisting>
GRANT pg_signal_backend TO admin_user;
   </programlisting>
  </para>

 </sect1>

 <sect1 id="perm-functions">
  <title>Sécurité des fonctions</title>

  <para>
   Les fonctions, les triggers et les politiques de sécurité au niveau ligne
   autorisent à l'intérieur du serveur les utilisateurs à insérer du code que
   d'autres utilisateurs peuvent exécuter sans en avoir l'intention. Par
   conséquent, ces mécanismes permettent aux utilisateurs d'utiliser un
   <quote>cheval de Troie</quote> contre d'autres utilisateurs avec une
   relative facilité. La protection la plus forte est un contrôle strict sur
   qui peut définir des objets. Quand cela n'est pas possible, écrivez les
   requêtes en se référant seulement aux objets dont les propriétaires sont
   dignes de confiance. Supprimez de
   <varname>search_path</varname> tout schéma permettant à des
   utilisateurs non dignes de confiance de créer des objets.
  </para>

  <para>
   Les fonctions sont exécutées à l'intérieur du processus serveur avec les
   droits au niveau système d'exploitation du démon serveur de la base de
   données. Si le langage de programmation utilisé par la fonction autorise les
   accès mémoire non contrôlés, il est possible de modifier les structures de
   données internes du serveur. Du coup, parmi d'autres choses, de telles
   fonctions peuvent dépasser les contrôles d'accès au système. Les langages de
   fonctions qui permettent un tel accès sont considérées <quote>sans
    confiance</quote> et <productname>PostgreSQL</productname> autorise uniquement les
   superutilisateurs à écrire des fonctions dans ces langages.
  </para>
 </sect1>

</chapter>
