<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<chapter id="user-manag">
 <title>Rôles de la base de données</title>

 <para>
  <productname>PostgreSQL</productname> gère les droits d'accès aux bases de
  données en utilisant le concept de <firstterm>rôles</firstterm>. Un rôle peut être
  vu soit comme un utilisateur de la base de données, soit comme un groupe
  d'utilisateurs de la base de données, suivant la façon dont le rôle est
  configuré. Les rôles peuvent posséder des objets de la base de données (par
  exemple des tables) et peuvent affecter des droits sur ces objets à d'autres
  rôles pour contrôler qui a accès à ces objets. De plus, il est possible de
  donner l'<firstterm>appartenance</firstterm> d'un rôle à un autre rôle, l'autorisant
  du coup à utiliser les droits affectés à un autre rôle.
 </para>

 <para>
  Le concept des rôles comprends les concepts des <quote>utilisateurs</quote> et des
  <quote>groupes</quote>. Dans les versions de <productname>PostgreSQL</productname>
  antérieures à la 8.1, les utilisateurs et les groupes étaient des types
  d'entité distincts mais, maintenant, ce ne sont que des rôles. Tout rôle peut
  agir comme un utilisateur, un groupe ou les deux.
 </para>

 <para>
  Ce chapitre décrit comment créer et gérer des rôles. <xref
  linkend="ddl-priv"/> donne plus d'informations sur les effets des droits
  des rôles pour les différents objets de la base de données.
 </para>

 <sect1 id="database-roles">
  <title>Rôles de la base de données</title>

  <indexterm zone="database-roles">
   <primary>rôle</primary>
  </indexterm>

  <indexterm>
   <primary>CREATE ROLE</primary>
  </indexterm>

  <indexterm>
   <primary>DROP ROLE</primary>
  </indexterm>

  <para>
   Conceptuellement, les rôles de la base sont totalement
   séparés des utilisateurs du système d'exploitation. En pratique,
   il peut être commode de maintenir une correspondance mais cela
   n'est pas requis. Les rôles sont globaux à toute une
   installation de groupe de bases de données (et non individuelle pour
   chaque base). Pour créer un rôle, utilisez la commande SQL
   <xref linkend="sql-createrole"/>&nbsp;:
<synopsis>CREATE ROLE <replaceable>nom_utilisateur</replaceable>;</synopsis>
   <replaceable>nom_utilisateur</replaceable> suit les règles des
   identifiants SQL&nbsp;: soit sans guillemets et sans caractères spéciaux,
   soit entre double-guillemets (en pratique, vous voudrez surtout ajouter
   des options supplémentaires, comme <literal>LOGIN</literal>, à cette commande.
   Vous trouverez plus de détails ci-dessous). Pour supprimer un rôle existant,
   utilisez la commande analogue <xref linkend="sql-droprole"/>&nbsp;:
<synopsis>DROP ROLE <replaceable>nom_utilisateur</replaceable>;</synopsis>
  </para>

  <indexterm>
   <primary>createuser</primary>
  </indexterm>

  <indexterm>
   <primary>dropuser</primary>
  </indexterm>

  <para>
   Pour une certaine facilité d'utilisation, les programmes
   <xref linkend="app-createuser"/> et <xref linkend="app-dropuser"/> sont
   fournis comme emballage de ces commandes SQL et peuvent être appelés depuis
   la ligne de commande du shell&nbsp;:
<synopsis>createuser <replaceable>nom_utilisateur</replaceable>
dropuser <replaceable>nom_utilisateur</replaceable></synopsis>
  </para>

  <para>
   Pour déterminer l'ensemble des rôles existants, examinez le catalogue
   système <structname>pg_roles</structname> existant, par exemple
<synopsis>SELECT rolname FROM pg_roles;</synopsis>
   La méta-commande <literal>\du</literal> du programme <xref linkend="app-psql"/> est
   aussi utile pour lister les rôles existants.
  </para>

  <para>
   Afin d'amorcer le système de base de données, un système récemment
   installé contient toujours un rôle prédéfini. Ce rôle est un
   superutilisateur et aura par défaut le même nom que l'utilisateur
   du système d'exploitation qui a initialisé le groupe de bases de
   données (à moins que cela ne soit modifié en lançant la commande
   <command>initdb</command>). Par habitude, ce rôle sera nommé
   <literal>postgres</literal>. Pour créer plus de rôles, vous devez
   d'abord vous connecter en tant que ce rôle initial.
  </para>

  <para>
   Chaque connexion au serveur de la base de données est fait au nom d'un
   certain rôle et ce rôle détermine les droits d'accès initiaux pour les
   commandes lancées sur cette connexion. Le nom du rôle
   à employer pour une connexion à une base particulière est indiqué
   par le client initialisant la demande de connexion et ce, de la
   manière qui lui est propre.  Par exemple, le programme
   <command>psql</command> utilise l'option de ligne de commandes
   <option>-U</option> pour préciser sous quel rôle il se
   connecte. Beaucoup d'applications (incluant <command>createuser</command>
   et <command>psql</command>) utilisent par défaut le nom courant de
   l'utilisateur du système d'exploitation. Par conséquence, il peut souvent
   être pratique de maintenir une correspondance de nommage entre les rôles et
   les utilisateurs du système d'exploitation.
  </para>

  <para>
   La configuration de l'authentification du client détermine avec
   quel rôle de la base, la connexion cliente donnée se
   connectera, comme cela est expliqué dans le
   <xref linkend="client-authentication"/> (donc, un client n'est pas
   obligé de se connecter avec le rôle du même nom que
   son nom d'utilisateur dans le système d'exploitation&nbsp;; de la même
   façon que le nom de connexion d'un utilisateur peut ne pas correspondre à
   son vrai nom). Comme le rôle détermine l'ensemble des
   droits disponibles pour le client connecté, il est important de configurer
   soigneusement les droits quand un environnement multi-utilisateurs est mis en
   place.
  </para>
 </sect1>

 <sect1 id="role-attributes">
  <title>Attributs des rôles</title>

   <para>
    Un rôle de bases de données peut avoir un certain nombre
    d'attributs qui définissent ses droits et interagissent avec
    le système d'authentification du client.

    <variablelist>
     <varlistentry>
      <term>droit de connexion<indexterm><primary>droit de connexion</primary></indexterm></term>
      <listitem>
       <para>
        Seuls les rôles disposant de l'attribut <literal>LOGIN</literal> peuvent être
        utilisés comme nom de rôle initial pour une connexion à une base de
        données. Un rôle avec l'attribut <literal>LOGIN</literal> peut être considéré
        de la même façon qu'un <quote>utilisateur de la base de données</quote>.
        Pour créer un rôle disposant du droit de connexion, utilisez&nbsp;:
<programlisting>CREATE ROLE <replaceable>nom</replaceable> LOGIN;
CREATE USER <replaceable>nom</replaceable>;</programlisting>
        (<command>CREATE USER</command> est équivalent à <command>CREATE ROLE</command>
        sauf que <command>CREATE USER</command> utilise <literal>LOGIN</literal> par défaut
        alors que <command>CREATE ROLE</command> ne le fait pas)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>statut de superutilisateur<indexterm><primary>superutilisateur</primary></indexterm></term>
      <listitem>
       <para>
        Les superutilisateurs ne sont pas pris en compte dans les vérifications
        des droits, sauf le droit de connexion ou d'initier la réplication.
        Ceci est un droit dangereux et ne devrait pas être
        utilisé sans faire particulièrement attention&nbsp;; il est préférable
        de faire la grande majorité de votre travail avec un rôle qui n'est pas
        superutilisateur. Pour créer un nouveau superutilisateur, utilisez
        <literal>CREATE ROLE <replaceable>nom</replaceable>
        SUPERUSER</literal>. Vous devez le faire en tant que superutilisateur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>création de bases de données<indexterm><primary>base de
	données</primary><secondary>droit de création</secondary></indexterm></term>
      <listitem>
       <para>
        Les droits de création de bases doivent être
        explicitement données à un rôle (à l'exception des
        super-utilisateurs qui passent au travers de toute
        vérification de droits). Pour créer un tel rôle,
        utilisez <literal>CREATE ROLE
        <replaceable>nom_utilisateur</replaceable> CREATEDB</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>création de rôle<indexterm><primary>role</primary><secondary>droit de création</secondary></indexterm></term>
      <listitem>
       <para>
        Un rôle doit se voir explicitement donné le droit de créer plus de
        rôles (sauf pour les superutilisateurs vu qu'ils ne sont pas pris en
        compte lors des vérifications de droits). Pour créer un tel rôle,
        utilisez <literal>CREATE ROLE
        <replaceable>nom</replaceable> CREATEROLE</literal>.
        Un rôle disposant du droit <literal>CREATEROLE</literal> peut aussi modifier et
        supprimer d'autres rôles, ainsi que donner ou supprimer l'appartenance à
	ces rôles. Néanmoins, pour créer, modifier, supprimer ou changer
	l'appartenance à un rôle superutilisateur, le statut de superutilisateur
	est requis&nbsp;; <literal>CREATEROLE</literal> n'est pas suffisant pour cela.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>initiating replication<indexterm><primary>role</primary><secondary>privilege to initiate replication</secondary></indexterm></term>
      <listitem>
       <para>
        Un rôle doit se voir explicitement donné le droit d'initier une
        réplication en flux (sauf pour les superutilisateurs, puisqu'ils ne sont pas 
        soumis aux vérifications de permissions). Un rôle utilisé pour la réplication en flux doit
        toujours avoir le droit <literal>LOGIN</literal>. Pour créer un tel
        rôle, utilisez <literal>CREATE ROLE <replaceable>nom</replaceable>
        REPLICATION LOGIN</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>mot de passe<indexterm><primary>mot de passe</primary></indexterm></term>
      <listitem>
       <para>
        Un mot de passe est seulement significatif si la méthode
        d'authentification du client exige que le client fournisse
        un mot de passe quand il se connecte à la base.  Les
        méthodes d'authentification par <option>mot de passe</option> et
        <option>md5</option> utilisent des mots de
        passe.  Les mots de passe de la base de données ne sont pas
        les mêmes que ceux du système d'exploitation.  Indiquez un
        mots de passe lors de la création d'un rôle avec
        <literal>CREATE ROLE
        <replaceable>nom_utilisateur</replaceable> PASSWORD
        '<replaceable>le_mot_de_passe</replaceable>'</literal>. 
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    Les attributs d'un rôle peuvent être modifiés après sa
    création avec <command>ALTER ROLE</command>.<indexterm><primary>ALTER ROLE</primary></indexterm>
    Regardez les pages de références de <xref linkend="sql-createrole"/> et de
    <xref linkend="sql-alterrole"/> pour plus de détails.
   </para>

  <tip>
   <para>
    Une bonne pratique est de créer un rôle qui dispose des droits
    <literal>CREATEDB</literal> et <literal>CREATEROLE</literal> mais qui n'est pas un
    superutilisateur, et d'utiliser ce rôle pour toute la gestion des bases
    de données et des rôles. Cette approche évite les dangers encourus en
    travaillant en tant que superutilisateur pour des tâches qui n'ont pas
    besoin de cet état.
   </para>
  </tip>

  <para>
   Un rôle peut aussi configurer ses options par défaut pour de
   nombreux paramètres de configuration décris dans le
   <xref linkend="runtime-config"/>. Par exemple, si, pour une raison
   ou une autre, vous voulez désactiver les parcours d'index (conseil&nbsp;:
   ce n'est pas une bonne idée) à chaque fois que vous vous connectez, vous
   pouvez utiliser&nbsp;:
<programlisting>ALTER ROLE myname SET enable_indexscan TO off;</programlisting>
   Cela sauve les paramètres (mais ne les applique pas immédiatement).
   Dans les connexions ultérieures de ce rôle, c'est comme si 
   <literal>SET enable_indexscan TO off</literal> avait été appelé
   juste avant le démarrage de la session. Vous pouvez toujours
   modifier les paramètres durant la session. Pour supprimer une configuration
   par défaut spécifique à un rôle, utilisez <literal>ALTER ROLE
   <replaceable>nom_utilisateur</replaceable> RESET <replaceable>nom_variable</replaceable></literal>.
   Notez que les valeurs par défaut spécifiques aux rôles sans droit de connexion
   (<literal>LOGIN</literal>) sont vraiment inutiles car ils ne seront jamais appelés.
  </para>
 </sect1>

 <sect1 id="role-membership">
  <title>Appartenance d'un rôle</title>

  <indexterm zone="role-membership">
   <primary>rôle</primary><secondary>appartenance</secondary>
  </indexterm>

  <para>
   Il est souvent intéressant de grouper les utilisateurs pour faciliter la
   gestion des droits&nbsp;: de cette façon, les droits peuvent être donnés ou
   supprimés pour tout un groupe. Dans <productname>PostgreSQL</productname>,
   ceci se fait en créant un rôle représentant le groupe, puis en ajoutant
   les rôles utilisateurs individuels <firstterm>membres</firstterm> de ce groupe.
  </para>

  <para>
   Pour configurer un rôle en tant que groupe, créez tout d'abord le rôle&nbsp;:
<synopsis>CREATE ROLE <replaceable>nom</replaceable>;</synopsis>
   Typiquement, un rôle utilisé en tant que groupe n'aura pas l'attribut
   <literal>LOGIN</literal> bien que vous puissiez le faire si vous le souhaitez.
  </para>

  <para>
   Une fois que ce rôle existe, vous pouvez lui ajouter et lui supprimer des
   membres en utilisant les commandes <xref linkend="sql-grant"/> et <xref
   linkend="sql-revoke"/>&nbsp;:
<synopsis>GRANT <replaceable>role_groupe</replaceable> TO <replaceable>role1</replaceable>, ... ;
REVOKE <replaceable>role_groupe</replaceable> FROM <replaceable>role1</replaceable>, ... ;</synopsis>
   Vous pouvez aussi faire en sorte que d'autres rôles groupes appartiennent à
   ce groupe (car il n'y a pas réellement de distinction entre les rôles groupe
   et les rôles non groupe). La base de données ne vous laissera pas configurée
   des boucles circulaires d'appartenance. De plus, il est interdit de faire en
   sorte qu'un membre appartienne à <literal>PUBLIC</literal>.
  </para>

  <para>
   Les membres d'un rôle groupe peuvent utiliser les droits du rôle de deux façons.
   Tout d'abord, chaque membre d'un groupe peut exécuter explicitement
   <xref linkend="sql-set-role"/> pour
   <quote>devenir</quote> temporairement le rôle groupe. Dans cet état, la session
   de la base de données a accès aux droits du rôle groupe plutôt qu'à ceux
   du rôle de connexion original et tous les objets créés sont considérés comme
   appartenant au rôle groupe, et non pas au rôle utilisé lors de la connexion.
   Deuxièmement, les rôles membres qui ont l'attribut <literal>INHERIT</literal>
   peuvent utiliser automatiquement les droits des rôles dont ils sont
   membres, ceci incluant les droits hérités par ces rôles.
   Comme exemple, supposons que nous avons lancé les commandes
   suivantes&nbsp;:
<programlisting>CREATE ROLE joe LOGIN INHERIT;
CREATE ROLE admin NOINHERIT;
CREATE ROLE wheel NOINHERIT;
GRANT admin TO joe;
GRANT wheel TO admin;</programlisting>
   Immédiatement après connexion en tant que <literal>joe</literal>, la session de la
   base de données peut utiliser les droits donnés directement à
   <literal>joe</literal> ainsi que ceux donnés à <literal>admin</literal> parce que
   <literal>joe</literal> <quote>hérite</quote> des droits de <literal>admin</literal>. Néanmoins,
   les droits donnés à <literal>wheel</literal> ne sont pas disponibles parce que,
   même si <literal>joe</literal> est un membre indirect de <literal>wheel</literal>,
   l'appartenance se fait via <literal>admin</literal> qui dispose de l'attribut
   <literal>NOINHERIT</literal>. Après&nbsp;:
<programlisting>SET ROLE admin;</programlisting>
   la session aura la possibilité d'utiliser les droits donnés à
   <literal>admin</literal> mais n'aura plus accès à ceux de <literal>joe</literal>. Après&nbsp;:
<programlisting>SET ROLE wheel;</programlisting>
   la session pourra utiliser uniquement ceux de <literal>wheel</literal>, mais ni
   ceux de <literal>joe</literal> ni ceux de <literal>admin</literal>. L'état du droit initial
   peut être restauré avec une des instructions suivantes&nbsp;:
<programlisting>SET ROLE joe;
SET ROLE NONE;
RESET ROLE;</programlisting>
  </para>

  <note>
   <para>
    La commande <command>SET ROLE</command> autorisera toujours la sélection de tout
    rôle dont le rôle de connexion est membre directement ou indirectement.
    Du coup, dans l'exemple précédent, il n'est pas nécessaire de devenir
    <literal>admin</literal> pour devenir <literal>wheel</literal>.
   </para>
  </note>

  <note>
   <para>
    Dans le standard SQL, il existe une distinction claire entre les
    utilisateurs et les rôles. Les utilisateurs ne peuvent pas hériter
    automatiquement alors que les rôles le peuvent. Ce comportement est obtenu
    dans <productname>PostgreSQL</productname> en donnant aux rôles utilisés
    comme des rôles SQL l'attribut <literal>INHERIT</literal>, mais en donnant aux
    rôles utilisés en tant qu'utilisateurs SQL l'attribut
    <literal>NOINHERIT</literal>. Néanmoins, par défaut,
    <productname>PostgreSQL</productname> donne à tous les rôles l'attribut
    <literal>INHERIT</literal> pour des raisons de compatibilité avec les versions
    précédant la 8.1 dans lesquelles les utilisateurs avaient toujours les
    droits des groupes dont ils étaient membres.
   </para>
  </note>

  <para>
   Les attributs <literal>LOGIN</literal>, <literal>SUPERUSER</literal>, <literal>CREATEDB</literal>
   et <literal>CREATEROLE</literal> peuvent être vus comme des droits spéciaux qui ne
   sont jamais hérités contrairement aux droits ordinaires sur les objets de la
   base. Vous devez réellement utiliser <command>SET ROLE</command> vers un rôle
   spécifique pour avoir un de ces attributs et l'utiliser. Pour continuer avec
   l'exemple précédent, nous pourrions très bien choisir de donner les droits
   <literal>CREATEDB</literal> et <literal>CREATEROLE</literal> au rôle <literal>admin</literal>.
   Puis, une session connectée en tant que le rôle <literal>joe</literal> n'aurait pas
   ces droits immédiatement, seulement après avoir exécuté <command>SET ROLE
   admin</command>.
  </para>

  <para>
  </para>

  <para>
   Pour détruire un rôle groupe, utilisez <xref
   linkend="sql-droprole"/>:
<synopsis>DROP ROLE <replaceable>nom</replaceable>;</synopsis>
   Toute appartenance à ce rôle est automatiquement supprimée (mais les rôles
   membres ne sont pas autrement affectés). Notez néanmoins que tous les objets
   dont le groupe était propriétaire doivent d'abord être supprimés ou
   réaffectés&nbsp;; et tous les droits accordés au rôle groupe doivent être
   supprimés.
  </para>
 </sect1>

 <sect1 id="perm-functions">
  <title>Sécurité des fonctions et déclencheurs (triggers)</title>

  <para>
   Les fonctions et les déclencheurs autorisent à l'intérieur du
   serveur les utilisateurs à insérer du code que d'autres
   utilisateurs peuvent exécuter sans en avoir l'intention. Par
   conséquent, les deux mécanismes permettent aux utilisateurs
   d'utiliser un <quote>cheval de Troie</quote> contre d'autres avec
   une relative facilité. La seule protection réelle est d'effectuer
   un fort contrôle sur ceux qui peuvent définir des fonctions.
  </para>

  <para>
   Les fonctions sont exécutées à l'intérieur du processus serveur avec les
   droits au niveau système d'exploitation du démon serveur de la base de
   données. Si le langage de programmation utilisé par la fonction autorise les
   accès mémoire non contrôlés, il est possible de modifier les structures de
   données internes du serveur. Du coup, parmi d'autres choses, de telles
   fonctions peuvent dépasser les contrôles d'accès au système. Les langages de
   fonctions qui permettent un tel accès sont considérées <quote>sans
   confiance</quote> et <productname>PostgreSQL</productname> autorise uniquement les
   superutilisateurs à écrire des fonctions dans ces langages.
  </para>
 </sect1>

</chapter>
