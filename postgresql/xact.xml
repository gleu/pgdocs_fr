<?xml version="1.0" encoding="UTF-8"?>
<chapter id="transactions">
 <title>Traitement des transactions</title>

 <para>
  Ce chapitre donne un aperçu du fonctionnement interne du système de gestion
  des transactions de <productname>PostgreSQL</productname>. Le mot transaction
  est souvent abrégé en <firstterm>xact</firstterm>.
 </para>

 <sect1 id="transaction-id">

  <title>Transactions et identifiants</title>

  <para>
   Les transactions peuvent être créées explicitement en utilisant
   <command>BEGIN</command> ou <command>START TRANSACTION</command>
   et elles sont terminées en utilisant
   <command>COMMIT</command> ou <command>ROLLBACK</command>. Les requêtes SQL
   en dehors de transactions explicites utilisent automatiquement des
   transactions à une requête.
  </para>

  <para>
   Chaque transaction est identifiée par un
   <literal>VirtualTransactionId</literal> unique (aussi appelé
   <literal>virtualXID</literal> ou <literal>vxid</literal>), qui est compris
   d'un identifiant du processus serveur (ou <literal>procNumber</literal>) et
   d'un nombre local à chaque backend affecté séquentiellement, connu sous
   le nom de <literal>localXID</literal>. Par exemple, l'identifiant de transaction
   virtuelle <literal>4/12532</literal> a le <literal>procNumber</literal>
   <literal>4</literal> et un <literal>localXID</literal>
   <literal>12532</literal>.
  </para>

  <para>
   Les <literal>TransactionId</literal> non virtuels (ou <literal>xid</literal>),
   par exemple <literal>278394</literal>, sont affectés séquentiellement aux
   transactions à partir d'un compteur global utilisé par toutes les bases
   de données de l'instance <productname>PostgreSQL</productname>. Cette
   affectation survient quand une transaction écrit pour la première fois dans
   la base de données. Cela signifie que les xids avec une numérotation basse
   ont commencé à écrire avant les xids ayant une numérotation haute. Notez
   que l'ordre dans lequel les transactions réalisent leur première écriture
   en base peut être différent de l'ordre dans lequel les transactions ont
   démarré, tout particulièrement si la transaction a commencé avec des requêtes
   qui n'ont fait que des lectures dans la base.
  </para>

  <para>
   Le type interne d'un identifiant de transaction, <type>xid</type>, est
   sur 32 bits et boucle après 4 milliards de transactions. Un epoch sur 32 bit
   est incrémenté à chaque boucle. Il existe aussi un type <type>xid8</type>
   sur 64 bits qui inclut cet epoch et, de ce fait, ne boucle pas pendant toute
   la vie d'une installation&nbsp;; il peut être converti en xid. Les fonctions
   de <xref linkend="functions-pg-snapshot"/> renvoient des valeurs de type
   <type>xid8</type>. Les xid sont utilisés comme base du mécanisme de concurrence
   <link linkend="mvcc">MVCC</link> de <productname>PostgreSQL</productname> ainsi
   que pour la réplication en flux.
  </para>

  <para>
   Quand une transaction de niveau haut avec un xid (non virtuel) se valide,
   elle est marquée comme validée dans le sous-répertoire
   <filename>pg_xact</filename>. Des informations supplémentaires sont
   enregistrées dans le répertoire <filename>pg_commit_ts</filename> si <xref
   linkend="guc-track-commit-timestamp"/> est activé.
  </para>

  <para>
   En plus des <literal>vxid</literal> et <literal>xid</literal>, les transactions
   préparées se voient affectées des identifiants globaux, <foreignphrase>Global
   Transaction Identifiers</foreignphrase> (<acronym>GID</acronym>). Les GID sont
   des chaînes comprenant jusqu'à 200 octets. La correspondance GID vers xid est
   montrée dans <link
   linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>.
  </para>
 </sect1>

 <sect1 id="xact-locking">
  <title>Transactions et verrouillages</title>

  <para>
   Les identifiants des transactions en cours d'exécution sont affichées dans la
   vue <link linkend="view-pg-locks"><structname>pg_locks</structname></link>
   et ses colonnes <structfield>virtualxid</structfield> et
   <structfield>transactionid</structfield>. Les transactions en lecture seule
   auront un <structfield>virtualxid</structfield> mais un NULL pour
   <structfield>transactionid</structfield>, alors que les deux colonnes seront
   remplies pour les transactions en lecture/écriture.
  </para>

  <para>
   Certains types de verrou attendent un <structfield>virtualxid</structfield>,
   alors que d'autres types de verrou attendent un
   <structfield>transactionid</structfield>. Les verrous de lecture et écriture
   de lignes sont enregistrés directement dans les lignes verrouillées et
   peuvent être inspectés en utilisant l'extension <xref linkend="pgrowlocks"/>.
   Les verrous de lignes en lecture peuvent aussi nécessiter l'affectation
   d'identifiants multixact (<literal>mxid</literal>&nbsp;;  voir <xref
   linkend="vacuum-for-multixact-wraparound"/>).
  </para>
 </sect1>

 <sect1 id="subxacts">
  <title>Sous-transactions</title>

  <para>
   Les sous-transactions sont commencées dans des transactions, permettant à
   de grosses transactions d'être séparées en plusieurs unités plus petites.
   Les sous-transactions peuvent être validées ou annulées sans affecter leurs
   transactions parentes, permettant ainsi aux transactions parentes de continuer.
   Cela permet une gestion plus facile des erreurs, qui est un problème fréquent
   lors du développement d'applications. Le mot sous-transaction est souvent
   abrégé en <firstterm>subxact</firstterm>.
  </para>

  <para>
   Les sous-transactions peuvent être démarrées explicitement en utilisant
   la commande <command>SAVEPOINT</command>, mais peuvent aussi être
   démarrées d'autres façons, par exemple avec la clause
   <literal>EXCEPTION</literal> en PL/pgSQL.
   PL/Python and PL/TCL acceptent aussi les sous-transactions explicites.
   Les sous-transactions peuvent aussi être démarrées à partir d'autres
   sous-transactions. La transaction de niveau haut et ses sous-transactions
   forment une hiérarchie ou arbre, ce qui explique pour nous faisons
   référence à la transaction principale avec le terme de transaction de
   niveau haut.
  </para>

  <para>
   Si une sous-transaction est affectée à un identifiant de transaction non
   virtuel, son identifiant de transaction est nommé un <quote>subxid</quote>.
   Les transactions en lecture seule ne se voient pas affectées de subxid, 
   mais une fois qu'elles écrivent, elles s'en voient affecter un. Une réaction
   en chaîne réalise une affectation d'identifiants de transactions non virtuels
   aux parents de la subxid et ainsi de suite jusqu'à la transaction de niveau
   haut. Nous nous assurons qu'un xid parent est toujours plus petit que n'importe
   quel subxid enfants.
  </para>

  <para>
   Le xid du parent immédiat de chaque subxid est enregistré dans le répertoire
   <filename>pg_subtrans</filename>. Aucune entrée n'est faite pour les xid de
   niveau haut vu qu'ils n'ont pas de parent. Aucune entrée n'est fait pour
   les sous-transactions en lecture seule.
  </para>

  <para>
   Quand une sous-transaction valide, toutes les sous-transactions enfants
   validées ayant des subxid seront considérées sous-validées dans cette
   transaction. Quand une sous-transaction annule, toutes les sous-transactions
   enfants seront aussi considérées comme annulées.
  </para>

  <para>
   Quand une transaction de niveau haut avec un xid est validée, toutes les
   sous-transactions enfants sous-validées sont aussi enregistrées de façon
   permanente dans le répertoire <filename>pg_xact</filename> comme étant
   validées. Si la transaction de niveau haut annule, toutes ses
   sous-transactions sont aussi annulées, même si elles étaient sous-validées.
  </para>

  <para>
   Plus chaque transaction conserve de sous-transactions ouvertes (ni annulées
   ni validées), plus importante sera la surcharge du système de gestion des
   transactions. Jusqu'à 64 sous-transactions peuvent être placées en cache en
   mémoire partagée pour chaque processus serveur. Après cela, la charge des
   entrées/sorties disques augmente significativement à cause des recherches
   supplémentaires dans les entrées subxid de <filename>pg_subtrans</filename>.
  </para>
 </sect1>

 <sect1 id="two-phase">
  <title>Transactions en deux phases</title>

  <para>
   <productname>PostgreSQL</productname> accepte un protocole de validation en
   deux phases (<foreignphrase>two-phase commit</foreignphrase> ou
   <acronym>2PC</acronym>) qui permet à des systèmes distribués de fonctionner
   ensemble d'une façon transactionnelle. Les commandes sont <command>PREPARE
   TRANSACTION</command>, <command>COMMIT PREPARED</command> et
   <command>ROLLBACK PREPARED</command>. Les transactions en deux phases ont
   pour but d'être utilisées par des systèmes de gestion externe des
   transactions. <productname>PostgreSQL</productname> suit les fonctionnalités
   et le modèle proposés par le standard X/Open XA, mais n'implémente pas certains
   aspects moins fréquemment utilisés.
  </para>

  <para>
   Quand l'utilisateur exécute <command>PREPARE TRANSACTION</command>, les
   seules commandes possibles après sont <command>COMMIT PREPARED</command>
   ou <command>ROLLBACK PREPARED</command>. En général, cet état préparé est
   censé avoir une durée de vie très courte, mais des problèmes externes de
   disponibilité pourraient forcer les transactions à rester dans cet état
   pour un long moment. Les transactions préparées rapides sont stockées
   uniquement en mémoire partagée et dans les WAL. Les transactions qui durent
   pendant plusieurs checkpoints sont enregistrées dans le répertoire
   <filename>pg_twophase</filename>. Les transactions préparées en cours
   peuvent être inspectées en utilisant la vue <link
   linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>.
  </para>
 </sect1>

</chapter>
