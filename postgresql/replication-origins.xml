<?xml version="1.0" encoding="UTF-8"?>
<chapter id="replication-origins">
 <title>Tracer la progression de la réplication</title>

 <indexterm zone="replication-origins">
  <primary>Tracer la progression de la réplication</primary>
 </indexterm>
 <indexterm zone="replication-origins">
  <primary>Origines de la réplication</primary>
 </indexterm>

 <para>
  Les origines de réplication ont pour but de rendre plus simple les solutions
  de réplication logique utilisant le <link linkend="logicaldecoding">décodage
   logique</link>. Elles fournissent une solution à deux problèmes
  habituels&nbsp;:
  <itemizedlist>
   <listitem>
    <para>
     comment suivre la progression de la
     réplication de manière fiable ;
    </para>
   </listitem>
   <listitem>
    <para>
     comment modifier le comportement de la réplication basée sur l'origine
     d'une ligne&nbsp;; par exemple pour empêcher les boucles dans les
     configurations de réplication bidirectionnelle.
    </para>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Les origines de réplication n'ont que deux propriétés, un nom et un
  OID. Le nom, qui doit être utilisé pour faire référence à l'origine entre
  les systèmes, est une donnée libre de type <type>text</type>. Il doit être
  utilisé d'une façon qui rend improbable les conflits entre des origines de
  réplication créées par différentes solutions de réplication, par exemple en
  préfixant le nom avec celui de la solution de réplication. L'OID est utilisé
  seulement pour éviter d'avoir à stocker la version longue dans les
  situations où l'espace consommé est critique. Il ne doit jamais être partagé
  entre plusieurs systèmes.
 </para>

 <para>
  Les origines de réplication peuvent être créées en utilisant la fonction
  <link
  linkend="pg-replication-origin-create"><function>pg_replication_origin_create()</function></link>,
  supprimées avec la fonction <link
  linkend="pg-replication-origin-drop"><function>pg_replication_origin_drop()</function></link>
  et consultées dans le catalogue système <link
  linkend="catalog-pg-replication-origin"><structname>pg_replication_origin</structname></link>.
 </para>

 <para>
  Une partie non triviale de la construction d'une solution de réplication est
  le suivi de la progression de la réplication d'une manière fiable.
  Quand le processus d'application des modifications ou l'instance complète
  meurt, il doit être possible de savoir jusqu'où les données ont été
  répliquées. Les solutions naïves, comme la mise à jour d'une ligne pour chaque
  transaction rejouée, ont leurs problèmes, comme une surcharge à l'exécution et
  une fragmentation de la base de données.
 </para>

 <para>
  En utilisant l'infrastructure d'origine de réplication, une session peut
  être marquée comme rejouant depuis un nœud distant (en utilisant la
  fonction <link linkend="pg-replication-origin-session-setup">
   <function>pg_replication_origin_session_setup()</function></link>).
  De plus, le <acronym>LSN</acronym> et l'horodatage de la validation de toute
  transaction source peuvent être configurés, transaction par transaction, en
  utilisant <link linkend="pg-replication-origin-xact-setup">
   <function>pg_replication_origin_xact_setup()</function></link>. Si cela est
  fait, la progression de la réplication sera conservée de manière pérenne, même
  en cas de crash. La progression du rejeu pour toutes les origines de
  réplication peut être visualisée dans la vue <link linkend="view-pg-replication-origin-status">
   <structname>pg_replication_origin_status</structname></link>. Le
  progrès d'une origine précise, par exemple lors de la reprise de la
  réplication, peut se faire en utilisant la fonction <link
  linkend="pg-replication-origin-progress">
   <function>pg_replication_origin_progress()</function></link> pour
  toute origine ou la fonction <link
  linkend="pg-replication-origin-session-progress">
   <function>pg_replication_origin_session_progress()</function></link>
  pour l'origine configurée dans la session courante.
 </para>

 <para>
  Dans les topologies de réplication plus complexes que la réplication d'un
  système vers un autre système, un autre problème peut être
  la difficulté d'éviter la réplication de lignes déjà rejouées. Ceci peut mener
  à des cycles et une mauvaise efficacité dans la réplication. Les origines de
  réplication fournissent un mécanisme optionnel pour reconnaître et empêcher
  cela. Lorsqu'elles sont configurées en utilisant les fonctions évoquées
  dans le paragraphe précédent, chaque modification et chaque transaction
  passée aux fonctions de rappel (<foreignphrase>callbacks</foreignphrase>)
  des plugins en sortie (voir <xref linkend="logicaldecoding-output-plugin"/>)
  générées par la session sont
  tracées avec l'origine de réplication de la session qui les a générées. Ceci
  permet de les traiter différemment par le plugin de sortie, et par exemple
  d'ignorer toutes les lignes qui ne proviennent pas de l'origine. De plus, la
  fonction de rappel <link
  linkend="logicaldecoding-output-plugin-filter-origin">
   <function>filter_by_origin_cb</function></link> peut être utilisée
  pour filtrer le flux de modifications de décodage logique basé sur la
  source. Bien que moins flexible, le filtre via cette fonction est
  considérablement plus efficace que le filtre d'un plugin de sortie.
 </para>
</chapter>
