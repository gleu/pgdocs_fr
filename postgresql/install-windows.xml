<?xml version="1.0" encoding="UTF-8"?>
<chapter id="install-windows">
 <title>Installation à partir du code source sur
  <productname>Windows</productname></title>

 <indexterm>
  <primary>installation</primary>
  <secondary>sur Windows</secondary>
 </indexterm>

 <para>
  Il est recommandé que la plupart des utilisateurs téléchargent la
  distribution binaire pour Windows, disponible sous la forme d'un package
  d'installation graphique à partir du site web du projet
  <productname>PostgreSQL</productname> sur <ulink
  url="https://www.postgresql.org/download/"></ulink>. La compilation à partir
  des sources n'est destinée qu'aux personnes qui développent
  <productname>PostgreSQL</productname> ou des extensions.
 </para>

 <para>
  Il existe différentes façons de construire PostgreSQL sur
  <productname>Windows</productname>. La façon la plus simple de le faire
  avec les outils Microsoft est d'installer
  <productname>Visual Studio 2022</productname>, et d'utiliser son compilateur. Il est aussi
  possible de construire PostgreSQL avec <productname>Microsoft Visual C++
   2013 à 2022</productname>. Dans certains cas, il faut installer le
  <productname>Windows SDK</productname> en plus du compilateur.
 </para>

 <para>
  Il est aussi possible de construire PostgreSQL avec les outils de
  compilation GNU fournis par <productname>MinGW</productname>, ou avec
  <productname>Cygwin</productname> pour les anciennes versions de
  <productname>Windows</productname>.
 </para>

 <para>
  <productname>MinGW</productname> ou
  <productname>Cygwin</productname> utilisent le système habituel de
  compilation (voir <xref linkend="installation"/>, et les notes spécifiques
  dans <xref linkend="installation-notes-mingw"/> et <xref linkend
  ="installation-notes-cygwin"/>). Pour produire des binaires natifs 64 bits
  dans ces environnements, utilisez les outils de
  <productname>MinGW-w64</productname>. Ils peuvent également être
  utilisés pour cross-compiler vers des systèmes
  <productname>Windows</productname> 32 et 64 bits sur d'autres machines,
  comme <productname>Linux</productname> et
  <productname>macOS</productname>. <productname>Cygwin</productname>
  n'est pas recommandé pour un serveur de
  production, et ne devrait être utilisé qu'à destination
  d'anciennes versions de <productname>Windows</productname>, où la
  construction native ne fonctionne pas. Les exécutables officiels sont construits avec
  <productname>Visual Studio</productname>.
 </para>

 <para>
  Les exécutables natifs de <application>psql</application> ne supportent
  pas l'édition de la ligne de commande. La version de psql construite avec
  <productname>Cygwin</productname> la supporte,
  donc elle devrait être utilisée là où on a besoin d'un psql
  interactif sous <productname>Windows</productname>.
 </para>

 <sect1 id="install-windows-full">
  <title>Construire avec <productname>Visual C++</productname> ou le
   <productname>Microsoft Windows SDK</productname></title>

  <para>
   PostgreSQL peut être compilés avec la suite de compilation Visual
   C++ de Microsoft. Les compilateurs peuvent être soit <productname>Visual
    Studio</productname>, soit <productname>Visual Studio Express</productname>
   soit certaines versions du <productname>Microsoft Windows
    SDK</productname>. Si vous n'avez pas déjà un environnement
   <productname>Visual Studio</productname> en place, le plus simple est
   d'utiliser les compilateurs de <productname>Visual Studio 2022</productname>
   ou ceux du <productname>Windows SDK 10</productname>,
   tous les deux disponibles en téléchargement libre sur le site de Microsoft.
  </para>

  <para>
   Compiler en 32 bits et 64 bits est possible avec la suite Microsoft
   Compiler. Compiler en 32 bits est possible à l'aide de
   <productname>Visual Studio 2013</productname> jusqu'à
   <productname>Visual Studio 2022</productname>, ainsi qu'avec les versions
   autonomes Windows SDK, de la version 8.1a à
   la version 10. Les compilations 64 bits sont supportées avec
   <productname>Microsoft Windows SDK</productname>, versions 8.1a à
   version 10, ou <productname>Visual Studio 2013</productname> et ses versions
   ultérieures. La compilation est supportée à partir de <productname>Windows
    7</productname> et <productname>Windows Server 2008 R2 SP1</productname>,
   en compilant avec <productname>Visual Studio 2013</productname> jusqu'à
   <productname>Visual Studio 2022</productname>.
   <!--
       For 2013 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2013-sysrequirements-vs
       For 2015 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2015-sysrequirements-vs
       For 2017 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2017-system-requirements-vs
       For 2019 requirements:
       https://docs.microsoft.com/en-us/visualstudio/releases/2019/system-requirements
       For 2022 requirements:
       https://docs.microsoft.com/en-us/visualstudio/releases/2022/system-requirements
   -->
  </para>

  <para>
   Les outils pour compiler avec <productname>Visual C++</productname> ou
   <productname>Platform SDK</productname> sont dans le répertoire
   <filename>src\tools\msvc</filename>. Lors de la compilation, assurez-vous
   qu'il n'y a pas d'outils de <productname>MinGW</productname> ou
   <productname>Cygwin</productname> présents dans votre <literal>PATH</literal>
   système. Assurez-vous aussi que vous avez tous les outils Visual C++
   requis disponibles dans le <literal>PATH</literal>.
   Dans <productname>Visual Studio</productname>, lancez le
   <application>Visual Studio Command Prompt</application>. Pour compiler
   une version 64 bits, vous devez utiliser la version 64 bits, et inversement.
   À partir de <productname>Visual Studio 2017</productname>,
   ceci peut se faire à partir de la ligne de
   commande en utilisant <command>VsDevCmd.bat</command> (voir
   <command>-help</command> pour les options disponibles et leur valeurs par
   défaut). <command>vsvars32.bat</command> est disponible dans
   <productname>Visual Studio 2015</productname> et les versions antérieures
   dans le même but. À partir du <application>Visual Studio Command
    Prompt</application>, vous pouvez modifier l'architecture CPU ciblée, le
   type de compilation, et le système d'exploitation cible grâce à la
   commande <command>vcvarsall.bat</command>. Par exemple,
   <command>vcvarsall.bat x64 10.0.10240.0</command> ciblera Windows 10
   en 64 bits. Voir <command>-help</command> pour les
   autres options de <command>vcvarsall.bat</command>. Toutes les commandes
   doivent être exécutées à partir du répertoire
   <filename>src\tools\msvc</filename>.
  </para>

  <para>
   Avant de compiler, il faudra peut-être éditer le fichier
   <filename>config.pl</filename> pour y modifier toutes les options de
   configuration nécessaires, ainsi que les chemins utilisés par les
   bibliothèques tierces. La configuration complète est déterminée
   tout d'abord en lisant et en analysant le fichier
   <filename>config_default.pl</filename>, puis en appliquant les
   modifications provenant du fichier <filename>config.pl</filename>. Par
   exemple, pour indiquer l'emplacement de votre installation de
   <productname>Python</productname>, placez la ligne suivante dans
   <filename>config.pl</filename>&nbsp;:
   <programlisting>
   $config->{python} = 'c:\python26';
   </programlisting>
   Vous n'avez besoin de spécifier que les paramètres différents
   de ceux définis dans <filename>config_default.pl</filename>.
  </para>

  <para>
   Si vous avez besoin de configurer d'autres variables d'environnement, créez
   un fichier <filename>buildenv.pl</filename>, et placez-y les
   commandes souhaitées. Par exemple, pour ajouter le chemin vers bison s'il
   ne se trouve pas dans le <literal>PATH</literal>, créez un fichier contenant&nbsp;:
   <programlisting>
   $ENV{PATH}=$ENV{PATH} . ';c:\chemin\vers\bison\bin';
   </programlisting>
  </para>

  <para>
   Pour passer d'autres arguments en ligne de commande à la commande
   de compilation de Visual Studio (msbuild or vcbuild) :
   <programlisting>
$ENV{MSBFLAGS}="/m";
   </programlisting>
  </para>

  <sect2>
   <title>Prérequis</title>

   <para>
    Les outils suivants sont requis pour compiler
    <productname>PostgreSQL</productname>. Utilisez le fichier
    <filename>config.pl</filename> pour indiquer les chemins
    des bibliothèques.

    <variablelist>
     <varlistentry>
      <term><productname>Microsoft Windows SDK</productname></term>
      <listitem>
       <para>
        Si votre environnement de compilation ne contient pas une version
        supportée du <productname>Microsoft Windows SDK</productname>, il est
        recommandé de mettre à jour vers la dernière version supportée
        (actuellement la 10), téléchargeable sur le <ulink
        url="https://www.microsoft.com/download/">site de Microsoft</ulink>.
       </para>

       <para>
        Vous devez toujours inclure la partie <application>Windows Headers and
         Libraries</application> du SDK. Si vous installez un
        <productname>Windows SDK</productname> incluant les
        <application>Visual C++ Compilers</application>, vous n'avez pas besoin de
        <productname>Visual Studio</productname>. Notez que la version 8.0a du
        Windows SDK ne contient plus d'environnement complet de compilation en
        ligne de commande.
       </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>ActiveState Perl</productname></term>
      <listitem>
       <para>
        ActiveState Perl est requis pour exécuter les scripts de compilation.
        La commande Perl de MinGW et de Cygwin ne fonctionnera pas. ActiveState Perl
        doit aussi être présent dans le <literal>PATH</literal>. Ses binaires
        sont téléchargeables à partir du <ulink
        url="https://www.activestate.com">site officiel</ulink> (il faut
        une version 5.8.3, la distribution standard libre est
        suffisante).
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    Les produits suivants ne sont pas nécessaires pour démarrer, mais sont
    nécessaires pour construire la distribution complète. Utilisez le fichier
    <filename>config.pl</filename> pour indiquer les chemins
    des bibliothèques.

    <variablelist>
     <varlistentry>
      <term><productname>ActiveState TCL</productname></term>
      <listitem>
       <para>
        Nécessaire pour construire <application>PL/Tcl</application> (NB&nbsp;:
        il faut la version 8.4, la distribution standard libre est suffisante).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>Bison</productname> et
       <productname>Flex</productname></term>
      <listitem>
       <para>
        <productname>Bison</productname> et <productname>Flex</productname>
        sont nécessaires pour compiler à partir de Git, mais pas pour
        compiler à partir d'une version distribuée. Seul
        <productname>Bison</productname> 1.875, ou les versions 2.2 et
        ultérieures fonctionneront. <productname>Flex</productname> doit être
        en version 2.5.31 ou supérieure.
       </para>

       <para>
        <productname>Bison</productname> et <productname>Flex</productname>
        sont inclus dans la suite d'outils <productname>msys</productname>,
        disponible à partir de son <ulink
        url="http://www.mingw.org/wiki/MSYS">site officiel</ulink>, comme
        partie de la suite de compilation <productname>MinGW</productname>.
       </para>

       <para>
        Le répertoire contenant
        <filename>flex.exe</filename> et <filename>bison.exe</filename>
        devra être ajouté à la
        variable d'environnement <literal>PATH</literal> dans <filename>buildenv.pl</filename>
        s'il n'y est pas déjà. Dans le cas de MinGW, le répertoire est le
        sous-répertoire <filename>\msys\1.0\bin</filename> de votre répertoire
        d'installation de MinGW.
       </para>

       <note>
        <para>
         La distribution Bison de GnuWin32 a apparemment un bug menant à un
         dysfonctionnement de Bison s'il est installé dans un répertoire
         dont le nom contient des espaces, tel que l'emplacement par défaut
         dans les installations en anglais&nbsp;: <filename>C:\Program
          Files\GnuWin32</filename>. Installez-le donc plutôt dans
         <filename>C:\GnuWin32</filename>, ou utilisez le chemin court NTFS de
         GnuWin32 dans votre variable d'environnement PATH (par exemple
         <filename>C:\PROGRA~1\GnuWin32</filename>).
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>Diff</productname></term>
      <listitem>
       <para>
        Diff est nécessaire pour exécuter les tests de régression, et peut
        être téléchargé à partir de la <ulink
        url="http://gnuwin32.sourceforge.net">page du projet gnuwin32 sur
         Sourceforge</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>Gettext</productname></term>
      <listitem>
       <para>
        Gettext est requis pour construire le support des langues (NLS), et
        peut être téléchargé à partir de la <ulink
        url="http://gnuwin32.sourceforge.net">page du projet gnuwin32 sur
         Sourceforge</ulink>. Notez que les binaires, dépendances et
        fichiers d'en-tête sont tous nécessaires.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>MIT Kerberos</productname></term>
      <listitem>
       <para>
        Requis pour le support de l'authentification GSSAPI. MIT Kerberos est
        téléchargeable sur le <ulink
        url="https://web.mit.edu/Kerberos/dist/index.html">site du MIT</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>libxml2</productname> et
       <productname>libxslt</productname></term>
      <listitem>
       <para>
        Nécessaire pour le support du XML. Les binaires sont disponibles sur
        <ulink url="https://zlatkovic.com/pub/libxml">
         zlatkovic.com</ulink> et les sources sur le <ulink
        url="http://xmlsoft.org">xmlsoft.org</ulink>. Notez que libxml2
        nécessite iconv, disponible sur le même site.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>LZ4</productname></term>
      <listitem><para>
       Nécessaire pour la méthode de compression <productname>LZ4</productname>
       des données de table. Binaires et sources peuvent être téléchargés depuis
       <ulink url="https://github.com/lz4/lz4/releases"></ulink>.
      </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>OpenSSL</productname></term>
      <listitem>
       <para>
        Nécessaire pour le support de SSL. Les binaires peuvent être téléchargés à
        partir de <ulink
        url="https://slproweb.com/products/Win32OpenSSL.html">slproweb.com</ulink>,
        ou les sources à partir de <ulink
        url="https://www.openssl.org">openssl.org</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>ossp-uuid</productname></term>
      <listitem>
       <para>
        Nécessaire pour le support d'UUID-OSSP (seulement en contrib). Les sources
        peuvent être récupérées sur <ulink
        url="http://www.ossp.org/pkg/lib/uuid/">ossp.org</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>Python</productname></term>
      <listitem>
       <para>
        Nécessaire pour la compilation de <application>PL/Python</application>.
        Les binaires sont téléchargeables sur <ulink
        url="https://www.python.org">python.org</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>zlib</productname></term>
      <listitem>
       <para>
        Nécessaire pour le support de la compression dans
        <application>pg_dump</application> et
        <application>pg_restore</application>. Les binaires sont disponibles sur
        le <ulink url="https://www.zlib.net">site officiel</ulink>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect2>

  <sect2>
   <title>Considérations spéciales pour Windows 64 bits</title>

   <para>
    PostgreSQL ne peut être compilé pour l'architecture x64 que sur un Windows 64
    bits. Il n'y a pas de support pour les processeurs Itanium.
   </para>

   <para>
    Le mélange de versions 32 bits et de versions 64 bits dans le même répertoire
    de compilation n'est pas supporté. Le système de compilation détecte
    automatiquement si l'environnement est 32 bits ou 64 bits, et compile
    PostgreSQL en accord. Pour cette raison, il est important de démarrer
    la  bonne invite de commande avant de lancer la compilation.
   </para>

   <para>
    Pour utiliser une bibliothèque tierce côté serveur, comme
    <productname>Python</productname> ou <productname>OpenSSL</productname>,
    cette bibliothèque <emphasis>doit</emphasis> aussi être en 64 bits. Il n'y
    a pas de support pour le chargement d'une bibliothèque 32 bits sur un
    serveur 64 bits. Plusieurs bibliothèques de tierce partie que PostgreSQL
    supporte ne sont disponibles qu'en version 32 bits, auquel cas elles ne
    peuvent pas être utilisées avec un serveur PostgreSQL 64 bits.
   </para>
  </sect2>

  <sect2>
   <title>Construction</title>

   <para>
    Pour compiler tout PostgreSQL dans la configuration publiée (par défaut), exécutez
    la commande&nbsp;:
    <screen><userinput>build</userinput></screen>
    Pour construire tout PostgreSQL dans la configuration de débogage,
    exécutez&nbsp;:
    <screen><userinput>build DEBUG</userinput></screen>
    Pour construire un seul projet, par exemple psql, exécutez l'une des deux
    commandes ci-dessous, suivant que vous souhaitez la configuration par
    défaut ou celle de débogage&nbsp;:
    <screen>
     <userinput>build psql</userinput>
     <userinput>build DEBUG psql</userinput>
    </screen>
    Pour modifier la configuration de compilation par défaut, placez ce qui
    suit dans le fichier <filename>buildenv.pl</filename>&nbsp;:
    <programlisting>
$ENV{CONFIG}="Debug";
    </programlisting>
   </para>

   <para>
    Il est aussi possible de compiler à partir de l'interface graphique de Visual
    Studio. Dans ce cas, vous devez exécuter&nbsp;:
    <screen><userinput>perl mkvcbuild.pl</userinput></screen>
    à partir de l'invite, puis ouvrir le fichier
    <filename>pgsql.sln</filename> généré (dans le répertoire racine des
    sources) dans Visual Studio.
   </para>
  </sect2>

  <sect2>
   <title>Nettoyage et installation</title>

   <para>
    La plupart du temps, la récupération automatique des dépendances dans
    Visual Studio prendra en charge les fichiers modifiés. Mais, s'il y a eu
    trop de modifications, il peut y avoir besoin de nettoyer
    l'installation. Pour cela, exécutez simplement la commande
    <filename>clean.bat</filename>, qui nettoiera automatiquement tous les fichiers
    générés. Vous pouvez aussi l'exécuter avec le paramètre
    <parameter>dist</parameter>, auquel cas elle se comporte comme
    <userinput>make distclean</userinput>, et supprime aussi les fichiers flex/bison.
   </para>

   <para>
    Par défaut, tous les fichiers sont écrits dans un sous-répertoire de
    <filename>debug</filename> ou <filename>release</filename>. Pour installer
    ces fichiers en utilisant les emplacements standards, et pour générer aussi
    les fichiers nécessaire à l'installation et l'utilisation de la base de données,
    exécutez la commande&nbsp;:
    <screen><userinput>install c:\destination\directory</userinput></screen>
   </para>

   <para>
    Si vous voulez seulement installer les applications clientes et les
    bibliothèques, vous pouvez utiliser ces commandes&nbsp;:
    <screen><userinput>install c:\destination\directory client</userinput></screen>
   </para>
  </sect2>

  <sect2>
   <title>Exécuter les tests de régression</title>

   <para>
    Pour exécuter les tests de régression, assurez-vous que vous avez terminé
    la construction de toutes les parties requises. Ensuite, assurez-vous que
    les DLL nécessaires au chargement de toutes les parties du système (comme
    les DLL Perl et Python pour les langages de procédure) sont présentes dans
    le chemin système. Dans le cas contraire, configurez-les dans le fichier
    <filename>buildenv.pl</filename>. Pour lancer les tests, exécutez une des
    commandes suivantes à partir du répertoire
    <filename>src\tools\msvc</filename>&nbsp;:
    <screen>
     <userinput>vcregress check</userinput>
     <userinput>vcregress installcheck</userinput>
     <userinput>vcregress plcheck</userinput>
     <userinput>vcregress contribcheck</userinput>
     <userinput>vcregress modulescheck</userinput>
     <userinput>vcregress ecpgcheck</userinput>
     <userinput>vcregress isolationcheck</userinput>
     <userinput>vcregress bincheck</userinput>
     <userinput>vcregress recoverycheck</userinput>
     <userinput>vcregress upgradecheck</userinput>
    </screen>
    Pour modifier la planification utilisée (en parallèle par défaut),
    ajoutez-la à la ligne de commande, comme&nbsp;:
    <screen><userinput>vcregress check serial</userinput></screen>

    Pour plus d'informations sur les tests de régression, voir <xref
    linkend="regress"/>.
   </para>

   <para>
    Les tests de régression des programmes clients
    (<command>vcregress bincheck</command>) ou des tests de restauration
    (<command>vcregress recoverycheck</command>)
    nécessitent l'installation d'un module Perl supplémentaire&nbsp;:
    <variablelist>
     <varlistentry>
      <term><productname>IPC::Run</productname></term>
      <listitem>
       <para>
        Au moment où ces lignes sont écrites, <literal>IPC::Run</literal>
        n'est pas inclus dans l'installation de ActiveState Perl,
        ni dans la bibliothèque ActiveState Perl Package Manager (PPM). Pour
        l'installer, téléchargez l'archive source
        <filename>IPC-Run-&lt;version&gt;.tar.gz</filename> à partir du <ulink
        url="https://metacpan.org/release/IPC-Run">CPAN</ulink>, et
        décompressez-la. Modifiez le fichier <filename>buildenv.pl</filename> en
        ajoutant une variable PERL5LIB pointant vers le sous-répertoire
        <filename>lib</filename> des fichiers extraits de l'archive. Par
        exemple&nbsp;:
<programlisting>$ENV{PERL5LIB}=$ENV{PERL5LIB} . ';c:\IPC-Run-0.94\lib';</programlisting>
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
   Les tests TAP lancés par <command>vcregress</command>) supportent les
   variables d'environnement <varname>PROVE_TESTS</varname>, étendues
   automatiquement selon le modèle donné, et <varname>PROVE_FLAGS</varname>.
   Elles peuvent être mises en place dans un terminal Windows,
   avant de lancer <command>vcregress</command>&nbsp;:
<programlisting>
set PROVE_FLAGS=--timer --jobs 2
set PROVE_TESTS=t/020*.pl t/010*.pl
</programlisting>
   Il est possible de placer ces paramètres dans
   <filename>buildenv.pl</filename>&nbsp;:
<programlisting>
$ENV{PROVE_FLAGS}='--timer --jobs 2'
$ENV{PROVE_TESTS}='t/020*.pl t/010*.pl'
</programlisting>
  </para>

  <para>
   Certains des tests TAP dépendent d'un ensemble de commandes externes qui
   pourraient, en option, déclencher des tests de trigger en relation.  Chacune
   de ces variables peuvent être initialisées ou désinitialisées dans le fichier
   <filename>buildenv.pl</filename>&nbsp;:
   <variablelist>
    <varlistentry>
     <term><varname>GZIP_PROGRAM</varname></term>
     <listitem><para>
      Chemin vers une commande <application>gzip</application>. La valeur par
      défaut est <literal>gzip</literal>, qui serait la commande trouvée dans le
      <varname>PATH</varname>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>LZ4</varname></term>
     <listitem><para>
      Chemin vers une commande <application>lz4</application>. La valeur par
      défaut est <literal>lz4</literal>, qui serait la commande trouvée dans le
      <varname>PATH</varname>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>TAR</varname></term>
     <listitem><para>
      Chemin vers une commande <application>tar</application>. La valeur par
      défaut est <literal>tar</literal>, qui serait la commande trouvée dans le
      <varname>PATH</varname>.
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
  </sect2>

 </sect1>
</chapter>
