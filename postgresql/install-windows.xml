<?xml version="1.0" encoding="UTF-8"?>
<chapter id="install-windows">
 <title>Installation à partir du code source sur
  <productname>Windows</productname></title>

 <indexterm>
  <primary>installation</primary>
  <secondary>sur Windows</secondary>
 </indexterm>

 <para>
  Il est recommandé que la plupart des utilisateurs téléchargent la
  distribution binaire pour Windows, disponible sous la forme d'un package
  d'installation graphique à partir du site web du projet
  <productname>PostgreSQL</productname>. Construire à partir des sources a
  pour seule cible les personnes qui développent
  <productname>PostgreSQL</productname> ou des extensions.
 </para>

 <para>
  Il existe différentes façons de construire PostgreSQL sur
  <productname>Windows</productname>. La façon la plus simple de le faire est
  d'utiliser les outils Microsoft. Pour cela, il faut installer une version
  supportée de <productname>Visual Studio 2019</productname> et utiliser le compilateur inclus. Il est aussi
  possible de construire PostgreSQL avec <productname>Microsoft Visual C++
   2013 à 2019</productname>. Dans certains cas, il faut installer le
  <productname>Windows SDK</productname> en plus du compilateur.
 </para>

 <para>
  Il est aussi possible de construire PostgreSQL en utilisant les outils de
  compilation GNU fournis par <productname>MinGW</productname> ou en utilisant
  <productname>Cygwin</productname> pour les anciennes versions de
  <productname>Windows</productname>.
 </para>

 <para>
  La construction par <productname>MinGW</productname> ou
  <productname>Cygwin</productname> utilise le système habituel de
  construction, voir <xref linkend="installation"/> et les notes spécifiques
  dans <xref linkend="installation-notes-mingw"/> et <xref linkend
  ="installation-notes-cygwin"/>. Pour produire des binaires natifs 64 bits
  dans ces environnements, utilisez les outils de
  <productname>MinGW-w64</productname>. Ces outils peuvent également être
  utilisés pour faire de la cross-compilation pour les systèmes
  <productname>Windows</productname> 32 et 64 bits sur d'autres machines,
  telles que <productname>Linux</productname> et
  <productname>macOS</productname>. Il n'est pas recommandé d'utiliser
  <productname>Cygwin</productname> pour faire fonctionner un serveur de
  production. Il devrait uniquement être utilisé pour le fonctionnement sur
  d'anciennes versions de <productname>Windows</productname>, où la
  construction native ne fonctionne pas. Les exécutables officiels sont construits avec
  <productname>Visual Studio</productname>.
 </para>

 <para>
  Les constructions natives de <application>psql</application> ne supportent
  pas l'édition de la ligne de commande. La version de psql construite avec
  <productname>Cygwin</productname> supporte l'édition de ligne de commande,
  donc elle devrait être utilisée là où on a besoin de psql pour des besoins
  interactifs sous  <productname>Windows</productname>.
 </para>

 <sect1 id="install-windows-full">
  <title>Construire avec <productname>Visual C++</productname> ou le
   <productname>Microsoft Windows SDK</productname></title>

  <para>
   PostgreSQL peut être construit en utilisant la suite de compilation Visual
   C++ de Microsoft. Ces compilateurs peuvent être soit <productname>Visual
    Studio</productname>, soit <productname>Visual Studio Express</productname>
   soit certaines versions du <productname>Microsoft Windows
    SDK</productname>. Si vous n'avez pas déjà un environnement
   <productname>Visual Studio</productname> configuré, le plus simple est
   d'utiliser les compilateurs disponibles dans <productname>Visual Studio
    2019</productname> ou ceux fournis dans le
   <productname>Windows SDK 10</productname>, qui sont tous disponibles en
   téléchargement libre sur le site de Microsoft.
  </para>

  <para>
   Les constructions 32 bits et 64 bits sont possibles avec la suite Microsoft
   Compiler. Les constructions 32 bits sont possibles avec
   <productname>Visual Studio 2013</productname> jusqu'à
   <productname>Visual Studio 2019</productname>, ainsi que les versions
   autonomes Windows SDK, de la version 8.1a à
   la version 10. Les constructions 64 bits sont supportées avec
   <productname>Microsoft Windows SDK</productname>, de la version 8.1a à la
   version 10, ou <productname>Visual Studio 2013</productname> et les versions
   ultérieures. La compilation est supportée depuis <productname>Windows
    7</productname> et <productname>Windows Server 2008 R2 SP1</productname> lors de
   la construction avec <productname>Visual Studio 2013</productname> et jusqu'à
   <productname>Visual Studio 2019</productname>.
   <!--
       For 2013 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2013-sysrequirements-vs
       For 2015 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2015-sysrequirements-vs
       For 2017 requirements:
       https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2017-system-requirements-vs
       For 2019 requirements:
       https://docs.microsoft.com/en-us/visualstudio/releases/2019/system-requirements
   -->
  </para>

  <para>
   Les outils pour compiler avec <productname>Visual C++</productname> ou
   <productname>Platform SDK</productname> sont dans le répertoire
   <filename>src/tools/msvc</filename>. Lors de la construction, assurez-vous
   qu'il n'y a pas d'outils provenant de <productname>MinGW</productname> ou
   <productname>Cygwin</productname> présents dans le chemin des applications
   du système. De plus, assurez-vous que vous avez tous les outils Visual C++
   requis disponibles dans le chemin des applications (variable
   d'environnement <literal>PATH</literal>). À partir de <productname>Visual
    Studio 2017</productname>, ceci peut se faire à partir de la ligne de
   commande en utilisant <command>VsDevCmd.bat</command>, voir
   <command>-help</command> pour les options disponibles et leur valeurs par
   défaut. <command>vsvars32.bat</command> est disponible dans
   <productname>Visual Studio 2015</productname> et les versions antérieures
   dans le même but. À partir de <application>Visual Studio Command
    Prompt</application>, vous pouvez modifier l'architecture CPU ciblée, le
   type de construction, et le système d'exploitation cible en utilisant la
   commande <command>vcvarsall.bat</command>, par exemple
   <command>vcvarsall.bat x64 10.0.10240.0</command> pour cibler Windows 10
   avec une construction 64-bits. Voir <command>-help</command> pour les
   autres options de <command>vcvarsall.bat</command>. Toutes les commandes
   doivent être exécutées à partir du répertoire
   <filename>src\tools\msvc</filename>.
  </para>

  <para>
   Avant de lancer la construction, vous aurez besoin d'éditer le fichier
   <filename>config.pl</filename> pour y modifier toutes les options de
   configuration nécessaires, ainsi que les chemins utilisés par les
   bibliothèques de tierces parties. La configuration complète est déterminée
   tout d'abord en lisant et en analysant le fichier
   <filename>config_default.pl</filename>, puis en appliquant les
   modifications provenant du fichier <filename>config.pl</filename>. Par
   exemple, pour indiquer l'emplacement de votre installation de
   <productname>Python</productname>, placez la ligne suivante dans
   <filename>config.pl</filename>&nbsp;:
   <programlisting>
   $config->{python} = 'c:\python26';
   </programlisting>
   Vous avez seulement besoin de spécifier les paramètres qui sont différents
   de la configuration par défaut, ce qui est à faire dans le fichier
   <filename>config_default.pl</filename>.
  </para>

  <para>
   Si vous avez besoin de configurer d'autres variables d'environnement, créez
   un fichier appelé <filename>buildenv.pl</filename> et placez-y les
   commandes souhaitées. Par exemple, pour ajouter le chemin vers bison s'il
   ne se trouve pas dans le chemin, créez un fichier contenant&nbsp;:
   <programlisting>
   $ENV{PATH}=$ENV{PATH} . ';c:\chemin\vers\bison\bin';
   </programlisting>
  </para>

  <para>
   Pour passer des arguments en ligne de commande supplémentaires à la commande
   de compilation de Visual Studio (msbuild or vcbuild) :
   <programlisting>
$ENV{MSBFLAGS}="/m";
   </programlisting>
  </para>

  <sect2>
   <title>Prérequis</title>

   <para>
    Les outils supplémentaires suivants sont requis pour construire
    <productname>PostgreSQL</productname>. Utilisez le fichier
    <filename>config.pl</filename> pour indiquer les répertoires où se
    trouvent les bibliothèques.

    <variablelist>
     <varlistentry>
      <term><productname>Microsoft Windows SDK</productname></term>
      <listitem>
       <para>
        Si votre environnement de compilation ne contient pas une version
        supportée du <productname>Microsoft Windows SDK</productname>, il est
        recommandé de mettre à jour avec la dernière version supportée
        (actuellement la version 10), téléchargeable sur le <ulink
        url="https://www.microsoft.com/download/">site de Microsoft</ulink>.
       </para>

       <para>
        Vous devez toujours inclure la partie <application>Windows Headers and
         Libraries</application> du SDK. Si vous installez un
        <productname>Windows SDK</productname> incluant les compilateurs
        (<application>Visual C++ Compilers</application>), vous n'avez pas de
        <productname>Visual Studio</productname>. Notez que la version 8.0a du
        Windows SDK ne contient plus d'environnement complet de compilation en
        ligne de commande.
       </para></listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>ActiveState Perl</productname></term>
      <listitem>
       <para>
        ActiveState Perl est requis pour exécuter les scripts de construction.
        La commande Perl de MinGW et de Cygwin ne fonctionnera pas. Elle doit
        aussi être présente dans le chemin (PATH). Les binaires de cet outil
        sont téléchargeables à partir du <ulink
        url="https://www.activestate.com">site officiel</ulink> (la version
        5.8.3 ou ultérieure est requise, la distribution standard libre est
        suffisante).
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    Les produits suivants ne sont pas nécessaires pour commencer, mais sont
    requis pour installer la distribution complète. Utilisez le fichier
    <filename>config.pl</filename> pour indiquer les répertoires où sont
    placées les bibliothèques.

    <variablelist>
     <varlistentry>
      <term><productname>ActiveState TCL</productname></term>
      <listitem>
       <para>
        Requis pour construire <application>PL/Tcl</application> (la version
        8.4 est requise, la distribution standard libre est suffisante).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>Bison</productname> et
       <productname>Flex</productname></term>
      <listitem>
       <para>
        <productname>Bison</productname> et <productname>Flex</productname>
        sont requis pour construire à partir de Git, mais ne le sont pas pour
        construire à partir d'une version distribuée. Seul
        <productname>Bison</productname> 1.875 ou les versions 2.2 et
        ultérieures fonctionneront. <productname>Flex</productname> doit être
        en version 2.5.31 ou supérieure.
       </para>

       <para>
        <productname>Bison</productname> et <productname>Flex</productname>
        sont inclus dans la suite d'outils <productname>msys</productname>,
        disponible à partir de son <ulink
        url="http://www.mingw.org/wiki/MSYS">site officiel</ulink> et faisant
        partie de la suite de compilation <productname>MinGW</productname>.
       </para>

       <para>
        Vous aurez besoin d'ajouter le répertoire contenant
        <filename>flex.exe</filename> et <filename>bison.exe</filename> à la
        variable d'environnement PATH dans <filename>buildenv.pl</filename>
        sauf s'ils y sont déjà. Dans le cas de MinGW, le répertoire est le
        sous-répertoire <filename>\msys\1.0\bin</filename> de votre répertoire
        d'installation de MinGW.
       </para>

       <note>
        <para>
         La distribution Bison de GnuWin32 a apparemment un bug qui cause des
         dysfonctionnements de Bison lorsqu'il est installé dans un répertoire
         dont le nom contient des espaces, tels que l'emplacement par défaut
         dans les installations en anglais&nbsp;: <filename>C:\Program
          Files\GnuWin32</filename>. Installez donc plutôt dans
         <filename>C:\GnuWin32</filename> ou utilisez le chemin court NTFS de
         GnuWin32 dans votre variable d'environnement PATH (par exemple
         <filename>C:\PROGRA~1\GnuWin32</filename>).
        </para>
       </note>

       <note>
        <para>
         Les binaires obsolètes <literal>winflex</literal> distribués sur le site FTP de
         PostgreSQL et référencés dans les anciennes documentations échoueront
         avec le message <quote>flex: fatal internal error, exec
          failed</quote> sur des serveurs Windows 64 bits. Utilisez Flex à
         partir du paquet MSYS.
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>Diff</productname></term>
      <listitem>
       <para>
        Diff est nécessaire pour exécuter les tests de régression, et peut
        être téléchargé à partir de la <ulink
        url="http://gnuwin32.sourceforge.net">page du projet gnuwin32 du site
         sourceforge.net</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>Gettext</productname></term>
      <listitem>
       <para>
        Gettext est requis pour construire le support des langues (NLS), et
        peut être téléchargé à partir de la <ulink
        url="http://gnuwin32.sourceforge.net">page du projet gnuwin32 du site
         sourceforge.net</ulink>. Notez que les binaires, dépendances et
        fichiers d'en-tête sont tous nécessaires.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>MIT Kerberos</productname></term>
      <listitem>
       <para>
        Requis pour le support de l'authentification GSSAPI. MIT Kerberos est
        téléchargeable sur le <ulink
        url="https://web.mit.edu/Kerberos/dist/index.html">site du MIT</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>libxml2</productname> et
       <productname>libxslt</productname></term>
      <listitem>
       <para>
        Requis pour le support du XML. Les binaires sont disponibles sur le
        <ulink url="https://zlatkovic.com/pub/libxml">site
         zlatkovic.com</ulink> et les sources sur le <ulink
        url="http://xmlsoft.org">site xmlsoft.org</ulink>. Notez que libxml2
        nécessite iconv, qui est disponible sur le même site web.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>OpenSSL</productname></term>
      <listitem>
       <para>
        Requis pour le support de SSL. Les binaires peuvent être téléchargés à
        partir du <ulink
        url="https://slproweb.com/products/Win32OpenSSL.html">site slproweb.com</ulink>
        alors que les sources sont disponibles sur le <ulink
        url="https://www.openssl.org">site openssl.org</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>ossp-uuid</productname></term>
      <listitem>
       <para>
        Requis pour le support d'UUID-OSSP (seulement en contrib). Les sources
        peuvent être récupérées sur le <ulink
        url="http://www.ossp.org/pkg/lib/uuid/">site ossp.org</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>Python</productname></term>
      <listitem>
       <para>
        Requis pour la construction de <application>PL/Python</application>.
        Les binaires sont téléchargeables sur le <ulink
        url="https://www.python.org">site officiel du langage Python</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><productname>zlib</productname></term>
      <listitem>
       <para>
        Requis pour le support de la compression dans
        <application>pg_dump</application> et
        <application>pg_restore</application>. Les binaires sont disponibles à
        partir du <ulink url="https://www.zlib.net">site officiel</ulink>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect2>

  <sect2>
   <title>Considérations spéciales pour Windows 64 bits</title>

   <para>
    PostgreSQL ne peut être compilé pour l'architecture x64 que sur Windows 64
    bits. De plus, il n'y a pas de support pour les processeurs Itanium.
   </para>

   <para>
    Mixer des versions 32 bits et des versions 64 bits dans le même répertoire
    de construction n'est pas supporté. Le système de compilation détecte
    automatiquement si l'environnement est 32 bits ou 64 bits, et construit
    PostgreSQL en accord. Pour cette raison, il est important de commencer
    avec la bonne invite de commande avant de lancer la compilation.
   </para>

   <para>
    Pour utiliser une bibliothèque de tierce partie côté serveur comme
    <productname>Python</productname> ou <productname>OpenSSL</productname>,
    cette bibliothèque <emphasis>doit</emphasis> aussi être en 64 bits. Il n'y
    a pas de support pour le chargement d'une bibliothèque 32 bits sur un
    serveur 64 bits. Plusieurs bibliothèques de tierce partie que PostgreSQL
    supporte ne sont disponibles qu'en version 32 bits, auquel cas elles ne
    peuvent pas être utilisées avec un serveur PostgreSQL 64 bits.
   </para>
  </sect2>

  <sect2>
   <title>Construction</title>

   <para>
    Pour construire tout PostgreSQL dans la configuration par défaut, exécutez
    la commande&nbsp;:
    <screen><userinput>build</userinput></screen>
    Pour construire tout PostgreSQL dans la configuration de débogage,
    exécutez la commande&nbsp;:
    <screen><userinput>build DEBUG</userinput></screen>
    Pour construire un seul projet, par exemple psql, exécutez l'une des deux
    commandes ci-dessous, suivant que vous souhaitez la configuration par
    défaut ou la configuration de débogage&nbsp;:
    <screen>
     <userinput>build psql</userinput>
     <userinput>build DEBUG psql</userinput>
    </screen>
    Pour modifier la configuration de construction par défaut, placez ce qui
    suit dans le fichier <filename>buildenv.pl</filename>&nbsp;:
    <programlisting>
    </programlisting>
   </para>

   <para>
    Il est aussi possible de construire à partir de l'interface de Visual
    Studio. Dans ce cas, vous devez exécuter&nbsp;:
    <screen><userinput>perl mkvcbuild.pl</userinput></screen>
    à partir de l'invite, puis ouvrir le fichier
    <filename>pgsql.sln</filename> généré (dans le répertoire racine des
    sources) dans Visual Studio.
   </para>
  </sect2>

  <sect2>
   <title>Nettoyage et installation</title>

   <para>
    La plupart du temps, la récupération automatique des dépendances dans
    Visual Studio prendra en charge les fichiers modifiés. Mais, s'il y a eu
    trop de modifications, vous pouvez avoir besoin de nettoyer
    l'installation. Pour cela, exécutez simplement la commande
    <filename>clean.bat</filename>, qui nettoiera automatiquement les fichiers
    générés. Vous pouvez aussi l'exécuter avec le paramètre
    <parameter>dist</parameter>, auquel cas il se comporte comme
    <userinput>make distclean</userinput> et supprime les fichiers flex/bison
    en sortie.
   </para>

   <para>
    Par défaut, tous les fichiers sont écrits dans un sous-répertoire de
    <filename>debug</filename> ou <filename>release</filename>. Pour installer
    ces fichiers en utilisant les emplacements standards et pour générer aussi
    les fichiers requis pour initialiser et utiliser la base de données,
    exécutez la commande&nbsp;:
    <screen><userinput>install c:\destination\directory</userinput></screen>
   </para>

   <para>
    Si vous voulez seulement installer les applications clientes et les
    bibliothèques, vous pouvez utiliser ces commandes&nbsp;:
    <screen><userinput>install c:\destination\directory client</userinput></screen>
   </para>
  </sect2>

  <sect2>
   <title>Exécuter les tests de régression</title>

   <para>
    Pour exécuter les tests de régression, assurez-vous que vous avez terminé
    la construction de toutes les parties requises. Ensuite, assurez-vous que
    les DLL nécessaires au chargement de toutes les parties du système (comme
    les DLL Perl et Python pour les langages de procédure) sont présentes dans
    le chemin système. Dans le cas contraire, configurez-les dans le fichier
    <filename>buildenv.pl</filename>. Pour lancer les tests, exécutez une des
    commandes suivantes à partir du répertoire
    <filename>src\tools\msvc</filename>&nbsp;:
    <screen>
     <userinput>vcregress check</userinput>
     <userinput>vcregress installcheck</userinput>
     <userinput>vcregress plcheck</userinput>
     <userinput>vcregress contribcheck</userinput>
     <userinput>vcregress ecpgcheck</userinput>
     <userinput>vcregress isolationcheck</userinput>
     <userinput>vcregress bincheck</userinput>
     <userinput>vcregress recoverycheck</userinput>
     <userinput>vcregress upgradecheck</userinput>
    </screen>
    Pour modifier la planification utilisée (en parallèle par défaut),
    ajoutez-la à la ligne de commande, comme&nbsp;:
    <screen><userinput>vcregress check serial</userinput></screen>

    Pour plus d'informations sur les tests de régression, voir <xref
    linkend="regress"/>.
   </para>

   <para>
    Exécuter les tests de régression sur les programmes clients, avec
    <command>vcregress bincheck</command>, ou sur les tests de restauration,
    avec <command>vcregress recoverycheck</command>,
    nécessite l'installation d'un module Perl supplémentaire&nbsp;:
    <variablelist>
     <varlistentry>
      <term><productname>IPC::Run</productname></term>
      <listitem>
       <para>
        Lors de l'écriture de cette partie, <literal>IPC::Run</literal>
        n'était pas inclus dans l'installation de ActiveState Perl, pas plus
        que dans la bibliothèque ActiveState Perl Package Manager (PPM). Pour
        l'installer, téléchargez l'archive source
        <filename>IPC-Run-&lt;version&gt;.tar.gz</filename> à partir du <ulink
        url="https://metacpan.org/release/IPC-Run">site CPAN</ulink>, et
        déballez-la. Modifiez le fichier <filename>buildenv.pl</filename> en
        ajoutant une variable PERL5LIB pointant vers le sous-répertoire
        <filename>lib</filename> des fichiers extraits de l'archive. Par
        exemple&nbsp;:
<programlisting>$ENV{PERL5LIB}=$ENV{PERL5LIB} . ';c:\IPC-Run-0.94\lib';</programlisting>
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
  </sect2>

 </sect1>
</chapter>
