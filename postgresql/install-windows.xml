<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<chapter id="install-windows">
 <title>Installation à partir du code source sur
   <productname>Windows</productname></title>

 <indexterm>
  <primary>installation</primary>
  <secondary>sur Windows</secondary>
 </indexterm>

 <para>
  Il est recommandé que la plupart des utilisateurs téléchargent la distribution
  binaire pour Windows, disponible sous la forme d'un package d'installation
  <productname>one-click</productname> à partir du site web de
  <productname>PostgreSQL</productname>. Construire à partir des sources a pour
  seule cible les personnes qui développent <productname>PostgreSQL</productname>
  ou des extensions.
 </para>

 <para>
  Il existe différentes façons de construire PostgreSQL sur
  <productname>Windows</productname>. La façon la plus simple de le faire est
  d'utiliser les outils Microsoft. Pour cela, il faut installer une version
  supportée de <productname>Visual Studio Express 2012 for Windows
  Desktop</productname> et utiliser
  le compilateur inclus. Il est aussi possible de construire PostgreSQL avec
  <productname>Microsoft Visual C++ 2005, 2008 ou 2010</productname>. Dans certains
  cas, il faut installer le <productname>Windows SDK</productname> en plus du
  compilateur.
 </para>

 <para>
  Il est aussi possible de construire PostgreSQL en utilisant les outils de
  compilation GNU fournis par <productname>MinGW</productname> ou en utilisant
  <productname>Cygwin</productname> pour les anciennes versions de
  <productname>Windows</productname>.
 </para>

 <para>
  Enfin, la bibliothèque d'accès
  pour les clients (<application>libpq</application>) peut être construit en
  utilisant <productname>Visual C++ 7.1</productname> ou
  <productname>Borland C++</productname> pour la compatibilité avec des
  applications liées statiquement en utilisant ces outils.
 </para>

 <para>
  La construction par <productname>MinGW</productname> ou
  <productname>Cygwin</productname> utilise le système habituel de construction,
  voir <xref linkend="installation"/> et les notes spécifiques dans <xref
  linkend="installation-notes-mingw"/> et <xref linkend="installation-notes-cygwin"/>.
  Pour produire des binaires natifs 64 bits dans ces environnements, utilisez les outils de
  <productname>MinGW-w64</productname>. Ces outils peuvent également être utilisés pour faire
  de la cross-compilation pour les systèmes <productname>Windows</productname>
  32 et 64 bits sur d'autres machines, telles que <productname>Linux</productname> et 
  <productname>Darwin</productname>.
  Il n'est pas recommandé d'utiliser <productname>Cygwin</productname> pour faire fonctionner
  un serveur de production. Il devrait uniquement être utilisé pour le fonctionnement sur d'anciennes
  versions de <productname>Windows</productname>, où le build natif ne fonctionne pas, comme
  <productname>Windows 98</productname>. Les exécutables officiels sont construits avec
  <productname>Visual Studio</productname>.
 </para>
 <para>
  Les constructions natives de <application>psql</application> ne supportent pas
  l'édition de la ligne de commande.
  La version de psql construite avec <productname>Cygwin</productname> supporte l'édition de ligne de commande,
  donc elle devrait être utilisée là où on a besoin de psql pour des besoins interactifs 
  sous  <productname>Windows</productname>.
 </para>

 <sect1 id="install-windows-full">
  <title>Construire avec <productname>Visual C++</productname> ou le
  <productname>Microsoft Windows SDK</productname></title>

 <para>
  PostgreSQL peut être construit en utilisant la suite de compilation Visual
  C++ de Microsoft. Ces compilateurs peuvent être soit <productname>Visual
  Studio</productname>, soit <productname>Visual Studio Express</productname>
  soit certaines versions du <productname>Microsoft Windows SDK</productname>. Si vous
  n'avez pas déjà un environnement <productname>Visual Studio</productname>
  configuré, le plus simple est d'utiliser les compilateurs disponibles dans
  le <productname>Windows SDK 7.1</productname> ou ceux fournis dans
  <productname>Visual Studio Express 2012 for Windows Desktop</productname>,
  qui sont tous disponibles en libre téléchargement sur le site de Microsoft.
 </para>

 <para>
  La compilation de PostgreSQL a été testé en utilisant les compilateurs livrés
  avec <productname>Visual Studio 2005</productname> jusqu'à
  <productname>Visual Studio 2012</productname> (en incluant les éditions Express),
  ainsi que les SDK Windows autonomes (versions 6.0 à 7.1). Les constructions
  64-bit de PostgreSQL sont seulement supportées avec les versions allant de la
  6.0a à la 7.1 de <productname>Microsoft Windows SDK</productname>, ainsi qu'avec
  <productname>Visual Studio 2008</productname> et les versions suivantes.
 </para>

 <para>
  Les outils pour compiler avec <productname>Visual C++</productname> ou
  <productname>Platform SDK</productname> sont dans le répertoire
  <filename>src/tools/msvc</filename>. Lors de la
  construction, assurez-vous qu'il n'y a pas d'outils provenant de
  <productname>MinGW</productname> ou <productname>Cygwin</productname>
  présents dans le chemin des applications du système. De plus, assuez-vous
  que vous avez tous les outils Visual C++ requis disponibles dans le
  PATH. Dans <productname>Visual Studio</productname>, lancez le
  <application>Visual Studio Command Prompt</application>. Si vous
  souhaitez construire une version 64-bit, vous devez utiliser une version
  64-bit de la commande, et vice versa. Dans <productname>Microsoft Windows
  SDK</productname>, lancez le <application>CMD shell</application> listé dans
  le menu SDK du menu de démarrage. Dans les versions récentes du SDK, vous
  pouvez changer l'architecture CPU ciblée, build
  type, and target OS by using the <command>setenv</command> command, e.g.
  <command>setenv /x86 /release /xp</command> to target Windows XP or later
  with a 32-bit release build. See <command>/?</command> for other options to
  <command>setenv</command>. Toutes les commandes doivent être exécutées
  du répertoire <filename>src\tools\msvc</filename>.
 </para>

 <para>
  Avant de lancer la construction, vous aurez besoin d'éditer le fichier
  <filename>config.pl</filename> pour y modifier toutes les options de
  configuration nécessaires, ainsi que les chemins utilisés par les
  bibliothèques de tierces parties. La configuration complète est déterminée
  tout d'abord en lisant et en analysant le fichier
  <filename>config_default.pl</filename>, puis en appliquant les modifications
  provenant du fichier <filename>config.pl</filename>. Par exemple, pour
  indiquer l'emplacement de votre installation de
  <productname>Python</productname>, placez la ligne suivante dans
  <filename>config.pl</filename>&nbsp;:
  <programlisting>
   $config->{python} = 'c:\python26';
  </programlisting>
  Vous avez seulement besoin de spécifier les paramètres qui sont différents
  de la configuration par défaut, spécifiée par le fichier
  <filename>config_default.pl</filename>.
 </para>

 <para>
  Si vous avez
  besoin de configurer d'autres variables d'environnement, créez un fichier
  appelé <filename>buildenv.pl</filename> et placez-y les commandes souhaitées.
  Par exemple, pour ajouter le chemin vers bison s'il ne se trouve pas dans
  le PATH, créez un fichier contenant&nbsp;:
  <programlisting>
   $ENV{PATH}=$ENV{PATH} . ';c:\chemin\vers\bison\bin';
  </programlisting>
 </para>

 <sect2>
  <title>Pré-requis</title>
  <para>
   Les outils supplémentaires suivants sont requis pour construire
   <productname>PostgreSQL</productname>. Utilisez le fichier
   <filename>config.pl</filename> pour indiquer les répertoires où se
   trouvent les bibliothèques.

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
      Si votre environnement de compilation ne contient pas une version
      supportée du <productname>Microsoft Windows SDK</productname>, il est
      recommandé de mettre à jour avec la dernière version supportée
      (actuellement la version 7.1), téléchargeable sur
      <ulink url="http://www.microsoft.com/downloads/"></ulink>.
     </para>
     <para>
      Vous devez toujours inclure la partie <application>Windows Headers and
      Libraries</application> du SDK. Si vous installez un
      <productname>Windows SDK</productname> incluant les compilateurs
      (<application>Visual C++ Compilers</application>), vous n'avez pas
      de <productname>Visual Studio</productname>. Notez que la version 8.0a
      du Windows SDK ne contient plus d'environnement complet de compilation
      en ligne de commande.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
      ActiveState Perl est requis pour exécuter les scripts de construction.
      Le Perl de MinGW et de Cygwin ne fonctionnera pas. Il doit aussi être
      présent dans le PATH. Les binaires de cet outil sont téléchargeables
      à partir de <ulink url="http://www.activestate.com"></ulink> (Note&nbsp;:
      la version 5.8 ou ultérieure est requise, la distribution standard
      libre est suffisante).
     </para></listitem>
    </varlistentry>
   </variablelist>
  </para>
  
  <para>
   Les produits suivants ne sont pas nécessaires pour commencer, mais sont
   requis pour installer la distribution complète. Utilisez le fichier
   <filename>config.pl</filename> pour indiquer les répertoires où sont placées
   les bibliothèques.

   <variablelist>
    <varlistentry>
     <term><productname>ActiveState TCL</productname></term>
     <listitem><para>
      Requis pour construire <application>PL/TCL</application> (Note&nbsp;:
      la version 8.4 est requise, la distribution standard libre est
      suffisante).
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Bison</productname> et
      <productname>Flex</productname></term>
     <listitem>
     <para>
      <productname>Bison</productname> and <productname>Flex</productname> are
      required to build from Git, but not required when building from a release
      file. Only <productname>Bison</productname> 1.875 or versions 2.2 and later
      will work. <productname>Flex</productname> must be version 2.5.31 or later.
     </para>

     <para>
      Both <productname>Bison</productname> and <productname>Flex</productname>
      are included in the <productname>msys</productname> tool suite, available
      from <ulink url="http://www.mingw.org/wiki/MSYS">this site</ulink> as part of the
      <productname>MinGW</productname> compiler suite. You can also get
      <productname>msys</productname> as part of
      <productname>msysGit</productname> from <ulink url="http://git-scm.com/">this site</ulink>.
     </para>

     <para>
      You will need to add the directory containing
      <filename>flex.exe</filename> and <filename>bison.exe</filename> to the
      PATH environment variable in <filename>buildenv.pl</filename> unless
      they are already in PATH. In the case of MinGW, the directory is the
      <filename>\msys\1.0\bin</filename> subdirectory of your MinGW
      installation directory. For msysGit, it's the <filename>bin</filename>
      directory in your Git install directory. Do not add the MinGW compiler
      tools themselves to PATH.
     </para>

     <note>
      <para>
	     La distribution Bison de GnuWin32 a apparemment un bug qui cause des 
	     disfonctionnements de Bison lorsqu'il est installé dans un répertoire dont
	     le nom contient des espaces, tels que l'emplacement par défaut dans les
	     installations en Anglais : <filename>C:\Program Files\GnuWin32</filename>.
	     Installez donc plutôt dans <filename>C:\GnuWin32</filename> or use the
       NTFS shortname path to GnuWin32 in your PATH environment setting
       (e.g. <filename>C:\PROGRA~1\GnuWin32</filename>).
      </para>
     </note>

     <note>
      <para>
       The obsolete "winflex" binaries distributed on the PostgreSQL FTP site
       and referenced in older documentation will fail with "flex: fatal
       internal error, exec failed" on 64-bit Windows hosts. Use flex from
       msys instead.
      </para>
     </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Diff</productname></term>
     <listitem><para>
      Diff est nécessaire pour exécuter les tests de régression, et peut être
      téléchargé à partir de <ulink url="http://gnuwin32.sourceforge.net"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Gettext</productname></term>
     <listitem><para>
      Gettext est requis pour construire le support NLS, et peut être téléchargé
      à partir de <ulink url="http://gnuwin32.sourceforge.net"></ulink>. Notez
      que les binaires, dépendances et fichiers développeurs sont tous
      nécessaires.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>MIT Kerberos</productname></term>
     <listitem><para>
      Requis pour le support de l'authentification Kerberos. MIT Kerberos est
      téléchargeable sur <ulink
      url="http://web.mit.edu/Kerberos/dist/index.html"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>libxml2</productname> et
      <productname>libxslt</productname></term>
     <listitem><para>
      Requis pour le support du XML. Les binaires sont disponibles sur
      <ulink url="http://zlatkovic.com/pub/libxml"></ulink> et les sources sur
      <ulink url="http://xmlsoft.org"></ulink>. Notez que libxml2 nécessite
      iconv, qui est disponible sur le même site web.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>openssl</productname></term>
     <listitem><para>
      Requis pour le support de SSL. Les binaires peuvent être téléchargés à
      partir de <ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></ulink>
      alors que les sources sont disponibles sur <ulink
      url="http://www.openssl.org"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ossp-uuid</productname></term>
     <listitem><para>
      Requis pour le support d'UUID-OSSP (seulement en contrib). Les
      sources peuvent être récupérées sur le
      <ulink url="http://www.ossp.org/pkg/lib/uuid/">site ossp.org</ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Python</productname></term>
     <listitem><para>
      Requis pour la construction de <application>PL/Python</application>. Les
      binaires sont téléchargeables sur
      <ulink url="http://www.python.org"></ulink>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>zlib</productname></term>
     <listitem><para>
      Requis pour le support de la compression dans
      <application>pg_dump</application> et <application>pg_restore</application>.
      Les binaires sont disponibles à partir de <ulink
      url="http://www.zlib.net"></ulink>.
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
 </sect2>

 <sect2>
  <title>Considérations spéciales pour Windows 64-bits</title>

  <para>
   PostgreSQL ne peut être compilé pour l'architecture x64 que sur Windows
   64-bits, il n'y a pas de support pour les processeurs Itanium.
  </para>

  <para>
   Mixer des versions 32-bits et des versions 64-bits dans le même répertoire
   de construction n'est pas supporté. Le système de compilation détectera
   automatiquement si l'environnement est 32-bits ou 64-bits, et construira
   PostgreSQL en accord. Pour cette raison, il est important de commencer avec
   la bonne invite de commande avant de lancer la compilation.
  </para>

  <para>
   Pour utiliser une bibliothèque de tierce partie côté serveur comme
   <productname>python</productname> ou <productname>openssl</productname>,
   cette bibliothèque <emphasis>doit</emphasis> aussi être en 64-bits. Il n'y
   a pas de support pour le chargement d'une bibliothèque 32-bits sur un
   serveur 64-bits. Plusieurs bibliothèques de tierce partie que PostgreSQL
   supporte ne sont disponibles qu'en version 32-bits, auquel cas elles ne
   peuvent pas être utilisées avec un PostgreSQL 64-bits.
  </para>
 </sect2>

 <sect2>
  <title>Construction</title>

  <para>
   Pour construire tout PostgreSQL dans la configuration par défaut, exécutez
   la commande&nbsp;:
   <screen>
    <userinput>
     build
    </userinput>
   </screen>
   Pour construire tout PostgreSQL dans la configuration de débogage, exécutez
   la commande&nbsp;:
   <screen>
    <userinput>
     build DEBUG
    </userinput>
   </screen>
   Pour construire un seul projet, par exemple psql, exécutez les commandes&nbsp;:
   <screen>
    <userinput>
     build psql
    </userinput>
    <userinput>
     build DEBUG psql
    </userinput>
   </screen>
   Pour modifier la configuration de construction par défaut, placez ce qui suit
   dans le fichier <filename>buildenv.pl</filename>&nbsp;:
   <programlisting>
   </programlisting>
  </para>

  <para>
   Il est aussi possible de construire à partir de l'interface de Visual Studio.
   Dans ce cas, vous devez exécuter&nbsp;:
   <screen>
    <userinput>
     perl mkvcbuild.pl
    </userinput>
   </screen>
   à partir de l'invite, puis ouvrir le fichier <filename>pgsql.sln</filename>
   généré (dans le répertoire racine des sources) dans Visual Studio.
  </para>
 </sect2>

 <sect2>
  <title>Nettoyage et installation</title>

  <para>
   La plupart du temps, la récupération automatique des dépendances dans
   Visual Studio prendra en charge les fichiers modifiés. Mais, s'il y a eu
   trop de modifications, vous pouvez avoir besoin de nettoyer
   l'installation. Pour cela, exécutez simplement la commande
   <filename>clean.bat</filename>, qui nettoiera automatiquement les fichiers
   générés. Vous pouvez aussi l'exécuter avec le paramètre
   <parameter>dist</parameter>, auquel cas il se comporte comme
   <userinput>make distclean</userinput> et supprime les fichiers flex/bison
   en sortie.
  </para>

  <para>
   Par défaut, tous les fichiers sont écrits dans un sous-répertoire de
   <filename>debug</filename> ou <filename>release</filename>. Pour installer
   ces fichiers en utilisant les emplacements standards et pour générer aussi
   les fichiers requis pour initialiser et utiliser la base de données,
   exécutez la commande&nbsp;:
   <screen>
    <userinput>
     install c:\destination\directory
    </userinput>
   </screen>
  </para>
 </sect2>

 <sect2>
  <title>Exécuter les tests de régression</title>

  <para>
   Pour exécuter les tests de régression, assurez-vous que vous avez terminé la
   construction de toutes les parties requises. Ensuite, assurez-vous que les
   DLL nécessaires au chargement de toutes les parties du système (comme les
   DLL Perl et Python pour les langages de procédure) sont présentes dans le
   chemin système. Dans le cas contraire, configurez-les dans le fichier
   <filename>buildenv.pl</filename>. Pour lancer les tests, exécutez une des
   commandes suivantes à partir du répertoire
   <filename>src\tools\msvc</filename>&nbsp;:
   <screen>
    <userinput>
     vcregress check
    </userinput>
    <userinput>
     vcregress installcheck
    </userinput>
    <userinput>
     vcregress plcheck
    </userinput>
    <userinput>
     vcregress contribcheck
    </userinput>
   </screen>

   Pour modifier la planification utilisée (en parallèle par défaut), ajoutez-la
   à la ligne de commande, comme&nbsp;:
   <screen>
    <userinput>
     vcregress check serial
    </userinput>
   </screen>

   Pour plus d'informations sur les tests de régression, voir
   <xref linkend="regress"/>.
  </para>
 </sect2>

 <sect2>
  <title>Construire la documentation</title>

  <para>
   Construire la documentation PostgreSQL au format HTML nécessite plusieurs
   outils et fichiers. Créez un répertoire racine pour tous ces fichiers et
   stockez-les dans des sous-répertoires conformément à la liste ci-dessous.
   <variablelist>
    <varlistentry>
     <term>OpenJade 1.3.1-2</term>
     <listitem><para>
      À télécharger à partir de <ulink url="http://sourceforge.net/projects/openjade/files/openjade/1.3.1/openjade-1_3_1-2-bin.zip/download"></ulink>
      et à décompresser dans le sous-répertoire <filename>openjade-1.3.1</filename>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DTD 4.2</term>
     <listitem><para>
      À télécharger à partir de <ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></ulink>
      et à décompresser dans le sous-répertoire <filename>docbook</filename>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DSSSL 1.79</term>
     <listitem><para>
      À télécharger à partir de <ulink url="http://sourceforge.net/projects/docbook/files/docbook-dsssl/1.79/docbook-dsssl-1.79.zip/download"></ulink>
      et à décompresser dans le sous-répertoire <filename>docbook-dsssl-1.79</filename>.
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>ISO character entities</term>
     <listitem><para>
      À télécharger à partir de <ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></ulink>
      et à décompresser dans le sous-répertoire  <filename>docbook</filename>.
     </para></listitem>
    </varlistentry>
   </variablelist>
   Modifiez le fichier <filename>buildenv.pl</filename> et ajoutez une variable
   pour l'emplacement du répertoire racine, par exemple&nbsp;:
   <programlisting>
    $ENV{DOCROOT}='c:\docbook';
   </programlisting>
   Pour construire la documentation, exécutez la commande
   <filename>builddoc.bat</filename>. Notez que ceci exécutera la construction
   une deuxième fois, pour générer les index. Les fichiers HTML générés seront
   dans le répertoire <filename>doc\src\sgml</filename>.
  </para>
 </sect2>

 </sect1>

 <sect1 id="install-windows-libpq">
  <title>Construire <application>libpq</application> avec
  <productname>Visual C++</productname> ou
  <productname>Borland C++</productname></title>

 <para>
  Utiliser <productname>Visual C++ 7.1-9.0</productname> ou
  <productname>Borland C++</productname> pour construire libpq est seulement
  recommandé si vous avez besoin d'une version contenant des drapeaux
  débogage/version finale, ou si vous avez besoin d'une bibliothèque statique
  que vous lierez à une application. Pour une utilisation normale,
  <productname>MinGW</productname>,
  <productname>Visual Studio 2005</productname> ou
  <productname>Windows SDK</productname> sont les méthodes recommandées.
 </para>

 <para>
  Pour construire la bibliothèque client <application>libpq</application> en
  utilisant <productname>Visual Studio 7.1</productname> (ou ultérieur),
  allez dans le répertoire <filename>src</filename> et exécutez la commande&nbsp;:
<screen>
<userinput>nmake /f win32.mak</userinput>
</screen>
 </para>
 <para>
  Pour construire une version 64-bit de la bibliothèque client
  <application>libpq</application> en utilisant <productname>Visual Studio
  8.0</productname> (ou ultérieur), allez dans le répertoire
  <filename>src</filename> et exécutez la commande&nbsp;:
<screen>
<userinput>nmake /f win32.mak CPU=AMD64</userinput>
</screen>
  Voir le fichier <filename>win32.mak</filename> pour plus de détails
  sur les variables supportées.
 </para>

 <para>
  Pour construire la bibliothèque client <application>libpq</application> en
  utilisant <productname>Borland C++</productname>, allez dans le répertoire
  <filename>src</filename> et exécutez la commande&nbsp;:
<screen>
<userinput>make -N -DCFG=Release /f bcc32.mak</userinput>
</screen>
 </para>

 <sect2>
 <title>Fichiers générés</title>
 <para>
  Les fichiers suivants seront produits&nbsp;:

  <variablelist>
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.dll</filename></term>
    <listitem>
     <para>
      la bibliothèque client&nbsp;;
     </para>
    </listitem>
   </varlistentry>
  
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpqdll.lib</filename></term>
    <listitem>
     <para>
      la bibliothèque d'import nécessaire à l'édition de liens avec
      <filename>libpq.dll</filename>&nbsp;
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.lib</filename></term>
    <listitem>
     <para>
       la version statique de la bibliothèque d'interface client&nbsp;;
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>

 <para>
  Habituellement, vous n'avez pas besoin d'installer les fichiers client. Vous
  devez placer le fichier <filename>libpq.dll</filename> dans le même répertoire
  que vos applications. N'installez pas <filename>libpq.dll</filename> dans
  votre répertoire <filename>Windows</filename>,
  <filename>System</filename> or <filename>System32</filename>, sauf en cas d'absolue
  nécessité. S'il
  est installé par un programme, ce dernier doit en contrôler au préalable la
  ressource <symbol>VERSIONINFO</symbol> afin d'éviter l'écrasement d'une 
  version plus récente.
 </para>

 <para>
  Si l'on prévoit de développer sur cette machine une application qui utilise 
  <application>libpq</application>, il faut ajouter les
  sous-répertoires <filename>src\include</filename> et 
  <filename>src\interfaces\libpq</filename> dans le
  chemin d'inclusion des sources de votre compilateur.
 </para>

 <para>
  Pour utiliser la bibliothèque, il faut ajouter 
  <filename>libpqdll.lib</filename> au projet (sous Visual C++,
  clic droit sur le projet et choisir ajouter).
 </para>
</sect2>
</sect1>
</chapter>
