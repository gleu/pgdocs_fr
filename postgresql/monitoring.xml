<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<chapter id="monitoring">
 <title>Surveiller l'activité de la base de données</title>

 <indexterm zone="monitoring">
  <primary>surveiller</primary>
  <secondary>activité de la base de données</secondary>
 </indexterm>

 <indexterm zone="monitoring">
  <primary>activité de la base de données</primary>
  <secondary>suveiller</secondary>
 </indexterm>

 <para>
  Un administrateur de bases de données se demande fréquemment&nbsp;: <quote>Que
   fait le système en ce moment&nbsp;?</quote> Ce chapitre discute de la façon
  de le savoir.
 </para>

 <para>
  Plusieurs outils sont disponibles pour surveiller l'activité de la base de
  données et pour analyser les performances. Une grande partie de ce chapitre
  concerne la description du récupérateur de statistiques de
  <productname>PostgreSQL</productname> mais personne ne devrait négliger les
  programmes de surveillance Unix standards tels que <command>ps</command>,
  <command>top</command>, <command>iostat</command> et <command>vmstat</command>. De plus, une fois
  qu'une requête peu performante a été identifiée, des investigations
  supplémentaires pourraient être nécessaires en utilisant la commande <xref
  linkend="sql-explain"/> de
  <productname>PostgreSQL</productname>. La <xref linkend="using-explain"/>
  discute de <command>EXPLAIN</command> et des autres méthodes pour comprendre le
  comportement d'une seule requête.
 </para>

 <sect1 id="monitoring-ps">
  <title>Outils Unix standard</title>

  <indexterm zone="monitoring-ps">
   <primary>ps</primary>
   <secondary>pour surveiller l'activité</secondary>
  </indexterm>

  <para>
   Sur la plupart des plateformes Unix, <productname>PostgreSQL</productname> modifie
   son titre de commande reporté par <command>ps</command> de façon à ce que les
   processus serveur individuels puissent être rapidement identifiés. Voici un
   affichage d'exemple&nbsp;:

   <screen>$ ps auxww | grep ^postgres
postgres  15551  0.0  0.1  57536  7132 pts/0    S    18:02   0:00 postgres -i
postgres  15554  0.0  0.0  57536  1184 ?        Ss   18:02   0:00 postgres: writer process
postgres  15555  0.0  0.0  57536   916 ?        Ss   18:02   0:00 postgres: checkpointer process
postgres  15556  0.0  0.0  57536   916 ?        Ss   18:02   0:00 postgres: wal writer process
postgres  15557  0.0  0.0  58504  2244 ?        Ss   18:02   0:00 postgres: autovacuum launcher process
postgres  15558  0.0  0.0  17512  1068 ?        Ss   18:02   0:00 postgres: stats collector process
postgres  15582  0.0  0.0  58772  3080 ?        Ss   18:04   0:00 postgres: joe runbug 127.0.0.1 idle
postgres  15606  0.0  0.0  58772  3052 ?        Ss   18:07   0:00 postgres: tgl regression [local] SELECT waiting
postgres  15610  0.0  0.0  58772  3056 ?        Ss   18:07   0:00 postgres: tgl regression [local] idle in transaction
   </screen>

   (L'appel approprié de <command>ps</command> varie suivant les différentes
   plateformes, de même que les détails affichés. Cet exemple est
   tiré d'un système Linux récent.) Le premier processus affiché ici est le
   processus serveur maître. Les arguments
   affichés pour cette commande sont les mêmes qu'à son lancement. Les cinq
   processus suivant sont des processus en tâche de fond lancés
   automatiquement par le processus maître (le processus
   <quote>stats collector</quote> n'est pas présent si
   vous avez configuré le système pour qu'il ne lance pas le récupérateur de
   statistiques&nbsp;; de même que le processus <quote>autovacuum launcher</quote> peut être
   désactivé). Chacun des autres processus est un processus serveur gérant
   une connexion cliente. Tous ces processus restant initialisent l'affichage de
   la ligne de commande de la forme

   <screen>postgres: <replaceable>utilisateur</replaceable> <replaceable>base_de_données</replaceable> <replaceable>hôte</replaceable> <replaceable>activité</replaceable></screen>

  L'utilisateur, la base de données et les éléments de l'hôte (client)
  restent identiques pendant toute la vie de connexion du client mais
  l'indicateur d'activité change. L'activité pourrait être <literal>idle</literal>
  (c'est-à-dire en attente d'une commande du client), <literal>idle in
  transaction</literal> (en attente du client à l'intérieur d'un bloc de
  <command>BEGIN</command>/<command>COMMIT</command>) ou un nom de commande du type
  <literal>SELECT</literal>. De plus, <literal>waiting</literal> est ajouté si le processus
  serveur est en attente d'un verrou détenu par une autre session.
  Dans l'exemple ci-dessus, nous pouvons supposer que le processus 15606 attend
  que le processus 15610 finisse sa transaction, et par conséquent libère un
  verrou (le processus 15610 doit être celui qui bloque car il n'y a aucune
  autre session active. Dans des cas plus compliqués, il serait nécessaire de
  regarder dans la vue système <link
  linkend="view-pg-locks"><structname>pg_locks</structname></link> pour
  déterminer qui est en train de bloquer qui.)
  </para>

  <para>
   Si <xref="guc-cluster-named"/> a été configuré le nom de l'instance
   figurera également dans la sortie&nbsp;:
<screen>
$ psql -c 'SHOW cluster_name'
 cluster_name
--------------
 server1
(1 row)

$ ps aux|grep server1
postgres   27093  0.0  0.0  30096  2752 ?        Ss   11:34   0:00 postgres: server1: writer process
...
</screen>
  </para>

  <para>
   Si vous avez désactivé <xref linkend="guc-update-process-title"/>, alors
   l'indicateur d'activité n'est pas mis à jour&nbsp;; le titre du processus
   est configuré une seule fois quand un nouveau processus est lancé. Sur
   certaines plateformes, ceci permet d'économiser du temps. Sur d'autres,
   cette économie est insignifiante.
  </para>

  <tip>
  <para>
  <productname>Solaris</productname> requiert une gestion particulière. Vous
  devez utiliser <command>/usr/ucb/ps</command> plutôt que
  <command>/bin/ps</command>. Vous devez aussi utiliser deux options
  <option>w</option> et non pas seulement une. En plus, votre appel original de
  la commande <command>postgres</command> doit avoir un affichage de statut
  dans <command>ps</command> plus petit que celui fourni par les autres
  processus serveur. Si vous échouez dans les trois, l'affichage de
  <command>ps</command> pour chaque processus serveur sera la ligne de commande
  originale de <command>postgres</command>.
  </para>
  </tip>
 </sect1>

 <sect1 id="monitoring-stats">
  <title>Le récupérateur de statistiques</title>

  <indexterm zone="monitoring-stats">
   <primary>statistiques</primary>
  </indexterm>

  <para>
   Le <firstterm>récupérateur de statistiques</firstterm> de
   <productname>PostgreSQL</productname> est un sous-système qui supporte la
   récupération et les rapports d'informations sur l'activité du serveur.
   Actuellement, le récupérateur peut compter les accès aux tables et index à la
   fois en terme de blocs disque et de lignes individuelles. Il conserve aussi
   la trace du nombre total de lignes dans chaque table ainsi que des informations
   sur les VACUUM et les ANALYZE pour chaque table.
   Il peut aussi compter le nombre d'appels aux fonctions définies par
   l'utilisateur ainsi que le temps total dépensé par chacune.
  </para>

  <para>
   <productname>PostgreSQL</productname> est capable également de
   renvoyer des informations dynamiques sur ce qu'il se passe exactement
   dans le système en temps réel, comme la commande exacte en cours
   d'exécution par d'autres processus serveurs, et quelles autres
   connexions existent dans le système. Cette facilité est indépendante
   du processus de récupération.
  </para>

 <sect2 id="monitoring-stats-setup">
  <title>Configuration de la récupération de statistiques</title>

  <para>
   Comme la récupération de statistiques ajoute un temps supplémentaire à
   l'exécution de la requête, le système peut être configuré pour récupérer ou
   non des informations. Ceci est contrôlé par les paramètres de configuration
   qui sont normalement initialisés dans <filename>postgresql.conf</filename> (voir
   <xref linkend="runtime-config"/> pour plus de détails sur leur
   initialisation).
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-activities"/> active la collecte
   d'informations sur la commande en cours d'exécution pour n'importe quel
   processus serveur.
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-counts"/> contrôle si les statistiques
   sont récupérées pour les accès aux tables et index.
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-functions"/> active le calcul de
   statistiques sur l'utilisation des fonctions définies par l'utilisateur.
  </para>

  <para>
   Le paramètre <xref linkend="guc-track-io-timing"/> active la collecte
   des temps de lecture et d'écriture de blocs.
  </para>

  <para>
   Normalement, ces paramètres sont configurés dans
   <filename>postgresql.conf</filename> de façon à ce qu'ils s'appliquent à tous les
   processus serveur mais il est possible de les activer/désactiver sur des
   sessions individuelles en utilisant la commande <xref
   linkend="sql-set"/> (pour empêcher les utilisateurs
   ordinaires de cacher leur activité à l'administrateur, seuls les
   superutilisateurs sont autorisés à modifier ces paramètres avec
   <command>SET</command>).
  </para>

  <para>
   Le collecteur de statistiques transmets l'information récupérée
   aux autres processus <productname>PostgreSQL</productname> à travers
   des fichiers temporaires. Ces fichiers sont stockés dans le répertoire
   défini par le paramètre <xref linkend="guc-stats-temp-directory"/>,
   par défaut <filename>pg_stat_tmp</filename>.
   Pour de meilleures performances, <varname>stats_temp_directory</varname>
   peut pointer vers un disque en RAM, diminuant ainsi les besoins en
   entrées/sorties physique. Quand le serveur s'arrête proprement, une copie permanente
   des données statistiques est stockée dans le sous-répertoire
   <filename>pg_stat</filename>, pour que les statistiques puissent être
   conservées après un arrêt du serveur. Quand la restauration est réalisée
   au démarrage du serveur (autrement dit après un arrêt immédiat, un crash du
   serveur ou lors d'une restauration PITR), tous les compteurs statistiques
   sont réinitialisés.
  </para>

  <para>
   Une transaction peut aussi voir des statistiques propres à son
   activité (qui ne sont pas encore transmises au collecteur) dans les
   vues <structname>pg_stat_xact_all_tables</structname>,
   <structname>pg_stat_xact_sys_tables</structname>,
   <structname>pg_stat_xact_user_tables</structname> et
   <structname>pg_stat_xact_user_functions</structname>.
   Ces informations se mettent à jour
   en continue pendant l'exécution de la transaction.
  </para>

 </sect2>

 <sect2 id="monitoring-stats-views">
  <title>Visualiser les statistiques</title>

  <para>
   Plusieurs vues pré-définies, listées à <xref
   linkend="monitoring-stats-dynamic-views-table"/>, sont disponibles pour
   montrer l'état courant du système. Il existe aussi plusieurs autres
   vues, listées à <xref linkend="monitoring-stats-views-table"/>,
   qui montrent les résultats des statistiques
   récupérées. De manière alternative, quelqu'un
   pourrait proposer des vues personnalisées qui utilisent les
   fonctions statistiques sous-jacentes, comme discuté à <xref
   linkend="monitoring-stats-functions"/>.
  </para>

  <para>
   En utilisant les statistiques pour surveiller l'activité en cours, il est
   important de réaliser que l'information n'est pas mise à jour instantanément.
   Chaque processus serveur individuel transmet les nouvelles statistiques au
   récupérateur juste avant l'attente d'une
   nouvelle commande du client&nbsp;; donc une requête toujours en cours
   n'affecte pas les totaux affichés. De plus, le récupérateur lui-même émet un
   nouveau rapport une fois par <varname>PGSTAT_STAT_INTERVAL</varname>
   millisecondes (500 millisecondes, sauf si cette valeur a été modifiée lors de la
   construction du serveur). Donc, les totaux affichés sont bien derrière
   l'activité réelle. Néanmoins, l'information sur la requête en cours récupérée
   par <varname>track_activities</varname> est toujours à jour.
  </para>

  <para>
   Un autre point important est que, lorsqu'un processus serveur se voit
   demander d'afficher une des statistiques, il récupère tout d'abord le rapport
   le plus récent émis par le processus de récupération, puis continue
   d'utiliser cette image de toutes les vues et fonctions statistiques jusqu'à
   la fin de sa transaction en cours. De façon similaire, les informations sur
   les requêtes en cours, quelque soit le processus, sont récupérées quand une
   telle information est demandée dans une transaction, et cette même information
   sera affichée lors de la transaction. Donc, les statistiques afficheront des
   informations statiques tant que vous restez dans la même transaction. Ceci est une
   fonctionnalité, et non pas un bogue, car il vous permet de traiter plusieurs
   requêtes sur les statistiques et de corréler les résultats sans vous
   inquiéter que les nombres aient pu changer. Mais si vous voulez voir les
   nouveaux résultats pour chaque requête, assurez-vous de lancer les requêtes
   en dehors de tout bloc de transaction. Autrement, vous pouvez appeler
   <function>pg_stat_clear_snapshot</function>(), qui annulera l'image statistique
   de la transaction en cours. L'utilisation suivante des informations
   statistiques causera la récupération d'une nouvelle image.
  </para>

  <table id="monitoring-stats-dynamic-views-table">
   <title>Vues statistiques dynamiques</title>

   <tgroup cols="2">
    <colspec colnum="1" colwidth="0.4*"/>
    <colspec colnum="2" colwidth="1.6*"/>
    <thead>
     <row>
      <entry>Nom de la vue</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry>
       <structname>pg_stat_activity</structname>
       <indexterm><primary>pg_stat_activity</primary></indexterm>
      </entry>
      <entry>
       Une ligne par processus serveur, montrant les informations
       liées à l'activité courante du processus, comme l'état et la
       requête en cours. Voir <xref linkend="pg-stat-activity-view"/>
       pour plus de détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_replication</structname><indexterm><primary>pg_stat_replication</primary></indexterm></entry>
      <entry>Une ligne par processus d'envoi de WALs, montrant les
      statistiques sur la réplication vers le serveur standby connecté
      au processus.
       Voir <xref linkend="pg-stat-replication-view"/> pour des détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_ssl</structname><indexterm><primary>pg_stat_ssl</primary></indexterm></entry>
      <entry>Une ligne par connexion (régulière et de réplication),
      montrant des informations ) à propos de SSL utilisé lors de
      ces connexions.
       Voir <xref linkend="pg-stat-ssl-view"/> pour des détails.
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <table id="monitoring-stats-views-table">
   <title>Vues sur les statistiques récupérées</title>

   <tgroup cols="2">
    <thead>
     <row>
      <entry>Nom de la vue</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structname>pg_stat_archiver</structname><indexterm><primary>pg_stat_archiver</primary></indexterm></entry>
      <entry>Une seule ligne, montrant les statistiques sur l'activité du
        processus d'archivage des journaux de transactions. Voir <xref
        linkend="pg-stat-archiver-view"/> pour les détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_bgwriter</structname><indexterm><primary>pg_stat_bgwriter</primary></indexterm></entry>
      <entry>Une seule ligne, montrant les statistiques
       d'activité du processus d'écriture d'arrière plan.
       Voir <xref linkend="pg-stat-bgwriter-view"/> pour plus de détails.
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_database</structname><indexterm><primary>pg_stat_database</primary></indexterm></entry>
      <entry>Une ligne par base de données, montrant les statistiques
       globales des bases. Voir <xref linkend="pg-stat-database-view"/>
       pour plus de détails.
      </entry>
     </row>
     </tbody>

     <row>
      <entry><structname>pg_stat_database_conflicts</structname><indexterm><primary>pg_stat_database_conflicts</primary></indexterm></entry>
      <entry>
       Une ligne par base de données, montrant les statistiques au
       niveau de la base concernant les requêtes annulées à cause de
       conflits avec les serveurs standby en restauration.
       Voir <xref linkend="pg-stat-database-conflicts-view"/> pour des détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_all_tables</structname><indexterm><primary>pg_stat_all_tables</primary></indexterm></entry>
      <entry>
       Une ligne par table de la base de données courante, montrant les
       statistiques d'accès de chaque table spécifiquement. Voir
       <xref linkend="pg-stat-all-tables-view"/> pour plus de détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_sys_tables</structname><indexterm><primary>pg_stat_sys_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_all_tables</structname>, sauf que seules les
      tables systèmes sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_tables</structname><indexterm><primary>pg_stat_user_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_all_tables</structname>, sauf que seules les
      tables utilisateurs sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_all_tables</structname><indexterm><primary>pg_stat_xact_all_tables</primary></indexterm></entry>
      <entry>Similaire à <structname>pg_stat_all_tables</structname>, mais
      décompte les actions prises dans la transaction en cours (qui ne
      sont <emphasis>pas</emphasis> encore pris en compte dans la vue
      <structname>pg_stat_all_tables</structname> et les vues du même
      type). Les colonnes correspondant au nombre de lignes vivantes et
      mortes, ainsi que celles pour les actions du VACUUM et de l'ANALYZE
      ne sont pas présentes dans cette vue</entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_sys_tables</structname><indexterm><primary>pg_stat_xact_sys_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_xact_all_tables</structname>,
      sauf que seules les tables systèmes sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_user_tables</structname><indexterm><primary>pg_stat_xact_user_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_xact_all_tables</structname>, sauf que seules les
      tables utilisateurs sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_stat_all_indexes</structname><indexterm><primary>pg_stat_all_indexes</primary></indexterm></entry>
      <entry>
       Une ligne par index de la base de données courante, montrant les
       statistiques d'accès de chaque index spécifiquement. Voir
       <xref linkend="pg-stat-all-indexes-view"/> pour plus de détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_sys_indexes</structname><indexterm><primary>pg_stat_sys_indexes</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_all_indexes</structname>, sauf que seules les
      tables systèmes sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_indexes</structname><indexterm><primary>pg_stat_user_indexes</primary></indexterm></entry>
      <entry>Identique à <structname>pg_stat_all_indexes</structname>, sauf que seules
      les tables utilisateurs sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_tables</structname><indexterm><primary>pg_statio_all_tables</primary></indexterm></entry>
      <entry>
       Une ligne par table de la base de données courante, montrant les
       statistiques d'entrées/sorties de chaque table spécifiquement. Voir
       <xref linkend="pg-statio-all-tables-view"/> pour plus de détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_tables</structname><indexterm><primary>pg_statio_sys_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_tables</structname>, sauf que seules
      les tables systèmes sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_tables</structname><indexterm><primary>pg_statio_user_tables</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_tables</structname>, sauf que seules
      les tables utilisateur sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_indexes</structname><indexterm><primary>pg_statio_all_indexes</primary></indexterm></entry>
      <entry>
       Une ligne par index de la base de données courante, montrant les
       les statistiques d'entrées/sorties de chaque index spécifiquement. Voir
       <xref linkend="pg-statio-all-indexes-view"/> pour plus de détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_indexes</structname><indexterm><primary>pg_statio_sys_indexes</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_indexes</structname>, sauf que seuls
      les index systèmes sont affichés</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_indexes</structname><indexterm><primary>pg_statio_user_indexes</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_indexes</structname>, sauf que seuls
      les index utilisateur sont affichés</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_sequences</structname><indexterm><primary>pg_statio_all_sequences</primary></indexterm></entry>
     <entry>
       Une ligne par séquence de la base de données courante, montrant les
       statistiques d'entrées/sorties de chaque séquence spécifiquement. Voir
       <xref linkend="pg-statio-all-sequences-view"/> pour plus de détails.
     </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_sequences</structname><indexterm><primary>pg_statio_sys_sequences</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_sequences</structname>, sauf que
      seules les séquences système sont affichées (actuellement, aucune
      séquence système n'est définie, donc cette vue est toujours vide)</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_sequences</structname><indexterm><primary>pg_statio_user_sequences</primary></indexterm></entry>
      <entry>Identique à <structname>pg_statio_all_sequences</structname>, sauf que
      seules les séquences utilisateur sont affichées</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_functions</structname><indexterm><primary>pg_stat_user_functions</primary></indexterm></entry>
      <entry>
       Une ligne par fonction suivie, montrant les statistiques
       d'exécution de cette fonction. Voir
       <xref linkend="pg-stat-user-functions-view"/> pour plus de détails.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_user_functions</structname><indexterm><primary>pg_stat_xact_user_functions</primary></indexterm></entry>
      <entry>Similaire à <structname>pg_stat_user_functions</structname>,
      mais compte seulement les appels pendant la transaction en cours
      (qui ne sont <emphasis>pas</emphasis> encore inclus dans
      <structname>pg_stat_user_functions</structname>)</entry>
     </row>

    </tgroup>
   </table>
  </sect2>

  <para>
   Les statistiques par index sont particulièrement utiles pour déterminer
   les index utilisés et leur efficacité.
  </para>

  <para>
   Les vues <structname>pg_statio_</structname> sont principalement utiles pour
   déterminer l'efficacité du cache tampon. Quand le nombre de lectures disques
   réelles est plus petit que le nombre de récupérations valides par le tampon,
   alors le cache satisfait la plupart des demandes de lecture sans faire appel
   au noyau. Néanmoins, ces statistiques ne nous donnent pas l'histoire
   complète&nbsp;: à cause de la façon dont <productname>PostgreSQL</productname> gère les
   entrées/sorties disque, les données qui ne sont pas dans le tampon de
   <productname>PostgreSQL</productname> pourraient toujours résider dans le tampon
   d'entrées/sorties du noyau et pourraient, du coup, être toujours récupérées
   sans nécessiter une lecture physique. Les utilisateurs intéressés pour
   obtenir des informations plus détaillées sur le comportement des
   entrées/sorties dans <productname>PostgreSQL</productname> sont invités à utiliser le
   récupérateur de statistiques de <productname>PostgreSQL</productname> avec les outils du
   système d'exploitation permettant une vue de la gestion des
   entrées/sorties par le noyau.
  </para>

  <table id="pg-stat-activity-view" xreflabel="pg_stat_activity">
   <title>Vue <structname>pg_stat_activity</structname></title>

   <tgroup cols="3">
    <colspec colnum="1" colwidth="2.0*"/>
    <colspec colnum="2" colwidth="0.3*"/>
    <colspec colnum="3" colwidth="1.2*"/>
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>datid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID de la base de données auquelle ce processus serveur est connecté</entry>
    </row>
    <row>
     <entry><structfield>datname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de la base de données auquelle ce processus serveur est connecté</entry>
    </row>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>Identifiant du processus serveur</entry>
    </row>
    <row>
     <entry><structfield>usesysid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID de l'utilisateur connecté à ce processus serveur</entry>
    </row>
    <row>
     <entry><structfield>usename</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de l'utilisateur connecté à ce processus serveur</entry>
    </row>
    <row>
     <entry><structfield>application_name</structfield></entry>
     <entry><type>text</type></entry>
     <entry>Nom de l'application connectée à ce processus serveurs</entry>
    </row>
    <row>
     <entry><structfield>client_addr</structfield></entry>
     <entry><type>inet</type></entry>
     <entry>Adresse IP du client pour ce processus serveur.
      Si ce champ est vide, cela indique soit que le client est
      connecté via un socket Unix sur la machine serveur soit qu'il
      s'agit d'un processus interne tel qu'autovacuum.
     </entry>
    </row>
    <row>
     <entry><structfield>client_hostname</structfield></entry>
     <entry><type>text</type></entry>
     <entry>Nom d'hôte du client connecté, comme reporté par une recherche DNS
      inverse sur <structfield>client_addr</structfield>. Ce champ ne sera rempli que
      pour les connexions IP, et seulement quand <xref
      linkend="guc-log-hostname"/> est activé.
     </entry>
    </row>
    <row>
     <entry><structfield>client_port</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>Numéro de port TCP que le client utilise pour communiquer
      avec le processus serveur,
      ou <literal>-1</literal> si un socket Unix est utilisé.
     </entry>
    </row>
    <row>
     <entry><structfield>backend_start</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Heure de démarrage du processus, c'est-à-dire
      quand le client s'est connecté au serveur.
     </entry>
    </row>
    <row>
     <entry><structfield>xact_start</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Heure de démarrage de la transaction courante du
      processus, ou NULL si aucune transaction n'est active. Si la
      requête courante est la première de sa transaction, cette
      colonne a la même valeur que la colonne
      <structfield>query_start</structfield>.
     </entry>
    </row>
    <row>
     <entry><structfield>query_start</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Heure à laquelle la requête active a été démarrée, ou
      si <structfield>state</structfield> ne vaut pas
      <literal>active</literal>, quand la dernière requête
      a été lancée.
     </entry>
    </row>
    <row>
     <entry><structfield>state_change</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Heure à laquelle l'état (<structfield>state</structfield>) a été modifié en dernier</entry>
    </row>
    <row>
     <entry><structfield>waiting</structfield></entry>
     <entry><type>boolean</type></entry>
     <entry>Vrai si le processus serveur est actuellement en attente d'un verrou</entry>
    </row>
    <row>
     <entry><structfield>state</structfield></entry>
     <entry><type>text</type></entry>
     <entry>État général du processus serveur.
       Les valeurs possibles sont:
       <itemizedlist>
         <listitem>
          <para>
           <literal>active</literal>&nbsp;: le processus serveur exécute une
           requête.
          </para>
         </listitem>
         <listitem>
          <para>
           <literal>idle</literal>&nbsp;: le processus serveur est en attente
           d'une commande par le client.
          </para>
         </listitem>
         <listitem>
          <para>
           <literal>idle in transaction</literal>&nbsp;: le processus serveur
           est en transaction, mais n'est pas en train d'exécuter une requête.
          </para>
         </listitem>
         <listitem>
          <para>
           <literal>idle in transaction (aborted)</literal>&nbsp;: l'état est
           similaire à <literal>idle in transaction</literal>, à la différence
           qu'une des instructions de la transaction a généré une erreur.
          </para>
         </listitem>
         <listitem>
          <para>
           <literal>fastpath function call</literal>&nbsp;: le processus serveur
           exécute une fonction fast-path.
          </para>
         </listitem>
         <listitem>
           <para>
           <literal>disabled</literal>&nbsp;: cet état est affiché si <xref
           linkend="guc-track-activities"/> est désactivé pour ce processus
           serveur.
          </para>
         </listitem>
       </itemizedlist>
     </entry>
    </row>
    <row>
     <entry><structfield>backend_xid</structfield></entry>
     <entry><type>xid</type></entry>
     <entry>Identifiant de transaction de haut niveau de ce processus, si
      disponible.</entry>
    </row>
    <row>
     <entry><structfield>backend_xmin</structfield></entry>
     <entry><type>xid</type></entry>
     <entry>L'horizon <literal>xmin</literal> de ce processus.</entry>
    </row>
    <row>
     <entry><structfield>query</structfield></entry>
     <entry><type>text</type></entry>
     <entry>Texte de la requête la plus récente pour ce processus serveur. Si
      <structfield>state</structfield> vaut <literal>active</literal>, alors
      ce champ affiche la requête en cours d'exécution. Dans tous les autres
      cas, il affichera la dernière requête à avoir été exécutée.
     </entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_activity</structname> aura une ligne par processus
   serveur, montrant des informations liées à l'activité courante de ce processus.
  </para>

  <note>
   <para>
    Les colonnes <structfield>waiting</structfield> et <structfield>state</structfield> sont
    indépendantes. Si un processus serveur est dans l'état <literal>active</literal>, le champ
    <literal>waiting</literal> peut être vrai ou faux. Si l'état vaut <literal>active</literal>
    et que <structfield>waiting</structfield> est vrai, cela signifie que la requête est
    exécutée, mais qu'elle est bloquée par un verrou quelque part sur le système.
   </para>
  </note>

  <table id="pg-stat-replication-view" xreflabel="pg_stat_replication">
   <title>Vue <structname>pg_stat_replication</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>ID d'un processus expéditeur de WALs </entry>
    </row>
    <row>
     <entry><structfield>usesysid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>L'OID de l'utilisateur connecté à ce processus expéditeur de WALs</entry>
    </row>
    <row>
     <entry><structfield>usename</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de l'utilisateur connecté à ce processus expéditeur de WALs</entry>
    </row>
    <row>
     <entry><structfield>application_name</structfield></entry>
     <entry><type>text</type></entry>
     <entry>Nom de l'application qui est connectée à ce processus
     expédietru de WALs</entry>
    </row>
    <row>
     <entry><structfield>client_addr</structfield></entry>
     <entry><type>inet</type></entry>
     <entry>Adresse IP du client connecté à ce processus expéditeur
     de WALs. Si ce champ est NULL, ceci signifie que le client est
     connecté via un socket Unix sur la machine serveur.</entry>
    </row>
    <row>
     <entry><structfield>client_hostname</structfield></entry>
     <entry><type>text</type></entry>
     <entry>Nom de l'hôte du client connecté, comme renvoyé par une
     recherche inverse DNS sur <structfield>client_addr</structfield>. Ce
     champ sera uniquement non NULL pour les connexions IPs, et seulement
     si <xref linkend="guc-log-hostname"/> est activé.
     </entry>
    </row>
    <row>
     <entry><structfield>client_port</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>Numéro du port TCP que le client utilise pour la
     communication avec ce processus expéditeur de WALs, ou
     <literal>-1</literal> si une socket Unix est utilisée.</entry>
    </row>
    <row>
     <entry><structfield>backend_start</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Heure à laquelle ce processus a été démarré, exemple,
     lorsque le client s'est connecté à ce processus expéditeur
     de WALs.</entry>
    </row>
    <row>
     <entry><structfield>backend_xmin</structfield></entry>
     <entry><type>xid</type></entry>
     <entry>L'horizon <literal>xmin</literal> de ce serveur standby
     renvoyé par <xref linkend="guc-hot-standby-feedback"/>.</entry>
    </row>
    <row>
     <entry><structfield>state</structfield></entry>
     <entry><type>text</type></entry>
     <entry>État courant de l'expéditeur de WALs</entry>
    </row>
    <row>
     <entry><structfield>sent_location</structfield></entry>
     <entry><type>pg_lsn</type></entry>
     <entry>La position de la dernière transaction envoyée dans cette connexion</entry>
    </row>
    <row>
     <entry><structfield>write_location</structfield></entry>
     <entry><type>pg_lsn</type></entry>
     <entry>La position de la dernière transaction écrite sur disque
     par ce serveur standby</entry>
    </row>
    <row>
     <entry><structfield>flush_location</structfield></entry>
     <entry><type>pg_lsn</type></entry>
     <entry>La position de la dernière trasnaction vidée sur disque
     par ce serveur standby</entry>
    </row>
    <row>
     <entry><structfield>replay_location</structfield></entry>
     <entry><type>pg_lsn</type></entry>
     <entry>La position de la dernière transaction rejouée dans la
     base de données par ce serveur standby</entry>
    </row>
    <row>
     <entry><structfield>sync_priority</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>Priorité de ce serveur standby pour être choisi comme le
     serveur standby synchrone</entry>
    </row>
    <row>
     <entry><structfield>sync_state</structfield></entry>
     <entry><type>text</type></entry>
     <entry>État synchrone de ce serveur standby</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pog_stat_replication</structname> contiendra une
   ligne par processus expéditeur de WALs, montrant des statistiques sur
   la réplication avec le serveur standby connecté au processus. Seuls
   les serveurs standby directement connectés sont listés; aucune
   information n'est disponible concernant les serveurs standby en aval.
  </para>
   <title>Vue <structname>pg_stat_ssl</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>ID du processus backend ou du processus expéditeur de WAL</entry>
    </row>
    <row>
     <entry><structfield>ssl</structfield></entry>
     <entry><type>boolean</type></entry>
     <entry>True si SSL est utilisé dans cette connexion</entry>
    </row>
    <row>
     <entry><structfield>version</structfield></entry>
     <entry><type>text</type></entry>
     <entry>Version de SSL utilisé, ou NULL si SSL n'est pas utilisé
     pour cette connexion</entry>
    </row>
    <row>
     <entry><structfield>cipher</structfield></entry>
     <entry><type>text</type></entry>
     <entry>Nom du chiffrement SSL utilisé, ou NULL si SSL n'est pas
     utilisé pour cette connexion</entry>
    </row>
    <row>
     <entry><structfield>bits</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>Nombre de bits dans l'algorithme de chiffrement utilisé,
     ou NULL si SSL n'est pas utilisé pour cette connexion</entry>
    </row>
    <row>
     <entry><structfield>compression</structfield></entry>
     <entry><type>boolean</type></entry>
     <entry>True si la compression SSL est utilisée, false sinon, ou
     NULL si SSL n'est pas utilisé pour cette connexion</entry>
    </row>
    <row>
     <entry><structfield>clientdn</structfield></entry>
     <entry><type>text</type></entry>
     <entry>Champ Distinguished Name (DN) utilisé par le certificat du
     client, ou NULL si aucun certificat client n'a été fourni ou si
     SSL n'est pas utilisé pour cette connexion. Ce champ est tronqué
     si la champ DN est plus long que <symbol>NAMEDATALEN</symbol>
     (64 caractères dans une compilation standard)</entry>
     </entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_ssl</structname> contiendra une
   ligne par backend ou processus expéditeur de WALs, montrant
   des statistiques sur l'usage de SSL dans cette connexion. Elle
   peut être jointe à <structname>pg_stat_activity</structname>
   ou <structname>pg_stat_replication</structname> sur la colonne
   <structfield>pid</structfield> pour obtenir plus de détails sur
   la connexion.
  </para>


  <table id="pg-stat-archiver-view" xreflabel="pg_stat_archiver">
   <title>Vue <structname>pg_stat_archiver</structname></title>

   <tgroup cols="3">
    <thead>
     <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>archived_count</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de journaux de transactions archivés avec succès</entry>
     </row>
     <row>
      <entry><structfield>last_archived_wal</structfield></entry>
      <entry><type>text</type></entry>
      <entry>Nom du dernier journal de transaction archivé avec succès</entry>
     </row>
     <row>
      <entry><structfield>last_archived_time</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>Horodatage de la dernière opération d'archivage réussie</entry>
     </row>
     <row>
      <entry><structfield>failed_count</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre d'échec d'archivage de journaux de transactions</entry>
     </row>
     <row>
      <entry><structfield>last_failed_wal</structfield></entry>
      <entry><type>text</type></entry>
      <entry>Nom du journal de transactions correspondant au dernier archivage
        échoué</entry>
     </row>
     <row>
      <entry><structfield>last_failed_time</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>Horodatage de la dernière opération d'archivage échouée</entry>
     </row>
     <row>
      <entry><structfield>stats_reset</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>Horodatage de la dernière réinitialisation de ces statistiques</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_archiver</structname> aura toujours une seule ligne
   contenant les données du processus d'archivage de l'instance.
  </para>

  <table id="pg-stat-bgwriter-view" xreflabel="pg_stat_bgwriter">
   <title>Vue <structname>pg_stat_bgwriter</structname></title>

   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>checkpoints_timed</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de checkpoints planifiés ayant été effectués</entry>
     </row>
     <row>
      <entry><structfield>checkpoints_req</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de checkpoints demandés ayant été effectués</entry>
     </row>
     <row>
      <entry><structfield>checkpoint_write_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry>
        Temps total passé dans la partie des checkpoints
        où les fichiers sont écrits sur disque, en millisecondes.
      </entry>
     </row>
     <row>
      <entry><structfield>checkpoint_sync_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry>
        Temps total passé dans la partie des checkpoints
        où les fichiers sont synchronisés sur le disque, en millisecondes.
      </entry>
     </row>
     <row>
      <entry><structfield>buffers_checkpoint</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de tampons écrits durant des checkpoints</entry>
     </row>
     <row>
      <entry><structfield>buffers_clean</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de tampons écrits par le processus background writer
      (processus d'écriture en tâche de fond)</entry>
     </row>
     <row>
      <entry><structfield>maxwritten_clean</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de fois que le processus background writer a arrêté
       son parcours de nettoyage pour avoir écrit trop de tampons</entry>
     </row>
     <row>
      <entry><structfield>buffers_backend</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de tampons écrits directement par un processus serveur</entry>
     </row>
     <row>
      <entry><structfield>buffers_backend_fsync</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de fois qu'un processus serveur a du exécuter son propre appel à
       <function>fsync</function> (normalement le processus background writer gère
        ces appels même quand le processus serveur effectue sa propre écriture)</entry>
     </row>
     <row>
      <entry><structfield>buffers_alloc</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>Nombre de tampons alloués</entry>
     </row>
     <row>
      <entry><structfield>stats_reset</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>Dernière fois que ces statistiques ont été réinitialisées</entry>
     </row>
    </tbody>
    </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_bgwriter</structname> aura toujours une ligne unique,
   contenant les données globales de l'instance.
  </para>

  <table id="pg-stat-database-view" xreflabel="pg_stat_database">
   <title>Vue <structname>pg_stat_database</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>datid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID d'une base de données</entry>
    </row>
    <row>
     <entry><structfield>datname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de cette base de données</entry>
    </row>
    <row>
     <entry><structfield>numbackends</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>Nombre de processus serveurs actuellement connectés à cette base de données.
     C'est la seule colonne de cette vue qui renvoie une valeur reflétant l'état actuel&nbsp;;
     toutes les autres colonnes renvoient les valeurs accumulées depuis la dernière
     réinitialisation</entry>
    </row>
    <row>
     <entry><structfield>xact_commit</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de transactions de cette base de données qui ont été
      validées</entry>
    </row>
    <row>
     <entry><structfield>xact_rollback</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de transactions de cette base de données qui ont été
      annulées</entry>
    </row>
    <row>
     <entry><structfield>blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de blocs disques lus dans cette base de données</entry>
    </row>
    <row>
     <entry><structfield>blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de fois que des blocs disques étaient déjà dans le cache tampon,
      et qu'il n'a donc pas été nécessaire de les lire sur disque (cela n'inclut que les accès
      dans le cache tampon de PostgreSQL, pas dans le cache de fichiers du système d'exploitation).
     </entry>
    </row>
    <row>
     <entry><structfield>tup_returned</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes retournées par des requêtes dans cette base de données</entry>
    </row>
    <row>
     <entry><structfield>tup_fetched</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes rapportées par des requêtes dans cette base de données</entry>
    </row>
    <row>
     <entry><structfield>tup_inserted</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes insérées par des requêtes dans cette base de données</entry>
    </row>
    <row>
     <entry><structfield>tup_updated</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes mises à jour par des requêtes dans cette base de données</entry>
    </row>
    <row>
     <entry><structfield>tup_deleted</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes supprimées par des requêtes dans cette base de données</entry>
    </row>
    <row>
     <entry><structfield>conflicts</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de requêtes annulées à cause de conflits avec la restauration dans cette
      base de données. (Les conflits n'arrivent que sur des serveurs de standby&nbsp;; voir
      <xref linkend="pg-stat-database-conflicts-view"/> pour plus de détails.)
     </entry>
    </row>
    <row>
     <entry><structfield>temp_files</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de fichiers temporaires créés par des requêtes dans cette base
      de données. Tous les fichiers temporaires sont comptabilisés, quel que soit
      la raison de la création du fichier temporaire (par exemple, un tri ou un hachage) et
      quel que soit la valeur du paramètre <xref linkend="guc-log-temp-files"/>.
     </entry>
    </row>
    <row>
     <entry><structfield>temp_bytes</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Quantité totale de données écrites dans des fichiers temporaires
      par des requêtes dans cette base de données. Tous les fichiers
      temporaires sont comptabilisés, quel que soit la raison de la création
      de ce fichier temporaire, et quel que soit la valeur du paramètre
       <xref linkend="guc-log-temp-files"/>.
     </entry>
    </row>
    <row>
     <entry><structfield>deadlocks</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de verrous mortels détectés dans cette base de données</entry>
    </row>
    <row>
     <entry><structfield>blk_read_time</structfield></entry>
     <entry><type>double precision</type></entry>
     <entry>Temps passé à lire des blocs de donnée dans des fichiers par des
      processsus serveur dans cette base de données, en millisecondes</entry>
    </row>
    <row>
     <entry><structfield>blk_write_time</structfield></entry>
     <entry><type>double precision</type></entry>
     <entry>Temps passé à écrire des blocs de données dans des fichiers par
      les processus serveurs dans cette base de données, en millisecondes</entry>
    </row>
    <row>
     <entry><structfield>stats_reset</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Dernière fois que ces statistiques ont été réinitialisées</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_database</structname> ne contiendra qu'une
   ligne pour chaque base de données dans l'instance, montrant ses
   statistiques globales.
  </para>

  <table id="pg-stat-database-conflicts-view" xreflabel="pg_stat_database_conflicts">
  <title>Vue <structname>pg_stat_database_conflicts</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>datid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID d'une base de données</entry>
    </row>
    <row>
     <entry><structfield>datname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de cette base de données</entry>
    </row>
    <row>
     <entry><structfield>confl_tablespace</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de requêtes dans cette base de données qui ont
     été annulées suite à la suppression de tablespaces</entry>
    </row>
    <row>
     <entry><structfield>confl_lock</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de requêtes dans cette base de données qui
     ont été annulées suite à des délais dépassés sur des
     verrouillages</entry>
    </row>
    <row>
     <entry><structfield>confl_snapshot</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de requêtes dans cette base de données qui ont
     été annulées à cause d'instantanés trop vieux</entry>
    </row>
    <row>
     <entry><structfield>confl_bufferpin</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de requêtes dans cette base de données qui ont
     été annulées à cause de tampons épinglés</entry>
    </row>
    <row>
     <entry><structfield>confl_deadlock</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de requêtes dans cette base de données qui ont
     été annulées à cause de blocages</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_database_conflicts</structname> contiendra
   une ligne par base de données, montrant des statistiques au niveau
   de la base de données concernant les requêtes annulées survenant à
   cause de conflits avec la restauration sur des serveurs standby. Cette
   vue contiendra seulement des informations sur les serveurs standby,
   dans la mesure où aucun conflit ne survient sur les serveurs
   primaires.
  </para>

  <table id="pg-stat-all-tables-view" xreflabel="pg_stat_all_tables">
   <title>Vue <structname>pg_stat_all_tables</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID d'une table</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom du schéma dans lequel se trouve cette table</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de cette table</entry>
    </row>
    <row>
     <entry><structfield>seq_scan</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de parcours séquentiels initiés sur cette table</entry>
    </row>
    <row>
     <entry><structfield>seq_tup_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes vivantes rapportées par des parcours séquentiels</entry>
    </row>
    <row>
     <entry><structfield>idx_scan</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de parcours d'index initiés sur cette table</entry>
    </row>
    <row>
     <entry><structfield>idx_tup_fetch</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes vivantes rapportées par des parcours d'index</entry>
    </row>
    <row>
     <entry><structfield>n_tup_ins</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes insérées</entry>
    </row>
    <row>
     <entry><structfield>n_tup_upd</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes mises à jour (y compris les lignes mises à jour HOT)</entry>
    </row>
    <row>
     <entry><structfield>n_tup_del</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes supprimées</entry>
    </row>
    <row>
     <entry><structfield>n_tup_hot_upd</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes mises à jour par HOT (i.e., sans mises à jour d'index
      nécessaire)</entry>
    </row>
    <row>
     <entry><structfield>n_live_tup</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre estimé de lignes vivantes</entry>
    </row>
    <row>
     <entry><structfield>n_dead_tup</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre estimé de lignes mortes</entry>
    </row>
    <row>
     <entry><structfield>n_mod_since_analyze</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre estimé de lignes modifiées depuis le dernier ANALYZE sur
      cette table</entry>
    </row>
    <row>
     <entry><structfield>last_vacuum</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Dernière fois qu'une opération VACUUM manuelle
      a été faite sur cette table (sans compter&nbsp;
      <command>VACUUM FULL</command>)</entry>
    </row>
    <row>
     <entry><structfield>last_autovacuum</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Dernière fois que le démon autovacuum a exécuté une
     opération VACUUM sur cette table</entry>
    </row>
    <row>
     <entry><structfield>last_analyze</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Dernière fois qu'une opération ANALYZE a été lancée
      manuellement sur cette table</entry>
    </row>
    <row>
     <entry><structfield>last_autoanalyze</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
     <entry>Dernière fois que le démon autovacuum a exécuté une
      opération ANALYZE sur cette table</entry>
    </row>
    <row>
     <entry><structfield>vacuum_count</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de fois qu'une opération VACUUM manuelle a été
      lancée sur cette table (sans compter
      <command>VACUUM FULL</command>)</entry>
    </row>
    <row>
     <entry><structfield>autovacuum_count</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de fois que le démon autovacuum a exécuté
      une opération VACUUM manuelle</entry>
    </row>
    <row>
     <entry><structfield>analyze_count</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de fois qu'une opération ANALYZE manuelle
      a été lancée sur cette table</entry>
    </row>
    <row>
     <entry><structfield>autoanalyze_count</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de fois que le démon autovacuum a exécuté une
      opération ANALYZE sur cette table</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_all_tables</structname> contiendra une ligne
   par table dans la base de données courante (incluant les tables TOAST),
   montrant les statistiques d'accès pour cette table spécifiquement. Les vues
   <structname>pg_stat_user_tables</structname> et
   <structname>pg_stat_sys_tables</structname> contiennent les mêmes informations,
   mais filtrent respectivement les tables utilisateurs et les tables systèmes.
  </para>

  <table id="pg-stat-all-indexes-view" xreflabel="pg_stat_all_indexes">
   <title>Vue <structname>pg_stat_all_indexes</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID de la table pour cet index</entry>
    </row>
    <row>
     <entry><structfield>indexrelid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID de cet index</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom du schéma dans lequel se trouve cet index</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de la table pour cet index</entry>
    </row>
    <row>
     <entry><structfield>indexrelname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de cet index</entry>
    </row>
    <row>
     <entry><structfield>idx_scan</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de parcours d'index initiés par cet index</entry>
    </row>
    <row>
     <entry><structfield>idx_tup_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre d'entrées d'index retournées par des parcours sur cet index</entry>
    </row>
    <row>
     <entry><structfield>idx_tup_fetch</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de lignes vivantes de la table rapportées par des simples parcours
      d'index utilisant cet index</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_all_indexes</structname> contiendra une
   ligne pour chaque index dans la base de données courante, montrant les
   statistiques d'accès sur cet index spécifiquement. Les vues
   <structname>pg_stat_user_indexes</structname> et
   <structname>pg_stat_sys_indexes</structname> contiennent la même
   information, mais sont filtrées pour ne montrer respectivement que
   les index utilisateurs et les index systèmes.
  </para>

  <para>
   Les index peuvent être utilisés avec un simple parcours d'index,
   un parcours d'index  <quote>bitmap</quote> ou l'optimiseur. Dans un parcours de
   bitmap, les sorties de plusieurs index peuvent être combinées avec
   des règles AND ou OR, c'est pourquoi il est difficile d'associer des
   lecture de lignes individuelles de la table avec des index spécifiques
   quand un parcours de bitmap est utilisé. Ainsi donc, un parcours de bitmap
   incrémente le(s) valeur(s) de <structname>pg_stat_all_indexes</structname>.
   <structfield>idx_tup_read</structfield> pour le(s) index qu'il utilise, et
   incrémente la valeur de <structname>pg_stat_all_tables</structname>.<structfield>
   idx_tup_fetch</structfield> pour la table, mais il n'affecte pas
   <structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_fetch</structfield>.
   L'optimiseur accède également les index pour vérifier si des
   constantes fournies sont en dehors des plages de valeurs enregistrées
   par les statistiques de l'optimiseur car celles-ci peuvent ne pas
   être à jour.
  </para>

  <note>
   <para>
    Les valeurs de <structfield>idx_tup_read</structfield> et <structfield>idx_tup_fetch
    </structfield> peuvent être différentes même sans aucune utilisation de parcours
    de bitmap, car <structfield>idx_tup_read</structfield> comptabilise les entrées
    d'index récupérées de cet index alors que  <structfield>idx_tup_fetch</structfield>
    comptabilise le nombre de lignes vivantes rapportées de la table. Le second sera
    moindre si des lignes mortes ou pas encore validées sont rapportées en utilisant
    l'index, ou si des lectures de lignes de la table sont évitées grâce a un
    parcours d'index seul.
   </para>
  </note>

  <table id="pg-statio-all-tables-view" xreflabel="pg_statio_all_tables">
   <title>Vue <structname>pg_statio_all_tables</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID d'une table</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom du schéma dans lequel se trouve cette table</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de cette table</entry>
    </row>
    <row>
     <entry><structfield>heap_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de blocs disque lus pour cette table</entry>
    </row>
    <row>
     <entry><structfield>heap_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de tampons récupérés pour cette table</entry>
    </row>
    <row>
     <entry><structfield>idx_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de blocs disque lus par tous les index de cette table</entry>
    </row>
    <row>
     <entry><structfield>idx_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de tampons récupérés sur tous les index de cette table</entry>
    </row>
    <row>
     <entry><structfield>toast_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de blocs disque lus sur la partie TOAST de cette table (si présente)</entry>
    </row>
    <row>
     <entry><structfield>toast_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de tampons récupérés sur la partie TOAST de cette table (si présente)</entry>
    </row>
    <row>
     <entry><structfield>tidx_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de blocs disque lus sur les index de la partie TOAST de cette table (si présente)</entry>
    </row>
    <row>
     <entry><structfield>tidx_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de tampons récupérés sur les index de la partie TOAST de cette table (si présente)</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_statio_all_tables</structname> contiendra
   une ligne pour chaque table dans la base de données courante (en
   incluant les tables TOAST), montrant les statistiques d'entrées/sorties
   de chaque table spécifiquement. Les vues
   <structname>pg_statio_user_tables</structname> et
   <structname>pg_statio_sys_tables</structname> contiennent la même
   information, mais sont filtrées pour ne montrer respectivement que
   les tables utilisateurs et les tables systèmes.
  </para>

  <table id="pg-statio-all-indexes-view" xreflabel="pg_statio_all_indexes">
   <title>Vue <structname>pg_statio_all_indexes</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID de la table pour cet index</entry>
    </row>
    <row>
     <entry><structfield>indexrelid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID de cet index</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom du schéma dans lequel se trouve cet index</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de la table pour cet index</entry>
    </row>
    <row>
     <entry><structfield>indexrelname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de cet index</entry>
    </row>
    <row>
     <entry><structfield>idx_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de blocs disque lus pour cet index</entry>
    </row>
    <row>
     <entry><structfield>idx_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de tampons récupérés sur cet index</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_statio_all_indexes</structname> contiendra
   une ligne pour chaque index dans la base de données courante,
   montrant les statistiques d'entrées/sorties sur chaque index
   spécifiquement. Les vues
   <structname>pg_statio_user_indexes</structname> et
   <structname>pg_statio_sys_indexes</structname> contiennent la même
   information, mais sont filtrées pour ne montrer respectivement
   que les tables utilisateur et tables système.
  </para>

  <table id="pg-statio-all-sequences-view" xreflabel="pg_statio_all_sequences">
   <title>Vue <structname>pg_statio_all_sequences</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID de cette séquence</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom du schéma dans lequel se trouve cette séquence</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de cette séquence</entry>
    </row>
    <row>
     <entry><structfield>blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de blocs disque lus pour cette séquence</entry>
    </row>
    <row>
     <entry><structfield>blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de tampons récupérés pour cette séquence</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_statio_all_sequences</structname> contiendra
   une ligne pour chaque séquence dans la base de données courante,
   montrant les statistiques d'entrées/sorties pour chaque séquence spécifiquement.
  </para>

  <table id="pg-stat-user-functions-view" xreflabel="pg_stat_user_functions">
   <title>Vue <structname>pg_stat_user_functions</structname></title>
   <tgroup cols="3">
    <thead>
    <row>
      <entry>Colonne</entry>
      <entry>Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>funcid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>OID de cette fonction</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom du schéma dans lequel se trouve cette fonction</entry>
    </row>
    <row>
     <entry><structfield>funcname</structfield></entry>
     <entry><type>name</type></entry>
     <entry>Nom de cette fonction</entry>
    </row>
    <row>
     <entry><structfield>calls</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>Nombre de fois que cette fonction a été appelée</entry>
    </row>
    <row>
     <entry><structfield>total_time</structfield></entry>
     <entry><type>double precision</type></entry>
     <entry>Temps total passé dans cette fonction ainsi que dans toutes
     les autres fonctions appelées par elle, en millisecondes</entry>
    </row>
    <row>
     <entry><structfield>self_time</structfield></entry>
     <entry><type>double precision</type></entry>
     <entry>Temps total passé dans cette fonction seule, sans inclure
     les autres fonctions appelées par elle, en millisecondes</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
   La vue <structname>pg_stat_user_functions</structname> contiendra une
   ligne pour chaque fonction suivie, montrant les statistiques d'exécution
   de cette fonction. Le paramètre <xref linkend="guc-track-functions"/>
   contrôle exactement quelles fonctions sont suivies.
  </para>

 <sect2 id="monitoring-stats-functions">
  <title>Fonctions Statistiques</title>

  <para>
   Une autre façon de regarder les statistiques peut être mise en place
   en écrivant des requêtes utilisant les mêmes fonctions d'accès sous-
   jacentes utilisées par les vues standards montrées au dessus.  Pour
   des détails comme les noms de fonction, veuillez consulter les définitions
   de ces vues standards. (Par exemple, dans <application>psql</application>
   vous pouvez utiliser <literal>\d+ pg_stat_activity</literal>.)
   Les fonctions d'accès pour les statistiques par base de données prennent
   comme argument un OID pour identifier sur quelle base de données travailler.
   Les fonctions par table et par index utilisent un OID de table ou d'index.
   Les fonctions pour les statistiques par fonctions utilisent un OID de fonction.
   Notez que seuls les tables, index et fonctions dans la base de données
   courante peuvent être vus avec ces fonctions.
  </para>

  <para>
   Les fonctions supplémentaires liées à la récupération de statistiques sont listées dans <xref
   linkend="monitoring-stats-funcs-table"/>.
  </para>

  <table id="monitoring-stats-funcs-table">
   <title>Fonctions supplémentaires de statistiques</title>

   <tgroup cols="3">
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Type renvoyé</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>

     <row>
       <!-- See also the entry for this in func.sgml -->
   <entry><literal><function>pg_backend_pid()</function></literal></entry>
   <entry><type>integer</type></entry>
   <entry>
    Identifiant du processus serveur gérant la session courante.
   </entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_activity</function>(<type>integer</type>)</literal><indexterm><primary>pg_stat_get_activity</primary></indexterm></entry>
   <entry><type>setof record</type></entry>
   <entry>
    Retourne un enregistrement d'informations sur le processus serveur
    du PID spécifié, ou un enregistrement pour chaque processus serveur
    actif dans le système si <symbol>NULL</symbol> est spécifié.
    Les champs retournés sont des sous-ensembles de ceux dans la vue
    <structname>pg_stat_activity</structname>.
   </entry>
  </row>

  <row>
      <entry><literal><function>pg_stat_get_snapshot_timestamp()</function></literal><indexterm><primary>pg_stat_get_snapshot_timestamp</primary></indexterm></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>
       Renvoi l'horodatage de l'instantané courant des statistiques
      </entry>
     </row>

     <row>
   <entry><literal><function>pg_stat_clear_snapshot()</function></literal><indexterm><primary>pg_stat_clear_snapshot</primary></indexterm></entry>
   <entry><type>void</type></entry>
   <entry>
    Supprime l'image statistique courante.
   </entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_reset()</function></literal><indexterm><primary>pg_stat_reset</primary></indexterm></entry>
   <entry><type>void</type></entry>
   <entry>
    Remet à zéro tous les compteurs de statistique pour la base de données
    courante (nécessite les droits super-utilisateur).
   </entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_reset_shared</function>(text)</literal><indexterm><primary>pg_stat_reset_shared</primary></indexterm></entry>
   <entry><type>void</type></entry>
   <entry>
    Remet à zéro quelques statistiques globales de l'instance, en fonction de
    l'argument (nécessite les droits super-utilisateur).
    Appeler <literal>pg_stat_reset_shared('bgwriter')</literal>
    réinitialisera tous les compteurs montrés dans la vue
    <structname>pg_stat_bgwriter</structname>.
    Appeler <literal>pg_stat_reset_shared('archiver')</literal> réinitialisera
    tous les compteurs indiqués dans la vue
    <structname>pg_stat_archiver</structname>.
   </entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_reset_single_table_counters</function>(oid)</literal><indexterm><primary>pg_stat_reset_single_table_counters</primary></indexterm></entry>
   <entry><type>void</type></entry>
   <entry>
    Remet à zéro les statistiques pour une seule table ou index dans la base
    de données courante (nécessite les droits super-utilisateur).
   </entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_reset_single_function_counters</function>(oid)</literal><indexterm><primary>pg_stat_reset_single_function_counters</primary></indexterm></entry>
   <entry><type>void</type></entry>
   <entry>
    Remet à zéro les statistiques pour une seule fonction dans la base
    de données courante (nécessite les droits super-utilisateur).
   </entry>
  </row>
 </tbody>
</tgroup>
</table>

<para>
<function>pg_stat_get_activity</function>, la fonction sous-jacente de
la vue <structname>pg_stat_activity</structname>, retourne un ensemble
d'enregistrements contenant toute l'information disponible sur chaque
processus serveur. Parfois il peut être plus pratique de n'obtenir
qu'un sous-ensemble de cette information. Dans ces cas là, un ensemble
plus vieux de fonctions d'accès aux statistiques par processus serveur
peut être utilisé&nbsp;; celle-ci sont montrées dans <xref
linkend="monitoring-stats-backend-funcs-table"/>.
Ces fonctions d'accès utilisent un numéro d'identifiant du processus serveur, qui
va de un au nombre de processus serveurs actuellement actifs.
La fonction <function>pg_stat_get_backend_idset</function> fournit une
manière pratique de générer une ligne pour chaque processus serveur
actif pour appeler ces fonctions. Par exemple, pour montrer les
<acronym>PID</acronym> et requêtes en cours de tous les processus serveur&nbsp;:

<programlisting>
SELECT pg_stat_get_backend_pid(s.backendid) AS pid,
       pg_stat_get_backend_activity(s.backendid) AS query
    FROM (SELECT pg_stat_get_backend_idset() AS backendid) AS s;
</programlisting>
</para>

<table id="monitoring-stats-backend-funcs-table">
<title>Fonctions statistiques par processus serveur</title>

<tgroup cols="3">
 <thead>
  <row>
   <entry>Fonction</entry>
   <entry>Type renvoyé</entry>
   <entry>Description</entry>
  </row>
 </thead>

 <tbody>

  <row>
   <entry><literal><function>pg_stat_get_backend_idset()</function></literal></entry>
   <entry><type>setof integer</type></entry>
   <entry>Ensemble de numéros de processus serveur actuellement actifs (de 1 jusqu'au
    nombre de processus serveur actifs)</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_activity(integer)</function></literal></entry>
   <entry><type>text</type></entry>
   <entry>Texte de la requête la plus récente de ce processus serveur</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_activity_start(integer)</function></literal></entry>
   <entry><type>timestamp with time zone</type></entry>
   <entry>Heure à laquelle la requête la plus récente a été démarrée</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_client_addr(integer)</function></literal></entry>
   <entry><type>inet</type></entry>
   <entry>Adresse IP du client connecté à ce processus serveur</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_client_port(integer)</function></literal></entry>
   <entry><type>integer</type></entry>
   <entry>Numéro de port TCP que le client utilise pour communiquer</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_dbid(integer)</function></literal></entry>
   <entry><type>oid</type></entry>
   <entry>OID de la base de données auquelle ce processus serveur est connecté</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_pid(integer)</function></literal></entry>
   <entry><type>integer</type></entry>
   <entry>Identifiant du processus serveur</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_start(integer)</function></literal></entry>
   <entry><type>timestamp with time zone</type></entry>
   <entry>Heure à lequelle ce processus a été démarré</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_userid(integer)</function></literal></entry>
   <entry><type>oid</type></entry>
   <entry>OID de l'utilisateur connecté à ce processus serveur</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_waiting(integer)</function></literal></entry>
   <entry><type>boolean</type></entry>
   <entry>Vrai si ce processus serveur est actuellement en attente d'un verrou</entry>
  </row>

  <row>
   <entry><literal><function>pg_stat_get_backend_xact_start(integer)</function></literal></entry>
   <entry><type>timestamp with time zone</type></entry>
   <entry>Heure à laquelle la transaction courante a été démarrée</entry>
  </row>

 </tbody>
</tgroup>
</table>

</sect2>
</sect1>

<sect1 id="monitoring-locks">
<title>Visualiser les verrous</title>

<indexterm zone="monitoring-locks">
<primary>verrou</primary>
<secondary>surveillance</secondary>
</indexterm>

<para>
Un autre outil utile pour surveiller l'activité des bases de données est la
table système <structname>pg_locks</structname>. Elle permet à
l'administrateur système de visualiser des informations sur les verrous
restant dans le gestionnaire des verrous. Par exemple, cette fonctionnalité
peut être utilisée pour&nbsp;:

<itemizedlist>
<listitem>
 <para>
  Visualiser tous les verrous en cours, tous les verrous sur les relations
  d'une base de données particulière ou tous les verrous détenus par une
  session <productname>PostgreSQL</productname> particulière.
 </para>
</listitem>

<listitem>
 <para>
  Déterminer la relation de la base de données disposant de la plupart des
  verrous non autorisés (et qui, du coup, pourraient être une source de
  contention parmi les clients de la base de données).
 </para>
</listitem>

<listitem>
 <para>
  Déterminer l'effet de la contention des verrous sur les performances
  générales des bases de données, ainsi que l'échelle dans laquelle varie la
  contention sur le trafic de la base de données.
 </para>
</listitem>
</itemizedlist>

Les détails sur la vue <structname>pg_locks</structname> apparaissent dans la
<xref linkend="view-pg-locks"/>. Pour plus d'informations sur les verrous et
la gestion des concurrences avec <productname>PostgreSQL</productname>,
référez-vous au <xref linkend="mvcc"/>.
</para>
</sect1>

<sect1 id="dynamic-trace">
<title>Traces dynamiques</title>

<indexterm zone="dynamic-trace">
<primary>DTrace</primary>
</indexterm>

<para>
<productname>PostgreSQL</productname> fournit un support pour les traces
dynamiques du serveur de bases de données. Ceci permet l'appel à un outil
externe à certains points du code pour tracer son exécution.
</para>

<para>
Un certain nombre de sondes et de points de traçage sont déjà insérés dans
le code source. Ces sondes ont pour but d'être utilisées par des développeurs
et des administrateurs de base de données. Par défaut, les sondes ne sont pas
compilées dans <productname>PostgreSQL</productname>&nbsp;; l'utilisateur a
besoin de préciser explicitement au script configure de rendre disponible
les sondes.
</para>

<para>
Actuellement, l'outil <ulink
url="https://en.wikipedia.org/wiki/DTrace">DTrace</ulink> est supporté. Il
est disponible sur Solaris, OS X, FreeBSD, NetBSD et Oracle Linux. Le
projet <ulink url="http://sourceware.org/systemtap/">SystemTap</ulink>
fournit un équivalent DTrace et peut aussi être utilisé. Le support
d'autres outils de traces dynamiques est possible théoriquement en modifiant
les définitions des macros dans
<filename>src/include/utils/probes.h</filename>.
</para>

<sect2 id="compiling-for-trace">
<title>Compiler en activant les traces dynamiques</title>

<para>
Par défaut, les sondes ne sont pas disponibles, donc vous aurez besoin d'indiquer
explicitement au script configure de les activer dans
<productname>PostgreSQL</productname>. Pour inclure le support de DTrace,
ajoutez <option>--enable-dtrace</option> aux options de configure. Lire
<xref linkend="install-procedure"/> pour plus d'informations.
</para>
</sect2>

<sect2 id="trace-points">
<title>Sondes disponibles</title>

<para>
Un certain nombre de sondes standards sont fournies dans le code source,
comme indiqué dans <xref linkend="dtrace-probe-point-table"/>. <xref
linkend="typedefs-table"/> précise les types utilisés dans les sondes.
D'autres peuvent être ajoutées pour améliorer la surveillance de
<productname>PostgreSQL</productname>.
</para>

<table id="dtrace-probe-point-table">
<title>Sondes disponibles pour DTrace</title>
<tgroup cols="3">
 <thead>
  <row>
   <entry>Nom</entry>
   <entry>Paramètres</entry>
   <entry>Aperçu</entry>
  </row>
 </thead>

 <tbody>
  <row>
   <entry>transaction-start</entry>
   <entry>(LocalTransactionId)</entry>
   <entry>Sonde qui se déclenche au lancement d'une nouvelle transaction.
    arg0 est l'identifiant de transaction</entry>
  </row>
  <row>
   <entry>transaction-commit</entry>
   <entry>(LocalTransactionId)</entry>
   <entry>Sonde qui se déclenche quand une transaction se termine avec succès.
    arg0 est l'identifiant de transaction</entry>
  </row>
  <row>
   <entry>transaction-abort</entry>
   <entry>(LocalTransactionId)</entry>
   <entry>Sonde qui se déclenche quand une transaction échoue.
    arg0 est l'identifiant de transaction</entry>
  </row>
  <row>
   <entry>query-start</entry>
   <entry>(const char *)</entry>
   <entry>Sonde qui se déclenche lorsque le traitement d'une requête commence.
    arg0 est la requête</entry>
  </row>
  <row>
   <entry>query-done</entry>
   <entry>(const char *)</entry>
   <entry>Sonde qui se déclenche lorsque le traitement d'une requête se termine.
    arg0 est la requête</entry>
  </row>
  <row>
   <entry>query-parse-start</entry>
   <entry>(const char *)</entry>
   <entry>Sonde qui se déclenche lorsque l'analyse d'une requête commence.
    arg0 est la requête</entry>
  </row>
  <row>
   <entry>query-parse-done</entry>
   <entry>(const char *)</entry>
   <entry>Sonde qui se déclenche lorsque l'analyse d'une requête se termine.
    arg0 est la requête</entry>
  </row>
  <row>
   <entry>query-rewrite-start</entry>
   <entry>(const char *)</entry>
   <entry>Sonde qui se déclenche lorsque la ré-écriture d'une requête commence.
    arg0 est la requête</entry>
  </row>
  <row>
   <entry>query-rewrite-done</entry>
   <entry>(const char *)</entry>
   <entry>Sonde qui se déclenche lorsque la ré-écriture d'une requête se termine.
    arg0 est la requête</entry>
  </row>
  <row>
   <entry>query-plan-start</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche lorsque la planification d'une requête commence</entry>
  </row>
  <row>
   <entry>query-plan-done</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche lorsque la planification d'une requête se termine</entry>
  </row>
  <row>
   <entry>query-execute-start</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche lorsque l'exécution d'une requête commence</entry>
  </row>
  <row>
   <entry>query-execute-done</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche lorsque l'exécution d'une requête se termine</entry>
  </row>
  <row>
   <entry>statement-status</entry>
   <entry>(const char *)</entry>
   <entry>Sonde qui se déclenche à chaque fois que le processus serveur met à
    jour son statut dans
    <structname>pg_stat_activity</structname>.<structfield>status</structfield>.
    arg0 est la nouvelle chaîne de statut</entry>
  </row>
  <row>
   <entry>checkpoint-start</entry>
   <entry>(int)</entry>
   <entry>Sonde qui se déclenche quand un point de retournement commence son
    exécution.
    arg0 détient les drapeaux bit à bit utilisés pour distingurer les
    différents types de points de retournement, comme un point suite à un
    arrêt, un point immédiat ou un point forcé</entry>
  </row>
  <row>
   <entry>checkpoint-done</entry>
   <entry>(int, int, int, int, int)</entry>
   <entry>Sonde qui se déclenche quand un point de retournement a terminé son
    exécution (les sondes listées après se déclenchent en séquence lors du
    traitement d'un point de retournement).
    arg0 est le nombre de tampons mémoires écrits. arg1 est le nombre total
    de tampons mémoires. arg2, arg3 et arg4 contiennent respectivement le
    nombre de journaux de transactions ajoutés, supprimés et recyclés</entry>
  </row>
  <row>
   <entry>clog-checkpoint-start</entry>
   <entry>(bool)</entry>
   <entry>Sonde qui se déclenche quand la portion CLOG d'un point de
    retournement commence.
    arg0 est true pour un point de retournement normal, false pour un point
    de retournement suite à un arrêt</entry>
  </row>
  <row>
   <entry>clog-checkpoint-done</entry>
   <entry>(bool)</entry>
   <entry>Sonde qui se déclenche quand la portion CLOG d'un point de
    retournement commence.
    arg0 a la même signification que pour clog-checkpoint-start</entry>
  </row>
  <row>
   <entry>subtrans-checkpoint-start</entry>
   <entry>(bool)</entry>
   <entry>Sonde qui se déclenche quand la portion SUBTRANS d'un point de
    retournement commence.
    arg0 est true pour un point de retournement normal, false pour un point
    de retournement suite à un arrêt</entry>
  </row>
  <row>
   <entry>subtrans-checkpoint-done</entry>
   <entry>(bool)</entry>
   <entry>Sonde qui se déclenche quand la portion SUBTRANS d'un point de
    retournement se termine.
    arg0 a la même signification que pour subtrans-checkpoint-start</entry>
  </row>
  <row>
   <entry>multixact-checkpoint-start</entry>
   <entry>(bool)</entry>
   <entry>Sonde qui se déclenche quand la portion MultiXact d'un point de
    retournement commence.
    arg0 est true pour un point de retournement normal, false pour un point
    de retournement suite à un arrêt</entry>
  </row>
  <row>
   <entry>multixact-checkpoint-done</entry>
   <entry>(bool)</entry>
   <entry>Sonde qui se déclenche quand la portion MultiXact d'un point de
    retournement se termine.
    arg0 a la même signification que pour multixact-checkpoint-start</entry>
  </row>
  <row>
   <entry>buffer-checkpoint-start</entry>
   <entry>(int)</entry>
   <entry>Sonde qui se déclenche quand la portion d'écriture de tampons d'un
    point de retournement commence.
    arg0 contient les drapeaux bit à bit pour distinguer différents types de
    point de retournement comme le point après arrêt, un point immédiat, un
    point forcé</entry>
  </row>
  <row>
   <entry>buffer-sync-start</entry>
   <entry>(int, int)</entry>
   <entry>Sonde qui se déclenche quand nous commençons d'écrire les tampons
    modifiés pendant un point de retournement (après identification des
    tampons qui doivent être écrits).
    arg0 est le nombre total de tampons.
    arg1 est le nombre de tampons qui sont modifiés et n'ont pas besoin
    d'être écrits</entry>
  </row>
  <row>
   <entry>buffer-sync-written</entry>
   <entry>(int)</entry>
   <entry>Sonde qui se déclenche après chaque écriture d'un tampon lors d'un
    point de retournement.
    arg0 est le numéro d'identifiant du tampon</entry>
  </row>
  <row>
   <entry>buffer-sync-done</entry>
   <entry>(int, int, int)</entry>
   <entry>Sonde qui se déclenche quand tous les tampons modifiés ont été
    écrits.
    arg0 est le nombre total de tampons.
    arg1 est le nombre de tampons réellement écrits par le processus de point
    de retournement.
    arg2 est le nombre attendu de tampons à écrire (arg1 de
    buffer-sync-start)&nbsp;; toute différence reflète d'autres processus
    écrivant des tampons lors du point de retournement</entry>
  </row>
  <row>
   <entry>buffer-checkpoint-sync-start</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche une fois les tampons modifiés écrits par le
    noyau et avant de commencer à lancer des requêtes fsync</entry>
  </row>
  <row>
   <entry>buffer-checkpoint-done</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche après la fin de la synchronisation des
    tampons sur le disque</entry>
  </row>
  <row>
   <entry>twophase-checkpoint-start</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche quand la portion deux-phases d'un point de
    retournement est commencée</entry>
  </row>
  <row>
   <entry>twophase-checkpoint-done</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche quand la portion deux-phases d'un point de
    retournement est terminée</entry>
  </row>
  <row>
   <entry>buffer-read-start</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, bool)</entry>
   <entry>Sonde qui se déclenche quand la lecture d'un tampon commence.
    arg0 et arg1 contiennent les numéros de fork et de bloc de la page (arg1
    vaudra -1 s'il s'agit de demande d'extension de la relation).
    arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
    base de données et de la relation identifiant ainsi précisément la
    relation.
    arg5 est l'identifiant du processus moteur qui a créé la relation
    temporaire pour un tampon local ou InvalidBackendId (-1) pour un
    tampon partagé.
    arg6 est true pour une demande d'extension de la relation, false pour
    une lecture ordinaire</entry>
  </row>
  <row>
   <entry>buffer-read-done</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, bool, bool)</entry>
   <entry>Sonde qui se déclenche quand la lecture d'un tampon se termine.
    arg0 et arg1 contiennent les numéros de fork et de bloc de la page (arg1
    contient le numéro de bloc du nouveau bloc ajouté s'il s'agit de demande
    d'extension de la relation).
    arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
    base de données et de la relation identifiant ainsi précisément la
    relation.
    arg5 est l'identifiant du processus moteur qui a créé la relation
    temporaire pour un tampon local ou InvalidBackendId (-1) pour un
    tampon partagé.
    arg6 est true pour une demande d'extension de la relation, false pour
    une lecture ordinaire.
    arg7 est true si la tampon était disponible en mémoire, false sinon</entry>
  </row>
  <row>
   <entry>buffer-flush-start</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid)</entry>
   <entry>Sonde qui se déclenche avant de lancer une demande d'écriture pour
    un bloc partagé.
    arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
    base de données et de la relation identifiant ainsi précisément la
    relation</entry>
  </row>
  <row>
   <entry>buffer-flush-done</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid)</entry>
   <entry>Sonde qui se déclenche quand une demande d'écriture se termine.
    (Notez que ceci ne reflète que le temps passé pour fournir la donnée au
    noyau&nbsp;; ce n'est habituellement pas encore écrit sur le disque.)
    Les arguments sont identiques à ceux de buffer-flush-start</entry>
  </row>
  <row>
   <entry>buffer-write-dirty-start</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid)</entry>
   <entry>Sonde qui se déclenche quand un processus serveur commence à écrire
    un tampon modifié sur disque. Si cela arrive souvent, cela implique que
    <xref linkend="guc-shared-buffers"/> est trop petit ou que les paramètres
    de contrôle de bgwriter ont besoin d'un ajustement.)
    arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
    arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
    base de données et de la relation identifiant ainsi précisément la
    relation</entry>
  </row>
  <row>
   <entry>buffer-write-dirty-done</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid)</entry>
   <entry>Sonde qui se déclenche quand l'écriture d'un tampon modifié est
    terminé.
    Les arguments sont identiques à ceux de buffer-write-dirty-start</entry>
  </row>
  <row>
   <entry>wal-buffer-write-dirty-start</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche quand un processus serveur commence à écrire
    un tampon modifié d'un journal de transactions parce qu'il n'y a plus
    d'espace disponible dans le cache des journaux de transactions. (Si cela
    arrive souvent, cela implique que <xref linkend="guc-wal-buffers"/> est
    trop petit.)</entry>
  </row>
  <row>
   <entry>wal-buffer-write-dirty-done</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche quand l'écriture d'un tampon modifié d'un
    journal de transactions est terminé</entry>
  </row>
  <row>
   <entry>xlog-insert</entry>
   <entry>(unsigned char, unsigned char)</entry>
   <entry>Sonde qui se déclenche quand un enregistrement est inséré dans un
    journal de transactions.
    arg0 est le gestionnaire de ressource (rmid) pour l'enregistrement.
    arg1 contient des informations supplémentaires</entry>
  </row>
  <row>
   <entry>xlog-switch</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche quand une bascule du journal de transactions
    est demandée</entry>
  </row>
  <row>
   <entry>smgr-md-read-start</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int)</entry>
   <entry>Sonde qui se déclenche au début de la lecture d'un bloc d'une
    relation.
    arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
    arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
    base de données et de la relation identifiant ainsi précisément la
    relation.
    arg5 est l'identifiant du processus moteur qui a créé la relation
    temporaire pour un tampon local ou InvalidBackendId (-1) pour un
    tampon partagé</entry>
  </row>
  <row>
   <entry>smgr-md-read-done</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, int, int)</entry>
   <entry>Sonde qui se déclenche à la fin de la lecture d'un bloc.
    arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
    arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
    base de données et de la relation identifiant ainsi précisément la
    relation.
    arg5 est l'identifiant du processus moteur qui a créé la relation
    temporaire pour un tampon local ou InvalidBackendId (-1) pour un
    tampon partagé.
    arg6 est le nombre d'octets réellement lus alors que arg7 est le nombre
    d'octets demandés (s'il y a une différence, il y a un problème)</entry>
  </row>
  <row>
   <entry>smgr-md-write-start</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int)</entry>
   <entry>Sonde qui se déclenche au début de l'écriture d'un bloc dans une
    relation.
    arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
    arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
    base de données et de la relation identifiant ainsi précisément la
    relation.
    arg5 est l'identifiant du processus moteur qui a créé la relation
    temporaire pour un tampon local ou InvalidBackendId (-1) pour un
    tampon partagé</entry>
  </row>
  <row>
   <entry>smgr-md-write-done</entry>
   <entry>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, int, int)</entry>
   <entry>Sonde qui se déclenche à la fin de l'écriture d'un bloc.
    arg0 et arg1 contiennent les numéros de fork et de bloc de la page.
    arg2, arg3 et arg4 contiennent respectivement l'OID du tablespace, de la
    base de données et de la relation identifiant ainsi précisément la
    relation.
    arg5 est l'identifiant du processus moteur qui a créé la relation
    temporaire pour un tampon local ou InvalidBackendId (-1) pour un
    tampon partagé.
    arg6 est le nombre d'octets réellement écrits alors que arg7 est le nombre
    d'octets demandés (si ces nombres sont différents, cela indique un
    problème)</entry>
  </row>
  <row>
   <entry>sort-start</entry>
   <entry>(int, bool, int, int, bool)</entry>
   <entry>Sonde qui se déclenche quand une opération de tri est démarré.
    arg0 indique un tri de la table, de l'index ou d'un datum.
    arg1 est true si on force les valeurs uniques.
    arg2 est le nombre de colonnes clés.
    arg3 est le nombre de Ko de mémoire autorisé pour ce travail.
    arg4 est true si un accès aléatoire au résultat du tri est requis</entry>
  </row>
  <row>
   <entry>sort-done</entry>
   <entry>(bool, long)</entry>
   <entry>Sonde qui se déclenche quand un tri est terminé.
    arg0 est true pour un tri externe, false pour un tri interne.
    arg1 est le nombre de blocs disque utilisés pour un tri externe, ou le
    nombre de Ko de mémoire utilisés pour un tri interne</entry>
  </row>
  <row>
   <entry>lwlock-acquire</entry>
   <entry>(char *, int, LWLockMode)</entry>
   <entry>Sonde qui se déclenche quand un LWLock a été acquis.
    arg0 est la tranche de LWLock.
    arg1 est le décalage de LWLock dans sa tranche.
    arg2 est le mode de verrou attendu, soit exclusif soit partagé.</entry>
  </row>
  <row>
   <entry>lwlock-release</entry>
   <entry>(char *, int)</entry>
   <entry>Sonde qui se déclenche quand un LWLock a été relâché (mais notez
    que tout processus en attente n'a pas encore été réveillé).
    arg0 est la tranche de LWLock.
    arg1 est le décalage de LWLock dans sa tranche.</entry>
  </row>
  <row>
   <entry>lwlock-wait-start</entry>
   <entry>(char *, int, LWLockMode)</entry>
   <entry>Sonde qui se déclenche quand un LWLock n'était pas immédiatement
    disponible et qu'un processus serveur a commencé à attendre la
    disponibilité du verrou.
    arg0 est la tranche de LWLock.
    arg1 est le décalage de LWLock dans sa tranche.
    arg2 est le mode de verrou attendu, soit exclusif soit partagé.</entry>
  </row>
  <row>
   <entry>lwlock-wait-done</entry>
   <entry>(char *, int, LWLockMode)</entry>
   <entry>Sonde qui se déclenche quand un processus serveur n'est plus en
    attente d'un LWLock (il n'a pas encore le verrou).
    arg0 est la tranche de LWLock.
    arg1 est le décalage de LWLock dans sa tranche.
    arg2 est le mode de verrou attendu, soit exclusif soit partagé.</entry>
  </row>
  <row>
   <entry>lwlock-condacquire</entry>
   <entry>(char *, int, LWLockMode)</entry>
   <entry>Sonde qui se déclenche quand un LWLock a été acquis avec succès
    malgré le fait que l'appelant ait demandé de ne pas attendre.
    arg0 est la tranche de LWLock.
    arg1 est le décalage de LWLock dans sa tranche.
    arg2 est le mode de verrou attendu, soit exclusif soit partagé.</entry>
  </row>
  <row>
   <entry>lwlock-condacquire-fail</entry>
   <entry>(char *, int, LWLockMode)</entry>
   <entry>Sonde qui se déclenche quand un LWLock, demandé sans attente, n'est
    pas accepté.
    arg0 est la tranche de LWLock.
    arg1 est le décalage de LWLock dans sa tranche.
    arg2 est le mode de verrou attendu, soit exclusif soit partagé.</entry>
  </row>
  <row>
   <entry>lock-wait-start</entry>
   <entry>(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE)</entry>
   <entry>Sonde qui se déclenche quand une demande d'un gros verrou
    (<foreignphrase>lmgr lock</foreignphrase>) a commencé l'attente parce que
    le verrou n'était pas disponible.
    arg0 à arg3 sont les champs identifiant l'objet en cours de verrouillage.
    arg4 indique le type d'objet à verrouiller.
    arg5 indique le type du verrou demandé</entry>
  </row>
  <row>
   <entry>lock-wait-done</entry>
   <entry>(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE)</entry>
   <entry>Sonde qui se déclenche quand une demande d'un gros verrou
    (<foreignphrase>lmgr lock</foreignphrase>) a fini d'attendre (c'est-à-dire
    que le verrou a été accepté).
    Les arguments sont identiques à ceux de lock-wait-start</entry>
  </row>
  <row>
   <entry>deadlock-found</entry>
   <entry>()</entry>
   <entry>Sonde qui se déclenche quand un verrou mortel est trouvé par le
    détecteur</entry>
  </row>

 </tbody>
</tgroup>
</table>

<table id="typedefs-table">
<title>Types définis utilisés comme paramètres de sonde</title>
<tgroup cols="2">
 <thead>
  <row>
   <entry>Type</entry>
   <entry>Definition</entry>
  </row>
 </thead>

 <tbody>

  <row>
   <entry>LocalTransactionId</entry>
   <entry>unsigned int</entry>
  </row>
  <row>
   <entry>LWLockMode</entry>
   <entry>int</entry>
  </row>
  <row>
   <entry>LOCKMODE</entry>
   <entry>int</entry>
  </row>
  <row>
   <entry>BlockNumber</entry>
   <entry>unsigned int</entry>
  </row>
  <row>
   <entry>Oid</entry>
   <entry>unsigned int</entry>
  </row>
  <row>
   <entry>ForkNumber</entry>
   <entry>int</entry>
  </row>
  <row>
   <entry>bool</entry>
   <entry>char</entry>
  </row>

 </tbody>
</tgroup>
</table>
</sect2>

<sect2 id="using-trace-points">
<title>Utiliser les sondes</title>

<para>
L'exemple ci-dessous montre un script DTrace pour l'analyse du nombre de
transactions sur le système, comme alternative à l'interrogation régulière
de <structname>pg_stat_database</structname> avant et après un test de
performance&nbsp;:
<programlisting>#!/usr/sbin/dtrace -qs

postgresql$1:::transaction-start
{
      @start["Start"] = count();
      self->ts  = timestamp;
}

postgresql$1:::transaction-abort
{
      @abort["Abort"] = count();
}

postgresql$1:::transaction-commit
/self->ts/
{
      @commit["Commit"] = count();
      @time["Total time (ns)"] = sum(timestamp - self->ts);
      self->ts=0;
}
</programlisting>
À son exécution, le script de l'exemple D donne une sortie comme&nbsp;:
<screen># ./txn_count.d `pgrep -n postgres` or ./txn_count.d &lt;PID&gt;
^C

Start                                          71
Commit                                         70
Total time (ns)                        2312105013
</screen>
</para>

<note>
<para>
 SystemTap utilise une notation différente de DTrace pour les scripts de
 trace, même si les points de trace sont compatibles. Il est intéressant de
 noter que, lorsque nous avons écrit ce texte, les scripts SystemTap doivent
 référencer les noms des sondes en utilisant des tirets bas doubles à la
 place des tirets simples. Il est prévu que les prochaines versions de
 SystemTap corrigent ce problème.
</para>
</note>

<para>
Vous devez vous rappeler que les programmes DTrace doivent être écrits
soigneusement, sinon les informations récoltées pourraient ne rien valoir.
Dans la plupart des cas où des problèmes sont découverts, c'est
l'instrumentation qui est erronée, pas le système sous-jacent. En discutant
des informations récupérées en utilisant un tel système, il est essentiel de
s'assurer que le script utilisé est lui-aussi vérifié et discuter.
</para>
</sect2>

<sect2 id="defining-trace-points">
<title>Définir de nouvelles sondes</title>

<para>
De nouvelles sondes peuvent être définies dans le code partout où le
développeur le souhaite bien que cela nécessite une nouvelle compilation.
Voici les étapes nécessaires pour insérer de nouvelles sondes&nbsp;:
</para>

<procedure>
<step>
 <para>
  Décider du nom de la sonde et des données nécessaires pour la sonde
 </para>
</step>

<step>
 <para>
  Ajoutez les définitions de sonde dans
  <filename>src/backend/utils/probes.d</filename>
 </para>
</step>

<step>
 <para>
  Inclure <filename>pg_trace.h</filename> s'il n'est pas déjà présent dans le
  module contenant les points de sonde, et insérer les macros
  <literal>TRACE_POSTGRESQL</literal> aux emplacements souhaités dans le code
  source
 </para>
</step>

<step>
 <para>
  Recompiler et vérifier que les nouvelles sondes sont disponibles
 </para>
</step>
</procedure>

<formalpara>
<title>Exemple&nbsp;:</title>
<para>
 Voici un exemple d'ajout d'une sonde pour tracer toutes les nouvelles
 transactions par identifiant de transaction.
</para>
</formalpara>

<procedure>
<step>
 <para>
  La sonde sera nommée <literal>transaction-start</literal> et nécessite
  un paramètre de type LocalTransactionId
 </para>
</step>

<step>
 <para>
  Ajout de la définition de la sonde dans
  <filename>src/backend/utils/probes.d</filename>&nbsp;:
  <programlisting>
      probe transaction__start(LocalTransactionId);
  </programlisting>
  Notez l'utilisation du double tiret bas dans le nom de la sonde. Dans un
  script DTrace utilisant la sonde, le double tiret bas doit être remplacé
  par un tiret, donc <literal>transaction-start</literal> est le nom à
  documenter pour les utilisateurs.
 </para>
</step>

<step>
 <para>
  Au moment de la compilation, <literal>transaction__start</literal> est
  converti en une macro appelée <literal>TRACE_POSTGRESQL_TRANSACTION_START</literal>
  (notez que les tirets bas ne sont plus doubles ici), qui est disponible
  en incluant le fichier <filename>pg_trace.h</filename>. Il faut ajouter
  l'appel à la macro aux bons emplacements dans le code source. Dans ce
  cas, cela ressemble à&nbsp;:

  <programlisting>
    TRACE_POSTGRESQL_TRANSACTION_START(vxid.localTransactionId);
  </programlisting>
 </para>
</step>

<step>
 <para>
  Après une nouvelle compilation et l'exécution du nouveau binaire, il
  faut vérifier que la nouvelle sonde est disponible en exécutant la
  commande DTrace suivante. Vous deviez avoir cette sortie&nbsp;:
  <screen>
# dtrace -ln transaction-start
   ID    PROVIDER          MODULE           FUNCTION NAME
18705 postgresql49878     postgres     StartTransactionCommand transaction-start
18755 postgresql49877     postgres     StartTransactionCommand transaction-start
18805 postgresql49876     postgres     StartTransactionCommand transaction-start
18855 postgresql49875     postgres     StartTransactionCommand transaction-start
18986 postgresql49873     postgres     StartTransactionCommand transaction-start
  </screen>
 </para>
</step>
</procedure>

<para>
Il faut faire attention à d'autres choses lors de l'ajout de macros de
trace dans le code C&nbsp;:

<itemizedlist>
 <listitem>
  <para>
   Vous devez faire attention au fait que les types de données indiqués
   pour les paramètres d'une sonde correspondent aux types de données des
   variables utilisées dans la macro. Dans le cas contraire, vous obtiendrez
   des erreurs de compilation.
  </para>
 </listitem>


 <listitem>
  <para>
   Sur la plupart des platformes, si <productname>PostgreSQL</productname>
   est construit avec <option>--enable-dtrace</option>, les arguments pour
   une macro de trace seront évalués à chaque fois que le contrôle passe
   dans la macro, <emphasis>même si aucun traçage n'est réellement en
    cours</emphasis>. Cela a généralement peu d'importance si vous rapportez
   seulement les valeurs de quelques variables locales mais faites bien
   attention à l'utilisation de fonctions coûteuses. Si vous devez le faire,
   pensez à protéger la macro avec une vérification pour vous assurer que
   la trace est bien activée&nbsp;:

   <programlisting>
    if (TRACE_POSTGRESQL_TRANSACTION_START_ENABLED())
        TRACE_POSTGRESQL_TRANSACTION_START(some_function(...));
   </programlisting>

   Chaque macro de trace a une macro <literal>ENABLED</literal>
   correspondante.
  </para>
 </listitem>
</itemizedlist>

</para>

</sect2>

</sect1>

</chapter>
