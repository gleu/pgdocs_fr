<?xml version="1.0" encoding="UTF-8"?>
<chapter id="planner-stats-details">
 <title>Comment le planificateur utilise les statistiques</title>

 <para>
  Ce chapitre est construit sur les informations fournies dans <xref
  linkend="using-explain"/> et <xref linkend="planner-stats"/> pour montrer
  certains détails supplémentaires sur la façon dont le planificateur
  utilise les statistiques système pour estimer le nombre de lignes que chaque
  partie d'une requête pourrait renvoyer. C'est une partie
  importante du processus de planification, fournissant une
  bonne partie des informations pour le calcul des coûts.
 </para>

 <para>
  Le but de ce chapitre n'est pas de documenter le code en détail mais plutôt
  de présenter un aperçu du
  fonctionnement. Ceci aidera peut-être la phase d'apprentissage pour quelqu'un
  souhaitant lire le code.
 </para>

 <sect1 id="row-estimation-examples">
  <title>Exemples d'estimation des lignes</title>

  <indexterm zone="row-estimation-examples">
   <primary>estimation de lignes</primary>
   <secondary>planificateur</secondary>
  </indexterm>

  <para>
   Les exemples montrés ci-dessous utilisent les tables de la base de tests de
   régression de <productname>PostgreSQL</productname>. Les affichages indiqués
   sont pris depuis la version 8.3. Le comportement des versions précédentes
   (ou ultérieures) pourrait varier. Notez aussi que, comme
   <command>ANALYZE</command> utilise un échantillonage statistique lors de
   la réalisation des statistiques, les résultats peuvent changer légèrement
   après toute exécution d'<command>ANALYZE</command>.
  </para>

  <para>
   Commençons avec une requête simple&nbsp;:

   <programlisting>EXPLAIN SELECT * FROM tenk1;

                         QUERY PLAN
-------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..458.00 rows=10000 width=244)
   </programlisting>

   Comment le planificateur détermine la cardinalité de
   <structname>tenk1</structname> est couvert dans <xref
   linkend="planner-stats"/> mais est répété ici pour être complet. Le nombre de
   pages et de lignes est trouvé dans <structname>pg_class</structname>&nbsp;:

   <programlisting>SELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';


 relpages | reltuples
----------+-----------
      358 |     10000
   </programlisting>
   Ces nombres sont corrects à partir du dernier <command>VACUUM</command> ou
   <command>ANALYZE</command> sur la table. Le planificateur récupère
   ensuite le nombre de pages actuel dans la table (c'est une opération peu
   coûteuse, ne nécessitant pas un parcours de table). Si c'est différent de
   <structfield>relpages</structfield>, alors
   <structfield>reltuples</structfield> est modifié en accord pour arriver à
   une estimation actuelle du nombre de lignes. Dans cet exemple, la valeur de
   <structfield>relpages</structfield> est mise à jour, donc l'estimation
   du nombre de lignes est identique à
   <structfield>reltuples</structfield>.
  </para>

  <para>
   Passons à un exemple avec une condition dans sa clause
   <literal>WHERE</literal>&nbsp;:

   <programlisting>EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 1000;

                                   QUERY PLAN
--------------------------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=24.06..394.64 rows=1007 width=244)
   Recheck Cond: (unique1 &lt; 1000)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)
         Index Cond: (unique1 &lt; 1000)
   </programlisting>

   Le planificateur examine la condition de la clause <literal>WHERE</literal>
   et cherche la fonction de sélectivité à partir de l'opérateur
   <literal>&lt;</literal> dans <structname>pg_operator</structname>. C'est
   contenu dans la colonne <structfield>oprrest</structfield> et le résultat,
   dans ce cas, est <function>scalarltsel</function>. La fonction
   <function>scalarltsel</function> récupère l'histogramme pour
   <structfield>unique1</structfield> à partir de
   <classname>pg_statistic</classname>. Pour les requêtes manuelles, il est
   plus simple de regarder dans la vue <structname>pg_stats</structname>&nbsp;:

   <programlisting>SELECT histogram_bounds FROM pg_stats
WHERE tablename='tenk1' AND attname='unique1';

                   histogram_bounds
------------------------------------------------------
 {0,993,1997,3050,4040,5036,5957,7057,8029,9016,9995}
   </programlisting>

   Ensuite, la fraction de l'histogramme occupée par <quote>&lt; 1000</quote>
   est traitée. C'est la sélectivité. L'histogramme divise l'ensemble en plus
   petites parties d'égales fréquences, donc tout ce que nous devons faire est
   de localiser la partie où se trouve notre valeur et compter une
   <emphasis>partie</emphasis> d'elle et <emphasis>toutes</emphasis> celles
   qui la précèdent. La valeur 1000 est clairement dans la seconde partie
   (993&ndash;1997), donc en supposant une distribution linéaire des valeurs à
   l'intérieur de chaque partie, nous pouvons calculer la sélectivité comme
   étant&nbsp;:

   <programlisting>selectivity = (1 + (1000 - bucket[2].min)/(bucket[2].max - bucket[2].min))/num_buckets
            = (1 + (1000 - 993)/(1997 - 993))/10
            = 0.100697

   </programlisting>

   c'est-à-dire une partie complète plus une fraction linéaire de la seconde,
   divisée par le nombre de parties. Le nombre de lignes estimées peut
   maintenant être calculé comme le produit de la sélectivité et de la
   cardinalité de <structname>tenk1</structname>&nbsp;:

   <programlisting>rows = rel_cardinality * selectivity
     = 10000 * 0.100697
     = 1007  (rounding off)
   </programlisting>

  </para>

  <para>
   Maintenant, considérons un exemple avec une condition d'égalité dans sa
   clause <literal>WHERE</literal>&nbsp;:

   <programlisting>EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'CRAAAA';

                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=30 width=244)
   Filter: (stringu1 = 'CRAAAA'::name)
   </programlisting>

   De nouveau, le planificateur examine la condition de la clause
   <literal>WHERE</literal>
   et cherche la fonction de sélectivité pour <literal>=</literal>, qui est
   <function>eqsel</function>. Pour une estimation d'égalité, l'histogramme
   n'est pas utile&nbsp;; à la place, la liste des valeurs les plus communes
   (<firstterm>most common values</firstterm>, d'où l'acronyme
   <acronym>MCV</acronym> fréquemment utilisé) est utilisé pour déterminer la
   sélectivité. Regardons-les avec quelques colonnes
   supplémentaires qui nous seront utiles plus tard&nbsp;:

   <programlisting>SELECT null_frac, n_distinct, most_common_vals, most_common_freqs FROM pg_stats
WHERE tablename='tenk1' AND attname='stringu1';

null_frac         | 0
n_distinct        | 676
most_common_vals  | {EJAAAA,BBAAAA,CRAAAA,FCAAAA,FEAAAA,GSAAAA,JOAAAA,MCAAAA,NAAAAA,WGAAAA}
most_common_freqs | {0.00333333,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003}

   </programlisting>

   Comme <literal>CRAAAA</literal> apparaît dans la liste des MCV, la
   sélectivité est tout simplement l'entrée correspondante dans la liste des
   fréquences les plus courantes (<acronym>MCF</acronym>, acronyme de
   <foreignphrase>Most Common Frequencies</foreignphrase>)&nbsp;:

   <programlisting>selectivity = mcf[3]
            = 0.003
   </programlisting>

   Comme auparavant, le nombre estimé de lignes est seulement le produit de ceci avec la
   cardinalité de <structname>tenk1</structname> comme précédemment&nbsp;:

   <programlisting>rows = 10000 * 0.003
     = 30
   </programlisting>
  </para>

  <para>
   Maintenant, considérez la même requête mais avec une constante qui n'est pas
   dans la liste <acronym>MCV</acronym>&nbsp;:

   <programlisting>EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'xxx';

                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=15 width=244)
   Filter: (stringu1 = 'xxx'::name)
   </programlisting>

   C'est un problème assez différent, comment estimer la sélectivité quand la
   valeur n'est <emphasis>pas</emphasis> dans la liste <acronym>MCV</acronym>.
   L'approche est d'utiliser le fait que la valeur n'est pas dans la liste,
   combinée avec la connaissance des fréquences pour tout les
   <acronym>MCV</acronym>&nbsp;:

   <programlisting>
selectivity = (1 - sum(mvf))/(num_distinct - num_mcv)
            = (1 - (0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003 +
                    0.003 + 0.003 + 0.003 + 0.003))/(676 - 10)
            = 0.0014559
   </programlisting>

   C'est-à-dire ajouter toutes les fréquences pour les <acronym>MCV</acronym>
   et les soustraire d'un, puis les diviser par le nombre des
   <emphasis>autres</emphasis> valeurs distinctes. Notez qu'il n'y a pas de
   valeurs NULL, donc vous n'avez pas à vous en inquiéter (sinon nous pourrions
   soustraire la fraction NULL à partir du numérateur). Le nombre estimé de
   lignes est ensuite calculé comme d'habitude&nbsp;:

   <programlisting>
rows = 10000 * 0.0014559
     = 15  (rounding off)
   </programlisting>
  </para>

  <para>
   L'exemple précédent avec <literal>unique1 &lt; 1000</literal> était une
   sur-simplification de ce que <function>scalarltsel</function> faisait
   réellement&nbsp;; maintenant que nous avons vu un exemple de l'utilisation
   des MCV, nous pouvons ajouter quelques détails supplémentaires. L'exemple
   était correct aussi loin qu'il a été car, comme
   <structfield>unique1</structfield> est une colonne unique, elle n'a pas de
   MCV (évidemment, n'avoir aucune valeur n'est pas plus courant que toute
   autre valeur). Pour une colonne non unique, il y a normalement un histogramme
   et une liste MCV, et <emphasis>l'histogramme n'inclut pas la portion de la
    population de colonne représentée par les MCV</emphasis>. Nous le faisons
   ainsi parce que cela permet une estimation plus précise. Dans cette
   situation, <function>scalarltsel</function> s'applique directement à la
   condition (c'est-à-dire <quote>&lt; 1000</quote>) pour chaque valeur de la
   liste MCV, et ajoute les fréquence des MCV pour lesquelles la condition
   est vérifiée. Ceci donne une estimation exacte de la sélectivité dans la
   portion de la table qui est MCV. L'histogramme est ensuite utilisée de la
   même façon que ci-dessus pour estimer la sélectivité dans la portion de la
   table qui n'est pas MCV, et ensuite les deux nombres sont combinés pour
   estimer la sélectivité. Par exemple, considérez

   <programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 &lt; 'IAAAAA';

                         QUERY PLAN
------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=3077 width=244)
   Filter: (stringu1 &lt; 'IAAAAA'::name)
   </programlisting>

   Nous voyons déjà l'information MCV pour <structfield>stringu1</structfield>,
   et voici son histogramme&nbsp;:

   <programlisting>
SELECT histogram_bounds FROM pg_stats
WHERE tablename='tenk1' AND attname='stringu1';

                                histogram_bounds
--------------------------------------------------------------------------------
 {AAAAAA,CQAAAA,FRAAAA,IBAAAA,KRAAAA,NFAAAA,PSAAAA,SGAAAA,VAAAAA,XLAAAA,ZZAAAA}
   </programlisting>

   En vérifiant la liste MCV, nous trouvons que la condition <literal>stringu1
    &lt; 'IAAAAA'</literal> est satisfaite par les six premières entrées et non
   pas les quatre dernières, donc la sélectivité dans la partie MCV de la
   population est&nbsp;:

   <programlisting>
selectivity = sum(relevant mvfs)
            = 0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003
            = 0.01833333
   </programlisting>

   Additionner toutes les MFC nous indique aussi que la fraction totale de
   la population représentée par les MCV est de 0.03033333, et du coup la
   fraction représentée par l'histogramme est de 0.96966667 (encore une fois,
   il n'y a pas de NULL, sinon nous devrions les exclure ici). Nous pouvons
   voir que la valeur <literal>IAAAAA</literal> tombe près de la fin du
   troisième jeton d'histogramme. En utilisant un peu de suggestions sur la
   fréquence des caractères différents, le planificateur arrive à
   l'estimation 0.298387 pour la portion de la population de l'histogramme
   qui est moindre que <literal>IAAAAA</literal>. Ensuite nous combinons les
   estimations pour les populations MCV et non MCV&nbsp;:

   <programlisting>
selectivity = mcv_selectivity + histogram_selectivity * histogram_fraction
            = 0.01833333 + 0.298387 * 0.96966667
            = 0.307669

rows        = 10000 * 0.307669
            = 3077  (rounding off)
   </programlisting>

   Dans cet exemple particulier, la correction à partir de la liste MCV est
   très petit car la distribution de la colonne est réellement assez plat
   (les statistiques affichant ces valeurs particulières comme étant plus
   communes que les autres sont principalement dûes à une erreur
   d'échantillonage). Dans un cas plus typique où certaines valeurs sont
   significativement plus communes que les autres, ce processus compliqué
   donne une amélioration utile dans la précision car la sélectivité pour les
   valeurs les plus communes est trouvée exactement.
  </para>

  <para>
   Maintenant, considérons un cas avec plus d'une condition
   dans la clause <literal>WHERE</literal>&nbsp;:

   <programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 1000 AND stringu1 = 'xxx';

                                   QUERY PLAN
--------------------------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=23.80..396.91 rows=1 width=244)
   Recheck Cond: (unique1 &lt; 1000)
   Filter: (stringu1 = 'xxx'::name)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)
         Index Cond: (unique1 &lt; 1000)
   </programlisting>

   Le planificateur suppose que les deux conditions sont indépendantes, pour
   que les sélectivités individuelles des clauses puissent être multipliées
   ensemble&nbsp;:

   <programlisting>
selectivity = selectivity(unique1 &lt; 1000) * selectivity(stringu1 = 'xxx')
            = 0.100697 * 0.0014559
            = 0.0001466

rows        = 10000 * 0.0001466
            = 1  (rounding off)
   </programlisting>

   Notez que l'estimation du nombre de lignes renvoyées à partir du bitmap
   index scan reflète seulement la condition utilisée avec l'index&nbsp;; c'est
   important car cela affecte l'estimation du coût pour les récupérations
   suivantes sur la table.
  </para>

  <para>
   Enfin, nous examinerons une requête qui implique une jointure&nbsp;:

   <programlisting>
EXPLAIN SELECT * FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 50 AND t1.unique2 = t2.unique2;

                                      QUERY PLAN
-----------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
 Nested Loop  (cost=4.64..456.23 rows=50 width=488)
   -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=4.64..142.17 rows=50 width=244)
         Recheck Cond: (unique1 &lt; 50)
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..4.63 rows=50 width=0)
               Index Cond: (unique1 &lt; 50)
   -&gt;  Index Scan using tenk2_unique2 on tenk2 t2  (cost=0.00..6.27 rows=1 width=244)
         Index Cond: (unique2 = t1.unique2)
   </programlisting>

   La restriction sur <structname>tenk1</structname>,
   <literal>unique1 &lt; 50</literal>, est évaluée avant la jointure de boucle
   imbriquée. Ceci est géré de façon analogue à l'exemple précédent. Cette fois, la
   valeur 50 est dans la première partie de l'histogramme
   <structfield>unique1</structfield>&nbsp;:

   <programlisting>selectivity = (0 + (50 - bucket[1].min)/(bucket[1].max - bucket[1].min))/num_buckets
            = (0 + (50 - 0)/(993 - 0))/10
            = 0.005035

rows        = 10000 * 0.005035
            = 50  (rounding off)
   </programlisting>

   La restriction pour la jointure est <literal>t2.unique2 =
    t1.unique2</literal>.
   L'opérateur est tout simplement le <literal>=</literal>, néanmoins la
   fonction de sélectivité est obtenue à partir de la colonne
   <structfield>oprjoin</structfield> de
   <structname>pg_operator</structname>, et est <function>eqjoinsel</function>.
   <function>eqjoinsel</function> recherche l'information statistique de
   <structname>tenk2</structname> et <structname>tenk1</structname>&nbsp;:

   <programlisting>
SELECT tablename, null_frac,n_distinct, most_common_vals FROM pg_stats
WHERE tablename IN ('tenk1', 'tenk2') AND attname='unique2';

tablename  | null_frac | n_distinct | most_common_vals
-----------+-----------+------------+------------------
 tenk1     |         0 |         -1 |
 tenk2     |         0 |         -1 |
   </programlisting>

   Dans ce cas, il n'y a pas d'information <acronym>MCV</acronym> pour
   <structfield>unique2</structfield> parce que toutes les valeurs semblent
   être unique, donc nous utilisons un algorithme qui relie seulement le
   nombre de valeurs distinctes pour les deux relations ensembles avec leur
   fractions NULL&nbsp;:

   <programlisting>selectivity = (1 - null_frac1) * (1 - null_frac2) * min(1/num_distinct1, 1/num_distinct2)
            = (1 - 0) * (1 - 0) / max(10000, 10000)
            = 0.0001
   </programlisting>

   C'est-à-dire, soustraire la fraction NULL pour chacune des relations, et
   divisez par le maximum du nombre de valeurs distinctes. Le nombre de
   lignes que la jointure pourrait émettre est calculé comme la cardinalité du
   produit cartésien de deux inputs, multiplié par la sélectivité&nbsp;:

   <programlisting>
rows = (outer_cardinality * inner_cardinality) * selectivity
     = (50 * 10000) * 0.0001
     = 50
   </programlisting>
  </para>

  <para>
   S'il y avait eu des listes MCV pour les deux colonnes,
   <function>eqjoinsel</function> aurait utilisé une comparaison directe des
   listes MCV pour déterminer la sélectivité de jointure à l'intérieur de la
   aprtie des populations de colonne représentées par les MCV. L'estimation
   pour le reste des populations suit la même approche affichée ici.
  </para>

  <para>
   Notez que nous affichons <literal>inner_cardinality</literal> à 10000,
   c'est-à-dire la taille non modifiée de <structname>tenk2</structname>. Il
   pourrait apparaître en inspectant l'affichage <command>EXPLAIN</command>
   que l'estimation des lignes jointes vient de 50 * 1, c'est-à-dire que le
   nombre de lignes externes multiplié par le nombre estimé de lignes obtenu
   par chaque parcours d'index interne sur <structname>tenk2</structname>.
   Mais ce n'est pas le cas&nbsp;: la taille de la relation jointe est
   estimée avant tout plan de jointure particulier considéré. Si tout
   fonctionne si bien, alors les deux façons d'estimer la taille de la jointure
   produiront la même réponse mais, à cause de l'erreur d'arrondi et d'autres
   facteurs, ils divergent quelque fois significativement.
  </para>

  <para>
   Pour les personnes intéressées par plus de détails, l'estimation de la taille
   d'une table (avant toute clause <literal>WHERE</literal>) se fait dans
   <filename>src/backend/optimizer/util/plancat.c</filename>. La logique
   générique pour les sélectivités de clause est dans
   <filename>src/backend/optimizer/path/clausesel.c</filename>. Les fonctions
   de sélectivité spécifiques aux opérateurs se trouvent principalement dans
   <filename>src/backend/utils/adt/selfuncs.c</filename>.
  </para>

 </sect1>

 <sect1 id="multivariate-statistics-examples">
  <title>Exemples de statistiques multivariées</title>

  <indexterm>
   <primary>estimation de ligne</primary>
   <secondary>multivariée</secondary>
  </indexterm>

  <sect2 id="functional-dependencies">
   <title>Dépendances fonctionnelles</title>

   <para>
    La corrélation multivariée peut être démontrée avec un jeu de test très
    simple &mdash; une table avec deux colonnes, chacune contenant les même
    valeurs&nbsp;:

    <programlisting>
CREATE TABLE t (a INT, b INT);
INSERT INTO t SELECT i % 100, i % 100 FROM generate_series(1, 10000) s(i);
ANALYZE t;
    </programlisting>

    Comme expliqué dans <xref linkend="planner-stats"/>, l'optimiseur peut
    déterminer la cardinalité de <structname>t</structname> en utilisant le
    nombre de pages et de lignes obtenues dans
    <structname>pg_class</structname>&nbsp;:

    <programlisting>
SELECT relpages, reltuples FROM pg_class WHERE relname = 't';

 relpages | reltuples
----------+-----------
       45 |     10000
    </programlisting>

    La distribution des données est très simple; il n'y a que 100 valeurs
    différentes dans chaque colonne, distribuées de manière uniforme.
   </para>

   <para>
    L'exemple suivant montre le résultat de l'estimation d'une conditino
    <literal>WHERE</literal> sur la colonne <structfield>a</structfield>&nbsp;:

    <programlisting>
EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1;
                                 QUERY PLAN
-------------------------------------------------------------------------------
 Seq Scan on t  (cost=0.00..170.00 rows=100 width=8) (actual rows=100 loops=1)
   Filter: (a = 1)
   Rows Removed by Filter: 9900
    </programlisting>

    L'optimiseur examine la condition et détermine que la sélectivité de cette
    clause est de 1%.  En comparant cette estimation avec le nombre de lignes
    réel, on voit que l'estimation est très précise (elle est en fait exacte
    car la table est très petite).  En changeant la clause
    <literal>WHERE</literal> pour utiliser la colonne
    <structfield>b</structfield>, un plan identique est généré.  Mais observons
    ce qui arrive si nous appliquons la même condition sur chacune des
    colonnes, en les combinant avec <literal>AND</literal>&nbsp;:

    <programlisting>
EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;
                                 QUERY PLAN
-----------------------------------------------------------------------------
 Seq Scan on t  (cost=0.00..195.00 rows=1 width=8) (actual rows=100 loops=1)
   Filter: ((a = 1) AND (b = 1))
   Rows Removed by Filter: 9900
    </programlisting>

    L'optimiseur estime la sélectivité pour chaque condition individuellement,
    en arrivant à la même estimation d'1% comme au dessus.  Puis il part du
    principe que les conditions sont indépendantes, et multiplie donc leurs
    sélectivité, produisant une estimation de sélectivité finale d'uniquement
    0.01%.  C'est une sous estimation importante, puisque le nombre réel de
    lignes correspondant aux conditions (100) est d'un ordre de grandeur deux
    fois plus haut.
   </para>

   <para>
    Ce problème peut être corrigé en créant un objet statistiques qui demandera
    à <command>ANALYZE</command> de calculer des statistiques multivariées de
    dépendances fonctionnelles sur les deux colonnes&nbsp;:

    <programlisting>
CREATE STATISTICS stts (dependencies) ON a, b FROM t;
ANALYZE t;
EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;
                                  QUERY PLAN
-------------------------------------------------------------------------------
 Seq Scan on t  (cost=0.00..195.00 rows=100 width=8) (actual rows=100 loops=1)
   Filter: ((a = 1) AND (b = 1))
   Rows Removed by Filter: 9900
    </programlisting>
   </para>
  </sect2>

  <sect2 id="multivariate-ndistinct-counts">
   <title>Nombre N-Distinct Multivarié</title>

   <para>
    Un problème similaire apparaît avec l'estimation de la cardinalité d'un
    ensemble de plusieurs colonnes, tel que le nombre de groupes qu'une clause
    <command>GROUP BY</command> générerait.  Quand <command>GROUP BY</command>
    liste une seule colonne, l'estimation n-distinct (qui est visible comme le
    nombre de lignes estimé par le nœud HashAggregate) est très précis&nbsp;:
    <programlisting>
EXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a;
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 HashAggregate  (cost=195.00..196.00 rows=100 width=12) (actual rows=100 loops=1)
   Group Key: a
   -&gt;  Seq Scan on t  (cost=0.00..145.00 rows=10000 width=4) (actual rows=10000 loops=1)
    </programlisting>
    Mais sans statistiques multivariées, l'estimation du nombre de groupe dans
    une requête ayant deux colonnes dans le <command>GROUP BY</command>, comme
    dans l'exemple suivant, est faux d'un ordre de grandeur&nbsp;:
    <programlisting>
EXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a, b;
                                       QUERY PLAN
--------------------------------------------------------------------------------------------
 HashAggregate  (cost=220.00..230.00 rows=1000 width=16) (actual rows=100 loops=1)
   Group Key: a, b
   -&gt;  Seq Scan on t  (cost=0.00..145.00 rows=10000 width=8) (actual rows=10000 loops=1)
    </programlisting>
    En redéfinissant l'objet statistiques pour inclure un nombre n-distinct
    pour les deux colonnes, l'estimation est bien améliorée&nbsp;:
    <programlisting>
DROP STATISTICS stts;
CREATE STATISTICS stts (dependencies, ndistinct) ON a, b FROM t;
ANALYZE t;
EXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a, b;
                                       QUERY PLAN
--------------------------------------------------------------------------------------------
 HashAggregate  (cost=220.00..221.00 rows=100 width=16) (actual rows=100 loops=1)
   Group Key: a, b
   -&gt;  Seq Scan on t  (cost=0.00..145.00 rows=10000 width=8) (actual rows=10000 loops=1)
    </programlisting>
   </para>

  </sect2>

  <sect2 id="mcv-lists">
   <title>Listes MCV</title>

   <para>
    Comme expliqué dans <xref linkend="functional-dependencies"/>, les
    dépendances fonctionnelles sont un type de statistiques peu coûteux et
    très efficace, mais leur limitation principale est leur nature globale
    (traquer les dépendances uniquement au niveau de la colonne, pas entre les
    valeurs des colonnes individuelles).
   </para>

   <para>
    Cette section introduit la variante des listes <acronym>MCV</acronym>
    (valeurs les plus communes), une extension directe de la statistique par
    colonne décrite dans <xref linkend="row-estimation-examples"/>. Ces
    statistiques adressent la limitation du sockage de valeurs individuelles
    mais elles sont naturellement plus coûteuses, à la fois pour la
    construction des statistiques lors du <command>ANALYZE</command>, pour le
    stockage et pour le temps de planification.
   </para>

   <para>
    Étudions cette requête à partir de <xref
    linkend="functional-dependencies"/>, mais cette fois avec une liste
    <acronym>MCV</acronym> crée à partir du même ensemble de colonnes
    (assurez-vous de supprimer les dépendances fonctionnelles, pour s'assurer
    que le planificateur utilise les statistiques nouvellement créées).

    <programlisting>
DROP STATISTICS stts;
CREATE STATISTICS stts2 (mcv) ON a, b FROM t;
ANALYZE t;
EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;
                                   QUERY PLAN
-------------------------------------------------------------------------------
 Seq Scan on t  (cost=0.00..195.00 rows=100 width=8) (actual rows=100 loops=1)
   Filter: ((a = 1) AND (b = 1))
   Rows Removed by Filter: 9900
    </programlisting>

    L'estimation est aussi précise qu'avec les dépendances fonctionnelles
    grâce à la petite volumétrie de la table et à une distribution simple avec
    un petit nombre de valeurs distinctes. Avant de regarder les deuxième
    requête, qui n'était pas géré particulièrement bien par les dépendances
    fonctionnelles, inspectons un peu la liste <acronym>MCV</acronym>.
   </para>

   <para>
    Inspecter la liste <acronym>MCV</acronym> est possible en utilisant la
    fonction <function>pg_mcv_list_items</function>.

    <programlisting>
SELECT m.* FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid),
                pg_mcv_list_items(stxdmcv) m WHERE stxname = 'stts2';
 index |  values  | nulls | frequency | base_frequency
-------+----------+-------+-----------+----------------
     0 | {0, 0}   | {f,f} |      0.01 |         0.0001
     1 | {1, 1}   | {f,f} |      0.01 |         0.0001
   ...
    49 | {49, 49} | {f,f} |      0.01 |         0.0001
    50 | {50, 50} | {f,f} |      0.01 |         0.0001
   ...
    97 | {97, 97} | {f,f} |      0.01 |         0.0001
    98 | {98, 98} | {f,f} |      0.01 |         0.0001
    99 | {99, 99} | {f,f} |      0.01 |         0.0001
(100 rows)
    </programlisting>

    Ceci confirme qu'il y a 100 combinaisons distinctes dans les deux
    colonnes, et que leur fréquence est pratiquement identique (fréquence de
    1% frequency pour les deux). La fréquence de base est la fréquence
    calculée par les statistiques par colonne, comme si il n'y avait pas de
    statistiques multi-colonnes. S'il y avait des valeurs NULL dans une des
    colonnes, cela se serait vu dans la colonne
    <structfield>nulls</structfield>.
   </para>

   <para>
    Lors de l'estimation de la sélectivité, le planificateur applique toutes
    les conditions sur les éléments de la liste <acronym>MCV</acronym>, puis
    additionne les fréquences de celles qui correspondent. Voir
    <function>mcv_clauselist_selectivity</function> dans
    <filename>src/backend/statistics/mcv.c</filename> pour les détails.
   </para>

   <para>
    Comparé aux dépendances fonctionnelles, les listes <acronym>MCV</acronym>
    ont deux avantages majeurs. Tout d'abord, la liste enregistre les valeurs
    réelles, rendant possible la décision des combinaisons compatibles.

    <programlisting>
EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 10;
                                 QUERY PLAN
---------------------------------------------------------------------------
 Seq Scan on t  (cost=0.00..195.00 rows=1 width=8) (actual rows=0 loops=1)
   Filter: ((a = 1) AND (b = 10))
   Rows Removed by Filter: 10000
    </programlisting>

    Ensuite, les listes <acronym>MCV</acronym> gèrent un plus grand nombre de
    types de clause, pas uniquement les clauses d'égalité comme les
    dépendances fonctionnelles. Voir par exemple la requête d'intervalle,
    présentée précédemment&nbsp;:

    <programlisting>
EXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a &lt;= 49 AND b &gt; 49;
                                QUERY PLAN
---------------------------------------------------------------------------
 Seq Scan on t  (cost=0.00..195.00 rows=1 width=8) (actual rows=0 loops=1)
   Filter: ((a &lt;= 49) AND (b &gt; 49))
   Rows Removed by Filter: 10000
    </programlisting>

   </para>

  </sect2>

 </sect1>

 <sect1 id="planner-stats-security">
  <title>Statistiques de l'optimiseur et sécurité</title>

  <para>
   L'accès à la table <structname>pg_statistic</structname> est restreint aux
   superutilisateurs pour que les autres utilisateurs ne puissent apprendre le
   contenu des tables des autres utilisateurs. Certaines fonctions
   d'estimation de la sélectivité utiliseront un opérateur fourni par
   l'utilisateur (soit l'opérateur apparaissant dans la requête, soit un
   opérateur lié) pour analyser les statistiques enregistrées. Par exemple,
   pour déterminer si la valeur la plus commune est applicable, l'estimateur
   de sélectivité devra exécuter l'opérateur <literal>=</literal> approprié
   pour comparer la constante de la requête avec la valeur enregistrée. De ce
   fait, la donnée dans <structname>pg_statistic</structname> est
   potentielement fournie aux opérateurs définis par l'utilisateur. Un
   opérateur créé de façon approprié peut intentionnellement donner les
   opérandes fournis (par exemple en les enregistrant ou en les écrivant dans
   une table différente) ou en les exposant par erreur en affichant leur
   valeurs dans des messages d'erreur, auxquels cas il pourrait exposer les
   données provenant de <structname>pg_statistic</structname> à un utilisateur
   qui ne devrait pas être capable de les voir.
  </para>

  <para>
   Pour empêcher cela, ce qui suit s'applique à toute fonction interne
   d'estimation de la sélectivité. Lors de la planification d'une requête,
   pour pouvoir utiliser les statistiques enregistrées, soit l'utilisateur
   actuel doit avoir le droit <literal>SELECT</literal> sur la table ou les
   colonnes impliquées, columns, soit l'opérateur utilisé doit être
   <literal>LEAKPROOF</literal> (plus exactement, la fonction utilisée par cet
   opérateur). Dans le cas contraire, l'estimateur de la sélectivité se
   comportera comme si aucune statistique n'était disponible, et le
   planificateur procédera avec les informations par défaut.
  </para>

  <para>
   Si un utilisateur n'a pas le droit requis pour la table ou les colonnes,
   alors dans de nombreux cas, la requête renverra une erreur pour refus de
   droit, auquel cas ce mécanisme est invisible en pratique. Mais si
   l'utilisateur est en train de lire une vue avec une barrière de sécurité,
   alors le planificateur pourrait souhaiter de vérifier les statistiques de
   la table sous-jacente qui n'est normalement pas accessible par
   l'utilisateur. Dans ce cas, l'opérateur devra être sans fuite. Dans le cas
   contraire, les statistiques ne seront pas utilisées. Il n'y a pas de retour
   direct sur cela, en dehors du fait que le plan pourrait être non optimal.
   Si un utilisateur suspecte que cela lui arrive, il pourrait exécuter la
   requête avec un utilisateur disposant de plus de droits pour voir si cela
   cause la génération d'un autre plan.
  </para>

  <para>
   Cette restriction s'applique seulement aux cas où le planificateur aurait
   besoin d'exécuter un opérateur défini par un utilisateur sur une ou
   plusieurs valeurs de <structname>pg_statistic</structname>. De ce fait, le
   planificateur a l'autorisation d'utiliser des informations statistiques
   génériques, telles que la fraction de valeurs nulles ou le nombre de
   valeurs distinctes dans une colonne, quelque soit les droits d'accès.
  </para>

  <para>
   Les fonctions d'estimation de la sélectivité contenues dans des extensions
   de tierces parties qui opèrent potentiellement sur des statistiques avec
   des opérateurs définis par les utilisateurs devraient suivre les mêmes
   règles de sécurité. Consultez le code source de PostgreSQL pour des
   exemples.
  </para>
 </sect1>

</chapter>
