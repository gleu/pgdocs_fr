<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="fuzzystrmatch" xreflabel="fuzzystrmatch">
 <title>fuzzystrmatch &mdash; déterminer les similarités et les distances
 sur des chaînes de caractères</title>

 <indexterm zone="fuzzystrmatch">
  <primary>fuzzystrmatch</primary>
 </indexterm>

 <para>
  Le module <filename>fuzzystrmatch</filename> fournit diverses fonctions qui
  permettent de déterminer les similarités et la distance entre des chaînes.
 </para>

 <caution>
  <para>
   À présent, les fonctions <function>soundex</function>,
   <function>metaphone</function>, <function>dmetaphone</function> et
   <function>dmetaphone_alt</function> ne fonctionnent pas correctement avec
   les encodages multi-octets (comme l'UTF-8). Utilisez
   <function>daitch_mokotoff</function> ou <function>levenshtein</function>
   avec de telles données.
  </para>
 </caution>

 <para>
  Ce module est considéré comme <quote>trusted</quote>, ce qui signifie qu'il
  peut être installé par des utilisateurs simples (sans attribut
  <literal>SUPERUSER</literal>) et qui ont l'attribut <literal>CREATE</literal>
  sur la base de données courante.
 </para>

 <sect2 id="fuzzystrmatch-soundex">
  <title>Soundex</title>

  <para>
   Le système Soundex est une méthode qui permet d'associer des noms (ou des
   mots) dont la prononciation est proche en les convertissant dans le même
   code. Elle a été utilisée à l'origine par le «&nbsp;United States
   Census&nbsp;» en 1880, 1900 et 1910. Soundex n'est pas très utile
   pour les noms qui ne sont pas anglais.
  </para>

  <para>
   Le module <filename>fuzzystrmatch</filename> fournit deux fonctions pour
   travailler avec des codes Soundex&nbsp;:
  </para>

  <indexterm>
   <primary>soundex</primary>
  </indexterm>

  <indexterm>
   <primary>difference</primary>
  </indexterm>

  <synopsis>
   soundex(text) returns text
   difference(text, text) returns int
  </synopsis>

  <para>
   La fonction <function>soundex</function> convertit une chaîne en son code
   Soundex. La fonction <function>difference</function> convertit deux chaînes
   en leurs codes Soundex, puis rapporte le nombre de positions de code
   correspondant. Comme les codes Soundex ont quatre caractères, le résultat
   va de zéro à quatre. Zéro correspond à aucune correspondance, quatre à une
   correspondance exacte. (Du coup, la fonction est mal nommée &mdash;
   <function>similarity</function> aurait été un meilleur nom.)
  </para>

  <para>
   Voici quelques exemples d'utilisation&nbsp;:
  </para>
  <programlisting><![CDATA[
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT * FROM s WHERE difference(s.nm, 'john') > 2;
  ]]></programlisting>
 </sect2>

 <sect2 id="fuzzystrmatch-daitch-mokotoff">
  <title>Daitch-Mokotoff Soundex</title>

  <para>
   Tout comme le système original Soundex, Daitch-Mokotoff Soundex fait
   correspondre des noms se ressemblant en les convertissant vers le même
   code. Néanmoins, Daitch-Mokotoff Soundex est significativement plus utile
   pour les noms non-anglais que le système original. Les améliorations
   majeures sur le système original incluent&nbsp;:

   <itemizedlist spacing="compact" mark="bullet">
    <listitem>
     <para>
      Le code est basé sur les six premières lettres significatives plutôt que
      sur quatre.
     </para>
    </listitem>
    <listitem>
     <para>
      Une lettre ou une combinaison de lettres correspond à dix codes possibles
      plutôt que sept.
     </para>
    </listitem>
    <listitem>
     <para>
      Quand deux lettres consécutives ont un seul son, elles sont codées avec
      un seul numéro.
     </para>
    </listitem>
    <listitem>
     <para>
      Quand une lettre ou une combinaison de lettres peut avoir différents sons,
      plusieurs codes sont émis pour couvrir toutes les possibilités.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <indexterm>
   <primary>daitch_mokotoff</primary>
  </indexterm>

  <para>
   Cette fonction génère les codes Daitch-Mokotoff soundex d'après son
   argument&nbsp;:
  </para>

<synopsis>
daitch_mokotoff(<parameter>source</parameter> text) returns text[]
</synopsis>

  <para>
   Le résultat peut contenir un ou plusieurs codes suivant les prononciations
   plausibles, donc il est représenté sous la forme d'un tableau.
  </para>

  <para>
   Comme un code Daitch-Mokotoff soundex consiste en seulement six chiffres,
   <parameter>source</parameter> devrait être de préférence un simple mot ou nom.
  </para>

  <para>
   Voici quelques exemples&nbsp;:
  </para>

<programlisting>
SELECT daitch_mokotoff('George');
 daitch_mokotoff
-----------------
 {595000}

SELECT daitch_mokotoff('John');
 daitch_mokotoff
-----------------
 {160000,460000}

SELECT daitch_mokotoff('Bierschbach');
                      daitch_mokotoff
-----------------------------------------------------------
 {794575,794574,794750,794740,745750,745740,747500,747400}

SELECT daitch_mokotoff('Schwartzenegger');
 daitch_mokotoff
-----------------
 {479465}
</programlisting>

  <para>
   Pour une correspondance entre des noms simples, les tableaux de texte renvoyés
   peuvent être comparés directement en utilisant l'opérateur
   <literal>&amp;&amp;</literal>&nbsp;: toute surcharge peut être considérée comme
   une correspondance. Un index GIN pourrait être utilisé pour plus
   de performances, voir  <xref linkend="gin"/> et cet exemple&nbsp;:
  </para>

<programlisting>
CREATE TABLE s (nm text);
CREATE INDEX ix_s_dm ON s USING gin (daitch_mokotoff(nm)) WITH (fastupdate = off);

INSERT INTO s (nm) VALUES
  ('Schwartzenegger'),
  ('John'),
  ('James'),
  ('Steinman'),
  ('Steinmetz');

SELECT * FROM s WHERE daitch_mokotoff(nm) &amp;&amp; daitch_mokotoff('Swartzenegger');
SELECT * FROM s WHERE daitch_mokotoff(nm) &amp;&amp; daitch_mokotoff('Jane');
SELECT * FROM s WHERE daitch_mokotoff(nm) &amp;&amp; daitch_mokotoff('Jens');
</programlisting>

  <para>
   Pour l'indexation et la correspondance de tout nombre de noms quelque soit
   l'ordre, les fonctionnalités de la recherche plein texte peuvent être
   utilisées. Voir <xref linkend="textsearch"/> et cet exemple&nbsp;:
  </para>

<programlisting>
CREATE FUNCTION soundex_tsvector(v_name text) RETURNS tsvector
BEGIN ATOMIC
  SELECT to_tsvector('simple',
                     string_agg(array_to_string(daitch_mokotoff(n), ' '), ' '))
  FROM regexp_split_to_table(v_name, '\s+') AS n;
END;

CREATE FUNCTION soundex_tsquery(v_name text) RETURNS tsquery
BEGIN ATOMIC
  SELECT string_agg('(' || array_to_string(daitch_mokotoff(n), '|') || ')', '&amp;')::tsquery
  FROM regexp_split_to_table(v_name, '\s+') AS n;
END;

CREATE TABLE s (nm text);
CREATE INDEX ix_s_txt ON s USING gin (soundex_tsvector(nm)) WITH (fastupdate = off);

INSERT INTO s (nm) VALUES
  ('John Doe'),
  ('Jane Roe'),
  ('Public John Q.'),
  ('George Best'),
  ('John Yamson');

SELECT * FROM s WHERE soundex_tsvector(nm) @@ soundex_tsquery('john');
SELECT * FROM s WHERE soundex_tsvector(nm) @@ soundex_tsquery('jane doe');
SELECT * FROM s WHERE soundex_tsvector(nm) @@ soundex_tsquery('john public');
SELECT * FROM s WHERE soundex_tsvector(nm) @@ soundex_tsquery('besst, giorgio');
SELECT * FROM s WHERE soundex_tsvector(nm) @@ soundex_tsquery('Jameson John');
</programlisting>

  <para>
   S'il est souhaité d'éviter de recalculer les codes soundex pendant une
   revérification d'index, un index sur une colonne séparée peut être utilisé
   à la place d'un index sur une expression. Une colonne stockée automatiquement
   générée peut être utilisée pour cela&nbsp;; voir
   <xref linkend="ddl-generated-columns"/>.
  </para>
 </sect2>

 <sect2 id="fuzzystrmatch-levenshtein">
  <title>Levenshtein</title>
  <para>
   Cette fonction calcule la distance de Levenshtein entre deux chaînes&nbsp;:
  </para>
  <indexterm>
   <primary>levenshtein</primary>
  </indexterm>

  <indexterm>
   <primary>levenshtein_less_equal</primary>
  </indexterm>

  <synopsis>
levenshtein(source text, target text, ins_cost int, del_cost int, sub_cost int) returns int
levenshtein(source text, target text) returns int
levenshtein_less_equal(source text, target text, ins_cost int, del_cost int, sub_cost int, max_d int) returns int
levenshtein_less_equal(source text, target text, max_d int) returns int
  </synopsis>
  <para>
   La <literal>source</literal> et la cible (<literal>target</literal>)
   sont des chaînes quelconques non NULL de 255 caractères. Les paramètres de coût
   indiquent respectivement le coût d'une insertion, suppression ou
   substitution d'un paramètre. Vous pouvez omettre les paramètres de coût,
   comme dans la deuxième version. Dans ce cas, elles ont 1 comme
   valeur par défaut.
  </para>

  <para>
   <function>levenshtein_less_equal</function> est une version accélérée de la
   fonction Levenshtein à utiliser que lorsque de petites distances sont
   intéressantes. Si la distance réelle est inférieure ou égale à
   <literal>max_d</literal>, alors <function>levenshtein_less_equal</function>
   renvoie la bonne distance&nbsp;; sinon elle renvoie une valeur supérieure à
   <literal>max_d</literal>. Si <literal>max_d</literal> est négatif, alors le
   comportement est identique à <function>levenshtein</function>.
  </para>
  <para>
   Exemples&nbsp;:
  </para>
  <screen>
test=# SELECT levenshtein('GUMBO', 'GAMBOL');
 levenshtein
-------------
           2
(1 row)

test=# SELECT levenshtein('GUMBO', 'GAMBOL', 2,1,1);
 levenshtein
-------------
           3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',2);
 levenshtein_less_equal
------------------------
                      3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',4);
 levenshtein_less_equal
------------------------
                      4
(1 row)
  </screen>
 </sect2>

 <sect2 id="fuzzystrmatch-metaphone">
  <title>Metaphone</title>
  <para>
   Metaphone, comme Soundex, construit un code
   représentatif de la chaîne en entrée. Deux chaînes sont considérées
   similaires si elles ont le même code.
  </para>

  <para>
   Cette fonction calcule le code metaphone d'une chaîne en entrée&nbsp;:
  </para>

  <indexterm>
   <primary>metaphone</primary>
  </indexterm>

  <synopsis>
   metaphone(source text, max_output_length int) returns text
  </synopsis>

  <para>
   <literal>source</literal> doit être une chaîne non NULL de
   255 caractères au maximum. <literal>max_output_length</literal> fixe la longueur
   maximale du code metaphone résultant&nbsp;; s'il est plus long, la sortie
   est tronquée à cette taille.
  </para>
  <para>Exemple</para>

  <screen>
test=# SELECT metaphone('GUMBO', 4);
 metaphone
-----------
 KM
(1 row)
  </screen>
 </sect2>

 <sect2 id="fuzzystrmatch-double-metaphone">
  <title>Double Metaphone</title>

  <para>
   Le système <quote>Double Metaphone</quote> calcule deux chaînes
   <quote>qui se ressemblent</quote> pour une chaîne en entrée &mdash; une <quote>primaire</quote>
   et une <quote>alternative</quote>. Dans la plupart des cas, elles sont
   identiques mais, tout spécialement pour les noms autres qu'anglais, elles
   peuvent être légèrement différentes, selon la prononciation. Ces fonctions
   calculent le code primaire et le code alternatif&nbsp;:
  </para>

  <indexterm>
   <primary>dmetaphone</primary>
  </indexterm>

  <indexterm>
   <primary>dmetaphone_alt</primary>
  </indexterm>

  <synopsis>
dmetaphone(source text) returns text
dmetaphone_alt(source text) returns text
  </synopsis>

  <para>
   Il n'y a pas de limite de longueur sur les chaînes en entrée.
  </para>

  <para>
   Exemple&nbsp;:
  </para>

  <screen>
test=# select dmetaphone('gumbo');
 dmetaphone
------------
 KMP
(1 row)
  </screen>
 </sect2>

</sect1>
