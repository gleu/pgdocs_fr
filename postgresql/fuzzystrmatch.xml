<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="fuzzystrmatch" xreflabel="fuzzystrmatch">
 <title>fuzzystrmatch</title>

 <indexterm zone="fuzzystrmatch">
  <primary>fuzzystrmatch</primary>
 </indexterm>

 <para>
  Le module <filename>fuzzystrmatch</filename> fournit diverses fonctions qui
  permettent de déterminer les similarités et la distance entre des chaînes.
 </para>

 <caution>
  <para>
   À présent, les <function>soundex</function>, <function>metaphone</function>,
   <function>dmetaphone</function> et <function>dmetaphone_alt</function> ne
   fonctionnent pas correctement avec les encodages multi-octets (comme
   l'UTF-8).
  </para>
 </caution>

 <para>
  Ce module est considéré comme <quote>trusted</quote>, ce qui signifie qu'il
  peut être installé par des utilisateurs simples (sans attribut
  <literal>SUPERUSER</literal>) et qui ont l'attribut <literal>CREATE</literal>
  sur la base de données courante.
 </para>

 <sect2>
  <title>Soundex</title>
  <para>
   Le système Soundex est une méthode qui permet d'associer des noms (ou des
   mots) dont la prononciation est proche en les convertissant dans le même
   code. Elle a été utilisée à l'origine par le «&nbsp;United States
   Census&nbsp;» en 1880, 1900 et 1910. Soundex n'est pas très utile
   pour les noms qui ne sont pas anglais.
  </para>
  <para>
   Le module <filename>fuzzystrmatch</filename> fournit deux fonctions pour
   travailler avec des codes Soundex&nbsp;:
  </para>

  <indexterm>
   <primary>soundex</primary>
  </indexterm>

  <indexterm>
   <primary>difference</primary>
  </indexterm>

  <synopsis>
   soundex(text) returns text
   difference(text, text) returns int
  </synopsis>

  <para>
   La fonction <function>soundex</function> convertit une chaîne en son code
   Soundex. La fonction <function>difference</function> convertit deux chaînes
   en leur codes Soundex, puis rapporte le nombre de positions de code
   correspondant. Comme les codes Soundex ont quatre caractères, le résultat
   va de zéro à quatre. Zéro correspond à aucune correspondance, quatre à une
   correspondance exacte. (Du coup, la fonction est mal nommée &mdash;
   <function>similarity</function> aurait été un meilleur nom.)
  </para>

  <para>
   Voici quelques exemples d'utilisation&nbsp;:
  </para>
  <programlisting><![CDATA[
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT * FROM s WHERE difference(s.nm, 'john') > 2;
  ]]></programlisting>
 </sect2>

 <sect2>
  <title>Levenshtein</title>
  <para>
   Cette fonction calcule la distance de Levenshtein entre deux chaînes&nbsp;:
  </para>
  <indexterm>
   <primary>levenshtein</primary>
  </indexterm>

  <indexterm>
   <primary>levenshtein_less_equal</primary>
  </indexterm>

  <synopsis>
   levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost) returns int
   levenshtein(text source, text target) returns int
   levenshtein_less_equal(text source, text target, int ins_cost, int del_cost, int sub_cost, int max_d) returns int
   levenshtein_less_equal(text source, text target, int max_d) returns int
  </synopsis>
  <para>
   La <literal>source</literal> et la cible (<literal>target</literal>)
   sont des chaînes quelconques non NULL de 255 caractères. Les paramètres de coût
   indiquent respectivement le coût d'une insertion, suppression ou
   substitution d'un paramètre. Vous pouvez omettre les paramètres de coût,
   comme dans la deuxième version de la version. Dans ce cas, elles ont 1 comme
   valeur par défaut.
  </para>

  <para>
   <function>levenshtein_less_equal</function> est une version accélérée de la
   fonction Levenshtein à utiliser que lorsque de petites distances sont
   intéressantes. Si la distance réelle est inférieure ou égale à
   <literal>max_d</literal>, alors <function>levenshtein_less_equal</function>
   renvoie la bonne distance&nbsp;; sinon elle renvoie une valeur supérieure à
   <literal>max_d</literal>. Si <literal>max_d</literal> est négatif, alors le
   comportement est identique à <function>levenshtein</function>.
  </para>
  <para>
   Exemples&nbsp;:
  </para>
  <screen>
test=# SELECT levenshtein('GUMBO', 'GAMBOL');
 levenshtein
-------------
           2
(1 row)

test=# SELECT levenshtein('GUMBO', 'GAMBOL', 2,1,1);
 levenshtein
-------------
           3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',2);
 levenshtein_less_equal
------------------------
                      3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',4);
 levenshtein_less_equal
------------------------
                      4
(1 row)
  </screen>
 </sect2>

 <sect2>
  <title>Metaphone</title>
  <para>
   Metaphone, comme Soundex, construit un code
   représentatif de la chaîne en entrée. Deux chaînes sont considérées
   similaires si elles ont le même code.
  </para>

  <para>
   Cette fonction calcule le code metaphone d'une chaîne en entrée&nbsp;:
  </para>

  <indexterm>
   <primary>metaphone</primary>
  </indexterm>

  <synopsis>
   metaphone(text source, int max_output_length) returns text
  </synopsis>

  <para>
   <literal>source</literal> doit être une chaîne non NULL de
   255 caractères au maximum. <literal>max_output_length</literal> fixe la longueur
   maximale du code metaphone résultant&nbsp;; s'il est plus long, la sortie
   est tronquée à cette taille.
  </para>
  <para>Exemple</para>

  <screen>
test=# SELECT metaphone('GUMBO', 4);
 metaphone
-----------
 KM
(1 row)
  </screen>
 </sect2>

 <sect2>
  <title>Double Metaphone</title>

  <para>
   Le système <quote>Double Metaphone</quote> calcule deux chaînes
   <quote>qui se ressemblent</quote> pour une chaîne en entrée &mdash; une <quote>primaire</quote>
   et une <quote>alternative</quote>. Dans la plupart des cas, elles sont
   identiques mais, tout spécialement pour les noms autres qu'anglais, elles
   peuvent être légèrement différentes, selon la prononciation. Ces fonctions
   calculent le code primaire et le code alternatif&nbsp;:
  </para>

  <indexterm>
   <primary>dmetaphone</primary>
  </indexterm>

  <indexterm>
   <primary>dmetaphone_alt</primary>
  </indexterm>

  <synopsis>
   dmetaphone(text source) returns text
   dmetaphone_alt(text source) returns text
  </synopsis>

  <para>
   Il n'y a pas de limite de longueur sur les chaînes en entrée.
  </para>

  <para>
   Exemple&nbsp;:
  </para>

  <screen>
test=# select dmetaphone('gumbo');
 dmetaphone
------------
 KMP
(1 row)
  </screen>
 </sect2>

</sect1>
