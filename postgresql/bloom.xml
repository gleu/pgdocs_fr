<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="bloom" xreflabel="bloom">
 <title>bloom</title>

 <indexterm zone="bloom">
  <primary>bloom</primary>
 </indexterm>

 <para>
  <literal>bloom</literal> fournit une méthode d'accès aux index basée sur les
  <ulink url="https://en.wikipedia.org/wiki/Bloom_filter">filtres Bloom</ulink>.
 </para>

 <para>
  Un filtre Bloom est une structure de données efficace en terme d'espace
  disque, utilisée pour tester si un élément fait partie d'un ensemble. Dans
  le cas d'une méthode d'accès aux index, il permet une exclusion rapide des
  lignes ne correspondant pas à la recherche via des signatures dont la taille
  est déterminée lors de la création de l'index.
 </para>

 <para>
  Une signature est une représentation avec perte des attributs indexé(s) et, de ce
  fait, est sujet à renvoyer des faux positifs&nbsp;; c'est-à-dire qu'il peut
  indiquer à tort qu'un élément fait partie d'un ensemble. De ce fait,
  les résultats d'une recherche doivent toujours être
  vérifiés en utilisant les valeurs réelles des attributs de la ligne
  dans la table. Des signatures plus larges réduisent les risques de faux
  positifs et réduisent donc le nombre de visites inutiles à la table.
  Bien sûr, l'index est plus volumineux et donc plus lent à parcourir.
 </para>

 <para>
  Ce type d'index est principalement utile quand une table a de nombreux
  attributs et que les requêtes en testent des combinaisons arbitraires.
  Un index btree traditionnel est plus rapide qu'un index bloom mais
  il en faut généralement plusieurs pour supporter toutes les requêtes que
  gèrerait un seul index bloom. Noter que les index bloom ne supportent que les
  recherches par égalité, là où les index btree peuvent aussi
  réaliser des recherches d'inégalité et d'intervalles.
 </para>

 <sect2>
  <title>Paramètres</title>

  <para>
   Un index <literal>bloom</literal> accepte les paramètres suivants dans
   sa clause <literal>WITH</literal>&nbsp;:
  </para>

  <variablelist>
   <varlistentry>
    <term><literal>length</literal></term>
    <listitem>
     <para>
      Longueur de chaque signature (enregistrement dans l'index) en bits,
      arrondi au multiple de <literal>16</literal> le plus proche. La
      valeur par défaut est de  <literal>80</literal> et le maximum est
      <literal>4096</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist>
   <varlistentry>
    <term><literal>col1 &mdash; col32</literal></term>
    <listitem>
     <para>
      Nombre de bits générés pour chaque colonne d'index. Le nom de chaque
      paramètre fait référence au numéro de la colonne d'index qu'il contrôle.
      La valeur par défaut est <literal>2</literal> bits et le maximum
      <literal>4095</literal>. Les paramètres pour les colonnes d'index non
      utilisées sont ignorés.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
  <title>Exemples</title>

  <para>
   Voici un exemple de création d'un index bloom&nbsp;:
  </para>

  <programlisting>
CREATE INDEX bloomidx ON tbloom USING bloom (i1,i2,i3)
       WITH (length=80, col1=2, col2=2, col3=4);
  </programlisting>

  <para>
   L'index est créé avec une longueur de signature de 80 bits, avec les
   attributs i1 et i2 correspondant à 2 bits, et l'attribut i3 à
   4 bits. Nous pourrions avoir omis les informations
   <literal>length</literal>, <literal>col1</literal>, et
   <literal>col2</literal> car elles ont les valeurs par défaut.
  </para>

  <para>
   Voici un exemple plus complet de définition et d'utilisation d'un index
   bloom, ainsi qu'une comparaison avec les index btree équivalents. L'index
   bloom est considérablement plus petit que l'index btree et offre de
   meilleures performances.
  </para>

  <programlisting>
=# CREATE TABLE tbloom AS
   SELECT
     (random() * 1000000)::int as i1,
     (random() * 1000000)::int as i2,
     (random() * 1000000)::int as i3,
     (random() * 1000000)::int as i4,
     (random() * 1000000)::int as i5,
     (random() * 1000000)::int as i6
   FROM
  generate_series(1,10000000);
SELECT 10000000
  </programlisting>

  <para>
   Un parcours séquentiel sur cette grande table prend beaucoup de temps&nbsp;:
   <programlisting>
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 Seq Scan on tbloom  (cost=0.00..2137.14 rows=3 width=24) (actual time=19.059..19.060 rows=0 loops=1)
   Filter: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Filter: 100000
 Planning time: 0.269 ms
 Execution time: 19.077 ms
(5 rows)
   </programlisting>
  </para>

  <para>
   Même avec l'index btree défini, le résultat sera toujours un parcours
   séquentiel&nbsp;:
   <programlisting>
=# CREATE INDEX btreeidx ON tbloom (i1, i2, i3, i4, i5, i6);
CREATE INDEX
=# SELECT pg_size_pretty(pg_relation_size('btreeidx'));
 pg_size_pretty
----------------
 3992 kB
(1 row)
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                              QUERY PLAN
------------------------------------------------------------------------------------------------------
 Seq Scan on tbloom  (cost=0.00..2137.00 rows=2 width=24) (actual time=15.070..15.070 rows=0 loops=1)
   Filter: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Filter: 100000
 Planning time: 0.130 ms
 Execution time: 15.083 ms
   </programlisting>
  </para>

  <para>
   Avoir un index bloom défini sur la table est préférable à un btree pour
   gérer ce type de recherche&nbsp;:
   <programlisting>
=# CREATE INDEX bloomidx ON tbloom USING bloom (i1, i2, i3, i4, i5, i6);
CREATE INDEX
=# SELECT pg_size_pretty(pg_relation_size('bloomidx'));
 pg_size_pretty
----------------
 1584 kB
(1 row)
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                                     QUERY PLAN
---------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on tbloom  (cost=1792.00..1799.69 rows=2 width=24) (actual time=0.456..0.456 rows=0 loops=1)
   Recheck Cond: ((i2 = 898732) AND (i5 = 123451))
   Rows Removed by Index Recheck: 29
   Heap Blocks: exact=27
   -&gt;  Bitmap Index Scan on bloomidx  (cost=0.00..1792.00 rows=2 width=0) (actual time=0.422..0.423 rows=29 loops=1)
         Index Cond: ((i2 = 898732) AND (i5 = 123451))
 Planning time: 0.105 ms
 Execution time: 0.477 ms
(8 rows)
   </programlisting>
  </para>

  <para>
   Le problème principal avec la recherche btree est que btree
   est inefficace quand les critères de recherche ne portent pas
   sur la ou les premières colonne(s) de l'index. Une meilleure stratégie avec les btree
   est de créer un index séparé pour chaque colonne. À ce moment-là,
   l'optimiseur pourra choisir quelque chose comme&nbsp;:
   <programlisting>
=# CREATE INDEX btreeidx1 ON tbloom (i1);
CREATE INDEX
=# CREATE INDEX btreeidx2 ON tbloom (i2);
CREATE INDEX
=# CREATE INDEX btreeidx3 ON tbloom (i3);
CREATE INDEX
=# CREATE INDEX btreeidx4 ON tbloom (i4);
CREATE INDEX
=# CREATE INDEX btreeidx5 ON tbloom (i5);
CREATE INDEX
=# CREATE INDEX btreeidx6 ON tbloom (i6);
CREATE INDEX
=# EXPLAIN ANALYZE SELECT * FROM tbloom WHERE i2 = 898732 AND i5 = 123451;
                                                        QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on tbloom  (cost=24.34..32.03 rows=2 width=24) (actual time=0.029..0.029 rows=0 loops=1)
   Recheck Cond: ((i5 = 123451) AND (i2 = 898732))
   -&gt;  BitmapAnd  (cost=24.34..24.34 rows=2 width=0) (actual time=0.028..0.028 rows=0 loops=1)
         -&gt;  Bitmap Index Scan on btreeidx5  (cost=0.00..12.04 rows=500 width=0) (actual time=0.027..0.027 rows=0 loops=1)
               Index Cond: (i5 = 123451)
         -&gt;  Bitmap Index Scan on btreeidx2  (cost=0.00..12.04 rows=500 width=0) (never executed)
               Index Cond: (i2 = 898732)
 Planning time: 0.389 ms
 Execution time: 0.054 ms
(9 rows)
   </programlisting>
   Bien que cette requête soit bien plus rapide qu'avec n’importe lequel des
   index à une colonne,
   nous payons une pénalité en taille d'index. Chacun des
   index btree mono-colonne occupe 2 Mo, soit un espace total de plus de
   12 Mo, autrement dit huit fois la place utilisée par l'index bloom.
  </para>
 </sect2>

 <sect2>
  <title>Interface de la classe d'opérateur</title>

  <para>
   Une classe d'opérateur pour les index bloom ne requiert qu'une fonction de
   hachage pour le type de données indexé et un opérateur d'égalité pour la
   recherche. Cet exemple définit la classe d'opérateur pour
   le type de données <type>text</type>&nbsp;:
  </para>

  <programlisting>
CREATE OPERATOR CLASS text_ops
DEFAULT FOR TYPE text USING bloom AS
    OPERATOR    1   =(text, text),
    FUNCTION    1   hashtext(text);
  </programlisting>
 </sect2>

 <sect2>
  <title>Limitations</title>
  <para>

   <itemizedlist>
    <listitem>
     <para>
      Seules les classes d'opérateur pour <type>int4</type> et
      <type>text</type> sont incluses avec le module.
     </para>
    </listitem>

    <listitem>
     <para>
      Seul l'opérateur <literal>=</literal> est supporté pour la recherche. Mais il est
      possible d'ajouter le support des tableaux avec les opérations union et intersection
      dans le futur.
     </para>
    </listitem>

    <listitem>
     <para>
      La méthode d'accès <literal>bloom</literal> ne permet pas d'avoir des
      index <literal>UNIQUE</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      La méthode d'accès <literal>bloom</literal> ne permet pas de rechercher
      des valeurs <literal>NULL</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      La méthode d'accès <literal>bloom</literal> n'accepte pas les index
      <literal>UNIQUE</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      La méthode d'accès <literal>bloom</literal> ne supporte pas la
      recherche des valeurs <literal>NULL</literal>.
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Teodor Sigaev <email>teodor@postgrespro.ru</email>,
   Postgres Professional, Moscou, Russie
  </para>

  <para>
   Alexander Korotkov <email>a.korotkov@postgrespro.ru</email>,
   Postgres Professional, Moscou, Russie
  </para>

  <para>
   Oleg Bartunov <email>obartunov@postgrespro.ru</email>,
   Postgres Professional, Moscou, Russie
  </para>
 </sect2>

</sect1>
