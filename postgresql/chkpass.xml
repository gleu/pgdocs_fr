<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="chkpass" xreflabel="chkpass">
 <title>chkpass</title>

 <indexterm zone="chkpass">
  <primary>chkpass</primary>
 </indexterm>

 <para>
  Ce module implante le type de données <type>chkpass</type>, conçu pour
  stocker des mots de passe chiffrés. Chaque mot de passe est automatiquement
  converti dans sa forme chiffrée et est stocké ainsi. Pour comparer un mot
  de passe, comparez-le simplement à un mot de passe en clair, la
  fonction de comparaison le chiffrera automatiquement avant la comparaison.
 </para>

 <para>
  Des dispositions dans le code prévoient de rapporter une erreur si le mot de
  passe s'avère facilement trouvable. Néanmoins, ce code pour le moment n'est
  qu'une coquille vide qui ne ne fait rien.
 </para>

 <para>
  Une chaîne précédée d'un signe deux-points est considérée
  comme un mot de passe déjà chiffré et est stockée sans autre chiffrement. Ceci permet la saisie
  de mots de passe déjà chiffrés.
 </para>

 <para>
  En sortie, le signe deux-points est ajouté en préfixe. Cela rend possible
  la sauvegarde et la restauration des mots de passe sans les chiffrer de
  nouveau. Pour obtenir le mot de passe (chiffré) sans le signe deux-points,
  utilisez la fonction <function>raw()</function>. Ceci permet d'utiliser
  le type avec d'autres choses comme, par exemple, le module
  <literal>Auth_PostgreSQL</literal> d'Apache.
 </para>

 <para>
  Le chiffrement utilise la fonction <function>crypt()</function> du standard
  Unix. Il souffre donc
  des limitations habituelles de cette fonction, notamment le fait que seuls
  les huit premiers caractères d'un mot de passe sont pris en compte.
 </para>

 <para>
  Le type de données <type>chkpass</type> n'est pas indexable.
  <!--
  Je ne me suis pas soucié de rendre ce type indexable. Je doute que
  quiconque ait jamais besoin de trier des mots de passe chiffrés.
  -->
 </para>

 <para>
  Exemple d'utilisation&nbsp;:
 </para>

 <programlisting>
test=# create table test (p chkpass);
CREATE TABLE
test=# insert into test values ('hello');
INSERT 0 1
test=# select * from test;
       p
----------------
 :dVGkpXdOrE3ko
(1 row)

test=# select raw(p) from test;
      raw
---------------
 dVGkpXdOrE3ko
(1 row)

test=# select p = 'hello' from test;
 ?column?
----------
 t
(1 row)

test=# select p = 'goodbye' from test;
 ?column?
----------
 f
(1 row)
 </programlisting>

 <sect2>
  <title>Auteur</title>
  <para>
   D'Arcy J.M. Cain <email>darcy@druid.net</email>
  </para>
 </sect2>
</sect1>
