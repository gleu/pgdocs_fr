<!-- doc/src/sgml/bgworker.sgml -->

<chapter id="bgworker">
 <title>Processus en tâche de fond (background worker)</title>

 <indexterm zone="bgworker">
  <primary>Background workers</primary>
 </indexterm>

 <para>
  PostgreSQL peut être étendu pour lancer du code utilisateur dans des processus
  séparés. Ces processus sont démarrés, arrêtés et supervisés par
  <command>postgres</command>, ce qui leur permet d'avoir un cycle de vie étroitement
  lié au statut du serveur. Ces processus ont des options pour s'attacher à la
  zone de mémoire partagée de <productname>PostgreSQL</productname> et pour se
  connecter aux bases de manière interne&nbsp;; ils peuvent également exécuter de
  multiples transactions séquentiellement, comme n'importe quel processus client
  standard connecté au serveur. De plus, en se liant avec la bibliothèque
  <application>libpq</application>, ils peuvent se connecter au serveur et se comporter
  comme une application cliente standard.
 </para>

 <warning>
  <para>
   Il y a de considérables risques de robustesse et sécurité lorsque l'on utilise
   des processus background worker. En effet, ceux-ci étant écrit en langage
   <literal>C</literal>, ils ont un accès total aux données. Les administrateurs
   désirant activer des modules incluant des processus background worker devraient
   prendre énormément de précautions. Seuls les modules soigneusement testés
   devraient être autorisés à lancer des processus background worker.
  </para>
 </warning>

 <para>
  Les processus en tâche de fond peuvent être initialisés au moment où
  <productname>PostgreSQL</productname> est démarré en incluant le nom du
  module dans <varname>shared_preload_libraries</varname>.  Un module qui
  souhaite fonctionne comme un processus en tâche de fond peut s'enregistrer en
  appelant <function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>
  dans son <function>_PG_init()</function>.  Les processus en tâche de fond
  peuvent également être démarrés après que le système ait démarré et soit en
  fonctionnement en appelant la fonction <function>RegisterDynamicBackgroundWorker(
  <type>BackgroundWorker *worker, BackgroundWorkerHandle **handle</type>)</function>.
  À la différence de <function>RegisterBackgroundWorker</function>, qui ne peut
  être appelée que depuis le postmaster,<function>RegisterDynamicBackgroundWorker</function>
  doit être appelée depuis un processus client standard.
 </para>

 <para>
  La structure <structname>BackgroundWorker</structname> est définie ainsi&nbsp;:
<programlisting>
typedef void (*bgworker_main_type)(Datum main_arg);
typedef struct BackgroundWorker
{
    char        bgw_name[BGW_MAXLEN];
    int         bgw_flags;
    BgWorkerStartTime bgw_start_time;
    int         bgw_restart_time;       /* in seconds, or BGW_NEVER_RESTART */
    bgworker_main_type bgw_main;
    char        bgw_library_name[BGW_MAXLEN];   /* only if bgw_main is NULL */
    char        bgw_function_name[BGW_MAXLEN];  /* only if bgw_main is NULL */
    Datum       bgw_main_arg;
    int         bgw_notify_pid;
} BackgroundWorker;
</programlisting>
  </para>

  <para>
   <structfield>bgw_name</structfield> est une chaîne de caractères à utiliser
   dans les messages de trace, liste de processus et autres listes similaires.
  </para>

  <para>
   <structfield>bgw_flags</structfield> est un masque de bit OR indiquant les
   capacités que veut le module. Les valeurs possibles sont
   <literal>BGWORKER_SHMEM_ACCESS</literal> (demandant un accès à la mémoire partagée)
   et <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> (demandant la capacité
   d'établir une connexion à la base, grâce à laquelle il pourra exécuter des
   transactions et requêtes ultérieurement). Un processus en tâche de fond
   utilisant <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> pour se
   connecter à une base de données doit aussi attacher de la mémoire partagée
   en utilisant <literal>BGWORKER_SHMEM_ACCESS</literal>. Dans le cas contraire,
   le démarrage de la tâche de fond échouera.
  </para>

  <para>
   <structfield>bgw_start_time</structfield> spécifie l'état du serveur dans lequel
   <command>postgres</command> devrait démarrer le processus&nbsp;; les valeurs possibles
   sont <literal>BgWorkerStart_PostmasterStart</literal> (démarrer dès que
   <command>postgres</command> lui-même a fini sa propre initialisation&nbsp;;
   les processus réclamant celà ne sont pas éligibles à une connexion à la base de données),
   <literal>BgWorkerStart_ConsistentState</literal> (démarrer dès qu'un état cohérent
   a été atteint sur un serveur esclave en lecture seule, permettant aux processus de se
   connecter aux bases et d'exécuter des requêtes en lecture seule), et
   <literal>BgWorkerStart_RecoveryFinished</literal> (démarrer dès que le système
   est entré dans un état de lecture-écriture normal). Notez que les deux dernières
   valeurs sont équivalentes sur un serveur qui n'est pas un esclave en lecture seule.
   Notez également que ces valeurs indiquent uniquement quand les processus doivent
   être démarrés&nbsp;; ils ne s'arrêtent pas quand un état différent est atteint.
  </para>

  <para>
   <structfield>bgw_restart_time</structfield> est un intervalle, en secondes,
   que <command>postgres</command> doit attendre avant de redémarrer un
   processus, si celui-ci a subi un arrêt brutal. Cet intervalle peut être une valeur
   positive ou <literal>BGW_NEVER_RESTART</literal>, indiquant de ne pas redémarrer
   le processus suite à un arrêt brutal.
  </para>

  <para>
   <structfield>bgw_main</structfield> est un pointeur vers la fonction à lancer
   quand le processus est démarré. Cette fonction doit prendre un unique argument
   de type <type>Datum</type> et retourner <type>void</type>.
   <structfield>bgw_main_arg</structfield> lui sera passé comme unique argument.
   Notez que la variable globale <literal>MyBgworkerEntry</literal> pointe vers
   une copie de la structure <structname>BackgroundWorker</structname> passée
   lors de l'enregistrement. <structfield>bgw_main</structfield> peut valoir
   NULL; dans ce cas, <structfield>bgw_library_name</structfield> et
   <structfield>bgw_function_name</structfield> seront utilisés pour déterminer
   le point d'entrée.  Cela est utile pour les processus en tâche de font
   lancés après le démarrage du postmaster, où le postmaster n'a pas les
   bibliothèques nécessaires chargées.
  </para>

  <para>
   <structfield>bgw_library_name</structfield> est le nom d'une bibliothèque
   dans laquelle le point d'entrée initial pour le processus en tâche de fond
   devrait être recherché. Il est ignoré à moins que
   It is ignored unless <structfield>bgw_main</structfield> ne vaille NULL.
   Mais si <structfield>bgw_main</structfield> vaut NULL, alors cette
   bibliothèque sera chargée dynamiquement par le processus en tâche de fond et
   <structfield>bgw_function_name</structfield> sera utilisé pour identifier la
   fonction à appeler.
  </para>

  <para>
   <structfield>bgw_function_name</structfield> est le nom d'une fonction dans
   une bibliothèque chargée dynamiquement qui devrait être utilisée comme point
   d'entrée initial pour un nouveau processus en tâche de fond.
   Il est ignoré à moins que <structfield>bgw_main</structfield> ne vaille NULL.
  </para>

  <para>
   <structfield>bgw_notify_pid</structfield> est le PID d'un processus client
   PostgreSQL auquel le postmaster devrait envoyer un signal <literal>SIGUSR1</literal>
   quand le processus est démarré ou quitte.  Il devrait valoir 0 pour les
   processus en tâche de fond enregistrés lors du démarrage du postmaster, ou
   quand le processus client enregistrant le processus en tâche de fond ne
   souhaite pas attendre que le processus en tâche de fond ne démarre.  Sinon,
   il devrait être initialisé à <literal>MyProcPid</literal>.
  </para>

  <para>Une fois démarré, le processus peut se connecter à une base en appelant
   <function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function>.
   Cela autorise le processus à exécuter des transactions et des requêtes en
   utilisant l'interface <literal>SPI</literal>. Si <varname>dbname</varname> vaut
   NULL, la session n'est pas connectée à une base en particulier, mais les
   catalogues partagés peuvent être accédés. Si <varname>username</varname> vaut
   NULL, le processus sera démarré avec le super utilisateur créé durant
   <command>initdb</command>.
   BackgroundWorkerInitializeConnection ne peut être appelé qu'une fois par
   processus background, il n'est donc pas possible de changer de base de données.
  </para>

  <para>
   Les signaux sont initialement bloqués jusqu'à ce que le contrôle atteigne
   la fonction <structfield>bgw_main</structfield>, et doivent être débloqués
   par elle&nbsp;; cela permet une personnalisation des
   gestionnaires de signaux du processus, si nécessaire. Les signaux peuvent
   être débloqués dans le nouveau processus en appellant
   <function>BackgroundWorkerUnblockSignals</function> et bloqués en appelant
   <function>BackgroundWorkerBlockSignals</function>.
  </para>

  <para>
   Si <structfield>bgw_restart_time</structfield> pour un processus en tâche de
   fond est configuré à <literal>BGW_NEVER_RESTART</literal>, ou s'il quitte
   avec un code de sortiede 0 ou est terminé par
   <function>TerminateBackgroundWorker</function>, il sera automatiquement
   désenregistré par le postmaster lors de la sortie.  Sinon, il sera redémarré
   après que la période de temps configurée via
   <structfield>bgw_restart_time</structfield>, ou immédiatement si le
   postmaster réinitialise l'instance à cause d'une défaillance d'un processus
   client.  Les processus en tâche de fond qui nécessitent de suspendre leur
   exécution seulement temporairement devrait utiliser un sommeil interruptible
   plutôt que de quitter; Vérifiez
   que le drapeau <literal>WL_POSTMASTER_DEATH</literal> est positionné lors de
   l'appel à cette fonction, et vérifiez le code retour pour une sortie rapide
   dans le cas d'urgence où <command>postgres</command> lui-même se termine.
  </para>

  <para>
   Quand un processus en tâche de fond est enregistré en utilisant la fonction
   <function>RegisterDynamicBackgroundWorker</function>, le processus client
   effectuant cet enregistrement peut obtenir des informations concernant le
   status du processus en tâche de fond.  Les processus clients souhaitant faire
   cela devraient fournir l'adresse d'un <type>BackgroundWorkerHandle *</type>
   comme second argument pour <function>RegisterDynamicBackgroundWorker</function>.
   Si l'enregistrement du processus en tâche de fond est réussi, ce pointeur
   sera initialisé avec un handle opaque qui peut alors être fourni à
   <function>GetBackgroundWorkerPid(<parameter>BackgroundWorkerHandle *</parameter>, <parameter>pid_t *</parameter>)</function> ou
   <function>TerminateBackgroundWorker(<parameter>BackgroundWorkerHandle *</parameter>)</function>.
   <function>GetBackgroundWorker</function> peut être utilisé pour interroger
   le status du processus en tâche de fond&nbsp;: une valeur de retour valant
   <literal>BGWH_NOT_YET_STARTED</literal> indique que le processus en tâche de
   fond n'a pas encore été démarré par le postmaster;
   <literal>BGWH_STOPPED</literal> indique qu'il a été démarré mais n'est plus
   en fonctionnement; et <literal>BGWH_STARTED</literal> indique qu'il est
   actuellement en fonctionnement.  Dans le dernier cas, le PID sera également
   renvoyé via le deuxième argument.
   <function>TerminateBackgroundWorker</function> demande postmaster d'envoyer
   un signal  <literal>SIGTERM</literal> au processus en tâche de fond s'il est
   en train de fonctionner, et de le désenregistrer dès qu'il ne sera plus en
   fonctionnement.
  </para>

  <para>
   Dans certains cas, un processus qui enregistre une processus en tâche de
   fond peut souhaiter attendre le démarrage du processus en tâche de fond.
   Ceci peut être fait en initialisant <structfield>bgw_notify_pid</structfield>
   à <literal>MyProcPid</literal> et en fournissant ensuite le
   <type>BackgroundWorkerHandle *</type> obtenu au moment de l'enregistrement à
   la fonction
   <function>WaitForBackgroundWorkerStartup(<parameter>BackgroundWorkerHandle
   *handle</parameter>, <parameter>pid_t *</parameter>)</function>.
   Cette fonctionne bloquera jusqu'à ce que le postmaster ait tenté de démarrer
   le processus en tâche de fond, ou jusqu'à l'arrêt du postmaster.  Si le
   processus en tâche de fond est en fonctionnement, la valeur retournée sera
   <literal>BGWH_STARTED</literal>, et le PID sera écrit à l'adresse fournie.
   Sinon, la valeur de retour sera <literal>BGWH_STOPPED</literal> ou
   <literal>BGWH_POSTMASTER_DIED</literal>.
  </para>

  <para>
   Le module contrib <filename>worker_spi</filename> contient un exemple
   fonctionnel, qui démontre quelques techniques utiles.
  </para>

  <para>
   Le nombre maximum de processus en tâche de fond enregistré est limité par
   <xref linkend="guc-max-worker-processes"/>.
  </para>
</chapter>
