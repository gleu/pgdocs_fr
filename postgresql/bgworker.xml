<!-- doc/src/sgml/bgworker.sgml -->

<chapter id="bgworker">
 <title>Processus en tâche de fond (background worker)</title>

 <indexterm zone="bgworker">
  <primary>Background workers</primary>
 </indexterm>

 <para>
  PostgreSQL peut être étendu pour lancer du code utilisateur dans des processus
  séparés. Ces processus sont démarrés, arrêtés et supervisés par <command>
  postgres</command>, ce qui leurs permet d'avoir un cycle de vie étoitement
  lié au statut du serveur. Ces processus ont des options pour s'attacher à la
  zone de mémoire partagée de <productname>PostgreSQL</productname> et se
  conneccter aux bases de manière interne; ils peuvent également exécuter de
  multiples transactions séquentiellement, comme n'importe quel processus client
  standard connecté au serveur. De plus, en se liant avec <application>libpq
  </application>, ils peuvent se connecter au serveur et se comporter comme
  une application cliente standard.
 </para>

 <warning>
  <para>
   Il y a de considérables risques de robustesse et sécurité lorsque l'on utilise
   des processus background worker. En effet, ceux-ci étant écrit en langage
   <literal>C</literal>, ils ont un accès total aux données. Les administrateurs
   désirant activer des modules incluant des processus background worker devraient
   prendre énormément de précautions. Seul les modules soigneusement testés
   devraient être autorisés à lancer des processus background worker.
  </para>
 </warning>

 <para>
  Seuls les modules listés dans <varname>shared_preload_library</varname> peuvent
  démarrer des background workers. Un module désirant démarrer un background
  worker doit l'enregistrer en appelant
  <function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>
  dans son <function>_PG_init()</function>.
  La structure <structname>BackgroundWorker</structname> est définie ainsi :
<programlisting>
typedef void (*bgworker_main_type)(void *main_arg);
typedef void (*bgworker_sighdlr_type)(SIGNAL_ARGS);
typedef struct BackgroundWorker
{
    char       *bgw_name;
    int         bgw_flags;
    BgWorkerStartTime bgw_start_time;
    int         bgw_restart_time;       /* in seconds, or BGW_NEVER_RESTART */
    bgworker_main_type  bgw_main;
    void       *bgw_main_arg;
    bgworker_sighdlr_type bgw_sighup;
    bgworker_sighdlr_type bgw_sigterm;
} BackgroundWorker;
</programlisting>
  </para>

  <para>
   <structfield>bgw_name</structfield> est une chaîne de caractères à utiliser
   dans les messages de log, listings de processus et autres similaires.
  </para>

  <para>
   <structfield>bgw_flags</structfield> est un masque de bit OR indiquant les
   capacités que veut le module. Les valeurs possibles sont
   <literal>BGWORKER_SHMEM_ACCESS</literal> (demandant un accès à la mémoire partagée)
   et <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> (demandant la capacité
   d'établir une connexion à la base, grâce à laquelle il pourra exécuter des
   transactions et requêtes ultérieurement).
  </para>

  <para>
   <structfield>bgw_start_time</structfield> spécifie l'état du serveur dans lequel
   <command>postgres</command> devrait démarrer le processus; les valeurs possibles
   sont <literal>BgWorkerStart_PostmasterStart</literal> (démarrer dès que
   <command>postgres</command> lui-même a fini sa propre initialisation;
   les processus réclamant celà ne sont pas éligibles à une connexion à la base de données),
   <literal>BgWorkerStart_ConsistentState</literal> (démarrer dès qu'un état consistant
   a été atteint sur un serveur esclave en lecture seule, permettant aux processus de se
   connecter aux bases et d'exécuter des requêtes en lecture seule), et
   <literal>BgWorkerStart_RecoveryFinished</literal> (démarrer dès que le système
   est entré dans un état de lecture-écriture normal). Notez que les deux dernières
   valeurs sont équivalentes sur un serveur qui n'est pas un esclave en lecture seule.
   Notez également que ces valeurs indiquent uniquement quand les processus doivent
   être démarrés; ils ne s'arrêtent pas quand un état différent est atteint.
  </para>

  <para>
   <structfield>bgw_restart_time</structfield> est un intervalle, en secondes,
   que <command>postgres</command> doit attendre avant de redémarrer un
   processus, si celui-ci a subi un arrêt brutal. Cet intervalle peut être une valeur
   positive ou <literal>BGW_NEVER_RESTART</literal>, indiquant de ne pas redémarrer
   le processus suite à un arrêt brutal.
  </para>

  <para>
   <structfield>bgw_main</structfield> est un pointeur vers la fonction à lancer
   quand le processus est démarré. Cette fonction doit prendre un unique argument
   de type <type>void *</type> et retourner <type>void</type>.
   <structfield>bgw_main_arg</structfield> lui sera passé comme unique argument.
   Notez que la variable globale <literal>MyBgworkerEntry</literal> pointe vers
   une copie de la structure <structname>BackgroundWorker</structname> passée
   lors de l'enregistrement.
  </para>

  <para>
   <structfield>bgw_sighup</structfield> et <structfield>bgw_sigterm</structfield> sont
   des pointeurs vers des fonctions qui seront installées comme gestionnaires de
   signal pour les nouveaux processus. Si <structfield>bgw_sighup</structfield>
   vaut NULL, alors <literal>SIG_IGN</literal> est utilisé; si <structfield>
   bgw_sigterm</structfield> vaut NULL, un gestionnaire est installé qui terminera
   le processus après avoir tracé un message adéquat.
  </para>

  <para>Une fois démarré, le processus peut se connecter à une base en appelant
   <function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function>.
   Cela autorise le processus à exécuter des transactions et des requêtes en
   utilisant l'interface <literal>SPI</literal>. Si <varname>dbname</varname> vaut
   NULL, la session n'est pas connectée à une base en particulier, mais les
   catalogues partagés peuvent être accédés. Si <varname>username</varname> vaut
   NULL, le processus sera démarré avec le super utilisateur créé durant
   <command>initdb</command>.
   BackgroundWorkerInitializeConnection ne peut être appelé qu'une fois par
   processus background, il n'est donc pas possible de changer de base de données.

  </para>

  <para>
   Les signaux sont initialement bloqués jusqu'à ce que le contrôle atteigne
   la fonction <structfield>bgw_main</structfield>, et doivent être débloqués
   par elle; cela permet une personnalisation ultérieures des
   gestionnaires de signaux du processus, si nécessaire. Les signaux peuvent
   être débloqués dans le nouveau processus en appellant
   <function>BackgroundWorkerUnblockSignals</function> et bloqués en appelan
   <function>BackgroundWorkerBlockSignals</function>.
  </para>

  <para>
   Les background workers devraient tourner continuellement; s'ils terminent
   proprement, <command>postgres</command> les redémarrera immédiatement.
   Essayez d'utiliser des pauses interruptibles quand ils n'ont rien à faire;
   cela peut être effectué en appelant <function>WaitLatch()</function>. Vérifiez
   que le drapeau <literal>WL_POSTMASTER_DEATH</literal> est positionné lors de
   l'appel à cette fonction, et vérifiez le code retour pour une sortie rapide
   dans le cas d'urgence où <command>postgres</command> lui-même se termine.
  </para>

  <para>
   Le module contrib <filename>worker_spi</filename> contient un exemple
   fonctionnel, qui démontre quelques techniques utiles.
  </para>
</chapter>
