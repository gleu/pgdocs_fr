<?xml version="1.0" encoding="UTF-8"?>
<chapter id="installation">
 <title>Procédure d'installation depuis le code source</title>

 <indexterm zone="installation">
  <primary>installation</primary>
 </indexterm>

 <!-- See also the version of this text in standalone-install.xml -->
 <para>
  Ce chapitre décrit l'installation de <productname>PostgreSQL</productname>
  à partir du code source. Si vous installez un paquet fourni par
  une distribution, comme un paquet RPM ou Debian, ignorez ce chapitre,
  et allez lire les instructions du mainteneur du paquet.
 </para>

 <para>
  Si vous compilez <productname>PostgreSQL</productname> pour Microsoft
  Windows, continuez la lecture de ce chapitre si vous avez pour but
  d'utiliser MinGW ou Cygwin&nbsp;; par contre, si vous voulez utiliser
  <productname>Visual C++</productname> de Microsoft, lisez à la place
  <xref linkend="install-windows"/>.
 </para>

 <sect1 id="install-short">
  <title>Version courte</title>

  <para>
   <synopsis>./configure
make
su
make install
adduser postgres
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test</synopsis>
   Le reste du chapitre est la version longue.
  </para>
 </sect1>

 <sect1 id="install-requirements">
  <title>Prérequis</title>

  <para>
   En général, les plateformes Unix modernes sont capables
   d'exécuter <productname>PostgreSQL</productname>.
   Les plateformes sur lesquelles des tests ont été effectués sont décrites
   dans la <xref linkend="supported-platforms"/> ci-après.
  </para>

  <para>
   Les logiciels suivants sont nécessaires pour compiler
   <productname>PostgreSQL</productname>&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

      <acronym>GNU</acronym> <application>make</application> version 3.80 (ou
      une version plus récente) est nécessaire&nbsp;; les autres programmes
      <application>make</application> ou les versions plus anciennes de
      <acronym>GNU</acronym> <application>make</application> <emphasis>ne</emphasis>
      fonctionnent <emphasis>pas</emphasis>.
      (<acronym>GNU</acronym> <application>make</application> est parfois installé sous le nom
      <filename>gmake</filename>). Pour
      connaître la version utilisée, saisir
<screen><userinput>make --version</userinput></screen>
     </para>
    </listitem>

    <listitem>
     <para>
      Il est nécessaire d'avoir un compilateur C
      <acronym>ISO</acronym>/<acronym>ANSI</acronym> (au minimum compatible
      avec C99). Une version récente de
      <productname>GCC</productname> est recommandée, mais
      <productname>PostgreSQL</productname> est connu pour compiler avec de
      nombreux compilateurs de différents vendeurs.
     </para>
    </listitem>

    <listitem>
     <para>
      <application>tar</application> est requis pour déballer la distribution
      des sources, associé à <application>gzip</application> ou
      <application>bzip2</application>.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>

      La bibliothèque <acronym>GNU</acronym> <productname>Readline</productname> est
      utilisée par défaut. Elle permet à <application>psql</application>
      (l'interpréteur de ligne de commandes SQL de PostgreSQL) de se souvenir de
      chaque commande saisie, et permet d'utiliser les flèches du clavier
      pour rappeler et éditer les commandes précédentes. C'est très
      pratique et fortement recommandé.
      Si vous n'en voulez pas, vous devrez renseigner l'option
      <option>--without-readline</option> lors de l'appel à
      la commande <filename>configure</filename>. Une alternative possible est
      l'utilisation de la bibliothèque <filename>libedit</filename> sous licence
      BSD, développée au départ sur <productname>NetBSD</productname>. La
      bibliothèque <filename>libedit</filename> est compatible
      GNU <productname>Readline</productname>, et est utilisée si cette dernière
      n'est pas trouvée, ou si l'option <option>--with-libedit-preferred</option>
      est fournie à <filename>configure</filename>. Si vous utilisez une
      distribution Linux à base de paquets, et que ceux de
      <literal>readline</literal> et <literal>readline-devel</literal> sont
      séparés, il faut impérativement installer les deux.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

      La bibliothèque de compression <productname>zlib</productname> est
      utilisée par défaut. Si vous n'en voulez pas, il faut préciser
      <option>--without-zlib</option> à
      <filename>configure</filename>. Cela a pour conséquence de désactiver le
      support des archives compressées dans <application>pg_dump</application> et
      <application>pg_restore</application>.
     </para>
    </listitem>

   </itemizedlist>
  </para>

  <para>
   Les paquets suivants sont optionnels. S'ils ne sont pas obligatoires lors
   d'une compilation par défaut de <productname>PostgreSQL</productname>,
   ils le deviennent lorsque certaines options sont utilisées, comme cela
   est expliqué par la suite.

   <itemizedlist>
    <listitem>
     <para>
      Pour compiler le langage procédural <application>PL/Perl</application>,
      une installation complète de <productname>Perl</productname>,
      comprenant la bibliothèque <filename>libperl</filename> et les
      fichiers d'en-tête est nécessaire.
      La version minimale requise est <productname>Perl</productname> 5.8.3.
     </para>

     <para>
      Comme <application>PL/Perl</application> est une bibliothèque partagée,
      la bibliothèque <indexterm><primary>libperl</primary></indexterm>
      <filename>libperl</filename> doit aussi être partagée sur la plupart des
      plateformes. C'est désormais le choix par défaut dans les versions
      récentes de <productname>Perl</productname>, mais ce ne l'était pas
      dans les versions plus anciennes&nbsp;; dans tous les cas, c'est du ressort de
      celui qui a installé Perl chez vous.
      <filename>configure</filename> échouera si la
      compilation de <application>PL/Perl</application> est sélectionnée, mais
      qu'il ne trouve pas une bibliothèque partagée
      <filename>libperl</filename>.
      Dans ce cas, vous devrez recompiler et
      installer <productname>Perl</productname> manuellement pour être capable
      de compiler <application>PL/Perl</application>. Lors du processus de
      configuration pour <productname>Perl</productname>, demandez une
      bibliothèque partagée.
     </para>

     <para>
      Si vous avez l'intention d'avoir plus qu'une utilisation occasionnelle
      de <application>PL/Perl</application>, vous devez vous assurer que
      l'installation de <productname>Perl</productname> a été faite avec
      l'option <literal>usemultiplicity</literal> activée (<literal>perl
      -V</literal> vous indiquera si c'est le cas).
     </para>
    </listitem>

    <listitem>
     <para>
      Pour compiler le langage de programmation serveur <application>PL/Python</application>,
      il faut que <productname>Python</productname> soit installé avec les
      fichiers d'en-tête et le module <application>distutils</application>. La
      version minimum requise est <productname>Python</productname> 2.6.
      <productname>Python 3</productname> est supporté s'il s'agit d'une
      version 3.1 ou ultérieure&nbsp;; voir la
      <xref linkend="plpython-python23"/>
      lors de l'utilisation de Python 3.
     </para>

     <para>
      Puisque <application>PL/Python</application> doit être une bibliothèque
      partagée, la bibliothèque
      <indexterm><primary>libpython</primary></indexterm>
      <filename>libpython</filename> doit l'être aussi sur la plupart des
      plateformes. Ce n'est pas le cas des installations par défaut de
      <productname>Python</productname> compilées à partir des sources, mais
      une bibliothèque partagée est disponible dans de nombreuses
      distributions de systèmes d'exploitation. <filename>configure</filename>
      échouera si la compilation de <application>PL/Python</application> est
      sélectionnée et qu'il ne peut pas trouver une bibliothèque partagée
      <filename>libpython</filename>.
      Cela peut impliquer que vous deviez
      soit installer des packages supplémentaires, soit recompiler
      (une partie de) votre installation <productname>Python</productname> pour
      fournir cette bibliothèque partagée. Lors de la compilation à partir
      des sources, lancez le <filename>configure</filename> de <productname>Python</productname>
      avec l'option <literal>--enable-shared</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      Pour compiler le langage procédural
      <application>PL/Tcl</application>, <productname>Tcl</productname> doit bien sûr
      être installé. La version minimale requise est <productname>Tcl</productname> 8.4.
     </para>
    </listitem>

    <listitem>
     <para>
      Pour activer le support de langage natif (<acronym>NLS</acronym>), qui
      permet d'afficher les messages d'un programme dans une langue autre que l'anglais,
      une implémentation de l'<acronym>API</acronym>
      <application>Gettext</application> est nécessaire.
      Certains systèmes d'exploitation
      l'intègrent (par exemple, <systemitem class="osname">Linux</systemitem>,
      <systemitem class="osname">NetBSD</systemitem>,
      <systemitem class="osname">Solaris</systemitem>)&nbsp;;
      pour d'autres systèmes, un paquet additionnel peut être téléchargé sur
      <ulink url="http://www.gnu.org/software/gettext/"></ulink>.
      Si vous utilisez l'implémentation <application>Gettext</application> des
      bibliothèques C <acronym>GNU</acronym>, certains utilitaires nécessiteront
      le paquet <productname>GNU Gettext</productname>.
      Il n'est pas nécessaire dans les autres implémentations.
     </para>
    </listitem>

    <listitem>
     <para>
      Vous aurez besoin de <productname>OpenSSL</productname>, si vous voulez
      utiliser du chiffrement pour vos connexions clientes.
      <productname>OpenSSL</productname> est aussi requis pour la génération
      de nombres aléatoires sur les plateformes qui n'ont pas
      <filename>/dev/urandom</filename> (sauf Windows). La version minimale
      requise est la 1.0.1.
     </para>
    </listitem>

    <listitem>
     <para>
      Vous avez besoin de <application>Kerberos</application>,
      <productname>OpenLDAP</productname> ou <application>PAM</application>
      pour bénéficier de l'authentification ou du chiffrement en utilisant ces services.
     </para>
    </listitem>

    <listitem>
     <para>
      Pour compiler la documentation <productname>PostgreSQL</productname>,
      il existe un ensemble de prérequis séparé&nbsp;; voir
      <xref linkend="docguide-toolsets"/>.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Si vous compilez depuis une arborescence <acronym>Git</acronym> et
   non d'un paquet des sources publié, ou pour faire du développement au
   niveau serveur, les paquets suivants seront également nécessaires&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

      GNU <application>Flex</application> et <application>Bison</application>
      sont nécessaires pour compiler à partir d'un export du Git, ou si vous avez changé
      les fichiers de définition de l'analyseur ou du «&nbsp;scanner&nbsp;».
      Au besoin, les versions nécessaires sont <application>Flex</application> 2.5.31 ou
      ultérieure et <application>Bison</application> 1.875 ou ultérieure.
      D'autres programmes <application>lex</application> et
      <application>yacc</application> ne peuvent pas être utilisés.
     </para>
    </listitem>
    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

      <application>Perl</application> 5.8.3 ou ultérieur est aussi nécessaire pour
      compiler les sources du Git, ou si vous avez changé les fichiers en entrée pour
      n'importe laquelle des étapes qui utilisent des scripts Perl.
      Sous Windows, <application>Perl</application> est
      nécessaire dans tous les cas. <application>Perl</application> est aussi
      nécessaire pour lancer certains jeux de tests.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Si vous avez besoin de récupérer un paquet <acronym>GNU</acronym>, vous le trouverez
   sur votre site miroir local de <acronym>GNU</acronym> (voir
   <ulink url="https://www.gnu.org/order/ftp.html"></ulink> pour la liste) ou sur
   <ulink url="ftp://ftp.gnu.org/gnu/"></ulink>.
  </para>

  <para>
   Il est important de vérifier qu'il y a suffisamment d'espace disque
   disponible. 350&nbsp;Mo sont nécessaires pour la compilation et 60&nbsp;Mo pour le
   répertoire d'installation. Un groupe de bases de données vide nécessite
   40&nbsp;Mo&nbsp;; les bases de données prennent environ cinq fois plus d'espace que des
   fichiers texte contenant les mêmes données. Si des tests de
   régression sont prévus, 300&nbsp;Mo supplémentaires sont temporairement
   nécessaires. Utilisez la commande <command>df</command> pour
   vérifier l'espace disque disponible.
  </para>
 </sect1>

 <sect1 id="install-getsource">
  <title>Obtenir les sources</title>

  <para>
   Les sources de <productname>PostgreSQL</productname> &version; sont
   disponibles dans la section de téléchargement de notre site web&nbsp;:
   <ulink url="https://www.postgresql.org/download/">téléchargement</ulink>.
   Vous devez récupérer un fichier nommé
   <filename>postgresql-&version;.tar.gz</filename> ou
   <filename>postgresql-&version;.tar.bz2</filename>.
   Après avoir obtenu le fichier, on le décompresse&nbsp;:
<screen><userinput>gunzip postgresql-&version;.tar.gz</userinput>
<userinput>tar xf postgresql-&version;.tar</userinput></screen>
   (Utilisez <command>bunzip2</command> à la place de <command>gunzip</command>
   si vous avez le fichier <filename>.bz2</filename>.
   Notez aussi que la plupart des versions modernes de <command>tar</command>
   peuvent décompacter des archives compressées directement&nbsp;;
   vous n'avez alors pas besoin de l'étape avec la commande
   <command>gunzip</command> ou <command>bunzip2</command> séparée. )
   Cela crée un répertoire <filename>postgresql-&version;</filename>
   contenant les sources de <productname>PostgreSQL</productname> dans le répertoire
   courant. Le reste de la procédure d'installation s'effectue depuis ce
   répertoire.
  </para>

  <para>
   Les sources peuvent également être obtenues directement à partir du système de
   contrôle de version. Pour plus d'informations, voir <xref linkend="sourcerepo"/>.
  </para>
 </sect1>

 <sect1 id="install-procedure">
  <title>Procédure d'installation</title>

  <procedure>

  <step id="configure">
   <title>Configuration</title>

   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>

   <para>
    La première étape de la procédure d'installation est de configurer
    l'arborescence système et de choisir les options qui vous intéressent.
    Cela se fait en exécutant le script <filename>configure</filename>. Pour une
    installation par défaut, entrer simplement
<screen><userinput>./configure</userinput></screen>
    Ce script exécutera de nombreux tests afin de déterminer les valeurs
    de certaines variables dépendantes du système, et de détecter certaines
    spécificités de votre système d'exploitation. Il créera divers
    fichiers dans l'arborescence de compilation pour enregistrer ce qui a été
    trouvé.
   </para>

   <para>
    Pour garder une arborescence de compilation séparée de celle des sources,
    <filename>configure</filename> peut être exécuté à
    partir d'un répertoire hors de l'arborescence des sources,
    où la compilation s'effectuera.
    Cette procédure est aussi appelée une compilation de type
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>.
    Voici comment faire&nbsp;:
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<userinput>/path/to/source/tree/configure [les options vont ici]</userinput>
<userinput>make</userinput>
   </screen>
  </para>

  <para>
   La configuration par défaut compilera le serveur et les outils,
   ainsi que toutes les applications clientes et les interfaces ne nécessitant
   qu'un compilateur C.
   Tous les fichiers seront installés par défaut
   sous <filename>/usr/local/pgsql</filename>.
  </para>

  <para>
   Les processus de compilation et d'installation peuvent être personnalisés
   en fournissant une ou plusieurs options de ligne de commande à
   <filename>configure</filename>.
   Généralement, vous allez personnaliser l'endroit de l'installation,
   ou la liste des fonctionnalités optionnelles à compiler.
   <filename>configure</filename> a beaucoup d'options, décrites dans
   <xref linkend="configure-options"/>.
  </para>

  <para>
   <filename>configure</filename> tient aussi compte de certaines
   variables d'environnement, comme décrit dans <xref linkend="configure-envvars"/>.
   Elle offre d'autres moyens de personnaliser la configuration.
  </para>
 </step>

 <step id="build">
  <title>Compilation</title>

  <para>
   Pour démarrer la compilation, entrez l'un de ces ordres&nbsp;:
   <screen>
<userinput>make</userinput>
<userinput>make all</userinput>
   </screen>
   (Rappelez-vous qu'il faut <acronym>GNU</acronym> <application>make</application>.)
   La durée de la compilation sera de quelques minutes, et dépend de votre matériel.
   La dernière ligne affichée doit être&nbsp;:
   <screen>
All of PostgreSQL successfully made. Ready to install.
   </screen>
  </para>

  <para>
   Si vous voulez compiler tout ce qui peut l'être,
   dont la documentation (HTML et pages de manuel)
   et les modules optionnels (<filename>contrib</filename>),
   entrez plutôt&nbsp;:
   <screen>
<userinput>make world</userinput>
   </screen>
   La dernière ligne affichée doit être&nbsp;:
   <screen>
PostgreSQL, contrib, and documentation successfully made. Ready to install.
   </screen>
  </para>

  <para>
   Si vous voulez lancer la compilation depuis un autre makefile
   plutôt que manuellement, vous devez désactiver la variable
   <varname>MAKELEVEL</varname> ou la mettre à zéro, par exemple ainsi&nbsp;:
   <programlisting>
build-postgresql:
        $(MAKE) -C postgresql MAKELEVEL=0 all
   </programlisting>
   L'oublier peut mener à d'étranges messages d'erreur,
   typiquement sur des fichiers d'en-tête manquants.
  </para>
 </step>

 <step>
  <title>Tests de régression</title>

  <indexterm>
   <primary>tests de régression</primary>
  </indexterm>

  <para>
   Si, avant de l'installer, vous voulez tester ce serveur nouvellement compilé,
   vous devez lancer les tests de régression maintenant.
   Il s'agit d'une suite de tests pour vérifier que <productname>PostgreSQL</productname>
   fonctionne sur votre machine de la manière prévue par ses développeurs.
   Entrez&nbsp;:
   <screen>
<userinput>make check</userinput>
   </screen>
   (Cela ne fonctionnera pas en tant que root&nbsp;; faites-le en tant
   qu'utilisateur non privilégié.)
   Voir <xref linkend="regress"/> pour des informations détaillées sur
   l'interprétation des résultats des tests.
   Vous pouvez répéter ces tests n'importe quand par la suite en
   entrant la même commande.
  </para>
 </step>

 <step id="install">
  <title>Installer les fichiers</title>

  <note>
   <para>
    Si vous mettez à jour un système existant, assurez-vous
    de lire
    <xref linkend="upgrading"/>,
    qui contient des instructions sur la mise à jour d'une instance.
   </para>
  </note>

  <para>
   Pour installer <productname>PostgreSQL</productname>, entrez&nbsp;:
   <screen>
<userinput>make install</userinput>
   </screen>
   Cela installera les fichiers dans les répertoires spécifiés dans
   <xref linkend="configure"/>. Assurez-vous que vous avez les
   droits nécessaires pour y écrire.
   Normalement, vous devez faire cela en tant que root.
   Une alternative est de créer les répertoires cibles par avance,
   et de vous arranger pour obtenir les permissions adéquates.
  </para>

  <para>
   Pour installer la documentation (HTML et pages de manuel),
   entrez&nbsp;:
   <screen>
<userinput>make install-docs</userinput>
   </screen>
  </para>

  <para>
   Si vous avez entré <literal>make world</literal> plus haut,
   entrez plutôt&nbsp;:
   <screen>
<userinput>make install-world</userinput>
   </screen>
   Cela va installer aussi la documentation.
  </para>

  <para>
   Vous pouvez aussi utiliser <literal>make install-strip</literal>
   au lieu de <literal>make install</literal> pour débarrasser
   les fichiers exécutables et les bibliothèques de leurs
   informations de débogage lors de l'installation.
   Cela économisera un peu d'espace disque.
   Dans une compilation avec le support du débogage, cette purge
   va supprimer ce support&nbsp;; ce n'est donc à faire que s'il n'y a
   plus besoin de débogage.
   <literal>install-strip</literal> réussit assez bien à économiser de
   l'espace, mais ne sait pas toujours effacer
   le moindre octet inutile d'un exécutable&nbsp;;
   pour récupérer tout l'espace disque possible, vous devrez donc
   terminer manuellement.
  </para>

  <para>
   L'installation standard fournit tous les fichiers d'en-tête nécessaires au
   développement d'applications clientes, comme pour celui côté serveur,
   par exemple pour des fonctions spécifiques ou des types de données codés en C.
   (Avant <productname>PostgreSQL</productname>&nbsp;8.0,
   un <literal>make install-all-headers</literal> séparé était nécessaire pour
   le deuxième cas, mais cette étape a été intégrée dans l'installation standard.)
  </para>

  <formalpara>
   <title>Installation cliente&nbsp;:</title>
   <para>
    Si vous voulez installer uniquement les applications clientes
    et les bibliothèques d'interface, vous pouvez utiliser ces commandes&nbsp;:
    <screen>
<userinput>make -C src/bin install</userinput>
<userinput>make -C src/include install</userinput>
<userinput>make -C src/interfaces install</userinput>
<userinput>make -C doc install</userinput>
    </screen>
    <filename>src/bin</filename> contient quelques binaires
    utilisables uniquement sur le serveur, mais ils sont petits.
   </para>
  </formalpara>
 </step>
</procedure>

<formalpara>
 <title>Désinstallation&nbsp;:</title>
 <para>
  Pour annuler l'installation, utilisez la commande
  <command>make uninstall</command>.
  Cependant, cela ne supprimera pas tous les répertoires qui ont été créés.
 </para>
</formalpara>

<formalpara>
 <title>Nettoyage&nbsp;:</title>

 <para>
  Après l'installation, vous pouvez libérer de l'espace disque en supprimant
  les fichiers compilés de l'arborescence des sources avec la commande
  <command>make clean</command>.
  Cela préservera les fichiers créés par <command>configure</command>,
  pour que vous puissiez tout recompiler plus tard avec <command>make</command>.
  Pour réinitialiser l'arbre des sources dans l'état où il est distribué,
  utilisez <command>make distclean</command>.
  Si vous voulez compiler pour plusieurs plateformes au sein de la même
  arborescence, vous devez le lancer et reconfigurer pour chaque
  plateforme.
  (Une alternative est d'utiliser une arborescence pour chaque plateforme,
  pour qu'elles ne soient pas modifiées.)
 </para>
</formalpara>

<para>
 Si, après compilation, vous découvrez que vos options à <command>configure</command>
 étaient fausses, ou si vous changez quelque chose que <command>configure</command>
 a pris en compte (par exemple, par une mise à jour logicielle),
 il est conseillé de faire <command>make distclean</command> avant de reconfigurer
 et recompiler. Sans cela, vos choix de configuration pourraient ne pas se
 propager à tous les endroits nécessaires.
</para>

<sect2 id="configure-options">
 <title>Options de <filename>configure</filename></title>

 <indexterm zone="configure-options">
  <primary>configure (options)</primary>
 </indexterm>

 <para>
  Les paramètres en ligne de commande à <command>configure</command>
  sont expliqués ci-dessous.
  Cette liste n'est pas exhaustive (utilisez <literal>./configure --help</literal>
  pour en avoir une qui le soit). Les options non évoquées ici sont
  destinées à des utilisations avancées, comme la compilation croisée,
  et figurent dans la documentation standard d'Autoconf.
 </para>

 <sect3 id="configure-options-locations">
  <title>Emplacements de l'installation</title>

  <para>
   Ces options contrôlent où <literal>make install</literal> va poser
   les fichiers.
   L'option <option>--prefix</option> est suffisante dans la plupart des cas.
   Pour des besoins spécifiques, vous pouvez personnaliser les sous-répertoires
   d'installation avec d'autres options décrites dans cette section.
   Attention&nbsp;: changer les emplacements relatifs des différents sous-répertoires
   peut rendre l'installation non déplaçable,  <!--  non-délocalisable ? (non) -->
   c'est-à-dire que vous ne pourrez
   plus la déplacer par la suite.
   (Les emplacements pour <literal>man</literal> et <literal>doc</literal>
   ne sont pas concernés par cette restriction.)
   Pour obtenir des installations déplaçables, vous pouvez utiliser
   l'option <literal>--disable-rpath</literal> décrite plus bas.
  </para>

  <variablelist>
   <varlistentry>
    <term><option>--prefix=<replaceable>PREFIX</replaceable></option></term>
    <listitem>
     <para>
      Installe tous les fichiers dans le répertoire <replaceable>PREFIX</replaceable>
      au lieu du répertoire <filename>/usr/local/pgsql</filename>.
      Les fichiers eux-mêmes seront installés dans divers
      sous-répertoires&nbsp;; aucun fichier ne sera directement installé
      sous <replaceable>PREFIX</replaceable>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--exec-prefix=<replaceable>EXEC-PREFIX</replaceable></option></term>
    <listitem>
     <para>
      Les fichiers qui dépendent de l'architecture peuvent être installés dans
      un répertoire avec un préfixe différent, <replaceable>EXEC-PREFIX</replaceable>,
      différent de celui donné par <replaceable>PREFIX</replaceable>.
      Cela peut être utile pour partager entre plusieurs machines
      les fichiers indépendants de l'architecture.
      S'il est omis, <replaceable>EXEC-PREFIX</replaceable> est égal à
      <replaceable>PREFIX</replaceable>, et les fichiers dépendants seront installés
      sous la même arborescence que les fichiers indépendants de
      l'architecture, ce qui est probablement le but recherché.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--bindir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Indique le répertoire des exécutables. Par défaut, il s'agit de
      <filename><replaceable>EXEC-PREFIX</replaceable>/bin</filename>, ce
      qui signifie <filename>/usr/local/pgsql/bin</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--sysconfdir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Précise le répertoire de divers fichiers de configuration,
      par défaut <filename><replaceable>PREFIX</replaceable>/etc</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--libdir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Précise le répertoire d'installation des bibliothèques et des
      modules chargeables dynamiquement. Par défaut, il s'agit de
      <filename><replaceable>EXEC-PREFIX</replaceable>/lib</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--includedir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Précise le répertoire d'installation des fichiers d'en-tête C et C++. Par défaut, il
      s'agit de <filename><replaceable>PREFIX</replaceable>/include</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--datarootdir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Indique le répertoire racine de différents types de fichiers de données
      en lecture seule. Cela ne sert qu'à paramétrer des valeurs par
      défaut pour certaines des options suivantes. La valeur par défaut est
      <filename><replaceable>PREFIX</replaceable>/share</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--datadir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Indique le répertoire pour les fichiers de données en lecture seule
      utilisés par les programmes installés. La valeur par défaut est
      <filename><replaceable>DATAROOTDIR</replaceable></filename>.
      NB&nbsp;: cela n'a aucun rapport avec l'endroit où les fichiers de base de données
      seront placés.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--localedir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Indique le répertoire pour installer les données de localisation, en
      particulier les fichiers des catalogues de traduction des messages. La
      valeur par défaut est
      <filename><replaceable>DATAROOTDIR</replaceable>/locale</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--mandir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Les pages de manuel fournies avec <productname>PostgreSQL</productname> seront
      installées sous ce répertoire, dans leur sous-répertoire
      <filename>man<replaceable>x</replaceable></filename> respectif.
      Par défaut, il s'agit de <filename><replaceable>DATAROOTDIR</replaceable>/man</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--docdir=<replaceable>RÉPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Configure le répertoire racine pour installer les fichiers de documentation,
      sauf les pages <quote>man</quote>. Ceci ne positionne la valeur par défaut
      que pour les options suivantes. La valeur par défaut pour cette option est
      <filename><replaceable>DATAROOTDIR</replaceable>/doc/postgresql</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--htmldir=<replaceable>RÉPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      La documentation de <productname>PostgreSQL</productname>, formatée en HTML,
      sera installée dans ce répertoire. La valeur par défaut est
      <filename><replaceable>DATAROOTDIR</replaceable></filename>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <note>
   <para>
    Une attention toute particulière a été prise afin de rendre possible
    l'installation de <productname>PostgreSQL</productname> dans des répertoires
    partagés (comme <filename>/usr/local/include</filename>), sans
    interférer avec l'espace de noms du reste du système.
    En premier lieu, le mot <quote><literal>/postgresql</literal></quote>
    est automatiquement ajouté aux répertoires <varname>datadir</varname>,
    <varname>sysconfdir</varname> et <varname>docdir</varname>,
    à moins que le nom du répertoire à partir de la racine ne contienne déjà
    le mot <quote><literal>postgres</literal></quote> ou
    <quote><literal>pgsql</literal></quote>. Par exemple, si
    <filename>/usr/local</filename> est choisi comme préfixe,
    la documentation sera installée dans
    <filename>/usr/local/doc/postgresql</filename>&nbsp;; mais si le
    préfixe est <filename>/opt/postgres</filename>, alors ce sera dans
    <filename>/opt/postgres/doc</filename>. Les fichiers d'en-tête
    C publics pour les interfaces clientes sont installés sous
    <varname>includedir</varname>, et sont indépendants de l'espace
    de noms du système. Les fichiers d'en-tête internes et
    ceux du serveur sont installés dans des répertoires
    privés sous <varname>includedir</varname>.
    Voir la documentation de chaque interface pour savoir comment obtenir
    ces fichiers d'en-tête.
    Enfin, si nécessaire, un répertoire privé sera aussi créé sous
    <varname>libdir</varname>, pour les modules chargeables dynamiquement.
   </para>
  </note>
 </sect3>

 <sect3 id="configure-options-features">
  <title>Fonctionnalités de <productname>PostgreSQL</productname></title>
  <para>
   Les options décrites dans cette section permettent d'ajouter
   diverses fonctionnalités de <productname>PostgreSQL</productname>
   qui ne sont pas compilées par défaut&nbsp;; pour la plupart à cause du
   besoin d'autres logiciels, comme décrit dans
   <xref linkend="install-requirements"/>.
  </para>

  <variablelist>
   <varlistentry>
    <term><option>--enable-nls<optional>=<replaceable>LANGUES</replaceable></optional></option></term>
    <listitem>
     <para>
      Active le support des langues natives
      (<acronym>NLS</acronym>), c'est-à-dire la capacité d'afficher les messages
      d'un programme dans une langue autre que l'anglais.
      <replaceable>LANGUES</replaceable> est une liste optionnelle des codes
      de langue que vous voulez supporter, séparés par une espace&nbsp;; par
      exemple, <literal>--enable-nls='de fr'</literal> (l'intersection entre la
      liste et l'ensemble des langues traduites actuellement sera calculée
      automatiquement). En l'absence de liste, toutes les
      traductions disponibles seront installées.
     </para>

     <para>
      Pour utiliser cette option, une implémentation de
      l'API <application>Gettext</application> est nécessaire.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-perl</option></term>
    <listitem>
     <para>
      Permet la compilation du langage côté serveur <application>PL/Perl</application>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-python</option></term>
    <listitem>
     <para>
      Permet la compilation du langage côté serveur <application>PL/Python</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-tcl</option></term>
    <listitem>
     <para>
      Permet la compilation du langage côté serveur <application>PL/Tcl</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-tclconfig=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Tcl installe le fichier <filename>tclConfig.sh</filename>, qui contient
      des informations de configuration nécessaires pour compiler le
      module d'interfaçage avec Tcl.
      Ce fichier est normalement trouvé automatiquement à un emplacement connu,
      mais pour utiliser une version différente de Tcl, il faut indiquer le
      répertoire où chercher <filename>tclConfig.sh</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-icu</option></term>
    <listitem>
     <para>
      Compiler avec le support de la bibliothèque
      <productname>ICU</productname><indexterm><primary>ICU</primary></indexterm>,
      activant les collations ICU
      <phrase condition="standalone-ignore"> (voir <xref linkend="collation"/>)</phrase>.
      Le paquet <productname>ICU4C</productname> doit être installé.
      Sa version minimum nécessaire est actuellement la 4.2.
     </para>

     <para>
      Par défaut,
      <productname>pkg-config</productname><indexterm><primary>pkg-config</primary></indexterm>
      sera utilisé pour déterminer les options de compilation nécessaires.
      Cela est supporté pour <productname>ICU4C</productname> version 4.6
      et suivantes.
      Pour des versions plus anciennes, ou si <productname>pkg-config</productname>
      n'est pas disponible, les variables <envar>ICU_CFLAGS</envar>
      et <envar>ICU_LIBS</envar> peuvent être fournies à <filename>configure</filename>,
      comme dans cet exemple&nbsp;:
      <programlisting>
./configure ... --with-icu ICU_CFLAGS='-I/some/where/include' ICU_LIBS='-L/some/where/lib -licui18n -licuuc -licudata'
      </programlisting>
      (Si <productname>ICU4C</productname> est dans le chemin par défaut
      du compilateur, vous aurez besoin de préciser des chaînes non vides
      pour éviter l'appel à <productname>pkg-config</productname>,
      par exemple <literal>ICU_CFLAGS=' '</literal>.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-with-llvm">
    <term><option>--with-llvm</option></term>
    <listitem>
     <para>
      Compile avec le support de <acronym>JIT</acronym>, basé sur
      <productname>LLVM</productname>
      <phrase condition="standalone-ignore"> (voir <xref linkend="jit"/>)</phrase>.
      Ceci nécessite l'installation de la bibliothèque <productname>LLVM</productname>.
      Sa version minimale requise est actuellement la 3.9.
     </para>
     <para>
      <command>llvm-config</command><indexterm><primary>llvm-config</primary></indexterm>
      sera utilisé pour trouver les options de compilation nécessaires.
      <command>llvm-config</command>, puis
      <command>llvm-config-$major-$minor</command> pour toutes les versions supportées,
      seront recherchés dans votre <envar>PATH</envar>.
      Au cas où le bon programme n'est pas trouvé, il faut utiliser la variable
      <envar>LLVM_CONFIG</envar> pour spécifier le chemin du bon
      <command>llvm-config</command>. Par exemple&nbsp;:
      <programlisting>
./configure ... --with-llvm LLVM_CONFIG='/path/to/llvm/bin/llvm-config'
      </programlisting>
     </para>

     <para>
      Le support de <productname>LLVM</productname> nécessite un compilateur
      <command>clang</command> compatible (à spécifier, si nécessaire,
      avec la variable d'environnement <envar>CLANG</envar>),
      et un compilateur C++ fonctionnel (à spécifier, si nécessaire,
      avec la variable d'environnement <envar>CXX</envar>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-openssl</option></term>
    <listitem>
     <indexterm>
      <primary>OpenSSL</primary>
      <seealso>SSL</seealso>
     </indexterm>

     <para>
      Compile avec le support pour les connexions <acronym>SSL</acronym>
      (avec chiffrement).
      Le paquet <productname>OpenSSL</productname> doit être
      installé. <filename>configure</filename> vérifiera les fichiers d'en-tête
      et les bibliothèques pour s'assurer que votre
      installation d'<productname>OpenSSL</productname> est suffisante avant de
      continuer.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-gssapi</option></term>
    <listitem>
     <para>
      Compile avec le support de l'authentification GSSAPI.
      Sur beaucoup d'environnements, le système GSSAPI
      (habituellement une partie de l'installation Kerberos)
      n'est pas installé dans un endroit recherché par défaut
      (par exemple <filename>/usr/include</filename> ou
      <filename>/usr/lib</filename>)&nbsp;; vous devez donc
      ajouter aussi les options
      <option>--with-includes</option> et <option>--with-libraries</option>.
      <filename>configure</filename> vérifiera les fichiers d'en-tête
      et les bibliothèques pour s'assurer que votre
      installation de GSSAPI est suffisante avant de continuer.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-ldap</option></term>
    <listitem>
     <para>
      Compile avec le support de
      <acronym>LDAP</acronym><indexterm><primary>LDAP</primary></indexterm>
      pour l'authentification et la recherche des paramètres de connexion
      <phrase condition="standalone-ignore"> (voir <xref linkend="libpq-ldap"/>
       et <xref linkend="auth-ldap"/>)</phrase>.
      Sur Unix, cela requiert l'installation du paquet
      <productname>OpenLDAP</productname>. Sur Windows, la bibliothèque
      <productname>WinLDAP</productname> est utilisée par défaut.
      <filename>configure</filename> vérifiera l'existence des fichiers d'en-tête
      et des bibliothèques nécessaires pour s'assurer que votre installation
      d'<productname>OpenLDAP</productname> est suffisante avant de continuer.

     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-pam</option></term>
    <listitem>
     <para>
      Compile avec le support de
      <acronym>PAM</acronym><indexterm><primary>PAM</primary></indexterm>
      (<foreignphrase>Pluggable Authentication Modules</foreignphrase>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-bsd-auth</option></term>
    <listitem>
     <para>
      Compile avec le support de l'authentification BSD.
      (Le framework BSD Authentication n'est actuellement
      disponible que sur OpenBSD.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-systemd</option></term>
    <listitem>
     <para>
      Compile avec le support du système de notifications
      <application>systemd</application><indexterm><primary>systemd</primary></indexterm>.
      Ceci améliore l'intégration si le serveur est démarré par
      <application>systemd</application>, mais n'a pas d'impact sinon.
      <phrase condition="standalone-ignore">Voir <xref linkend="server-start"/>
       pour plus de détails.</phrase>
      <application>libsystemd</application> et les fichiers d'en-tête associés
      doivent être installés pour utiliser cette option.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-bonjour</option></term>
    <listitem>
     <para>
      Compile avec le support du service de découverte automatique
      Bonjour.
      Cela nécessite le support de Bonjour dans votre système
      d'exploitation. Recommandé sur macOS.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-uuid=<replaceable>LIBRARY</replaceable></option></term>
    <listitem>
     <para>
      Compile le module <xref linkend="uuid-ossp"/> (qui fournit des
      fonctions pour générer des UUID), en utilisant la bibliothèque UUID
      spécifiée.
      <replaceable>LIBRARY</replaceable> doit correspondre à une de ces
      valeurs&nbsp;:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <option>bsd</option> pour utiliser les fonctions UUID trouvées dans
        FreeBSD, NetBSD et d'autres systèmes dérivés de BSD
       </para>
      </listitem>
      <listitem>
       <para>
        <option>e2fs</option> pour utiliser la bibliothèque UUID créée par
        le projet <literal>e2fsprogs</literal>&nbsp;; cette bibliothèque est
        présente sur la plupart des systèmes Linux et sur macOS, et peut
        être obtenue sur d'autres plateformes également
       </para>
      </listitem>
      <listitem>
       <para>
        <option>ossp</option> pour utiliser la <ulink
        url="http://www.ossp.org/pkg/lib/uuid/">bibliothèque OSSP UUID</ulink>
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-ossp-uuid</option></term>
    <listitem>
     <para>
      Équivalent obsolète de <literal>--with-uuid=ossp</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-libxml</option></term>
    <listitem>
     <para>
      Compile avec libxml2, activant ainsi le support de SQL/XML. Une
      version 2.6.23 ou ultérieure de libxml2 est requise pour cette
      fonctionnalité.
     </para>

     <para>
      Pour détecter les options requises pour le compilateur et l'éditeur de
      liens, PostgreSQL va demander à <command>pkg-config</command>, s'il est
      installé et s'il connaît libxml2. Sinon, le programme
      <command>xml2-config</command>, qui est installé par libxml2, sera
      utilisé s'il est trouvé. L'utilisation de <command>pkg-config</command>
      est préférée, parce qu'elle gère mieux les installations
      multiarchitectures.
     </para>

     <para>
      Pour utiliser une installation libxml2 située dans un emplacement
      inhabituel, vous pouvez configurer les variables d'environnement
      relatives à <command>pkg-config</command> (voir sa documentation), ou
      configurer la variable d'environnement <envar>XML2_CONFIG</envar> pour
      qu'elle pointe sur le programme <command>xml2-config</command>
      appartenant à l'installation libxml2, ou configurer les variables
      <envar>XML2_CFLAGS</envar> et <envar>XML2_LIBS</envar>. (Si
      <command>pkg-config</command> est installé, alors, pour surcharger son
      idée de l'emplacement de libxml2, vous devez renseigner soit
      <envar>XML2_CONFIG</envar>, soit <envar>XML2_CFLAGS</envar> et
      <envar>XML2_LIBS</envar>, avec des chaînes non vides.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-libxslt</option></term>
    <listitem>
     <para>
      Compile avec libxslt, activant le module
      <xref linkend="xml2"/> pour opérer des transformations XSL sur du XML.
      <option>--with-libxml</option> doit être spécifié aussi.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect3>

 <sect3 id="configure-options-anti-features">
  <title>Anti-Fonctionnalités</title>

  <para>
   Les options décrites dans cette section permettent de désactiver
   certaines fonctionnalités de <productname>PostgreSQL</productname>
   compilées par défaut, mais que vous pouvez désactiver si ne sont pas
   disponibles un logiciel ou des fonctionnalités système nécessaires.
   L'utilisation de ces options n'est pas recommandée si ce n'est pas
   vraiment nécessaire.
  </para>

  <variablelist>
   <varlistentry>
    <term><option>--without-readline</option></term>
    <listitem>
     <para>
      Empêche l'utilisation de la bibliothèque <application>Readline</application>
      (et <application>libedit</application> par la même occasion).
      Cette option désactive l'édition de la ligne de commande et l'historique dans
      <application>psql</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-libedit-preferred</option></term>
    <listitem>
     <para>
      Favorise l'utilisation de la bibliothèque <application>libedit</application>
      (licence BSD). Cette option n'est importante que si vous avez les deux
      librairies installées&nbsp;; le défaut dans ce cas est d'utiliser
      <application>Readline</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--without-zlib</option></term>
    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>
      Empêche l'utilisation de la bibliothèque <application>Zlib</application>.
      Cela désactive le support des archives compressées dans
      <application>pg_dump</application> et <application>pg_restore</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--disable-spinlocks</option></term>
    <listitem>
     <para>
      Autorise le succès de la compilation même si
      <productname>PostgreSQL</productname> n'a
      pas le support des spinlocks pour le CPU de la plateforme. Ce manque de support
      entraînera des performances très faibles&nbsp;; du coup, cette option
      ne devra être utilisée que si la compilation échoue et vous informe
      du manque de support des spinlocks sur votre plateforme. Si cette option
      est nécessaire pour y compiler <productname>PostgreSQL</productname>,
      merci de rapporter le problème à ses développeurs.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--disable-atomics</option></term>
    <listitem>
     <para>
      Désactive l'utilisation des opérations atomiques sur le CPU.
      Cette option ne fait rien sur les plateformes qui n'ont pas
      ces opérations. Sur celles qui l'ont, cela entraînera de
      mauvaises performances. Cette option n'est utile que pour le
      débogage ou pour des comparatifs de performance.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--disable-thread-safety</option></term>
    <listitem>
     <para>
      Désactive la sécurité des threads pour les bibliothèques clients. Ceci
      interdit aux threads concurrents dans les programmes
      <application>libpq</application> et <application>ECPG</application>
      de contrôler en toute sécurité leurs pointeurs de connexion privés.
      N'utiliser que sur les plateformes avec un support des threads
      défaillant.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect3>

 <sect3 id="configure-options-build-process">
  <title>Détails du processus de compilation</title>

  <variablelist>
   <varlistentry>
    <term><option>--with-includes=<replaceable>RÉPERTOIRES</replaceable></option></term>
    <listitem>
     <para>
      <replaceable>RÉPERTOIRES</replaceable> est une liste de répertoires,
      séparés par le caractère deux points (:), qui seront ajoutés à la liste de ceux
      où le compilateur recherche des fichiers d'en-tête.
      Si vous avez des paquets optionnels (comme
      GNU <application>Readline</application>) installés dans un
      emplacement non conventionnel, vous devez utiliser cette option,
      et probablement aussi l'option correspondante
      <option>--with-libraries</option>.
     </para>
     <para>
      Exemple&nbsp;: <literal>--with-includes=/opt/gnu/include:/usr/sup/include</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-libraries=<replaceable>RÉPERTOIRES</replaceable></option></term>
    <listitem>
     <para>
      <replaceable>RÉPERTOIRES</replaceable> est une liste de répertoires,
      séparés par le caractère deux points (:),
      où chercher des bibliothèques de fonctions.
      Si vous avez des paquets installés dans des
      emplacements non conventionnels, vous devez utiliser cette option
      (et probablement aussi l'option correspondante
      <option>--with-includess</option>).
     </para>
     <para>
      Exemple&nbsp;: <literal>--with-libraries=/opt/gnu/lib:/usr/sup/lib</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-system-tzdata=<replaceable>RÉPERTOIRE</replaceable></option></term>

    <listitem>

     <indexterm>
      <primary>données de fuseau horaire</primary>
     </indexterm>

     <para>
      <productname>PostgreSQL</productname> inclut sa propre base de données
      des fuseaux horaires, nécessaire pour les opérations sur les dates et
      les heures. Cette base de données est en fait compatible avec la base
      de fuseaux horaires IANA fournie par de nombreux
      systèmes d'exploitation comme FreeBSD, Linux et Solaris, donc il semble
      redondant de l'installer une nouvelle fois. Quand cette option est
      utilisée, la base des fuseaux horaires fournie par le système, dans
      <replaceable>RÉPERTOIRE</replaceable>, est utilisée à la place de celle
      incluse dans la distribution des sources de PostgreSQL.
      <replaceable>RÉPERTOIRE</replaceable> doit être indiqué avec un chemin
      absolu. <filename>/usr/share/zoneinfo</filename> est un répertoire
      courant sur certains systèmes d'exploitation. Notez que la routine
      d'installation ne détectera pas les données de fuseau horaire différentes
      ou erronées. Si vous utilisez cette option, il est conseillé de
      lancer les tests de régression pour vérifier que les données de fuseau
      horaire que vous pointez fonctionnent correctement avec
      <productname>PostgreSQL</productname>.
     </para>

     <indexterm><primary>compilation croisée</primary></indexterm>

     <para>
      Cette option est surtout destinée aux distributeurs de paquets binaires,
      qui connaissent bien leur système d'exploitation.
      Le principal avantage de cette option est que le paquet de PostgreSQL
      n'aura pas besoin de mise à jour à chaque changement des règles des fuseaux
      horaires. Un autre avantage est que PostgreSQL peut être
      cross-compilé<indexterm><primary>compilation croisée</primary></indexterm>
      plus simplement si les fichiers des fuseaux horaires n'ont pas besoin
      d'être construits lors de l'installation.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-extra-version=<replaceable>CHAÎNE</replaceable></option></term>
    <listitem>
     <para>
      Ajoute <replaceable>CHAÎNE</replaceable> au numéro de version de PostgreSQL.
      Par exemple, vous pouvez utiliser cela pour marquer des binaires compilés
      depuis des snapshots Git, ou contenant des patchs, avec une chaîne
      supplémentaire, comme un identifiant <command>git describe</command>
      ou un numéro de version de distribution du paquet.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--disable-rpath</option></term>
    <listitem>
     <para>
      N'indique pas aux exécutables de <productname>PostgreSQL</productname>
      qu'ils doivent chercher les bibliothèques partagées dans le
      répertoire des bibliothèques de l'installation
      (voir <option>--libdir</option>).
      Sur la plupart des plateformes, cette indication utilise un
      chemin absolu vers le répertoire des bibliothèques,
      et sera inutile si vous déplacez l'installation plus tard.
      Cependant, vous devrez alors fournir aux exécutables
      un autre moyen pour trouver les bibliothèques partagées.
      Typiquement, cela implique de configurer l'éditeur de liens
      du système d'exploitation pour les rechercher&nbsp;;
      voir <xref linkend="install-post-shlibs"/> pour plus de détails.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </sect3>

 <sect3 id="configure-options-misc">
  <title>Divers</title>

  <para>
   Il est assez courant, particulièrement pour les compilations de test,
   de modifier le numéro de port avec l'option <option>--with-pgport</option>.
   Les autres options de cette section ne sont recommandées que pour
   les utilisateurs avancés.
  </para>

  <variablelist>

   <varlistentry>
    <term><option>--with-pgport=<replaceable>PORT</replaceable></option></term>
    <listitem>
     <para>
      Positionne <replaceable>PORT</replaceable> comme numéro de port
      pour les serveurs et les clients. Le défaut est 5432.
      Le port peut toujours être changé plus tard&nbsp;; mais, si vous le
      spécifiez ici, serveur et clients auront le même défaut dès la
      compilation, ce qui peut être très pratique.
      D'habitude, la seule bonne raison de sélectionner une autre valeur
      que le défaut est si vous avez l'intention de faire
      tourner plusieurs serveurs <productname>PostgreSQL</productname>
      sur la même machine.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-krb-srvnam=<replaceable>NOM</replaceable></option></term>
    <listitem>
     <para>
      Le nom par défaut du service principal Kerberos utilisé par GSSAPI.
      <literal>postgres</literal> est le défaut.
      D'habitude, il n'y a aucune raison de changer cela, à moins que
      vous ne compiliez pour un environnement Windows&nbsp; auquel cas
      ce doit être, en majuscules, <literal>POSTGRES</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-segsize=<replaceable>SEGSIZE</replaceable></option></term>
    <listitem>
     <para>
      Définit la taille d'un segment (<firstterm>segment size</firstterm>),
      en gigaoctets.
      Au niveau du système d'exploitation, les grandes tables sont divisées
      en plusieurs fichiers, chacun d'une taille égale à la taille d'un segment.
      Cela évite des problèmes avec les limites de taille de fichiers
      qui existent sur beaucoup de plateformes.
      La taille par défaut, 1&nbsp;gigaoctet, est une valeur
      sûre pour toutes les plateformes supportées.
      Si votre système d'exploitation supporte les fichiers de
      grande taille (<quote>largefile</quote>), et la plupart le font, de nos jours,
      vous pouvez utiliser une plus grande taille de segment.
      Ce peut être utile pour réduire le nombre de descripteurs de fichiers
      consommés en travaillant avec de très grandes tables.
      Mais faites attention à ne pas choisir une valeur plus large que ce
      qui est supporté par votre plateforme et les systèmes de fichiers
      que vous voulez utiliser.
      D'autres outils que vous pourriez vouloir utiliser, comme
      <application>tar</application>, peuvent aussi poser des limites
      sur la taille de fichier utilisable.
      Il est recommandé que cette valeur soit une puissance de 2,
      même si ce n'est pas absolument nécessaire.
      Notez que changer cette valeur casse la compatibilité entre bases
      au niveau fichier, ce qui veut dire que vous ne pouvez pas utiliser
      <command>pg_upgrade</command> pour mettre à jour vers une
      version compilée avec une taille de segment différente.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-blocksize=<replaceable>TAILLEBLOC</replaceable></option></term>
    <listitem>
     <para>
      Définit la taille de bloc (<firstterm>block size</firstterm>), en kilooctets.
      C'est l'unité de stockage et d'entrée-sortie dans les tables.
      Le défaut, 8&nbsp;kilooctets, est adéquat pour la plupart des situations&nbsp;;
      mais d'autres valeurs peuvent être utiles dans certains cas.
      La valeur peut être une puissance de 2 entre 1 et 32 (kilooctets).
      Notez que changer cette valeur casse la compatibilité entre bases
      au niveau fichier, ce qui veut dire que vous ne pouvez pas utiliser
      <command>pg_upgrade</command> pour mettre à jour vers une
      version compilée avec une taille de bloc différente.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--with-wal-blocksize=<replaceable>TAILLEBLOC</replaceable></option></term>
    <listitem>
     <para>
      Définit la taille de bloc dans les journaux de transaction
      (<firstterm>WAL block size</firstterm>), en kilooctets.
      C'est l'unité de stockage et d'entrée-sortie en leur sein.
      Le défaut, 8&nbsp;kilooctets, convient pour la plupart des situations&nbsp;;
      mais d'autres valeurs peuvent être utiles dans certains cas.
      La valeur doit être une puissance de 2 entre 1 et 64 (kilooctets).
      Notez que changer cette valeur casse la compatibilité entre bases
      au niveau fichier, ce qui veut dire que vous ne pouvez pas utiliser
      <command>pg_upgrade</command> pour mettre à jour vers une
      version compilée avec une taille de bloc de WAL différente.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </sect3>

 <sect3 id="configure-options-devel">
  <title>Options pour les développeurs</title>

  <para>
   La plupart des options de cette section n'ont d'intérêt
   que pour développer ou déboguer <productname>PostgreSQL</productname>.
   Elles ne sont pas recommandées pour la production, sauf
   <option>--enable-debug</option>, qui peut être utile pour
   obtenir des rapports de bugs détaillés, dans l'éventualité
   malheureuse où vous rencontriez un bug.
   Sur les plateformes supportant DTrace, <option>--enable-dtrace</option>
   peut raisonnablement être utilisé en production.
  </para>

  <para>
   Pour compiler une installation destinée à développer du code
   au sein du serveur, il est recommandé d'utiliser au moins
   les options <option>--enable-debug</option>
   et <option>--enable-cassert</option>.
  </para>

  <variablelist>

   <varlistentry>
    <term><option>--enable-debug</option></term>
    <listitem>
     <para>
      Compile tous les programmes et bibliothèques
      avec les symboles de débogage.
      Cela signifie que vous pouvez exécuter les programmes au sein d'un
      débogueur pour analyser les problèmes. Cela augmente considérablement
      la taille des exécutables et, avec des compilateurs autres que GCC,
      désactive habituellement les optimisations du compilateur,
      provoquant des ralentissements. Cependant, avoir les symboles en place est
      extrêmement utile pour traiter d'éventuels problèmes. Actuellement, cette
      option n'est recommandée pour les installations en production que
      si vous utilisez GCC. Néanmoins, vous devriez toujours l'utiliser si vous
      développez, ou si vous utilisez une version bêta.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--enable-cassert</option></term>
    <listitem>
     <para>
      Active les vérifications des assertions (<firstterm>assertion</firstterm>)
      dans le serveur, qui testent de nombreuses conditions qui
      <quote>ne peuvent pas arriver</quote>.
      C'est inestimable pour le développement du code, mais les tests
      peuvent ralentir le serveur considérablement.
      Activer ces tests ne va pas améliorer la stabilité de votre
      serveur&nbsp;! Les tests des assertions ne sont pas triés par
      sévérité, et un petit bug relativement inoffensif,
      s'il déclenche un échec d'assertion,
      peut mener à des redémarrages du serveur&nbsp;!
      Cette option n'est pas recommandée en production, mais vous devriez
      l'avoir en développement, ou en utilisant une version bêta.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--enable-tap-tests</option></term>
    <listitem>
     <para>
      Active les tests avec les outils TAP de Perl.
      Cela nécessite une installation de Perl et de son module
      <literal>IPC::Run</literal>.
      <phrase condition="standalone-ignore">Voir <xref linkend="regress-tap"/>
       pour plus d'information.</phrase>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--enable-depend</option></term>
    <listitem>
     <para>
      Active le suivi automatique des dépendances.
      Avec cette option, les makefiles sont conçus pour que
      tous les fichiers objets soient recompilés si n'importe
      quel fichier d'en-tête change.
      C'est utile si vous faites du développement, mais n'est que
      gaspillage si vous ne devez compiler qu'une fois pour
      installer.
      Pour le moment, cette option ne fonctionne qu'avec GCC.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--enable-coverage</option></term>
    <listitem>
     <para>
      Si vous utilisez GCC, tous les programmes et bibliothèques sont compilés avec
      de l'instrumentation de test de couverture de code. Quand ils sont exécutés,
      ils génèrent des fichiers dans le répertoire de compilation avec des
      métriques de couverture de code.
      <phrase condition="standalone-ignore">Voir <xref linkend="regress-coverage"/>
       pour davantage d'informations.</phrase>
      Cette option ne doit être utilisée qu'avec GCC
      et en développement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--enable-profiling</option></term>
    <listitem>
     <para>
      En cas d'utilisation de GCC, tous les programmes et bibliothèques
      sont compilés pour pouvoir être profilés. À la sortie du
      processus serveur, un sous-répertoire sera créé pour contenir le
      fichier <filename>gmon.out</filename> contenant les données de profilage.
      Cette option n'est à utiliser qu'avec GCC et en développement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><option>--enable-dtrace</option></term>
    <listitem>
     <para>
      <indexterm>
       <primary>DTrace</primary>
      </indexterm>
      Compile <productname>PostgreSQL</productname> avec le support de l'outil
      de trace dynamique, DTrace.
      <phrase condition="standalone-ignore">
       Voir <xref linkend="dynamic-trace"/> pour plus d'informations.
      </phrase>
     </para>

     <para>
      Pour pointer vers le programme <command>dtrace</command>, la variable
      d'environnement <envar>DTRACE</envar> peut être configurée. Ce sera
      souvent nécessaire, car <command>dtrace</command> est typiquement
      installé sous <filename>/usr/sbin</filename>, qui peut ne pas être
      dans votre <envar>PATH</envar>.
     </para>

     <para>
      Des options supplémentaires en ligne de commande
      pour <command>dtrace</command>
      peuvent être indiquées dans la variable d'environnement
      <envar>DTRACEFLAGS</envar> pour le programme <command>dtrace</command>.
      Sur Solaris, pour inclure le support de DTrace dans un exécutable 64 bits, ajoutez
      l'option <literal>DTRACEFLAGS="-64"</literal>. Par
      exemple, en utilisant le compilateur GCC&nbsp;:
      <screen>./configure CC='gcc -m64' --enable-dtrace DTRACEFLAGS='-64' ...
      </screen>
      En utilisant le compilateur de Sun&nbsp;:
      <screen>./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' --enable-dtrace DTRACEFLAGS='-64' ...
      </screen>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect3>
</sect2>

<sect2 id="configure-envvars">
 <title>Variables d'environnement de <filename>configure</filename></title>

 <indexterm zone="configure-envvars">
  <primary>configure (variables d'environnement)</primary>
 </indexterm>

 <para>
  En plus des options de ligne de commande ordinaires décrites
  plus haut, <filename>configure</filename> répond à nombre
  de variables d'environnement.
  Vous pouvez les spécifier sur la ligne de commande de
  <filename>configure</filename>, par exemple ainsi&nbsp;:
  <screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</userinput>
  </screen>
  Dans ce cas, une variable d'environnement est peu différente d'une
  option de ligne de commande.
  Vous pouvez aussi les placer au préalable&nbsp;:
  <screen>
<userinput>export CC=/opt/bin/gcc</userinput>
<userinput>export CFLAGS='-O2 -pipe'</userinput>
<userinput>./configure</userinput>
  </screen>
  Cette utilisation peut être pratique parce que les scripts de
  configuration de beaucoup de programmes répondent à ces
  variables de manière similaire.
 </para>

 <para>
  Les plus utilisées de ces variables d'environnement sont
  <envar>CC</envar> et <envar>CFLAGS</envar>.
  Si vous préférez utiliser un compilateur C différent de celui choisi par
  <filename>configure</filename>, positionnez la variable
  <envar>CC</envar> vers le compilateur de votre choix.
  Par défaut, <filename>configure</filename> choisira
  <filename>gcc</filename> s'il est disponible, et sinon celui par
  défaut sur la plateforme (habituellement <filename>cc</filename>).
  De façon similaire, vous pouvez repositionner les options par défaut du
  compilateur à l'aide de la variable <envar>CFLAGS</envar>.
 </para>

 <para>
  Voici une liste des variables importantes qui sont configurables de cette
  façon&nbsp;:
 </para>

 <para>
  <variablelist>
   <varlistentry>
    <term><envar>BISON</envar></term>
    <listitem>
     <para>
      programme Bison
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>CC</envar></term>
    <listitem>
     <para>
      compilateur C
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>CFLAGS</envar></term>
    <listitem>
     <para>
      options à passer au compilateur C
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>CLANG</envar></term>
    <listitem>
     <para>
      chemin vers le programme <command>clang</command> utilisé pour
      optimiser le code source lors de la compilation avec
      <literal>--with-llvm</literal>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>CPP</envar></term>
    <listitem>
     <para>
      préprocesseur C
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>CPPFLAGS</envar></term>
    <listitem>
     <para>
      options à passer au préprocesseur C
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>CXX</envar></term>
    <listitem>
     <para>
      compilateur C++
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>CXXFLAGS</envar></term>
    <listitem>
     <para>
      options à passer au compilateur C++
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>DTRACE</envar></term>
    <listitem>
     <para>
      emplacement du programme <command>dtrace</command>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>DTRACEFLAGS</envar></term>
    <listitem>
     <para>
      options à passer au programme <command>dtrace</command>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>FLEX</envar></term>
    <listitem>
     <para>
      programme Flex
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>LDFLAGS</envar></term>
    <listitem>
     <para>
      options à utiliser lors de l'édition des liens des exécutables et des
      bibliothèques partagées
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>LDFLAGS_EX</envar></term>
    <listitem>
     <para>
      options supplémentaires valables uniquement lors de l'édition des
      liens des exécutables
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>LDFLAGS_SL</envar></term>
    <listitem>
     <para>
      options supplémentaires valables uniquement lors de l'édition des
      liens des bibliothèques partagées
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>LLVM_CONFIG</envar></term>
    <listitem>
     <para>
      programme <command>llvm-config</command> à utiliser pour localiser
      l'installation <productname>LLVM</productname>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>MSGFMT</envar></term>
    <listitem>
     <para>
      programme <command>msgfmt</command> pour le support des langues
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PERL</envar></term>
    <listitem>
     <para>
      programme interpréteur Perl. Il sera utilisé pour déterminer les
      dépendances pour la compilation de PL/Perl. La valeur par défaut est
      <command>perl</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><envar>PYTHON</envar></term>
    <listitem>
     <para>
      chemin complet vers l'interpréteur Python. Il sera utilisé pour
      déterminer les dépendances pour la compilation de PL/Python. De
      plus, si Python 2 ou 3 est spécifié ici (ou implicitement choisi), il
      détermine la variante de PL/Python qui devient disponible.
      <phrase condition="standalone-ignore">Voir <xref linkend="regress-tap"/>
       pour plus d'informations.</phrase>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>

 <para>
  Si vous préférez utiliser un compilateur C différent de ceux listés par
  <filename>configure</filename>, positionnez la variable
  d'environnement <envar>CC</envar> pour qu'elle pointe sur le compilateur de
  votre choix.
  Par défaut, <filename>configure</filename> pointe sur
  <filename>gcc</filename> s'il est disponible, sinon il utilise celui par
  défaut de la plateforme (habituellement <filename>cc</filename>).
  De façon similaire, vous pouvez repositionner les options par défaut du
  compilateur à l'aide de la variable <envar>CFLAGS</envar>.
 </para>

 <para>
  Les variables d'environnement peuvent être indiquées sur la ligne de
  commande <filename>configure</filename>, par exemple&nbsp;:
  <screen><userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</userinput></screen>
    </para>

    <para>
    Voici une liste des variables importantes qui sont configurables de cette
    façon&nbsp;:
    </para>

    <para>
     <variablelist>
      <varlistentry>
       <term><envar>BISON</envar></term>
       <listitem>
        <para>
         programme Bison
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CC</envar></term>
       <listitem>
        <para>
         compilateur C
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CFLAGS</envar></term>
       <listitem>
        <para>
         options à passer au compilateur C
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPP</envar></term>
       <listitem>
        <para>
         préprocesseur C
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPPFLAGS</envar></term>
       <listitem>
        <para>
         options à passer au préprocesseur C
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACE</envar></term>
       <listitem>
        <para>
         emplacement du programme <command>dtrace</command>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACEFLAGS</envar></term>
       <listitem>
        <para>
         options à passer au programme <command>dtrace</command>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>FLEX</envar></term>
       <listitem>
        <para>
         programme Flex
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS</envar></term>
       <listitem>
        <para>
         options à utiliser lors de l'édition des liens des exécutables et des
         bibliothèques partagées
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_EX</envar></term>
       <listitem>
        <para>
         options supplémentaires valables uniquement lors de l'édition des
         liens des exécutables
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_SL</envar></term>
       <listitem>
        <para>
         options supplémentaires valables uniquement lors de l'édition des
         liens des bibliothèques partagées
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>MSGFMT</envar></term>
       <listitem>
        <para>
         programme <command>msgfmt</command> pour le support des langues
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PERL</envar></term>
       <listitem>
        <para>
         chemin complet vers l'interpréteur Perl. Il sera utilisé pour déterminer
         les dépendances pour la compilation de PL/Perl.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PYTHON</envar></term>
       <listitem>
        <para>
         programme interpréteur Python. Il sera utilisé pour
         déterminer les dépendances pour la compilation de PL/Python. De
         plus, si Python 2 ou 3 est spécifié ici (ou implicitement choisi), il
         détermine la variante de PL/Python qui devient disponible. Voir
         <xref linkend="plpython-python23"/> pour plus d'informations.
         Si ce paramètre n'est pas en place, seront testés dans cet ordre&nbsp;:
         <literal>python python3 python2</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>TCLSH</envar></term>
       <listitem>
        <para>
         programme interpréteur Tcl. Il sera utilisé pour déterminer
         les dépendances pour la compilation de PL/Tcl.
         Si ce paramètre n'est pas en place, seront testés dans cet ordre&nbsp;:
         <literal>tclsh tcl tclsh8.6 tclsh86 tclsh8.5 tclsh85
         tclsh8.4 tclsh84</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>XML2_CONFIG</envar></term>
       <listitem>
        <para>
         programme <command>xml2-config</command> utilisé pour trouver
         l'emplacement de l'installation de libxml2.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
     Parfois, ajouter des options de compilation après coup à celles
     choisies par <filename>configure</filename> peut se révéler utile.
     Un exemple parlant
     concerne l'option <option>-Werror</option> de
     <application>gcc</application>, qui ne peut pas être incluse dans la
     variable <envar>CFLAGS</envar> passée à <filename>configure</filename>,
     car elle casserait un grand nombre de tests internes de
     <filename>configure</filename>. Pour ajouter de telles options, incluez-les
     dans la variable d'environnement <envar>COPT</envar> lors de
     l'exécution de <filename>make</filename>. Le contenu de
     <envar>COPT</envar> est ajouté aux variables <envar>CFLAGS</envar> et
     <envar>LDFLAGS</envar> configurées par <filename>configure</filename>.
     Par exemple, vous pouvez faire&nbsp;:
<screen>
<userinput>make COPT='-Werror'</userinput>
  </screen>
  ou
  <screen>
<userinput>export COPT='-Werror'</userinput>
<userinput>make</userinput>
  </screen>
 </para>

 <note>
  <para>
   Si vous utilisez GCC, il est préférable de compiler avec un niveau
   d'optimisation d'au moins <option>-O1</option>, parce que l'absence
   d'optimisation (<option>-O0</option>) désactive aussi certains
   messages importants du compilateur (comme l'utilisation de variables
   non initialisées). Néanmoins, les niveaux d'optimisations peuvent
   compliquer le débogage&nbsp;: un pas-à-pas sur le code
   compilé ne correspondra pas forcément directement aux lignes de code.
   Si vous avez du mal à déboguer du code optimisé, recompilez les fichiers
   qui vous intéressent avec <option>-O0</option>.
   Une façon simple de le faire est
   de passer une option à <application>make</application>:
   <command>make PROFILE=-O0 file.o</command>.
  </para>

  <para>
   En fait, les variables d'environnement <envar>COPT</envar> et
   <envar>PROFILE</envar> sont gérées de façon identique par les
   makefiles de <productname>PostgreSQL</productname>. Laquelle utiliser est
   une affaire de préférence, mais l'usage parmi les développeurs
   est d'utiliser <envar>PROFILE</envar> pour les ajustements ponctuels,
   alors que <envar>COPT</envar> peut être conservée en permanence.
  </para>
 </note>
</sect2>
</sect1>

<sect1 id="install-post">
<title>Initialisation post-installation</title>

<sect2 id="install-post-shlibs">
 <title>Bibliothèques partagées</title>

 <indexterm>
  <primary>bibliothèques partagées</primary>
 </indexterm>

 <para>
  Sur certains systèmes gérant des bibliothèques partagées,
  il faut spécifier comment trouver
  les nouvelles bibliothèques partagées. Les systèmes sur lesquels ce
  n'est <emphasis>pas</emphasis> nécessaire comprennent
  <systemitem class="osname">FreeBSD</systemitem>,
  <systemitem class="osname">HP-UX</systemitem>,
  <systemitem class="osname">Linux</systemitem>,
  <systemitem class="osname">NetBSD</systemitem>, <systemitem
  class="osname">OpenBSD</systemitem> et
  <systemitem class="osname">Solaris</systemitem>.
 </para>

 <para>
  La méthode pour le faire varie selon la plateforme, mais la plus
  répandue consiste à positionner la variable d'environnement
  <envar>LD_LIBRARY_PATH</envar> ainsi&nbsp;: avec les shells Bourne
  (<command>sh</command>, <command>ksh</command>, <command>bash</command>, <command>zsh</command>)&nbsp;:
  <programlisting>LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH</programlisting>
    ou en <command>csh</command> ou <command>tcsh</command>&nbsp;:
<programlisting>setenv LD_LIBRARY_PATH /usr/local/pgsql/lib</programlisting>
    Remplacez <literal>/usr/local/pgsql/lib</literal> par la valeur donnée à
    <option><literal>--libdir</literal></option> dans l'<xref linkend="configure"/>.
    Vous pouvez mettre ces commandes dans un script de démarrage tel
    que <filename>/etc/profile</filename> ou <filename>~/.bash_profile</filename>.
    De bons conseils sur les mises en garde associées à cette
    méthode peuvent être trouvés sur
    <ulink url="http://xahlee.info/UnixResource_dir/_/ldpath.html"></ulink>.
   </para>

   <para>
    Sur certains systèmes, il peut être préférable de renseigner la
    variable d'environnement
    <envar>LD_RUN_PATH</envar> <emphasis>avant</emphasis>
    la compilation.
   </para>

   <para>
    Avec <systemitem class="osname">Cygwin</systemitem>, placez le répertoire
    des bibliothèques dans la variable <envar>PATH</envar>, ou déplacez les
    fichiers <filename>.dll</filename> dans le répertoire
    <filename>bin</filename>.
   </para>

   <para>
    En cas de doute, référez-vous aux pages de man de votre système (peut-être
    <command>ld.so</command> ou <command>rld</command>). Si vous avez
    ultérieurement un message tel que
<screen>psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory</screen>
    alors cette étape est vraiment nécessaire. Occupez-vous en alors.
   </para>

   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>
    Si votre système d'exploitation est
    <systemitem class="osname">Linux</systemitem>
    et que vous avez les accès de superutilisateur, vous pouvez exécuter&nbsp;:
<programlisting>/sbin/ldconfig /usr/local/pgsql/lib</programlisting>
    (ou le répertoire équivalent) après l'installation pour permettre à
    l'éditeur de liens de trouver les bibliothèques partagées plus rapidement.
    Référez-vous aux pages man portant sur <command>ldconfig</command> pour plus
    d'informations. Pour les systèmes d'exploitation <systemitem
    class="osname">FreeBSD</systemitem>, <systemitem
    class="osname">NetBSD</systemitem> et <systemitem class="osname">OpenBSD</systemitem>,
    la commande est&nbsp;:
<programlisting>/sbin/ldconfig -m /usr/local/pgsql/lib</programlisting>
    Les autres systèmes d'exploitation ne sont pas connus pour avoir de
    commande équivalente.
   </para>
  </sect2>

  <sect2>
   <title>Variables d'environnement</title>

   <indexterm>
    <primary><envar>PATH</envar></primary>
   </indexterm>

   <para>
    Si l'installation a été réalisée dans
    <filename>/usr/local/pgsql</filename> ou à un autre chemin hors des
    répertoires où par défaut sont recherchés les exécutables, vous devez ajouter
    <filename>/usr/local/pgsql/bin</filename> (ou le répertoire fourni à
    <option><literal>--bindir</literal></option> au moment de l'<xref linkend="configure"/>)
    dans votre <envar>PATH</envar>. À strictement parler, ce n'est pas une obligation, mais
    cela rendra l'utilisation de <productname>PostgreSQL</productname> plus confortable.
   </para>

   <para>
    Pour ce faire, ajoutez ce qui suit dans le fichier d'initialisation de
    votre shell, comme
    <filename>~/.bash_profile</filename> (ou <filename>/etc/profile</filename>, si vous voulez
    que tous les utilisateurs l'aient)&nbsp;:
<programlisting>PATH=/usr/local/pgsql/bin:$PATH
export PATH</programlisting>
    Si vous utilisez le <command>csh</command> ou le <command>tcsh</command>, alors utilisez
    la commande&nbsp;:
<programlisting>set path = ( /usr/local/pgsql/bin $path )</programlisting>
   </para>

   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
    Pour que votre système trouve la documentation <application>man</application>,
    il vous faut ajouter des lignes telles que celles qui suivent à votre
    fichier d'initialisation du shell, à moins que vous installiez ces pages
    dans un répertoire où elles sont recherchées normalement&nbsp;:
<programlisting>MANPATH=/usr/local/pgsql/share/man:$MANPATH
export MANPATH</programlisting>
   </para>

   <para>
    Les variables d'environnement <envar>PGHOST</envar> et <envar>PGPORT</envar>
    indiquent aux applications clientes l'hôte et le port du serveur de base.
    Elles surchargent les valeurs utilisées lors de la compilation. Si vous
    exécutez des applications clientes à distance, alors il est plus pratique que
    tous les utilisateurs prévoyant d'utiliser la base de données
    paramètrent <envar>PGHOST</envar>. Ce n'est pas une
    obligation, cependant, la configuration peut être communiquée via les
    options de lignes de commande à la plupart des programmes clients.
   </para>
  </sect2>
 </sect1>

 <sect1 id="supported-platforms">
  <title>Plateformes supportées</title>

  <para>
   Une plateforme (c'est-à-dire une combinaison d'un processeur et d'un système
   d'exploitation) est considérée comme supportée par la communauté des développeurs de
   <productname>PostgreSQL</productname> si le code permet le fonctionnement
   sur cette plateforme, et que la compilation et les tests de régression
   ont été récemment validés sur cette plateforme. Actuellement, la plupart
   des tests de compatibilité de plateforme se font automatiquement par des
   machines de tests dans la <ulink
   url="https://buildfarm.postgresql.org/">ferme de compilation de
   PostgreSQL</ulink>. Si vous êtes intéressé par l'utilisation de
   <productname>PostgreSQL</productname> sur une plateforme qui n'est pas
   représentée dans la ferme de compilation, mais pour laquelle le code
   fonctionne ou peut fonctionner, nous vous suggérons fortement de monter
   une machine qui sera membre de la ferme pour que la compatibilité puisse
   être assurée dans la durée.
  </para>

  <para>
   En général, <productname>PostgreSQL</productname> doit fonctionner sur
   les architectures processeur suivantes&nbsp;: x86, x86_64, IA64, PowerPC,
   PowerPC 64, S/390, S/390x, Sparc, Sparc 64, ARM, MIPS, MIPSEL
   et PA-RISC. Un support du code existe pour M68K, M32R et VAX, mais ces
   architectures n'ont pas été testées récemment à notre connaissance. Il est
   souvent possible de compiler <productname>PostgreSQL</productname> sur
   un type de processeur non supporté en précisant
   <option>--disable-spinlocks</option>&nbsp;; mais les performances
   seront mauvaises.
  </para>

  <para>
   De manière générale, <productname>PostgreSQL</productname> doit fonctionner sur les systèmes
   d'exploitation suivants&nbsp;: Linux (toutes les distributions récentes),
   Windows (XP et ultérieurs), FreeBSD, OpenBSD, NetBSD, macOS,
   AIX, HP/UX et Solaris. D'autres systèmes de type
   Unix peuvent aussi fonctionner, mais ne sont pas testés pour le moment. Dans
   la plupart des cas, toutes les architectures processeurs supportées par
   un système d'exploitation donné fonctionneront. Cherchez dans le
   répertoire <xref linkend="installation-platform-notes"/> ci-dessous pour
   voir s'il y a des informations spécifiques à votre système d'exploitation,
   tout particulièrement dans le cas d'un ancien système.
  </para>

  <para>
   Si vous avez des problèmes d'installation sur une plateforme connue
   comme supportée d'après des résultats récents de la ferme de
   compilation, merci de rapporter cette information à
   <email>pgsql-bugs@lists.postgresql.org</email>. Si vous êtes intéressé pour porter
   <productname>PostgreSQL</productname> sur une nouvelle plateforme,
   <email>pgsql-hackers@lists.postgresql.org</email> est l'endroit approprié pour en
   discuter.
  </para>
 </sect1>

 <sect1 id="installation-platform-notes">
  <title>Notes spécifiques à des plateformes</title>

  <para>
   Cette section documente des problèmes spécifiques additionnels liés à des
   plateformes, en ce qui concerne l'installation et le paramétrage de PostgreSQL.
   Assurez-vous de lire aussi les instructions d'installation, et en particulier
   <xref linkend="install-requirements"/>. Par ailleurs, consultez
   <xref linkend="regress"/> à propos de l'interprétation
   des tests de régression.
  </para>

  <para>
   Les plateformes qui ne sont pas traitées ici n'ont pas de problèmes d'installation
   spécifiques connus.
 </para>

  <sect2 id="installation-notes-aix">
   <title>AIX</title>

   <indexterm zone="installation-notes-aix">
    <primary>AIX</primary>
    <secondary>installation sur</secondary>
   </indexterm>

   <para>
    PostgreSQL fonctionne sur AIX, mais les versions avant la 6.1 ont
    différents problèmes et ne sont pas recommandées. Vous pouvez utiliser
    soit GCC, soit le compilateur natif IBM <command>xlc</command>.
   </para>

   <sect3>
    <title>Gestion de la mémoire</title>
    <!-- https://archives.postgresql.org/message-id/603bgqmpl9.fsf@dba2.int.libertyrms.com -->

  <para>
   AIX est particulier dans la façon dont il gère la mémoire. Vous pouvez avoir
   un serveur avec des gigaoctets de mémoire libre, et malgré tout
   avoir des erreurs de mémoire insuffisante ou des erreurs d'espace
   d'adressage quand vous lancez des applications. Un exemple est
   le chargement d'extensions qui échoue avec des erreurs inhabituelles.
   Par exemple, en exécutant en tant que propriétaire de l'installation
   PostgreSQL&nbsp;:
   <screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": A memory address is not in the address space for the process.
   </screen>
   En l'exécutant en tant que non-propriétaire, mais dans le groupe propriétaire de
   l'installation PostgreSQL&nbsp;:
   <screen>
=# CREATE EXTENSION plperl;
ERROR:  could not load library "/opt/dbs/pgsql/lib/plperl.so": Bad address
   </screen>
   On a un autre exemple avec les erreurs <foreignphrase>out of memory</foreignphrase> dans les traces
   du serveur PostgreSQL, avec toutes les allocations de mémoire vers
   256&nbsp;Mo ou plus qui échouent.
  </para>

  <para>
   La cause générale de ces problèmes est le nombre de bits et le modèle mémoire
   utilisés par le processus serveur. Par défaut, tous les binaires compilés sur
   AIX sont 32 bits. Cela ne dépend pas du matériel ou du noyau en cours
   d'utilisation. Ces processus 32 bits sont limités à 4&nbsp;Go de mémoire,
   présentée en segments de 256&nbsp;Mo utilisant un modèle parmi quelques-uns.
   Le modèle par défaut permet moins de 256&nbsp;Mo dans le tas, comme il partage
   un seul segment avec la pile.
  </para>

  <para>
   Dans le cas de l'exemple <literal>plperl</literal> ci-dessus, vérifiez
   votre umask et les droits des binaires de l'installation PostgreSQL.
   Les binaires de l'exemple étaient en 32 bits et installés en mode 750 au lieu
   de 755. En raison de ces droits, seul le propriétaire ou un membre
   du groupe propriétaire peut charger la bibliothèque. Puisqu'il n'est pas
   lisible par tout le monde, le chargeur place l'objet dans le tas du
   processus au lieu d'un segment de mémoire de bibliothèque où il aurait
   été sinon placé.
  </para>

  <para>
   La solution «&nbsp;idéale&nbsp;» est d'utiliser une version
   64-bits de PostgreSQL, mais ce n'est pas toujours pratique, parce
   que les systèmes équipés de processeurs 32 bits peuvent compiler, mais
   pas exécuter, des binaires 64 bits.
  </para>

  <para>
   Si un binaire 32 bits est souhaité, positionnez <symbol>LDR_CNTRL</symbol>
   à <literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>,
   où 1&lt;=n &lt;= 8 avant de démarrer le serveur PostgreSQL, et essayez
   différentes valeurs et paramètres de <filename>postgresql.conf</filename>
   pour trouver une configuration qui fonctionne de façon satisfaisante.
   Cette utilisation de <symbol>LDR_CNTRL</symbol> notifie à AIX que vous voulez
   que le serveur réserve <symbol>MAXDATA</symbol> octets pour le tas, alloués
   en segments de 256&nbsp;Mo. Quand vous avez trouvé une configuration utilisable,
   <command>ldedit</command> peut être utilisé pour modifier les binaires pour
   qu'ils utilisent par défaut la taille de tas désirée. PostgreSQL peut aussi
   être recompilé, en passant à <literal>configure
    LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>
   pour obtenir le même résultat.
  </para>

  <para>
   Pour une compilation en 64 bits, positionnez <envar>OBJECT_MODE</envar> à
   64 et passez <literal>CC="gcc -maix64"</literal> et
   <literal>LDFLAGS="-Wl,-bbigtoc"</literal> à <command>configure</command>.
   (Les options pour <command>xlc</command> pourraient différer.) Si vous omettez
   les exports de <envar>OBJECT_MODE</envar>, votre compilation échouera avec
   des erreurs de l'éditeur de liens. Lorsque <envar>OBJECT_MODE</envar> est
   positionné, il indique aux outils de compilation d'AIX comme
   <command>ar</command>, <command>as</command> et
   <command>ld</command> quel type de fichiers à manipuler par défaut.
  </para>

  <para>
   Par défaut, de la surallocation d'espace de pagination
   peut se produire. Bien que nous ne l'ayons jamais constaté,
   AIX tuera des processus quand il se trouvera à court de mémoire et
   que la zone surallouée sera accédée. Le comportement le plus proche de
   ceci que nous ayons constaté est l'échec d'un <foreignphrase>fork</foreignphrase>, parce que le système
   avait décidé qu'il n'y avait plus de suffisamment de mémoire disponible
   pour un nouveau processus. Comme beaucoup d'autres parties d'AIX,
   la méthode d'allocation de l'espace de pagination et l'arrêt suite à un
   «&nbsp;out-of-memory&nbsp;» sont configurables,
   soit pour le système, soit pour un processus, si cela devient un problème.
  </para>
 </sect3>
</sect2>

<sect2 id="installation-notes-cygwin">
 <title>Cygwin</title>

 <indexterm zone="installation-notes-cygwin">
  <primary>Cygwin</primary>
  <secondary>installation sur</secondary>
 </indexterm>

 <para>
  PostgreSQL peut être compilé avec Cygwin, un environnement similaire à
  Linux pour Windows, mais cette méthode est inférieure à la version native
  Windows (voir <xref linkend="install-windows"/>) et
  faire tourner un serveur sur Cygwin n'est plus recommandé.
 </para>

 <para>
  Quand vous compilez à partir des sources, suivant la procédure
  d'installation de style Unix (c'est-à-dire
  <literal>./configure; make;</literal>, etc.),
  notez les différences suivantes spécifiques à Cygwin&nbsp;:

  <itemizedlist>
   <listitem>
    <para>
     Positionnez le PATH pour utiliser le répertoire binaire Cygwin avant
     celui des utilitaires Windows. Cela évitera des problèmes à
     la compilation.
    </para>
   </listitem>

   <listitem>
    <para>
     La  commande <command>adduser</command> n'est pas supportée&nbsp;; utilisez
     les outils appropriés de gestion d'utilisateurs sous Windows NT, 2000 ou XP.
     Sinon, sautez cette étape.
    </para>
   </listitem>

   <listitem>
    <para>
     La commande <command>su</command> n'est pas supportée&nbsp;; utilisez ssh
     pour simuler la commande <command>su</command> sous Windows NT, 2000 ou
     XP. Sinon, sautez cette étape.
    </para>
   </listitem>

   <listitem>
    <para>
     OpenSSL n'est pas supporté.
    </para>
   </listitem>

   <listitem>
    <para>
     Démarrez <command>cygserver</command>  pour le support de la mémoire
     partagée.
     Pour cela, entrez la commande <literal>/usr/sbin/cygserver
      &amp;</literal>. Ce programme doit fonctionner à chaque fois que
     vous démarrez le serveur PostgreSQL ou que vous initialisez un cluster
     de bases de données (<command>initdb</command>). La configuration par
     défaut de <command>cygserver</command> pourrait nécessiter des changements
     (par exemple, augmenter <symbol>SEMMNS</symbol>) pour éviter à PostgreSQL
     d'échouer en raison d'un manque de ressources système.
    </para>
   </listitem>

   <listitem>
    <para>
     Il se peut que la compilation échoue sur certains systèmes quand
     une locale autre que C est utilisée. Pour résoudre ce problème,
     positionnez la locale à C avec la commande
     <command>export LANG=C.utf8</command> avant de lancer la compilation,
     puis, une fois PostgreSQL installé, repositionnez-là à son ancienne valeur.
    </para>
   </listitem>

   <listitem>
    <para>
     Les tests de régression en parallèle (<literal>make check</literal>)
     peuvent générer des échecs de tests de régression aléatoires en raison
     d'un dépassement de capacité de la file d'attente de <function>listen()</function>
     qui cause des erreurs de connexion refusée ou des blocages. Vous pouvez
     limiter le nombre de connexions en utilisant la variable de make
     <varname>MAX_CONNECTIONS</varname> comme ceci&nbsp;:
     <programlisting>
make MAX_CONNECTIONS=5 check
     </programlisting>
     (Sur certains systèmes, vous pouvez avoir jusqu'à 10 connexions
     simultanées).
    </para>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Il est possible d'installer <command>cygserver</command> et le serveur
  PostgreSQL en tant que services Windows NT. Pour plus d'informations sur
  comment le faire, veuillez vous référer au document <filename>README</filename>
  inclus avec le package binaire PostgreSQL sur Cygwin.
  Il est installé dans le répertoire <filename>/usr/share/doc/Cygwin</filename>.
 </para>
</sect2>

<sect2 id="installation-notes-macos">
 <title>macOS</title>

 <indexterm zone="installation-notes-macos">
  <primary>macOS</primary>
  <secondary>installation sur</secondary>
 </indexterm>

 <para>
  Sur les versions récentes de <productname>macOS</productname>, il est
  nécessaire d'embarquer le chemin <quote>sysroot</quote> dans les options
  d'inclusion utilisées pour trouver les fichiers d'en-tête système. Ceci a
  pour résultat la génération d'un script
  <application>configure</application> variant suivant la version du SDK
  utilisée durant <application>configure</application>. Ceci ne devrait pas
  poser de problèmes dans les scénarios simples, mais si vous essayez de
  faire quelque chose comme compiler une extension sur une machine
  différente de celle sur laquelle le code serveur a été compilé, vous
  pouvez avoir besoin de forcer l'utilisation d'un chemin sysroot
  différent. Pour cela, configurez <varname>PG_SYSROOT</varname> ainsi
  <programlisting>
make PG_SYSROOT=<replaceable>/desired/path</replaceable> all
  </programlisting>
  Pour trouver le chemin approprié sur votre machine, lancez
  <programlisting>
xcodebuild -version -sdk macosx Path
  </programlisting>
  Notez que compiler une extension en utilisant une version sysroot
  différente de celle utilisée pour compiler le serveur n'est pas
  vraiment recommandée&nbsp;; dans le pire des cas, cela peut entraîner des
  incohérences d'ABI difficiles à débugger.
 </para>

 <para>
  Vous pouvez aussi sélectionner un chemin sysroot différent de celui par
  défaut lors du <application>configure</application>
  en indiquant <varname>PG_SYSROOT</varname> à
  <application>configure</application>&nbsp;:
  <programlisting>
./configure ... PG_SYSROOT=<replaceable>/desired/path</replaceable>
  </programlisting>
 </para>

 <para>
  La fonctionnalité <quote>System Integrity Protection</quote> (SIP) de
  <productname>macOS</productname> casse <literal>make check</literal>,
  car elle empêche de transmettre la configuration nécessaire de
  <literal>DYLD_LIBRARY_PATH</literal> vers les exécutables en cours de
  tests. Vous pouvez contourner cela en exécutant <literal>make
   install</literal> avant <literal>make check</literal>. Ceci étant dit, la
  plupart des développeurs Postgres désactivent simplement SIP.
 </para>
</sect2>

<sect2 id="installation-notes-mingw">
 <title>MinGW/Windows Natif</title>

 <indexterm zone="installation-notes-mingw">
  <primary>MinGW</primary>
  <secondary>installation sur</secondary>
 </indexterm>

 <para>
  PostgreSQL pour Windows peut être compilé en utilisant MinGW, un environnement
  de compilation similaire à celui disponible sous Unix pour les systèmes d'exploitation
  Microsoft, ou en utilisant la suite de compilation
  <productname>Visual C++</productname> de Microsoft.
  La variante de compilation MinGW utilise le système de compilation normal
  décrit dans ce chapitre&nbsp;; la compilation via Visual C++ fonctionne de
  façon totalement différente, et est décrite dans <xref linkend="install-windows"/>.
 </para>

 <para>
  Le port natif Windows requiert une version 32 ou 64 bits de Windows 2000 ou ultérieurs.
  Les systèmes d'exploitation antérieurs n'ont pas l'infrastructure
  nécessaire (mais Cygwin peut être utilisé pour ceux-ci). MinGW, le système
  de compilation similaire à Unix, et MSYS, une suite d'outils Unix nécessaires
  pour exécuter des scripts shell tels que <command>configure</command>, peuvent
  être téléchargés à partir de <ulink url="http://www.mingw.org/"></ulink>. Aucun
  de ces outils n'est nécessaire pour exécuter les binaires générés&nbsp;;
  ils ne sont nécessaires que pour créer les binaires.
 </para>

 <para>
  Pour compiler les binaires 64 bits avec MinGW, installez l'ensemble d'outils 64 bits à
  partir de <ulink url="https://mingw-w64.org/"></ulink>, ajoutez le répertoire des binaires de MinGW dans
  la variable d'environnement <envar>PATH</envar>, et lancez la commande
  <command>configure</command> avec l'option
  <command>--host=x86_64-w64-mingw32</command>.
 </para>

 <para>
  Après que vous avez tout installé, il vous est conseillé de lancer
  <application>psql</application> dans <command>CMD.EXE</command>, car
  la console MSYS a des problèmes de tampons.
 </para>

 <sect3 id="windows-crash-dumps">
  <title>Récupérer des dumps suite aux plantages sous Windows</title>

  <para>
   Si PostgreSQL sous Windows plante, il peut générer des
   <productname>minidumps</productname> qui peuvent être utilisés pour dépister la cause du plantage&nbsp;;
   ils sont semblables aux <foreignphrase>core dumps</foreignphrase> d'Unix.
   Vous pouvez lire ces dumps avec
   <productname>Windows Debugger Tools</productname> ou avec
   <productname>Visual Studio</productname>. Pour permettre la génération des dumps sous Windows, créez un
   sous-répertoire nommé <filename>crashdumps</filename>
   dans le répertoire des données du cluster. Ainsi les dumps seront écrits dans ce répertoire
   avec un nom unique généré à partir de l'identifiant du processus planté et du moment du plantage.
  </para>
 </sect3>
</sect2>

<sect2 id="installation-notes-solaris">
 <title>Solaris</title>

 <indexterm zone="installation-notes-solaris">
  <primary>Solaris</primary>
  <secondary>installation sur</secondary>
 </indexterm>

 <para>
  PostgreSQL est bien supporté sous Solaris. Plus le système d'exploitation
  est à jour, moins vous aurez de problèmes.
 </para>

 <sect3>
  <title>Outils requis</title>

  <para>
   Vous pouvez compiler soit avec GCC, soit avec le compilateur de Sun.
   Pour une meilleure optimisation du code, le compilateur de Sun est
   fortement recommandé sur l'architecture SPARC. Si vous utilisez le compilateur de Sun,
   attention à ne pas sélectionner <filename>/usr/ucb/cc</filename>&nbsp;;
   utilisez <filename>/opt/SUNWspro/bin/cc</filename>.
  </para>

  <para>
   Vous pouvez télécharger Sun Studio sur <ulink
   url="https://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>.
   De nombreux outils GNU sont intégrés dans Solaris 10, ou sont présents
   sur le Solaris companion CD. Si vous avez besoin des packages pour des
   versions plus anciennes de Solaris, vous pouvez trouver ces outils sur
   <ulink url="http://www.sunfreeware.com"></ulink>. Si vous préférez les
   sources, allez sur <ulink
   url="https://www.gnu.org/order/ftp.html"></ulink>.
  </para>
 </sect3>

 <sect3>
  <title>configure se plaint d'un programme de test en échec</title>

  <para>
   Si <command>configure</command> se plaint d'un programme de test en échec,
   il s'agit probablement de l'éditeur de lien à l'exécution qui ne trouve
   pas une bibliothèque, probablement libz, libreadline ou une autre bibliothèque
   non standard telle que libssl. Pour lui indiquer le bon endroit, positionnez
   la variable d'environnement <envar>LDFLAGS</envar> sur la ligne de commande
   de <command>configure</command>, par exemple,
   <programlisting>
configure ... LDFLAGS="-R /usr/sfw/lib:/opt/sfw/lib:/usr/local/lib"
   </programlisting>
   Voir la man page de
   <citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>
   pour plus d'informations.
  </para>
 </sect3>

 <sect3>
  <title>Compiler pour des performances optimales</title>

  <para>
   Sur l'architecture SPARC, Sun Studio est fortement recommandé pour
   la compilation. Essayez d'utiliser l'option d'optimisation
   <option>-xO5</option> pour générer des binaires sensiblement
   plus rapides. N'utilisez pas d'options modifiant le comportement
   des opérations à virgule flottante ni le traitement de
   <varname>errno</varname> (par exemple, <option>-fast</option>).
  </para>

  <para>
   Si vous n'avez pas de raison d'utiliser des binaires 64 bits sur SPARC,
   préférez la version 32 bits. Les opérations et
   les binaires 64 bits sont plus lents que les variantes 32 bits. D'un autre
   côté, le code 32 bits sur un processeur de la famille AMD64 n'est pas natif,
   donc le code 32 bits est significativement plus lent sur cette
   famille de processeurs.
  </para>
 </sect3>

 <sect3>
  <title>Utiliser DTrace pour tracer PostgreSQL</title>

  <para>
   Oui, l'utilisation de DTrace est possible. Voir <xref
   linkend="dynamic-trace"/> pour davantage d'informations.
  </para>

  <para>
   Si vous voyez l'édition de liens de l'exécutable <command>postgres</command>
   échouer avec un message d'erreur similaire à&nbsp;:
   <screen>
Undefined                       first referenced
 symbol                             in file
AbortTransaction                    utils/probes.o
CommitTransaction                   utils/probes.o
ld: fatal: Symbol referencing errors. No output written to postgres
collect2: ld returned 1 exit status
make: *** [postgres] Error 1
   </screen>
   l'installation DTrace est trop ancienne pour gérer les sondes dans les
   fonctions statiques. Solaris 10u4 ou plus récent est nécessaire pour
   utiliser DTrace.
  </para>
 </sect3>
</sect2>
</sect1>

</chapter>
