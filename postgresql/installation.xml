<?xml version="1.0" encoding="UTF-8"?>
<chapter id="installation">
 <title>Procédure d'installation depuis le code source</title>

 <indexterm zone="installation">
  <primary>installation</primary>
 </indexterm>

 <para>
  Ce chapitre décrit l'installation de <productname>PostgreSQL</productname>
  à partir du code source. Si vous installez un paquet fourni par
  une distribution, comme un paquet RPM ou Debian, ignorez ce chapitre,
  et allez lire <xref linkend="install-binaries" /> à la place.
 </para>

 <sect1 id="install-requirements">
  <title>Prérequis</title>

  <para>
   En général, les plateformes Unix modernes sont capables
   d'exécuter <productname>PostgreSQL</productname>.
   Les plateformes sur lesquelles des tests ont été effectués sont décrites
   dans la <xref linkend="supported-platforms"/> ci-après.
  </para>

  <para>
   Les logiciels suivants sont nécessaires pour compiler
   <productname>PostgreSQL</productname>&nbsp;:

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

      <acronym>GNU</acronym> <application>make</application> version 3.81 (ou
      une version plus récente) est nécessaire&nbsp;; les autres programmes
      <application>make</application> ou les versions plus anciennes de
      <acronym>GNU</acronym> <application>make</application> <emphasis>ne</emphasis>
      fonctionnent <emphasis>pas</emphasis>.
      (<acronym>GNU</acronym> <application>make</application> est parfois installé sous le nom
      <filename>gmake</filename>). Pour
      connaître la version utilisée, saisir
<screen><userinput>make --version</userinput></screen>
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>Meson</primary>
      </indexterm>

      Alternativement, <productname>PostgreSQL</productname> peut être installé en
      utilisant <ulink url="https://mesonbuild.com/">Meson</ulink>.
      C'est la seule option pour compiler <productname>PostgreSQL</productname> sur
      Windows en utilisant <productname>Visual Studio</productname>. Pour les autres
      plateformes, l'utilisation de <application>Meson</application> est actuellement
      expérimentale. Si vous choisissez
      d'utiliser <application>Meson</application>, alors vous n'avez pas besoin de
      <acronym>GNU</acronym> <application>make</application>, mais les autres prérequis
      ci-dessous sont toujours nécessaires.
     </para>

     <para>
      La version minimale requise de <application>Meson</application> est 0.54.
     </para>
    </listitem>

    <listitem>
     <para>
      Il est nécessaire d'avoir un compilateur C
      <acronym>ISO</acronym>/<acronym>ANSI</acronym> (au minimum compatible
      avec C99). Une version récente de
      <productname>GCC</productname> est recommandée, mais
      <productname>PostgreSQL</productname> est connu pour compiler avec de
      nombreux compilateurs de différents vendeurs.
     </para>
    </listitem>

    <listitem>
     <para>
      <application>tar</application> est requis pour déballer la distribution
      des sources, associé à <application>gzip</application> ou
      <application>bzip2</application>.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

      <application>Flex</application> et <application>Bison</application>
      sont requis. D'autres
      programmes, comme <application>lex</application> et
      <application>yacc</application> ne peuvent pas être utilisés.
      <application>Bison</application> doit être au moins en version 2.3.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

      <application>Perl</application> 5.14 ou ultérieur est nécessaire lors du
      processus de construction ainsi que pour exécuter certaines suites de
      tests. (Ce prérequis est séparé du prérequis pour la construction de
      <application>PL/Perl</application>&nbsp;; voir ci-dessous.)
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>

      La bibliothèque <acronym>GNU</acronym> <productname>Readline</productname> est
      utilisée par défaut. Elle permet à <application>psql</application>
      (l'interpréteur de ligne de commandes SQL de PostgreSQL) de se souvenir de
      chaque commande saisie, et permet d'utiliser les flèches du clavier
      pour rappeler et éditer les commandes précédentes. C'est très
      pratique et fortement recommandé.
      Si vous n'en voulez pas, vous devrez renseigner l'option
      <option>--without-readline</option> lors de l'appel à
      la commande <filename>configure</filename>. Une alternative possible est
      l'utilisation de la bibliothèque <filename>libedit</filename> sous licence
      BSD, développée au départ sur <productname>NetBSD</productname>. La
      bibliothèque <filename>libedit</filename> est compatible
      GNU <productname>Readline</productname>, et est utilisée si cette dernière
      n'est pas trouvée, ou si l'option <option>--with-libedit-preferred</option>
      est fournie à <filename>configure</filename>. Si vous utilisez une
      distribution Linux à base de paquets, et que ceux de
      <literal>readline</literal> et <literal>readline-devel</literal> sont
      séparés, il faut impérativement installer les deux.
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

      La bibliothèque de compression <productname>zlib</productname> est
      utilisée par défaut. Si vous n'en voulez pas, il faut préciser
      <option>--without-zlib</option> à
      <filename>configure</filename>. Cela a pour conséquence de désactiver le
      support des archives compressées dans <application>pg_dump</application> et
      <application>pg_restore</application>.
     </para>
    </listitem>

    <listitem>
     <para>
      La bibliothèque ICU est utilisée par défaut.
      Si vous ne voulez pas l'utiliser, alors vous devez
      préciser l'option <option>--without-icu</option> à
      <filename>configure</filename>. Utiliser cette option désactive le support
      de la fonctionnalité de collation ICU (voir <xref linkend="collation"/>).
     </para>
     <para>
      Le support ICU nécessite l'installation du paquet
      <productname>ICU4C</productname>.  La version minimale requise est
      actuellement <productname>ICU4C</productname> 4.2.
     </para>

     <para>
      Par défaut,
      <productname>pkg-config</productname><indexterm><primary>pkg-config</primary></indexterm>
      sera utilisé pour trouver les options requises de compilation. Ceci est
      supporté pour <productname>ICU4C</productname> version 4.6 et supérieure.
      Pour les versions plus anciennes, les variables <envar>ICU_CFLAGS</envar>
      et <envar>ICU_LIBS</envar> doivent être précisées à
      <filename>configure</filename>, comme dans cet exemple&nbsp;:
      <programlisting>./configure ... ICU_CFLAGS='-I/some/where/include' ICU_LIBS='-L/some/where/lib -licui18n -licuuc -licudata' </programlisting>
      (Si <productname>ICU4C</productname> est dans le chemin de recherche pas
      défaut pour le compilateur, alors vous devez toujours préciser des chaines
      non vides afin d'éviter d'utiliser <productname>pkg-config</productname>,
      par exemple&nbsp;: <literal>ICU_CFLAGS=' '</literal>.)
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Les paquets suivants sont optionnels. S'ils ne sont pas obligatoires lors
   d'une compilation par défaut de <productname>PostgreSQL</productname>,
   ils le deviennent lorsque certaines options sont utilisées, comme cela
   est expliqué par la suite.

   <itemizedlist>
    <listitem>
     <para>
      Pour compiler le langage procédural <application>PL/Perl</application>,
      une installation complète de <productname>Perl</productname>,
      comprenant la bibliothèque <filename>libperl</filename> et les
      fichiers d'en-tête est nécessaire.
      La version minimale requise est <productname>Perl</productname> 5.14.
     </para>

     <para>
      Comme <application>PL/Perl</application> est une bibliothèque partagée,
      la bibliothèque <indexterm><primary>libperl</primary></indexterm>
      <filename>libperl</filename> doit aussi être partagée sur la plupart des
      plateformes. C'est désormais le choix par défaut dans les versions
      récentes de <productname>Perl</productname>, mais ce ne l'était pas
      dans les versions plus anciennes&nbsp;; dans tous les cas, c'est du ressort de
      celui qui a installé Perl chez vous.
      <filename>configure</filename> échouera si la
      compilation de <application>PL/Perl</application> est sélectionnée, mais
      qu'il ne trouve pas une bibliothèque partagée
      <filename>libperl</filename>.
      Dans ce cas, vous devrez recompiler et
      installer <productname>Perl</productname> manuellement pour être capable
      de compiler <application>PL/Perl</application>. Lors du processus de
      configuration pour <productname>Perl</productname>, demandez une
      bibliothèque partagée.
     </para>

     <para>
      Si vous avez l'intention d'avoir plus qu'une utilisation occasionnelle
      de <application>PL/Perl</application>, vous devez vous assurer que
      l'installation de <productname>Perl</productname> a été faite avec
      l'option <literal>usemultiplicity</literal> activée (<literal>perl
      -V</literal> vous indiquera si c'est le cas).
     </para>
    </listitem>

    <listitem>
     <para>
      Pour compiler le langage de programmation serveur <application>PL/Python</application>,
      il faut que <productname>Python</productname> soit installé avec les
      fichiers d'en-tête et le module <application>distutils</application>. La
      version minimum requise est <productname>Python</productname> 3.6.8.
     </para>

     <para>
      Puisque <application>PL/Python</application> doit être une bibliothèque
      partagée, la bibliothèque
      <indexterm><primary>libpython</primary></indexterm>
      <filename>libpython</filename> doit l'être aussi sur la plupart des
      plateformes. Ce n'est pas le cas des installations par défaut de
      <productname>Python</productname> compilées à partir des sources, mais
      une bibliothèque partagée est disponible dans de nombreuses
      distributions de systèmes d'exploitation. <filename>configure</filename>
      échouera si la compilation de <application>PL/Python</application> est
      sélectionnée et qu'il ne peut pas trouver une bibliothèque partagée
      <filename>libpython</filename>.
      Cela peut impliquer que vous deviez
      soit installer des paquets supplémentaires, soit recompiler
      (une partie de) votre installation <productname>Python</productname> pour
      fournir cette bibliothèque partagée. Lors de la compilation à partir
      des sources, lancez le <filename>configure</filename> de <productname>Python</productname>
      avec l'option <literal>--enable-shared</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      Pour compiler le langage procédural
      <application>PL/Tcl</application>, <productname>Tcl</productname> doit bien sûr
      être installé. La version minimale requise est <productname>Tcl</productname> 8.4.
     </para>
    </listitem>

    <listitem>
     <para>
      Pour activer le support de langage natif (<acronym>NLS</acronym>), qui
      permet d'afficher les messages d'un programme dans une langue autre que l'anglais,
      une implémentation de l'<acronym>API</acronym>
      <application>Gettext</application> est nécessaire.
      Certains systèmes d'exploitation
      l'intègrent (par exemple, <systemitem class="osname">Linux</systemitem>,
      <systemitem class="osname">NetBSD</systemitem>,
      <systemitem class="osname">Solaris</systemitem>)&nbsp;;
      pour d'autres systèmes, un paquet additionnel peut être téléchargé sur
      <ulink url="https://www.gnu.org/software/gettext/"></ulink>.
      Si vous utilisez l'implémentation <application>Gettext</application> des
      bibliothèques C <acronym>GNU</acronym>, certains utilitaires nécessiteront
      le paquet <productname>GNU Gettext</productname>.
      Il n'est pas nécessaire dans les autres implémentations.
     </para>
    </listitem>

    <listitem>
     <para>
      Vous aurez besoin de <productname>OpenSSL</productname>, si vous voulez
      utiliser du chiffrement pour vos connexions clientes.
      <productname>OpenSSL</productname> est aussi requis pour la génération
      de nombres aléatoires sur les plateformes qui n'ont pas
      <filename>/dev/urandom</filename> (sauf Windows). La version minimale
      requise est la 1.1.1.
     </para>
     <para>
      De plus, <productname>LibreSSL</productname> est accepté en utilisant la
      couche de compatibilité <productname>OpenSSL</productname>. La version
      minimale requise est la 3.4 (provenant d'<systemitem class="osname">OpenBSD</systemitem>
      version 7.0).
     </para>
    </listitem>

    <listitem>
     <para>
      Vous avez besoin de <application>MIT Kerberos</application> (pour GSSAPI),
      <productname>OpenLDAP</productname>, et/ou <application>PAM</application>
      pour bénéficier de l'authentification en utilisant ces services.
     </para>
    </listitem>

    <listitem>
     <para>
      Vous avez besoin de <productname>Curl</productname> pour construire un
      module qui implémente le
      <link linkend="libpq-oauth">flux OAuth Device
      Authorization</link> pour les applications clientes.
     </para>
    </listitem>

    <listitem>
     <para>
      Vous avez besoin de <productname>LZ4</productname> si vous voulez
      disposer de la compression de données avec cette méthode&nbsp;; voir
      <xref linkend="guc-default-toast-compression"/> et
      <xref linkend="guc-wal-compression"/>.
     </para>
    </listitem>

    <listitem>
     <para>
      Vous avez besoin de <productname>Zstandard</productname> si vous voulez
      disposer de la compression de données avec cette méthode&nbsp;; voir
      <xref linkend="guc-wal-compression"/>.
      La version minimale requise est 1.4.0.
     </para>
    </listitem>

    <listitem>
     <para>
      Pour compiler la documentation <productname>PostgreSQL</productname>,
      il existe un ensemble de prérequis séparé&nbsp;; voir
      <xref linkend="docguide-toolsets"/>.
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Si vous avez besoin de récupérer un paquet <acronym>GNU</acronym>, vous le trouverez
   sur votre site miroir local de <acronym>GNU</acronym> (voir
   <ulink url="https://www.gnu.org/order/ftp.html"></ulink> pour la liste) ou sur
   <ulink url="ftp://ftp.gnu.org/gnu/"></ulink>.
  </para>
 </sect1>

 <sect1 id="install-getsource">
  <title>Obtenir les sources</title>

  <para>
   Le code source de <productname>PostgreSQL</productname> pour les versions
   sorties sont disponibles dans la section de téléchargement de notre site
   web&nbsp;: <ulink
   url="https://www.postgresql.org/ftp/source/">téléchargement</ulink>.
   Téléchargez le fichier
   <filename>postgresql-<replaceable>version</replaceable>.tar.gz</filename> ou
   le fichier
   <filename>postgresql-<replaceable>version</replaceable>.tar.bz2</filename>
   qui vous intéresse, puis déballez le&nbsp; <screen><userinput>tar xf
   postgresql-<replaceable>version</replaceable>.tar.bz2</userinput></screen>
   Cette commande crée un répertoire
   <filename>postgresql-<replaceable>version</replaceable></filename> contenant
   les sources de <productname>PostgreSQL</productname> dans le répertoire
   courant. Placez-vous dans ce répertoire pour le reste de la procédure
   d'installation.
  </para>

  <para>
   Les sources peuvent également être obtenues directement à partir du système
   de contrôle de version Git. Pour plus d'informations, voir <xref
   linkend="git"/> pour plus d'informations.
  </para>
 </sect1>

 <sect1 id="install-make">
  <title>Complilation et installation avec Autoconf et Make</title>

 <sect2 id="install-short-make">
  <title>Version courte</title>

  <para>
<synopsis>
./configure
make
su
make install
adduser postgres
mkdir -p /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</synopsis>
   La version longue correspond au reste de cette <phrase>section</phrase>.
  </para> </sect2>

 <sect2 id="install-procedure-make">
  <title>Procédure d'installation</title>

  <procedure>

  <step id="configure">
   <title>Configuration</title>

   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>

   <para>
    La première étape de la procédure d'installation est de configurer
    l'arborescence système et de choisir les options qui vous intéressent.
    Cela se fait en exécutant le script <filename>configure</filename>. Pour une
    installation par défaut, entrer simplement
<screen><userinput>./configure</userinput></screen>
    Ce script exécutera de nombreux tests afin de déterminer les valeurs
    de certaines variables dépendantes du système, et de détecter certaines
    spécificités de votre système d'exploitation. Il créera divers
    fichiers dans l'arborescence de compilation pour enregistrer ce qui a été
    trouvé.
   </para>

   <para>
    Pour garder une arborescence de compilation séparée de celle des sources,
    <filename>configure</filename> peut être exécuté à
    partir d'un répertoire hors de l'arborescence des sources,
    où la compilation s'effectuera.
    Cette procédure est aussi appelée une compilation de type
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>.
    Voici comment faire&nbsp;:
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<userinput>/path/to/source/tree/configure [les options vont ici]</userinput>
<userinput>make</userinput>
   </screen>
  </para>

  <para>
   La configuration par défaut compilera le serveur et les outils,
   ainsi que toutes les applications clientes et les interfaces ne nécessitant
   qu'un compilateur C.
   Tous les fichiers seront installés par défaut
   sous <filename>/usr/local/pgsql</filename>.
  </para>

  <para>
   Les processus de compilation et d'installation peuvent être personnalisés
   en fournissant une ou plusieurs options de ligne de commande à
   <filename>configure</filename>.
   Généralement, vous allez personnaliser l'endroit de l'installation,
   ou la liste des fonctionnalités optionnelles à compiler.
   <filename>configure</filename> a beaucoup d'options, décrites dans
   <xref linkend="configure-options"/>.
  </para>

  <para>
   <filename>configure</filename> tient aussi compte de certaines
   variables d'environnement, comme décrit dans <xref linkend="configure-envvars"/>.
   Elle offre d'autres moyens de personnaliser la configuration.
  </para>
 </step>

 <step id="build">
  <title>Compilation</title>

  <para>
   Pour démarrer la compilation, entrez l'un de ces ordres&nbsp;:
   <screen>
<userinput>make</userinput>
<userinput>make all</userinput>
   </screen>
   (Rappelez-vous qu'il faut <acronym>GNU</acronym> <application>make</application>.)
   La durée de la compilation sera de quelques minutes, et dépend de votre matériel.
  </para>

  <para>
   Si vous voulez compiler tout ce qui peut l'être,
   dont la documentation (HTML et pages de manuel)
   et les modules optionnels (<filename>contrib</filename>),
   entrez plutôt&nbsp;:
   <screen>
<userinput>make world</userinput>
   </screen>
   La dernière ligne affichée doit être&nbsp;:
   <screen>
PostgreSQL, contrib, and documentation successfully made. Ready to install.
</screen>
   </para>

  <para>
   Si vous voulez compiler tout ce qui peut être compilé, en incluant les
   modules supplémentaires (<filename>contrib</filename>), mais sans la
   documentation, saisissez à la place&nbsp;:
<screen>
<userinput>make world-bin</userinput>
   </screen>
  </para>

  <para>
   Si vous voulez lancer la compilation depuis un autre makefile
   plutôt que manuellement, vous devez désactiver la variable
   <varname>MAKELEVEL</varname> ou la mettre à zéro, par exemple ainsi&nbsp;:
   <programlisting>
build-postgresql:
        $(MAKE) -C postgresql MAKELEVEL=0 all
   </programlisting>
   L'oublier peut mener à d'étranges messages d'erreur,
   typiquement sur des fichiers d'en-tête manquants.
  </para>
 </step>

 <step>
  <title>Tests de régression</title>

  <indexterm>
   <primary>tests de régression</primary>
  </indexterm>

  <para>
   Si, avant de l'installer, vous voulez tester ce serveur nouvellement compilé,
   vous devez lancer les tests de régression maintenant.
   Il s'agit d'une suite de tests pour vérifier que <productname>PostgreSQL</productname>
   fonctionne sur votre machine de la manière prévue par ses développeurs.
   Entrez&nbsp;:
   <screen>
<userinput>make check</userinput>
   </screen>
   (Cela ne fonctionnera pas en tant que root&nbsp;; faites-le en tant
   qu'utilisateur non privilégié.)
   Voir <xref linkend="regress"/> pour des informations détaillées sur
   l'interprétation des résultats des tests.
   Vous pouvez répéter ces tests n'importe quand par la suite en
   entrant la même commande.
  </para>
 </step>

 <step id="install">
  <title>Installer les fichiers</title>

  <note>
   <para>
    Si vous mettez à jour un système existant, assurez-vous
    de lire
    <xref linkend="upgrading"/>,
    qui contient des instructions sur la mise à jour d'une instance.
   </para>
  </note>

  <para>
   Pour installer <productname>PostgreSQL</productname>, entrez&nbsp;:
   <screen>
<userinput>make install</userinput>
   </screen>
   Cela installera les fichiers dans les répertoires spécifiés dans
   <xref linkend="configure"/>. Assurez-vous que vous avez les
   droits nécessaires pour y écrire.
   Normalement, vous devez faire cela en tant que root.
   Une alternative est de créer les répertoires cibles par avance,
   et de vous arranger pour obtenir les permissions adéquates.
  </para>

   <para>
    Si vous voulez tout construire, sauf la documentation, saisissez à la
    place&nbsp;:
<screen>
<userinput>make install-world-bin</userinput>
</screen>
   </para>

  <para>
   Pour installer la documentation (HTML et pages de manuel),
   entrez&nbsp;:
   <screen>
<userinput>make install-docs</userinput>
   </screen>
  </para>

  <para>
   Si vous avez entré <literal>make world</literal> plus haut,
   entrez plutôt&nbsp;:
   <screen>
<userinput>make install-world</userinput>
   </screen>
   Cela va installer aussi la documentation.
  </para>

  <para>
   Vous pouvez aussi utiliser <literal>make install-strip</literal>
   au lieu de <literal>make install</literal> pour débarrasser
   les fichiers exécutables et les bibliothèques de leurs
   informations de débogage lors de l'installation.
   Cela économisera un peu d'espace disque.
   Dans une compilation avec le support du débogage, cette purge
   va supprimer ce support&nbsp;; ce n'est donc à faire que s'il n'y a
   plus besoin de débogage.
   <literal>install-strip</literal> réussit assez bien à économiser de
   l'espace, mais ne sait pas toujours effacer
   le moindre octet inutile d'un exécutable&nbsp;;
   pour récupérer tout l'espace disque possible, vous devrez donc
   terminer manuellement.
  </para>

  <para>
   L'installation standard fournit tous les fichiers d'en-tête nécessaires au
   développement d'applications clientes, comme pour celui côté serveur,
   par exemple pour des fonctions spécifiques ou des types de données codés en C.
  </para>

  <formalpara>
   <title>Installation cliente&nbsp;:</title>
   <para>
    Si vous voulez installer uniquement les applications clientes
    et les bibliothèques d'interface, vous pouvez utiliser ces commandes&nbsp;:
    <screen>
<userinput>make -C src/bin install</userinput>
<userinput>make -C src/include install</userinput>
<userinput>make -C src/interfaces install</userinput>
<userinput>make -C doc install</userinput>
    </screen>
    <filename>src/bin</filename> contient quelques binaires
    utilisables uniquement sur le serveur, mais ils sont petits.
   </para>
  </formalpara>
 </step>
</procedure>

<formalpara>
 <title>Désinstallation&nbsp;:</title>
 <para>
  Pour annuler l'installation, utilisez la commande
  <command>make uninstall</command>.
  Cependant, cela ne supprimera pas tous les répertoires qui ont été créés.
 </para>
</formalpara>

<formalpara>
 <title>Nettoyage&nbsp;:</title>

 <para>
  Après l'installation, vous pouvez libérer de l'espace disque en supprimant
  les fichiers compilés de l'arborescence des sources avec la commande
  <command>make clean</command>.
  Cela préservera les fichiers créés par <command>configure</command>,
  pour que vous puissiez tout recompiler plus tard avec <command>make</command>.
  Pour réinitialiser l'arbre des sources dans l'état où il est distribué,
  utilisez <command>make distclean</command>.
  Si vous voulez compiler pour plusieurs plateformes au sein de la même
  arborescence, vous devez le lancer et reconfigurer pour chaque
  plateforme.
  (Une alternative est d'utiliser une arborescence pour chaque plateforme,
  pour qu'elles ne soient pas modifiées.)
 </para>
</formalpara>

<para>
 Si, après compilation, vous découvrez que vos options à <command>configure</command>
 étaient fausses, ou si vous changez quelque chose que <command>configure</command>
 a pris en compte (par exemple, par une mise à jour logicielle),
 il est conseillé de faire <command>make distclean</command> avant de reconfigurer
 et recompiler. Sans cela, vos choix de configuration pourraient ne pas se
 propager à tous les endroits nécessaires.
</para>
  </sect2>

<sect2 id="configure-options">
 <title>Options de <filename>configure</filename></title>

 <indexterm zone="configure-options">
  <primary>configure (options)</primary>
 </indexterm>

 <para>
  Les paramètres en ligne de commande à <command>configure</command>
  sont expliqués ci-dessous.
  Cette liste n'est pas exhaustive (utilisez <literal>./configure --help</literal>
  pour en avoir une qui le soit). Les options non évoquées ici sont
  destinées à des utilisations avancées, comme la compilation croisée,
  et figurent dans la documentation standard d'Autoconf.
 </para>

 <sect3 id="configure-options-locations">
  <title>Emplacements de l'installation</title>

  <para>
   Ces options contrôlent où <literal>make install</literal> va poser
   les fichiers.
   L'option <option>--prefix</option> est suffisante dans la plupart des cas.
   Pour des besoins spécifiques, vous pouvez personnaliser les sous-répertoires
   d'installation avec d'autres options décrites dans cette section.
   Attention&nbsp;: changer les emplacements relatifs des différents sous-répertoires
   peut rendre l'installation non déplaçable,  <!--  non-délocalisable ? (non) -->
   c'est-à-dire que vous ne pourrez
   plus la déplacer par la suite.
   (Les emplacements pour <literal>man</literal> et <literal>doc</literal>
   ne sont pas concernés par cette restriction.)
   Pour obtenir des installations déplaçables, vous pouvez utiliser
   l'option <literal>--disable-rpath</literal> décrite plus bas.
  </para>

  <variablelist>
   <varlistentry id="configure-option-prefix">
    <term><option>--prefix=<replaceable>PREFIX</replaceable></option></term>
    <listitem>
     <para>
      Installe tous les fichiers dans le répertoire <replaceable>PREFIX</replaceable>
      au lieu du répertoire <filename>/usr/local/pgsql</filename>.
      Les fichiers eux-mêmes seront installés dans divers
      sous-répertoires&nbsp;; aucun fichier ne sera directement installé
      sous <replaceable>PREFIX</replaceable>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-exec-prefix">
    <term><option>--exec-prefix=<replaceable>EXEC-PREFIX</replaceable></option></term>
    <listitem>
     <para>
      Les fichiers qui dépendent de l'architecture peuvent être installés dans
      un répertoire avec un préfixe différent, <replaceable>EXEC-PREFIX</replaceable>,
      différent de celui donné par <replaceable>PREFIX</replaceable>.
      Cela peut être utile pour partager entre plusieurs machines
      les fichiers indépendants de l'architecture.
      S'il est omis, <replaceable>EXEC-PREFIX</replaceable> est égal à
      <replaceable>PREFIX</replaceable>, et les fichiers dépendants seront installés
      sous la même arborescence que les fichiers indépendants de
      l'architecture, ce qui est probablement le but recherché.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-bindir">
    <term><option>--bindir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Indique le répertoire des exécutables. Par défaut, il s'agit de
      <filename><replaceable>EXEC-PREFIX</replaceable>/bin</filename>, ce
      qui signifie <filename>/usr/local/pgsql/bin</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-sysconfdir">
    <term><option>--sysconfdir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Précise le répertoire de divers fichiers de configuration,
      par défaut <filename><replaceable>PREFIX</replaceable>/etc</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-libdir">
    <term><option>--libdir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Précise le répertoire d'installation des bibliothèques et des
      modules chargeables dynamiquement. Par défaut, il s'agit de
      <filename><replaceable>EXEC-PREFIX</replaceable>/lib</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-includedir">
    <term><option>--includedir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Précise le répertoire d'installation des fichiers d'en-tête C et C++. Par défaut, il
      s'agit de <filename><replaceable>PREFIX</replaceable>/include</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-datarootdir">
    <term><option>--datarootdir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Indique le répertoire racine de différents types de fichiers de données
      en lecture seule. Cela ne sert qu'à paramétrer des valeurs par
      défaut pour certaines des options suivantes. La valeur par défaut est
      <filename><replaceable>PREFIX</replaceable>/share</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-datadir">
    <term><option>--datadir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Indique le répertoire pour les fichiers de données en lecture seule
      utilisés par les programmes installés. La valeur par défaut est
      <filename><replaceable>DATAROOTDIR</replaceable></filename>.
      NB&nbsp;: cela n'a aucun rapport avec l'endroit où les fichiers de base de données
      seront placés.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-localedir">
    <term><option>--localedir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Indique le répertoire pour installer les données de localisation, en
      particulier les fichiers des catalogues de traduction des messages. La
      valeur par défaut est
      <filename><replaceable>DATAROOTDIR</replaceable>/locale</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-mandir">
    <term><option>--mandir=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Les pages de manuel fournies avec <productname>PostgreSQL</productname> seront
      installées sous ce répertoire, dans leur sous-répertoire
      <filename>man<replaceable>x</replaceable></filename> respectif.
      Par défaut, il s'agit de <filename><replaceable>DATAROOTDIR</replaceable>/man</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-docdir">
    <term><option>--docdir=<replaceable>RÉPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Configure le répertoire racine pour installer les fichiers de documentation,
      sauf les pages <quote>man</quote>. Ceci ne positionne la valeur par défaut
      que pour les options suivantes. La valeur par défaut pour cette option est
      <filename><replaceable>DATAROOTDIR</replaceable>/doc/postgresql</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-htmldir">
    <term><option>--htmldir=<replaceable>RÉPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      La documentation de <productname>PostgreSQL</productname>, formatée en HTML,
      sera installée dans ce répertoire. La valeur par défaut est
      <filename><replaceable>DATAROOTDIR</replaceable></filename>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <note>
   <para>
    Une attention toute particulière a été prise afin de rendre possible
    l'installation de <productname>PostgreSQL</productname> dans des répertoires
    partagés (comme <filename>/usr/local/include</filename>), sans
    interférer avec l'espace de noms du reste du système.
    En premier lieu, le mot <quote><literal>/postgresql</literal></quote>
    est automatiquement ajouté aux répertoires <varname>datadir</varname>,
    <varname>sysconfdir</varname> et <varname>docdir</varname>,
    à moins que le nom du répertoire à partir de la racine ne contienne déjà
    le mot <quote><literal>postgres</literal></quote> ou
    <quote><literal>pgsql</literal></quote>. Par exemple, si
    <filename>/usr/local</filename> est choisi comme préfixe,
    la documentation sera installée dans
    <filename>/usr/local/doc/postgresql</filename>&nbsp;; mais si le
    préfixe est <filename>/opt/postgres</filename>, alors ce sera dans
    <filename>/opt/postgres/doc</filename>. Les fichiers d'en-tête
    C publics pour les interfaces clientes sont installés sous
    <varname>includedir</varname>, et sont indépendants de l'espace
    de noms du système. Les fichiers d'en-tête internes et
    ceux du serveur sont installés dans des répertoires
    privés sous <varname>includedir</varname>.
    Voir la documentation de chaque interface pour savoir comment obtenir
    ces fichiers d'en-tête.
    Enfin, si nécessaire, un répertoire privé sera aussi créé sous
    <varname>libdir</varname>, pour les modules chargeables dynamiquement.
   </para>
  </note>
 </sect3>

 <sect3 id="configure-options-features">
  <title>Fonctionnalités de <productname>PostgreSQL</productname></title>
  <para>
   Les options décrites dans cette section permettent d'ajouter
   diverses fonctionnalités de <productname>PostgreSQL</productname>
   qui ne sont pas compilées par défaut&nbsp;; pour la plupart à cause du
   besoin d'autres logiciels, comme décrit dans
   <xref linkend="install-requirements"/>.
  </para>

  <variablelist>
   <varlistentry id="configure-option-enable-nls">
    <term><option>--enable-nls<optional>=<replaceable>LANGUES</replaceable></optional></option></term>
    <listitem>
     <para>
      Active le support des langues natives
      (<acronym>NLS</acronym>), c'est-à-dire la capacité d'afficher les messages
      d'un programme dans une langue autre que l'anglais.
      <replaceable>LANGUES</replaceable> est une liste optionnelle des codes
      de langue que vous voulez supporter, séparés par une espace&nbsp;; par
      exemple, <literal>--enable-nls='de fr'</literal> (l'intersection entre la
      liste et l'ensemble des langues traduites actuellement sera calculée
      automatiquement). En l'absence de liste, toutes les
      traductions disponibles seront installées.
     </para>

     <para>
      Pour utiliser cette option, une implémentation de
      l'API <application>Gettext</application> est nécessaire.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-perl">
    <term><option>--with-perl</option></term>
    <listitem>
     <para>
      Permet la compilation du langage côté serveur <application>PL/Perl</application>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-python">
    <term><option>--with-python</option></term>
    <listitem>
     <para>
      Permet la compilation du langage côté serveur <application>PL/Python</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-tcl">
    <term><option>--with-tcl</option></term>
    <listitem>
     <para>
      Permet la compilation du langage côté serveur <application>PL/Tcl</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-tclconfig">
    <term><option>--with-tclconfig=<replaceable>REPERTOIRE</replaceable></option></term>
    <listitem>
     <para>
      Tcl installe le fichier <filename>tclConfig.sh</filename>, qui contient
      des informations de configuration nécessaires pour compiler le
      module d'interfaçage avec Tcl.
      Ce fichier est normalement trouvé automatiquement à un emplacement connu,
      mais pour utiliser une version différente de Tcl, il faut indiquer le
      répertoire où chercher <filename>tclConfig.sh</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-with-llvm">
    <term><option>--with-llvm</option></term>
    <listitem>
     <para>
      Compile avec le support de <acronym>JIT</acronym>, basé sur
      <productname>LLVM</productname> (voir <xref linkend="jit"/>).
      Ceci nécessite l'installation de la bibliothèque <productname>LLVM</productname>.
      Sa version minimale requise est actuellement la 14.
     </para>
     <para>
      <command>llvm-config</command><indexterm><primary>llvm-config</primary></indexterm>
      sera utilisé pour trouver les options de compilation nécessaires.
      <command>llvm-config</command> sera cherché dans votre
      <envar>PATH</envar>. Au cas où le bon programme n'est pas trouvé, il
      faut utiliser la variable <envar>LLVM_CONFIG</envar> pour spécifier le
      chemin du bon <command>llvm-config</command>. Par exemple&nbsp;:
      <programlisting>
./configure ... --with-llvm LLVM_CONFIG='/path/to/llvm/bin/llvm-config'
      </programlisting>
     </para>

     <para>
      Le support de <productname>LLVM</productname> nécessite un compilateur
      <command>clang</command> compatible (à spécifier, si nécessaire,
      avec la variable d'environnement <envar>CLANG</envar>),
      et un compilateur C++ fonctionnel (à spécifier, si nécessaire,
      avec la variable d'environnement <envar>CXX</envar>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-lz4">
    <term><option>--with-lz4</option></term>
    <listitem>
     <para>
      Compile avec le support de la compression
      <productname>LZ4</productname>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-zstd">
    <term><option>--with-zstd</option></term>
    <listitem>
     <para>
      Compile avec le support de la compression
      <productname>Zstandard</productname>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-ssl">
    <term><option>--with-ssl=<replaceable>LIBRARY</replaceable></option></term>
    <listitem>
     <indexterm>
      <primary>OpenSSL</primary>
      <seealso>SSL</seealso>
     </indexterm>

     <para>
      Compile avec le support pour les connexions <acronym>SSL</acronym>
      (avec chiffrement). Le seul <replaceable>LIBRARY</replaceable> supporté
      est <option>openssl</option>, qui est utilisé à la fois pour
      <productname>OpenSSL</productname>
      et <productname>LibreSSL</productname>. Ceci nécessite que le paquet
      <productname>OpenSSL</productname> soit installé.
      <filename>configure</filename> vérifiera les fichiers d'en-tête et les
      bibliothèques pour s'assurer que votre installation
      d'<productname>OpenSSL</productname> est suffisante avant de
      continuer.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-openssl">
    <term><option>--with-openssl</option></term>
    <listitem>
     <para>
      Équivalent obsolète de <literal>--with-ssl=openssl</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-gssapi">
    <term><option>--with-gssapi</option></term>
    <listitem>
     <para>
      Compile avec le support de l'authentification GSSAPI.
      MIT Kerberos doit être installé pour GSSAPI.
      Sur beaucoup d'environnements, le système GSSAPI
      (une partie de l'installation MIT Kerberos)
      n'est pas installé dans un endroit recherché par défaut
      (par exemple <filename>/usr/include</filename> ou
      <filename>/usr/lib</filename>)&nbsp;; vous devez donc
      ajouter aussi les options
      <option>--with-includes</option> et <option>--with-libraries</option>.
      <filename>configure</filename> vérifiera les fichiers d'en-tête
      et les bibliothèques pour s'assurer que votre
      installation de GSSAPI est suffisante avant de continuer.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-ldap">
    <term><option>--with-ldap</option></term>
    <listitem>
     <para>
      Compile avec le support de
      <acronym>LDAP</acronym><indexterm><primary>LDAP</primary></indexterm>
      pour l'authentification et la recherche des paramètres de connexion
      (voir <phrase id="install-ldap-links"><xref linkend="libpq-ldap"/> et
      <xref linkend="auth-ldap"/></phrase> pour plus d'informations).
      Sur Unix, cela requiert l'installation du paquet
      <productname>OpenLDAP</productname>. Sur Windows, la bibliothèque
      <productname>WinLDAP</productname> est utilisée par défaut.
      <filename>configure</filename> vérifiera l'existence des fichiers d'en-tête
      et des bibliothèques nécessaires pour s'assurer que votre installation
      d'<productname>OpenLDAP</productname> est suffisante avant de continuer.

     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-pam">
    <term><option>--with-pam</option></term>
    <listitem>
     <para>
      Compile avec le support de
      <acronym>PAM</acronym><indexterm><primary>PAM</primary></indexterm>
      (<foreignphrase>Pluggable Authentication Modules</foreignphrase>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-bsd-auth">
    <term><option>--with-bsd-auth</option></term>
    <listitem>
     <para>
      Compile avec le support de l'authentification BSD.
      (Le framework BSD Authentication n'est actuellement
      disponible que sur OpenBSD.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-systemd">
    <term><option>--with-systemd</option></term>
    <listitem>
     <para>
      Compile avec le support du système de notifications
      <application>systemd</application><indexterm><primary>systemd</primary></indexterm>.
      Ceci améliore l'intégration si le serveur est démarré par
      <application>systemd</application>, mais n'a pas d'impact sinon&nbsp;;
      voir <xref linkend="server-start"/> pour plus d'informations
      <application>libsystemd</application> et les fichiers d'en-tête associés
      doivent être installés pour utiliser cette option.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-bonjour">
    <term><option>--with-bonjour</option></term>
    <listitem>
     <para>
      Compile avec le support du service de découverte automatique
      Bonjour.
      Cela nécessite le support de Bonjour dans votre système
      d'exploitation. Recommandé sur macOS.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-uuid">
    <term><option>--with-uuid=<replaceable>LIBRARY</replaceable></option></term>
    <listitem>
     <para>
      Compile le module <xref linkend="uuid-ossp"/> (qui fournit des
      fonctions pour générer des UUID), en utilisant la bibliothèque UUID
      spécifiée.
      <replaceable>LIBRARY</replaceable> doit correspondre à une de ces
      valeurs&nbsp;:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <option>bsd</option> pour utiliser les fonctions UUID trouvées dans
        FreeBSD et d'autres systèmes dérivés de BSD
       </para>
      </listitem>
      <listitem>
       <para>
        <option>e2fs</option> pour utiliser la bibliothèque UUID créée par
        le projet <literal>e2fsprogs</literal>&nbsp;; cette bibliothèque est
        présente sur la plupart des systèmes Linux et sur macOS, et peut
        être obtenue sur d'autres plateformes également
       </para>
      </listitem>
      <listitem>
       <para>
        <option>ossp</option> pour utiliser la <ulink
        url="http://www.ossp.org/pkg/lib/uuid/">bibliothèque OSSP UUID</ulink>
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-ossp-uuid">
    <term><option>--with-ossp-uuid</option></term>
    <listitem>
     <para>
      Équivalent obsolète de <literal>--with-uuid=ossp</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-libcurl">
    <term><option>--with-libcurl</option></term>
    <listitem>
     <para>
      Compile avec le support de libcurl pour les flux client OAuth 2.0.
      Libcurl version 7.61.0 ou ultérieure est requis pour ce suport.
      Ajouter cette option lancera une vérification des fichiers d'en-têtes
      et des bibliothèques requis pour s'assurer que votre installation
      de <productname>curl</productname> est suffisante avant de continuer.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-libnuma">
    <term><option>--with-libnuma</option></term>
    <listitem>
     <para>
      Compiler avec le support de libnuma pour un support basique de NUMA.
      Uniquement accepté sur les plateformes pour lesquelles la bibliothèque
      <productname>libnuma</productname> est implémentée.
      library is implemented.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-liburing">
    <term><option>--with-liburing</option></term>
    <listitem>
     <para>
      Compile avec liburing, activant le support de io_uring pour des
      entrées/sorties disques asynchrones.
     </para>
     <para>
      Pour détecter le compilation requis et les options de lien requises,
      PostgreSQL demandera à <command>pkg-config</command>.
     </para>
     <para>
      Pour utiliser une installation de liburing placée dans un répertoire
      inhabituel, vous pouvez configurer les variables d'environnement
      relavites à <command>pkg-config</command> (voir sa documentation).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-libxml">
    <term><option>--with-libxml</option></term>
    <listitem>
     <para>
      Compile avec libxml2, activant ainsi le support de SQL/XML. Une
      version 2.6.23 ou ultérieure de libxml2 est requise pour cette
      fonctionnalité.
     </para>

     <para>
      Pour détecter les options requises pour le compilateur et l'éditeur de
      liens, PostgreSQL va demander à <command>pkg-config</command>, s'il est
      installé et s'il connaît libxml2. Sinon, le programme
      <command>xml2-config</command>, qui est installé par libxml2, sera
      utilisé s'il est trouvé. L'utilisation de <command>pkg-config</command>
      est préférée, parce qu'elle gère mieux les installations
      multiarchitectures.
     </para>

     <para>
      Pour utiliser une installation libxml2 située dans un emplacement
      inhabituel, vous pouvez configurer les variables d'environnement
      relatives à <command>pkg-config</command> (voir sa documentation), ou
      configurer la variable d'environnement <envar>XML2_CONFIG</envar> pour
      qu'elle pointe sur le programme <command>xml2-config</command>
      appartenant à l'installation libxml2, ou configurer les variables
      <envar>XML2_CFLAGS</envar> et <envar>XML2_LIBS</envar>. (Si
      <command>pkg-config</command> est installé, alors, pour surcharger son
      idée de l'emplacement de libxml2, vous devez renseigner soit
      <envar>XML2_CONFIG</envar>, soit <envar>XML2_CFLAGS</envar> et
      <envar>XML2_LIBS</envar>, avec des chaînes non vides.)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-libxslt">
    <term><option>--with-libxslt</option></term>
    <listitem>
     <para>
      Compile avec libxslt, activant le module
      <xref linkend="xml2"/> pour opérer des transformations XSL sur du XML.
      <option>--with-libxml</option> doit être spécifié aussi.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-sepgsql">
    <term><option>--with-selinux</option></term>
    <listitem>
     <para>
      Compile avec SElinux, activant l'extension <xref linkend="sepgsql"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect3>

 <sect3 id="configure-options-anti-features">
  <title>Anti-fonctionnalités</title>

  <para>
   Les options décrites dans cette section permettent de désactiver
   certaines fonctionnalités de <productname>PostgreSQL</productname>
   compilées par défaut, mais que vous pouvez désactiver si ne sont pas
   disponibles un logiciel ou des fonctionnalités système nécessaires.
   L'utilisation de ces options n'est pas recommandée si ce n'est pas
   vraiment nécessaire.
  </para>

  <variablelist>
   <varlistentry id="configure-option-without-icu">
    <term><option>--without-icu</option></term>
    <listitem>
     <para>
      Compile sans support des bibliothèques
      <productname>ICU</productname><indexterm><primary>ICU</primary></indexterm>,
      désactivant l'utilisation de la fonctionnalité des collations ICU
      (voir <xref linkend="collation"/>).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-without-readline">
    <term><option>--without-readline</option></term>
    <listitem>
     <para>
      Empêche l'utilisation de la bibliothèque <application>Readline</application>
      (et <application>libedit</application> par la même occasion).
      Cette option désactive l'édition de la ligne de commande et l'historique dans
      <application>psql</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-libedit-preferred">
    <term><option>--with-libedit-preferred</option></term>
    <listitem>
     <para>
      Favorise l'utilisation de la bibliothèque <application>libedit</application>
      (licence BSD). Cette option n'est importante que si vous avez les deux
      librairies installées&nbsp;; le défaut dans ce cas est d'utiliser
      <application>Readline</application>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-without-zlib">
    <term><option>--without-zlib</option></term>
    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>
      Empêche l'utilisation de la bibliothèque <application>Zlib</application>.
      Cela désactive le support des archives compressées dans
      <application>pg_dump</application> et <application>pg_restore</application>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect3>

 <sect3 id="configure-options-build-process">
  <title>Détails du processus de compilation</title>

  <variablelist>
   <varlistentry id="configure-option-with-includes">
    <term><option>--with-includes=<replaceable>RÉPERTOIRES</replaceable></option></term>
    <listitem>
     <para>
      <replaceable>RÉPERTOIRES</replaceable> est une liste de répertoires,
      séparés par le caractère deux points (:), qui seront ajoutés à la liste de ceux
      où le compilateur recherche des fichiers d'en-tête.
      Si vous avez des paquets optionnels (comme
      GNU <application>Readline</application>) installés dans un
      emplacement non conventionnel, vous devez utiliser cette option,
      et probablement aussi l'option correspondante
      <option>--with-libraries</option>.
     </para>
     <para>
      Exemple&nbsp;: <literal>--with-includes=/opt/gnu/include:/usr/sup/include</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-libraries">
    <term><option>--with-libraries=<replaceable>RÉPERTOIRES</replaceable></option></term>
    <listitem>
     <para>
      <replaceable>RÉPERTOIRES</replaceable> est une liste de répertoires,
      séparés par le caractère deux points (:),
      où chercher des bibliothèques de fonctions.
      Si vous avez des paquets installés dans des
      emplacements non conventionnels, vous devez utiliser cette option
      (et probablement aussi l'option correspondante
      <option>--with-includess</option>).
     </para>
     <para>
      Exemple&nbsp;: <literal>--with-libraries=/opt/gnu/lib:/usr/sup/lib</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-system-tzdata">
    <term><option>--with-system-tzdata=<replaceable>RÉPERTOIRE</replaceable></option></term>

    <listitem>

     <indexterm>
      <primary>données de fuseau horaire</primary>
     </indexterm>

     <para>
      <productname>PostgreSQL</productname> inclut sa propre base de données
      des fuseaux horaires, nécessaire pour les opérations sur les dates et
      les heures. Cette base de données est en fait compatible avec la base
      de fuseaux horaires IANA fournie par de nombreux
      systèmes d'exploitation comme FreeBSD, Linux et Solaris, donc il semble
      redondant de l'installer une nouvelle fois. Quand cette option est
      utilisée, la base des fuseaux horaires fournie par le système, dans
      <replaceable>RÉPERTOIRE</replaceable>, est utilisée à la place de celle
      incluse dans la distribution des sources de PostgreSQL.
      <replaceable>RÉPERTOIRE</replaceable> doit être indiqué avec un chemin
      absolu. <filename>/usr/share/zoneinfo</filename> est un répertoire
      courant sur certains systèmes d'exploitation. Notez que la routine
      d'installation ne détectera pas les données de fuseau horaire différentes
      ou erronées. Si vous utilisez cette option, il est conseillé de
      lancer les tests de régression pour vérifier que les données de fuseau
      horaire que vous pointez fonctionnent correctement avec
      <productname>PostgreSQL</productname>.
     </para>

     <indexterm><primary>compilation croisée</primary></indexterm>

     <para>
      Cette option est surtout destinée aux distributeurs de paquets binaires,
      qui connaissent bien leur système d'exploitation.
      Le principal avantage de cette option est que le paquet de PostgreSQL
      n'aura pas besoin de mise à jour à chaque changement des règles des fuseaux
      horaires. Un autre avantage est que PostgreSQL peut être
      cross-compilé<indexterm><primary>compilation croisée</primary></indexterm>
      plus simplement si les fichiers des fuseaux horaires n'ont pas besoin
      d'être construits lors de l'installation.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-extra-version">
    <term><option>--with-extra-version=<replaceable>CHAÎNE</replaceable></option></term>
    <listitem>
     <para>
      Ajoute <replaceable>CHAÎNE</replaceable> au numéro de version de PostgreSQL.
      Par exemple, vous pouvez utiliser cela pour marquer des binaires compilés
      depuis des snapshots Git, ou contenant des patchs, avec une chaîne
      supplémentaire, comme un identifiant <command>git describe</command>
      ou un numéro de version de distribution du paquet.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-disable-rpath">
    <term><option>--disable-rpath</option></term>
    <listitem>
     <para>
      N'indique pas aux exécutables de <productname>PostgreSQL</productname>
      qu'ils doivent chercher les bibliothèques partagées dans le
      répertoire des bibliothèques de l'installation
      (voir <option>--libdir</option>).
      Sur la plupart des plateformes, cette indication utilise un
      chemin absolu vers le répertoire des bibliothèques,
      et sera inutile si vous déplacez l'installation plus tard.
      Cependant, vous devrez alors fournir aux exécutables
      un autre moyen pour trouver les bibliothèques partagées.
      Typiquement, cela implique de configurer l'éditeur de liens
      du système d'exploitation pour les rechercher&nbsp;;
      voir <xref linkend="install-post-shlibs"/> pour plus de détails.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </sect3>

 <sect3 id="configure-options-misc">
  <title>Divers</title>

  <para>
   Il est assez courant, particulièrement pour les compilations de test,
   de modifier le numéro de port avec l'option <option>--with-pgport</option>.
   Les autres options de cette section ne sont recommandées que pour
   les utilisateurs avancés.
  </para>

  <variablelist>
   <varlistentry id="configure-option-with-pgport">
    <term><option>--with-pgport=<replaceable>PORT</replaceable></option></term>
    <listitem>
     <para>
      Positionne <replaceable>PORT</replaceable> comme numéro de port
      pour les serveurs et les clients. Le défaut est 5432.
      Le port peut toujours être changé plus tard&nbsp;; mais, si vous le
      spécifiez ici, serveur et clients auront le même défaut dès la
      compilation, ce qui peut être très pratique.
      D'habitude, la seule bonne raison de sélectionner une autre valeur
      que le défaut est si vous avez l'intention de faire
      tourner plusieurs serveurs <productname>PostgreSQL</productname>
      sur la même machine.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-krb-srvnam">
    <term><option>--with-krb-srvnam=<replaceable>NOM</replaceable></option></term>
    <listitem>
     <para>
      Le nom par défaut du service principal Kerberos utilisé par GSSAPI.
      <literal>postgres</literal> est le défaut.
      D'habitude, il n'y a aucune raison de changer cela, à moins que
      vous ne compiliez pour un environnement Windows&nbsp; auquel cas
      ce doit être, en majuscules, <literal>POSTGRES</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-segsize">
    <term><option>--with-segsize=<replaceable>SEGSIZE</replaceable></option></term>
    <listitem>
     <para>
      Définit la taille d'un segment (<firstterm>segment size</firstterm>),
      en gigaoctets.
      Au niveau du système d'exploitation, les grandes tables sont divisées
      en plusieurs fichiers, chacun d'une taille égale à la taille d'un segment.
      Cela évite des problèmes avec les limites de taille de fichiers
      qui existent sur beaucoup de plateformes.
      La taille par défaut, 1&nbsp;gigaoctet, est une valeur
      sûre pour toutes les plateformes supportées.
      Si votre système d'exploitation supporte les fichiers de
      grande taille (<quote>largefile</quote>), et la plupart le font, de nos jours,
      vous pouvez utiliser une plus grande taille de segment.
      Ce peut être utile pour réduire le nombre de descripteurs de fichiers
      consommés en travaillant avec de très grandes tables.
      Mais faites attention à ne pas choisir une valeur plus large que ce
      qui est supporté par votre plateforme et les systèmes de fichiers
      que vous voulez utiliser.
      D'autres outils que vous pourriez vouloir utiliser, comme
      <application>tar</application>, peuvent aussi poser des limites
      sur la taille de fichier utilisable.
      Il est recommandé que cette valeur soit une puissance de 2,
      même si ce n'est pas absolument nécessaire.
      Notez que changer cette valeur casse la compatibilité entre bases
      au niveau fichier, ce qui veut dire que vous ne pouvez pas utiliser
      <command>pg_upgrade</command> pour mettre à jour vers une
      version compilée avec une taille de segment différente.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-blocksize">
    <term><option>--with-blocksize=<replaceable>TAILLEBLOC</replaceable></option></term>
    <listitem>
     <para>
      Définit la taille de bloc (<firstterm>block size</firstterm>), en kilooctets.
      C'est l'unité de stockage et d'entrée-sortie dans les tables.
      Le défaut, 8&nbsp;kilooctets, est adéquat pour la plupart des situations&nbsp;;
      mais d'autres valeurs peuvent être utiles dans certains cas.
      La valeur peut être une puissance de 2 entre 1 et 32 (kilooctets).
      Notez que changer cette valeur casse la compatibilité entre bases
      au niveau fichier, ce qui veut dire que vous ne pouvez pas utiliser
      <command>pg_upgrade</command> pour mettre à jour vers une
      version compilée avec une taille de bloc différente.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-wal-blocksize">
    <term><option>--with-wal-blocksize=<replaceable>TAILLEBLOC</replaceable></option></term>
    <listitem>
     <para>
      Définit la taille de bloc dans les journaux de transaction
      (<firstterm>WAL block size</firstterm>), en kilooctets.
      C'est l'unité de stockage et d'entrée-sortie en leur sein.
      Le défaut, 8&nbsp;kilooctets, convient pour la plupart des situations&nbsp;;
      mais d'autres valeurs peuvent être utiles dans certains cas.
      La valeur doit être une puissance de 2 entre 1 et 64 (kilooctets).
      Notez que changer cette valeur casse la compatibilité entre bases
      au niveau fichier, ce qui veut dire que vous ne pouvez pas utiliser
      <command>pg_upgrade</command> pour mettre à jour vers une
      version compilée avec une taille de bloc de WAL différente.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </sect3>

 <sect3 id="configure-options-devel">
  <title>Options pour les développeurs</title>

  <para>
   La plupart des options de cette section n'ont d'intérêt
   que pour développer ou déboguer <productname>PostgreSQL</productname>.
   Elles ne sont pas recommandées pour la production, sauf
   <option>--enable-debug</option>, qui peut être utile pour
   obtenir des rapports de bugs détaillés, dans l'éventualité
   malheureuse où vous rencontriez un bug.
   Sur les plateformes supportant DTrace, <option>--enable-dtrace</option>
   peut raisonnablement être utilisé en production.
  </para>

  <para>
   Pour compiler une installation destinée à développer du code
   au sein du serveur, il est recommandé d'utiliser au moins
   les options <option>--enable-debug</option>
   et <option>--enable-cassert</option>.
  </para>

  <variablelist>

   <varlistentry id="configure-option-enable-debug">
    <term><option>--enable-debug</option></term>
    <listitem>
     <para>
      Compile tous les programmes et bibliothèques
      avec les symboles de débogage.
      Cela signifie que vous pouvez exécuter les programmes au sein d'un
      débogueur pour analyser les problèmes. Cela augmente considérablement
      la taille des exécutables et, avec des compilateurs autres que GCC,
      désactive habituellement les optimisations du compilateur,
      provoquant des ralentissements. Cependant, avoir les symboles en place est
      extrêmement utile pour traiter d'éventuels problèmes. Actuellement, cette
      option n'est recommandée pour les installations en production que
      si vous utilisez GCC. Néanmoins, vous devriez toujours l'utiliser si vous
      développez, ou si vous utilisez une version bêta.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-enable-cassert">
    <term><option>--enable-cassert</option></term>
    <listitem>
     <para>
      Active les vérifications des assertions (<firstterm>assertion</firstterm>)
      dans le serveur, qui testent de nombreuses conditions qui
      <quote>ne peuvent pas arriver</quote>.
      C'est inestimable pour le développement du code, mais les tests
      peuvent ralentir le serveur considérablement.
      Activer ces tests ne va pas améliorer la stabilité de votre
      serveur&nbsp;! Les tests des assertions ne sont pas triés par
      sévérité, et un petit bug relativement inoffensif,
      s'il déclenche un échec d'assertion,
      peut mener à des redémarrages du serveur&nbsp;!
      Cette option n'est pas recommandée en production, mais vous devriez
      l'avoir en développement, ou en utilisant une version bêta.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-enable-tap-tests">
    <term><option>--enable-tap-tests</option></term>
    <listitem>
     <para>
      Active les tests avec les outils TAP de Perl.
      Cela nécessite une installation de Perl et de son module
      <literal>IPC::Run</literal>.
      Voir <xref linkend="regress-tap"/> pour plus d'information.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-enable-depend">
    <term><option>--enable-depend</option></term>
    <listitem>
     <para>
      Active le suivi automatique des dépendances.
      Avec cette option, les makefiles sont conçus pour que
      tous les fichiers objets soient recompilés si n'importe
      quel fichier d'en-tête change.
      C'est utile si vous faites du développement, mais n'est que
      gaspillage si vous ne devez compiler qu'une fois pour
      installer.
      Pour le moment, cette option ne fonctionne qu'avec GCC.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-enable-coverage">
    <term><option>--enable-coverage</option></term>
    <listitem>
     <para>
      Si vous utilisez GCC, tous les programmes et bibliothèques sont compilés avec
      de l'instrumentation de test de couverture de code. Quand ils sont exécutés,
      ils génèrent des fichiers dans le répertoire de compilation avec des
      métriques de couverture de code.
      Voir <xref linkend="regress-coverage"/> pour davantage d'informations.
      Cette option ne doit être utilisée qu'avec GCC
      et en développement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-enable-profiling">
    <term><option>--enable-profiling</option></term>
    <listitem>
     <para>
      En cas d'utilisation de GCC, tous les programmes et bibliothèques
      sont compilés pour pouvoir être profilés. À la sortie du
      processus serveur, un sous-répertoire sera créé pour contenir le
      fichier <filename>gmon.out</filename> contenant les données de profilage.
      Cette option n'est à utiliser qu'avec GCC et en développement.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-enable-dtrace">
    <term><option>--enable-dtrace</option></term>
    <listitem>
     <para>
      <indexterm>
       <primary>DTrace</primary>
      </indexterm>
      Compile <productname>PostgreSQL</productname> avec le support de l'outil
      de trace dynamique, DTrace.
      Voir <xref linkend="dynamic-trace"/> pour plus d'informations.
     </para>

     <para>
      Pour pointer vers le programme <command>dtrace</command>, la variable
      d'environnement <envar>DTRACE</envar> peut être configurée. Ce sera
      souvent nécessaire, car <command>dtrace</command> est typiquement
      installé sous <filename>/usr/sbin</filename>, qui peut ne pas être
      dans votre <envar>PATH</envar>.
     </para>

     <para>
      Des options supplémentaires en ligne de commande
      pour <command>dtrace</command>
      peuvent être indiquées dans la variable d'environnement
      <envar>DTRACEFLAGS</envar> pour le programme <command>dtrace</command>.
      Sur Solaris, pour inclure le support de DTrace dans un exécutable 64 bits, ajoutez
      l'option <literal>DTRACEFLAGS="-64"</literal>. Par
      exemple, en utilisant le compilateur GCC&nbsp;:
      <screen>./configure CC='gcc -m64' --enable-dtrace DTRACEFLAGS='-64' ...
      </screen>
      En utilisant le compilateur de Sun&nbsp;:
      <screen>./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' --enable-dtrace DTRACEFLAGS='-64' ...
      </screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-enable-injection-points">
    <term><option>--enable-injection-points</option></term>
    <listitem>
     <para>
      Compile <productname>PostgreSQL</productname> avec le support des points
      d'injection dans le serveur. Les points d'injection permettent d'exécuter
      du code utilisateur à l'intérieur du serveur pour des chemins de code
      prédéfinis. Ceci aide aux tests et à l'investigation de scénarios
      parallélisés d'une façon contrôlé. Cette option est désactivée par défaut.
      Voir <xref linkend="xfunc-addin-injection-points"/> pour plus de détails.
      Cette option a pour but d'être utilisée uniquement pour les tests des
      développeurs.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-option-with-segsize-blocks">
    <term><option>--with-segsize-blocks=SEGSIZE_BLOCKS</option></term>
    <listitem>
     <para>
      Précise la taille des segments des relations en blocs. Si
      <option>--with-segsize</option> et cette option sont toutes les deux
      précisées, cette option l'emporte. Cette option est seulement pour les
      développeurs, pour tester le code en relation aux segments.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect3>
</sect2>

<sect2 id="configure-envvars">
 <title>Variables d'environnement de <filename>configure</filename></title>

 <indexterm zone="configure-envvars">
  <primary>configure (variables d'environnement)</primary>
 </indexterm>

 <para>
  En plus des options de ligne de commande ordinaires décrites
  plus haut, <filename>configure</filename> répond à nombre
  de variables d'environnement.
  Vous pouvez les spécifier sur la ligne de commande de
  <filename>configure</filename>, par exemple ainsi&nbsp;:
  <screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</userinput>
  </screen>
  Dans ce cas, une variable d'environnement est peu différente d'une
  option de ligne de commande.
  Vous pouvez aussi les placer au préalable&nbsp;:
  <screen>
<userinput>export CC=/opt/bin/gcc</userinput>
<userinput>export CFLAGS='-O2 -pipe'</userinput>
<userinput>./configure</userinput>
  </screen>
  Cette utilisation peut être pratique parce que les scripts de
  configuration de beaucoup de programmes répondent à ces
  variables de manière similaire.
 </para>

 <para>
  Les plus utilisées de ces variables d'environnement sont
  <envar>CC</envar> et <envar>CFLAGS</envar>.
  Si vous préférez utiliser un compilateur C différent de celui choisi par
  <filename>configure</filename>, positionnez la variable
  <envar>CC</envar> vers le compilateur de votre choix.
  Par défaut, <filename>configure</filename> choisira
  <filename>gcc</filename> s'il est disponible, et sinon celui par
  défaut sur la plateforme (habituellement <filename>cc</filename>).
  De façon similaire, vous pouvez repositionner les options par défaut du
  compilateur à l'aide de la variable <envar>CFLAGS</envar>.
 </para>

 <para>
  Voici une liste des variables importantes qui sont configurables de cette
  façon&nbsp;:
 </para>

 <para>
  <variablelist>
   <varlistentry id="configure-envvars-bison">
    <term><envar>BISON</envar></term>
    <listitem>
     <para>
      programme Bison
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-cc">
    <term><envar>CC</envar></term>
    <listitem>
     <para>
      compilateur C
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-cflags">
    <term><envar>CFLAGS</envar></term>
    <listitem>
     <para>
      options à passer au compilateur C
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-clang">
    <term><envar>CLANG</envar></term>
    <listitem>
     <para>
      chemin vers le programme <command>clang</command> utilisé pour
      optimiser le code source lors de la compilation avec
      <literal>--with-llvm</literal>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-cpp">
    <term><envar>CPP</envar></term>
    <listitem>
     <para>
      préprocesseur C
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-cppflags">
    <term><envar>CPPFLAGS</envar></term>
    <listitem>
     <para>
      options à passer au préprocesseur C
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-cxx">
    <term><envar>CXX</envar></term>
    <listitem>
     <para>
      compilateur C++
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-cxxflags">
    <term><envar>CXXFLAGS</envar></term>
    <listitem>
     <para>
      options à passer au compilateur C++
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-dtrace">
    <term><envar>DTRACE</envar></term>
    <listitem>
     <para>
      emplacement du programme <command>dtrace</command>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-dtraceflags">
    <term><envar>DTRACEFLAGS</envar></term>
    <listitem>
     <para>
      options à passer au programme <command>dtrace</command>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-flex">
    <term><envar>FLEX</envar></term>
    <listitem>
     <para>
      programme Flex
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-ldflags">
    <term><envar>LDFLAGS</envar></term>
    <listitem>
     <para>
      options à utiliser lors de l'édition des liens des exécutables et des
      bibliothèques partagées
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-ldflags-ex">
    <term><envar>LDFLAGS_EX</envar></term>
    <listitem>
     <para>
      options supplémentaires valables uniquement lors de l'édition des
      liens des exécutables
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-ldflags-sl">
    <term><envar>LDFLAGS_SL</envar></term>
    <listitem>
     <para>
      options supplémentaires valables uniquement lors de l'édition des
      liens des bibliothèques partagées
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-llvm-config">
    <term><envar>LLVM_CONFIG</envar></term>
    <listitem>
     <para>
      programme <command>llvm-config</command> à utiliser pour localiser
      l'installation <productname>LLVM</productname>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-msgfmt">
    <term><envar>MSGFMT</envar></term>
    <listitem>
     <para>
      programme <command>msgfmt</command> pour le support des langues
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-perl">
    <term><envar>PERL</envar></term>
    <listitem>
     <para>
      programme interpréteur Perl. Il sera utilisé pour déterminer les
      dépendances pour la compilation de PL/Perl. La valeur par défaut est
      <command>perl</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-python">
    <term><envar>PYTHON</envar></term>
    <listitem>
     <para>
      chemin complet vers l'interpréteur Python. Il sera utilisé pour déterminer
      les dépendances pour la compilation de PL/Python. S'il n'est pas
      configuré, les chemins suivants sont testés dans cet ordre&nbsp;:
      <literal>python3 python</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-tclsh">
    <term><envar>TCLSH</envar></term>
    <listitem>
     <para>
      programme interpréteur Tcl. Il sera utilisé pour déterminer
      les dépendances pour la compilation de PL/Tcl.
      Si ce paramètre n'est pas en place, seront testés dans cet ordre&nbsp;:
      <literal>tclsh tcl tclsh8.6 tclsh86 tclsh8.5 tclsh85
      tclsh8.4 tclsh84</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="configure-envvars-xml2-config">
    <term><envar>XML2_CONFIG</envar></term>
    <listitem>
     <para>
      programme <command>xml2-config</command> utilisé pour trouver
      l'emplacement de l'installation de libxml2.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>

 <para>
  Parfois, ajouter des options de compilation après coup à celles
  choisies par <filename>configure</filename> peut se révéler utile.
  Un exemple parlant
  concerne l'option <option>-Werror</option> de
  <application>gcc</application>, qui ne peut pas être incluse dans la
  variable <envar>CFLAGS</envar> passée à <filename>configure</filename>,
  car elle casserait un grand nombre de tests internes de
  <filename>configure</filename>. Pour ajouter de telles options, incluez-les
  dans la variable d'environnement <envar>COPT</envar> lors de
  l'exécution de <filename>make</filename>. Le contenu de
  <envar>COPT</envar> est ajouté aux variables <envar>CFLAGS</envar>,
  <envar>LDFLAGS</envar> et
  <envar>LDFLAGS</envar> configurées par <filename>configure</filename>.
  Par exemple, vous pouvez faire&nbsp;:
<screen>
<userinput>make COPT='-Werror'</userinput>
  </screen>
  ou
  <screen>
<userinput>export COPT='-Werror'</userinput>
<userinput>make</userinput>
  </screen>
 </para>

 <note>
  <para>
   Si vous utilisez GCC, il est préférable de compiler avec un niveau
   d'optimisation d'au moins <option>-O1</option>, parce que l'absence
   d'optimisation (<option>-O0</option>) désactive aussi certains
   messages importants du compilateur (comme l'utilisation de variables
   non initialisées). Néanmoins, les niveaux d'optimisations peuvent
   compliquer le débogage&nbsp;: un pas-à-pas sur le code
   compilé ne correspondra pas forcément directement aux lignes de code.
   Si vous avez du mal à déboguer du code optimisé, recompilez les fichiers
   qui vous intéressent avec <option>-O0</option>.
   Une façon simple de le faire est
   de passer une option à <application>make</application>:
   <command>make PROFILE=-O0 file.o</command>.
  </para>

  <para>
   En fait, les variables d'environnement <envar>COPT</envar> et
   <envar>PROFILE</envar> sont gérées de façon identique par les
   makefiles de <productname>PostgreSQL</productname>. Laquelle utiliser est
   une affaire de préférence, mais l'usage parmi les développeurs
   est d'utiliser <envar>PROFILE</envar> pour les ajustements ponctuels,
   alors que <envar>COPT</envar> peut être conservée en permanence.
  </para>
 </note>
</sect2>
</sect1>

 <sect1 id="install-meson">
  <title>Compilation et installation avec Meson</title>

 <sect2 id="install-short-meson">
  <title>Version courte</title>

  <para>
<synopsis>
meson setup build --prefix=/usr/local/pgsql
cd build
ninja
su
ninja install
adduser postgres
mkdir -p /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</synopsis>
   La version longue correspond au reste de cette <phrase>section</phrase>.
  </para>
 </sect2>

 <sect2 id="install-procedure-meson">
  <title>Procédure d'installation</title>

  <procedure>

  <step id="meson-configure">
   <title>Configuration</title>

   <para>
    La première étape de la procédure d'installation est de configurer le
    répertoire de compilation pour votre système et de choisir les options que
    vous souhaitez. Pour créer et configurer le répertoire de compilation, vous
    pouvez démarrer avec la commande <literal>meson setup</literal>.
<screen>
<userinput>meson setup build</userinput>
</screen>
    Cette commande d'initialisation prend comme argument un <literal>builddir</literal>
    et un <literal>srcdir</literal>. Si aucun <literal>srcdir</literal> n'est fourni, Meson
    va déduire le <literal>srcdir</literal> en se basant sur le répertoire courant et la
    location de <literal>meson.build</literal>. Le <literal>builddir</literal> est obligatoire.
   </para>

   <para>
    Exécuter <literal>meson setup</literal> charge le fichier de configuration
    généré et initialise le répertoire de compilation. De plus, vous pouvez
    aussi passer de nombreuses options de compilation à Meson. Certaines les
    plus communément utilisées sont mentionnées dans les sections suivantes. Par
    exemple&nbsp;:

<screen>
# configure avec un préfixe d'installation différent :
meson setup build --prefix=/home/user/pg-install

# configure pour une compilation de débug :
meson setup build --buildtype=debug

# configure pour une compilation avec support OpenSSL :
meson setup build -Dssl=openssl
</screen>
   </para>

   <para>
    Initialiser le répertoire de compilation est une étape qui s'effectue une
    fois seulement. Pour reconfigurer une nouvelle compilation, vous pouvez
    simplement utiliser la commande <literal>meson configure</literal>.
<screen>
meson configure -Dcassert=true
</screen>
    Les options en ligne de commande de <command>meson configure</command> les
    plus communément utilisées sont expliquées dans <xref
    linkend="meson-options"/>.
   </para>
  </step>

  <step id="meson-build">
   <title>Compilation</title>

   <para>
    Par défaut, <productname>Meson</productname> utilise l'outil de compilation
    <ulink url="https://ninja-build.org/">Ninja</ulink>. Pour compiler
    <productname>PostgreSQL</productname> depuis les sources en utilisant Meson,
    vous devez simplement utiliser la commande <literal>ninja</literal> dans
    le répertoire de compilation.
<screen>
ninja
</screen>
    Ninja va automatiquement détecter le nombre de CPU dans votre ordinateur et
    paralléliser lui-même en conséquence. Vous pouvez surcharger le nombre de
    processus parallèles utilisés avec l'argument de ligne de commande
    <literal>-j</literal>.
   </para>

   <para>
    Prenez note qu'après l'étape initiale de configuration, <command>ninja</command>
    est la seule commande que vous aurez besoin de saisir pour compiler.
    Quelque soit la façon dont vous modifiez l'arborescence source (à moins de la
    déplacer vers un emplacement complètement nouveau), Meson va détecter les
    changements et se régénérer lui-même en conséquence. Ceci est particulièrement pratique
    si vous avez de multiples répertoires de compilation. Souvent, l'un d'eux est
    utilisé pour le développement (la compilation en mode «&nbsp;debug&nbsp;») et les autres
    seulement de temps en temps (telle que la compilation en mode «&nbsp;analyse statique&nbsp;»).
    N'importe quelle configuration peut être compilée juste en se déplaçant via cd dans
    le répertoire correspondant puis en exécutant Ninja.
   </para>

   <para>
    Si vous souhaitez compiler avec un autre outil que ninja, vous pouvez
    utiliser configure avec l'option <option>--backend</option> pour
    sélectionner celui que vous voulez utiliser et compiler en utilisant
    <literal>meson compile</literal>. Pour en savoir plus sur ces outils et les
    autres arguments que vous pouvez fournir à ninja, vous pouvez vous référer à
    la <ulink
    url="https://mesonbuild.com/Running-Meson.html#building-from-the-source">
    documentation de Meson</ulink>.
   </para>
  </step>

  <step>
   <title>Tests de régression</title>

   <indexterm>
    <primary>test de régression</primary>
   </indexterm>

   <para>
    Si vous voulez tester la nouvelle compilation du serveur avant de
    l'installer, vous pouvez exécuter des tests de régression à ce point. Les
    tests de régression sont une suite de test vérifiant que
    <productname>PostgreSQL</productname> s'exécute sur votre machine de la
    façon dont les développeurs l'attendent.  Saisissez&nbsp;:
<screen>
<userinput>meson test</userinput>
</screen>
    (Cela ne fonctionnera pas en tant que root&nbsp;; exécutez-le avec un
    utilisateur non privilégié.) Voir <xref linkend="regress"/> pour des
    informations détaillées sur l'interprétation des résultats des tests. Vous
    pouvez répéter ce test plus tard en exécutant la même commande.
   </para>

   <para>
    Pour exécuter les tests pg_regress et pg_isolation_regress sur une instance
    postgres démarrée, préciser <userinput>--setup running</userinput> comme
    argument à <userinput>meson test</userinput>.
   </para>
  </step>

  <step id="meson-install">
   <title>Installer les fichiers</title>

   <note>
    <para>
     Si vous mettez à jour un système existant, soyez sûr de lire
     <xref linkend="upgrading"/>, qui indique les instructions pour
     mettre à jour une instance.
    </para>
   </note>

   <para>
    Une fois que PostgreSQL est compilé, vous pouvez l'installer simplement en
    exécutant la commande <literal>ninja install</literal>.
<screen>
ninja install
</screen>
   </para>

   <para>
    Ceci installera les fichiers dans les répertoires qui ont été spécifiés dans
    <xref linkend="meson-configure"/>. Assurez-vous que vous disposez des droits
    appropriés pour écrire dans ces zones. Vous pourriez avoir besoin de
    l'exécuter sous root. Alternativement, vous pouvez créer les répertoires
    cibles en avance et vous assurer de l'octroi des droits appropriées.
    L'installation standard fournit les fichiers entête nécessaire pour le
    développement d'application client aussi bien que le développement de
    programme côté serveur, comme des fonctions personnalisées ou des types de
    données écrits en C.
   </para>

   <para>
    <literal>ninja install</literal> devrait fonctionner dans la plupart des
    cas, mais si vous préférez plus d'options (telles que
    <option>--quiet</option> pour supprimer les sorties supplémentaires), vous
    pouvez aussi utiliser à la place <literal>meson install</literal>. Vous
    pouvez en apprendre plus sur <ulink
    url="https://mesonbuild.com/Commands.html#install">meson install</ulink> et
    ces options dans la documentation Meson.
   </para>
  </step>
  </procedure>

  <formalpara>
   <title>Désinstallation</title>
   <para>
    Pour annuler l'installation, vous pouvez utiliser la commande
    <command>ninja uninstall</command>.
   </para>
  </formalpara>

  <formalpara>
   <title>Nettoyage</title>
   <para>
    Après l'installation, vous pouvez libérer l'espace disque en supprimant
    les fichiers compilés depuis le répertoire source avec la commande
    <command>ninja clean</command>.
   </para>
  </formalpara>
  </sect2>

  <sect2 id="meson-options">
   <title>Options de <literal>meson setup</literal></title>

   <para>
    Les options de la ligne de commande <literal>meson setup</literal> sont
    explicitées ci-dessous. La liste n'est pas exhaustive (utiliser
    <literal>meson configure --help</literal> pour obtenir l'exhaustivité). Les
    options non couvertes ici sont destinées à des cas d'usage avancés, et sont
    documentées dans la <ulink
    url="https://mesonbuild.com/Commands.html#configure">documentation de
    Meson</ulink>. Ces arguments peuvent être utilisés aussi bien avec
    <command>meson setup</command>.
   </para>

   <sect3 id="meson-options-locations">
    <title>Emplacements d'installation</title>

     <para>
      Ces options contrôlent où <literal>ninja install</literal> (ou
      <literal>meson install</literal>) vont déposer les fichiers. L'option
      <option>--prefix</option> (exemple <xref linkend="install-short-meson"/>)
      est suffisante pour la plupart des cas.  Si vous avez des besoins
      particuliers, vous pouvez personnaliser les sous-répertoires
      d'installation avec les autres options décrites dans cette section.
      Attention, cependant, que tout changement relatif aux emplacements des
      différents sous-répertoires peut rendre l'installation non déplaçable,
      signifiant que vous ne pourrez plus la déplacer après l'installation.
      (Les emplacements <literal>man</literal> et <literal>doc</literal> ne sont
      pas affectés par cette restriction.) Pour des installations déplaçables,
      vous pouvez vouloir utiliser l'option <literal>-Drpath=false</literal>
      décrite plus loin.
     </para>

     <variablelist>
      <varlistentry id="configure-prefix-meson">
       <term><option>--prefix=<replaceable>PREFIX</replaceable></option></term>
       <listitem>
        <para>
         Installe tous les fichier sous le répertoire
         <replaceable>PREFIX</replaceable> au lieu de
         <filename>/usr/local/pgsql</filename> (sur les systèmes basés sur Unix)
         ou
         <filename><replaceable>lettre_lecteur_courant</replaceable>:/usr/local/pgsql</filename>
         (sur Windows).  Les fichiers seront installés dans divers
         sous-répertoires&nbsp;; aucun fichier ne sera directement installé dans
         le répertoire <replaceable>PREFIX</replaceable>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="configure-bindir-meson">
       <term><option>--bindir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Précise le répertoire pour des programmes exécutables. La valeur par
         défaut est <filename><replaceable>PREFIX</replaceable>/bin</filename>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="configure-sysconfdir-meson">
       <term><option>--sysconfdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Précise le répertoire pour divers fichiers de configuration,
         par défaut <filename><replaceable>PREFIX</replaceable>/etc</filename> .
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="configure-libdir-meson">
       <term><option>--libdir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Précise l'emplacement d'installation des bibliothèques et modules dynamiquement
         chargeables. Le défaut est <filename><replaceable>PREFIX</replaceable>/lib</filename>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="configure-includedir-meson">
       <term><option>--includedir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Précise le répertoire pour installer les fichiers entêtes C et C++.
         Le défaut est <filename><replaceable>PREFIX</replaceable>/include</filename>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="configure-datadir-meson">
       <term><option>--datadir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Précise le répertoire pour les fichiers de données en lecture seule utilisés
         par les programmes installés. Le défaut est
         <filename><replaceable>PREFIX</replaceable>/share</filename>. Notez qu'il n'a
         rien à voir avec l'emplacement des fichiers de base de données.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="configure-localedir-meson">
       <term><option>--localedir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Précise le répertoire pour installer les données des locales, en particulier
         les fichiers du catalogue de traduction des messages. Le défaut est
         <filename><replaceable>DATADIR</replaceable>/locale</filename>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="configure-mandir-meson">
       <term><option>--mandir=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
         Les pages man qui viennent avec <productname>PostgreSQL</productname> seront
         installées dans ce répertoire, dans leur sous-répertoires
         <filename>man<replaceable>x</replaceable></filename> respectifs.
         Le défaut est <filename><replaceable>DATADIR</replaceable>/man</filename>.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

     <note>
      <para>
       Des précautions ont été prises pour rendre possible l'installation de
       <productname>PostgreSQL</productname> dans des emplacements d'installation
       partagés (tels que <filename>/usr/local/include</filename>) sans
       interférer avec l'espace de noms du reste du système. D'abord la chaîne
       <quote><literal>/postgresql</literal></quote> est automatiquement concaténée à
       <varname>datadir</varname>, <varname>sysconfdir</varname>, et <varname>docdir</varname>,
       à moins que le nom de répertoire pleinement étendu contienne déjà la chaîne
       <quote><literal>postgres</literal></quote> ou <quote><literal>pgsql</literal></quote>.
       Par exemple, si vous choisissez <filename>/usr/local</filename> comme préfixe,
       la documentation sera installée dans <filename>/usr/local/doc/postgresql</filename>,
       mais si le préfixe est <filename>/opt/postgres</filename>, alors cela sera dans
       <filename>/opt/postgres/doc</filename>. Les fichiers entêtes C publiques des
       interfaces clientes seront installés dans <varname>includedir</varname> et
       sont propres à l'espace de noms. Les fichiers d'entête internes et les fichiers
       d'entête serveur sont installés dans des répertoires privés sous <varname>includedir</varname>.
       Voir la documentation pour chaque interface pour les informations d'accès aux
       fichiers entêtes. Enfin, un sous-répertoire privé sera aussi créé, si cela est
       approprié, sous <varname>libdir</varname> pour les modules dynamiquement
       chargeables.
      </para>
     </note>
    </sect3>

   <sect3 id="meson-options-features">
    <title>fonctionnalités de <productname>PostgreSQL</productname></title>

    <para>
     Les options décrites dans cette section permettent la compilation de
     diverses fonctionnalités obsolètes de <productname>PostgreSQL</productname>.
     La plupart requièrent des logiciels additionnels, comme décrit dans
     <xref linkend="install-requirements"/>, et seront automatiquement activées
     si le logiciel requis est trouvé. Vous pouvez changer ce comportement
     en mettant manuellement ces fonctionnalités à <literal>enabled</literal>
     pour les demander ou <literal>disabled</literal> pour ne pas les intégrer
     à la compilation.
    </para>

    <para>
     Pour préciser les options spécifiques de PostgreSQL, le nom de l'option
     doit être préfixée par <literal>-D</literal>.
    </para>

    <variablelist>
     <varlistentry id="configure-with-nls-meson">
      <term><option>-Dnls={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Active ou désactive le support de language natif (Native Language Support <acronym>NLS</acronym>),
        qui est la possibilité d'afficher les messages d'un programme dans une langue autre
        que l'anglais. Le défaut est auto et sera activé automatiquement si une
        implémentation de l'<application>API Gettext</application> est trouvée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-plperl-meson">
      <term><option>-Dplperl={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile le langage serveur <application>PL/Perl</application>.
        Le défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-plpython-meson">
      <term><option>-Dplpython={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile le langage serveur <application>PL/Python</application>.
        Le défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-pltcl-meson">
      <term><option>-Dpltcl={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile le langage serveur <application>PL/Tcl</application>.
        Le défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-tcl-version-meson">
      <term><option>-Dtcl_version=<replaceable>TCL_VERSION</replaceable></option></term>
      <listitem>
       <para>
        Définit la version Tcl à utiliser lors de la compilation de PL/Tcl.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-icu-meson">
      <term><option>-Dicu={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile le support pour la bibliothèque
        <productname>ICU</productname><indexterm><primary>ICU</primary></indexterm>,
        activant l'utilisation des fonctionnalités des collations ICU
        (voir <xref linkend="collation"/>). Le défaut est auto et demande que le
        paquet <productname>ICU4C</productname> soit installé. La version minimale
        requise de <productname>ICU4C</productname> est actuellement 4.2.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-llvm-meson">
      <term><option>-Dllvm={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support pour <productname>LLVM</productname> basé sur
        la compilation <acronym>JIT</acronym> (voir <xref linkend="jit"/>).
        Cela nécessite d'installer la bibliothèque <productname>LLVM</productname>.
        La version minimale de <productname>LLVM</productname> est actuellement 3.9.
        Désactivé par défaut.
       </para>

       <para>
        <command>llvm-config</command><indexterm><primary>llvm-config</primary></indexterm>
        sera utilisée pour trouver les options de compilations requises.
        <command>llvm-config</command>, et ensuite,
        pour toutes les versions supportées, <command>llvm-config-$version</command> seront
        recherchées dans votre <envar>PATH</envar>. Si cela ne donne pas le programme
        souahité, utilisez <envar>LLVM_CONFIG</envar> pour définir un chemin vers le
        <command>llvm-config</command> correct.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-lz4-meson">
      <term><option>-Dlz4={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support de compression <productname>LZ4</productname>.
        Le défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-zstd-meson">
      <term><option>-Dzstd={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support de compression <productname>Zstandard</productname>.
        Le défault est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-ssl-meson">
      <term><option>-Dssl={ auto | <replaceable>LIBRARY</replaceable> }</option>
      <indexterm>
       <primary>OpenSSL</primary>
       <seealso>SSL</seealso>
      </indexterm>
      </term>
      <listitem>
       <para>
        Compile avec le support pour les connexions (chiffrées)
        <acronym>SSL</acronym>.  La seule <replaceable>LIBRARY</replaceable>
        supportée est <option>openssl</option>.  Ceci nécessite que le paquet
        <productname>OpenSSL</productname> soit installé.  Compiler avec cette
        option implique de vérifier les fichiers d'entête et bibliothèques
        requises pour être sûr que votre installation
        <productname>OpenSSL</productname> soit suffisante avant exécution. Le
        défaut pour cette option est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-gssapi-meson">
      <term><option>-Dgssapi={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support de l'authentification GSSAPI. Il est nécessaire
        que MIT Kerberos soit installé pour GSSAPI. Sur de nombreux systèmes, le
        système GSSAPI (un sous-ensemble de l'installation MIT Kerberos) n'est
        pas installé dans un emplacement recherché par défaut (i.e.
        <filename>/usr/include</filename>, <filename>/usr/lib</filename>). Dans
        ces cas, PostgreSQL va interroger <command>pkg-config</command> pour
        détecter le compilateur requis et les options de lien. Le défaut est
        auto.  <filename>meson configure</filename> va vérifier pour les
        fichiers d'entête et bibliothèques pour être sûr que votre installation
        GSSAPI est suffisante avant exécution.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-ldap-meson">
      <term><option>-Dldap={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support pour l'authentification
        <acronym>LDAP</acronym><indexterm><primary>LDAP</primary></indexterm> et
        la recherche de paramètre de connexion (voir <phrase
        id="install-ldap-links-meson"><xref linkend="libpq-ldap"/> et <xref
        linkend="auth-ldap"/></phrase> pour plus d'information). Sous Unix, ceci
        nécessite d'installer le paquet <productname>OpenLDAP</productname>.
        Sous Windows, la bibliothèque <productname>WinLDAP</productname> est
        utilisée par défaut. Le défaut est auto. <filename>meson
        configure</filename> va vérifier les fichiers d'entête et bibliothèques
        requises pour s'assurer que votre installation
        <productname>OpenLDAP</productname> est suffisante avant exécution.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-pam-meson">
      <term><option>-Dpam={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support
        <acronym>PAM</acronym><indexterm><primary>PAM</primary></indexterm>.
        Le défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-bsd-auth-meson">
      <term><option>-Dbsd_auth={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support de l'authentification BSD. (Le système
        d'authentification BSD n'est actuellement disponible que sur OpenBSD.) Le
        défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-systemd-meson">
      <term><option>-Dsystemd={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support de service de notifications
        <application>systemd</application><indexterm><primary>systemd</primary></indexterm>.
        Ceci améliore l'intégration si le serveur est démarré sous
        <application>systemd</application> mais n'a aucun impact autrement&nbsp;;
        voir <xref linkend="server-start"/> pour plus d'information. Le défaut est
        auto. <application>libsystemd</application> et les fichiers d'entête
        associés doivent être installés pour utiliser cette option.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-bonjour-meson">
      <term><option>-Dbonjour={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec le support pour le service de découverte automatique
        Bonjour. Le défaut est auto et nécessite le support de Bonjour sur
        votre système d'exploitation. Recommandé sur macOS.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-uuid-meson">
      <term><option>-Duuid=<replaceable>LIBRARY</replaceable></option></term>
      <listitem>
       <para>
        Compile le module <xref linkend="uuid-ossp"/> (qui fournit les fonctions
        de génération des UUID), utilisant la bibliothèque UUID spécifiée.
        <indexterm><primary>UUID</primary></indexterm>
        <replaceable>LIBRARY</replaceable> peut valoir&nbsp;:
       </para>
       <itemizedlist>
        <listitem>
         <para>
          <option>none</option> pour ne pas compiler le module. C'est le défaut.
         </para>
        </listitem>
        <listitem>
         <para>
          <option>bsd</option> pour utiliser les fonctions UUID trouvées dans
          FreeBSD, et dans certains systèmes dérivés de BSD.
         </para>
        </listitem>
        <listitem>
         <para>
          <option>e2fs</option> pour utiliser la bibliothèque UUID créée par le
          projet <literal>e2fsprogs</literal>&nbsp;; cette bibliothèque est
          présente sur la plupart des systèmes Linux comme sur macOS, et peut
          aussi bien être obtenue pour d'autres plateformes.
         </para>
        </listitem>
        <listitem>
         <para>
          <option>ossp</option> pour utiliser la <ulink
          url="http://www.ossp.org/pkg/lib/uuid/">bibliothèque OSSP UUID</ulink>
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-libcurl-meson">
      <term><option>-Dlibcurl={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec libcurl pour les flux clients OAuth 2.0.
        Libcurl version 7.61.0 ou ultérieure est requis pour cette
        fonctionnalité. Demander cette option forcera la vérification des
        fichiers d'en-tête et des bibliothèques requis pour s'assurer que
        votre installation de <productname>Curl</productname> est suffisante
        pour continuer. La valeur par défaut de cette option est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-liburing-meson">
      <term><option>-Dliburing={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec liburing, activant le support des entrées/sorties disques
        asynchrones. Sa valeur par défaut est auto.
       </para>

       <para>
        Pour utiliser une installation de liburing située dans un répertoire
        inhabituel, vous pouvez configurer les variables d'environnements
        relatives de <command>pkg-config</command> (voir sa documentation).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-libnuma-meson">
      <term><option>-Dlibnuma={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec libnuma pour un support basique de NUMA.
        Seulement accepté sur les plateformes pour lesquelles la bibliothèque
        <productname>libnuma</productname> est implémentée. La valeur par défaut
        de cette option est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-libxml-meson">
      <term><option>-Dlibxml={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec libxml2, activant le support de SQL/XML. Le défaut est
        auto. La version 2.6.23 de libxml2 ou supérieure est nécessaire pour
        cette fonctionnalité.
       </para>

       <para>
        Pour utiliser une installation libxml2 dans un emplacement inhabituel,
        vous pouvez définir les variables d'environnement
        <command>pkg-config</command> associées (voir sa documentation).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-libxslt-meson">
      <term><option>-Dlibxslt={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Compile avec lbxslt, activant le <xref linkend="xml2"/>module de
        transformation XSL du XML. L'option <option>-Dlibxml</option> doit
        aussi être définiée. Le défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-with-sepgsql-meson">
      <term><option>-Dselinux={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Build with SElinux support, enabling the <xref linkend="sepgsql"/>
        extension.  Defaults to auto.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3 id="meson-options-anti-features">
    <title>Anti-Fonctionnalités</title>

    <variablelist>
     <varlistentry id="configure-readline-meson">
      <term><option>-Dreadline={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Permet l'utilisation de la bibliothèque
        <application>Readline</application> (et aussi
        <application>libedit</application>). Le défaut de l'option est auto et
        active l'édition et historique de la ligne de commande avec
        <application>psql</application> et est fortement recommandée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-libedit-preferred-meson">
      <term><option>-Dlibedit_preferred={ true | false }</option></term>
      <listitem>
       <para>
        Mettre ces options à true favorise l'utilisation de la bibliothèque en
        license BSD <application>libedit</application> plutôt que la
        bibliothèque en license GPL <application>Readline</application>. Cette
        option est pertinente seulement si vous avez les deux bibliothèque
        installées&nbsp;; le défaut est false, ce qui fait utiliser
        <application>Readline</application>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-zlib-meson">
      <term><option>-Dzlib={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        <indexterm>
         <primary>zlib</primary>
        </indexterm>
        Active l'utilisation de la bibliothèque <application>Zlib</application>.
        Le défaut est auto et active le support des archives compressées dans
        <application>pg_dump</application>,
        <application>pg_restore</application> et
        <application>pg_basebackup</application>, ce qui est recommandée.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3 id="meson-options-build-process">
    <title>Détails du processus de compilation</title>

    <variablelist>
     <varlistentry id="configure-auto-features-meson">
      <term><option>--auto-features={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Affecter cette option permet d'écraser les valeurs de toutes les
        fonctionnalités <quote>auto</quote> (les fonctionnalités qui sont
        activées automatiquement si le logiciel requis est trouvé). Ceci peut
        être utile quand vous souhaitez désactiver ou activer les
        fonctionnalités <quote>optionnelles</quote> d'un coup sans le faire pour
        chacune d'elle manuellement.  La valeur par défaut pour ce paramètre est
        auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-backend-meson">
      <term><option>--backend=<replaceable>BACKEND</replaceable></option></term>
      <listitem>
       <para>
        L'outil que Meson utilise par défaut est ninja et il devrait suffire
        pour la plupart des cas. Cependant, si vous souhaitez complètement vous
        intégrer avec Visual Studio, vous pouvez mettre
        <replaceable>BACKEND</replaceable> à <command>vs</command>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-c-args-meson">
      <term><option>-Dc_args=<replaceable>OPTIONS</replaceable></option></term>
      <listitem>
       <para>
        Cette option est utilisée pour passer des options supplémentaires pour
        le compilateur C.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-c-link-args-meson">
      <term><option>-Dc_link_args=<replaceable>OPTIONS</replaceable></option></term>
      <listitem>
       <para>
        Cette option est utilisée pour passer des options complémentaires à
        l'éditeur de liens C.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-extra-include-dirs-meson">
      <term><option>-Dextra_include_dirs=<replaceable>DIRECTORIES</replaceable></option></term>
      <listitem>
       <para>
        <replaceable>DIRECTORIES</replaceable> est une liste de répertoires
        séparés par des virgules qui seront ajoutés dans la liste de recherche
        du compilateur pour les fichiers d'entête. Si vous avez des paquets
        optionnels (tels que GNU <application>Readline</application>) installés
        dans des emplacements non standard, vous devez utiliser cette option et
        probablement aussi l'option correspondante
        <option>-Dextra_lib_dirs</option>.
       </para>

       <para>
        Exemple&nbsp;: <literal>-Dextra_include_dirs=/opt/gnu/include,/usr/sup/include</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-extra-lib-dirs-meson">
      <term><option>-Dextra_lib_dirs=<replaceable>DIRECTORIES</replaceable></option></term>
      <listitem>
       <para>
        <replaceable>DIRECTORIES</replaceable> est une liste de répertoires
        séparés par des virgules pour rechercher les bibliothèques. Vous devrez
        probablement utiliser cette option (et l'option correspondante
        <option>-Dextra_include_dirs</option>) si vous avez des paquets
        installés dans des emplacements non standard.
       </para>
       <para>
        Exemple&nbsp;: <literal>-Dextra_lib_dirs=/opt/gnu/lib,/usr/sup/lib</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-system-tzdata-meson">
      <term><option>-Dsystem_tzdata=<replaceable>DIRECTORY</replaceable></option>
      <indexterm>
       <primary>Données de fuseaux horaires (time zone data)</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        <productname>PostgreSQL</productname> inclut sa propre base de données
        de fuseaux horaires, qui est requise pour les opérations sur les dates
        et heures.  Cette base de données de fuseaux horaires est en fait
        compatible avec la base de données de fuseaux horaires IANA fournie par
        de nombreux systèmes d'exploitation tel que FreeBSD, Linux et Solaris.
        Il serait ainsi redondant de l'installer à nouveau. Quand cette option
        est utilisée, la base de données de fuseaux horaires fournie par le
        système dans <replaceable>DIRECTORY</replaceable> est utilisée au lieu
        de celle incluse dans la distribution source PostgreSQL.
        <replaceable>DIRECTORY</replaceable> doit être spécifiée sous forme de
        chemin absolu. <filename>/usr/share/zoneinfo</filename> est un
        répertoire approprié sur certains systèmes d'exploitation. Notez que la
        routine d'installation ne détectera pas les données de fuseaux horaires
        non compatibles ou erronées. Si vous utilisez cette option, soyez avisé
        d'exécuter des tests de régression pour vérifier que les données de
        fuseaux horaires que vous indiquez fonctionnent correctement avec
        <productname>PostgreSQL</productname>.
       </para>

       <indexterm><primary>compilation croisée</primary></indexterm>

       <para>
        Cette option vise principalement les distributeurs de paquets binaires
        qui connaissent bien le système d'exploitation cible. Le principal
        avantage d'utiliser cette option est que les paquets PostgreSQL n'ont
        pas besoin d'être mis à jour dès qu'une des nombreuses règles locales
        d'heure d'été change. Un autre avantage est que PostgreSQL peut être
        compilé de manière croisée plus simplement si les fichiers de fuseaux
        horaires n'ont pas à être compilés pour l'installation.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-extra-version-meson">
      <term><option>-Dextra_version=<replaceable>STRING</replaceable></option></term>
      <listitem>
       <para>
        Ajoute <replaceable>STRING</replaceable> au numéro de version
        PostgreSQL. Vous pouvez avec cela, par exemple, marquer les binaires
        compilés d'un instantané <productname>Git</productname> inédit ou
        contenant des patchs personnalisés avec une chaîne supplémentaire de
        version, telle qu'un identifiant <command>git describe</command> ou un
        numéro de livraison de paquets de distribution.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-rpath-meson">
      <term><option>-Drpath={ true | false }</option></term>
      <listitem>
       <para>
        Cette option vaut true par défaut. Si mise à false, les exécutables
        <productname>PostgreSQL</productname> ne sont pas marqués pour indiquer
        qu'ils doivent chercher les bibliothèques partagées dans le répertoire
        de bibliothèques de l'installation (voir <option>--libdir</option>).
        Sur la plupart des plateformes, ce marquage utilise un chemin absolu
        vers les répertoires de bibliothèques, de sorte que cela ne sera
        d'aucune utilité si vous déplacez l'installation plus tard. Dans ce cas,
        vous devrez alors fournir une autre façon aux exécutables de trouver les
        bibliothèques partagées.  Habituellement, cela demande de configurer
        l'éditeur de liens dynamique du système d'exploitation pour pointer le
        répertoire de bibliothèques&nbsp;; voir <xref
        linkend="install-post-shlibs"/> pour plus de détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-binary-name-meson">
      <term><option>-D<replaceable>BINARY_NAME</replaceable>=<replaceable>PATH</replaceable></option></term>
      <listitem>
       <para>
        Si un programme requis pour compiler PostgreSQL (avec ou sans drapeaux
        optionnels) est stocké sur un chemin non standard, vous pouvez le
        spécifier manuellement à <literal>meson configure</literal>. La liste
        complète des programmes pour lesquels ceci est supporté peut être trouvé
        en exécutant <literal>meson configure</literal>.
        Exemple&nbsp;:
<programlisting>meson configure -DBISON=PATH_TO_BISON</programlisting>
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3 id="meson-options-docs">
    <title>Documentation</title>

    <para>
     Voir <xref linkend="docguide-toolsets"/> pour les outils nécessaires pour
     compiler la documentation.
    </para>

    <variablelist>

     <varlistentry id="configure-docs-meson">
      <term><option>-Ddocs={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Active la compilation de la documentation en format
        <acronym>HTML</acronym> et <acronym>man</acronym>. Son défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-docs-pdf-meson">
      <term><option>-Ddocs_pdf={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Active la compilation de la documentation en format
        <acronym>PDF</acronym>. Son défaut est auto.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-docs-html-style">
      <term><option>-Ddocs_html_style={ simple | website }</option></term>
      <listitem>
       <para>
        Contrôle quelle feuille de style <acronym>CSS</acronym> est utilisée.
        Le défaut est <literal>simple</literal>. Si mis à <literal>website</literal>,
        la documentation HTML va référencer la feuille de style pour <ulink
        url="https://www.postgresql.org/docs/current/">postgresql.org</ulink>.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect3>

   <sect3 id="meson-options-misc">
    <title>Divers</title>

    <variablelist>
     <varlistentry id="configure-pgport-meson">
      <term><option>-Dpgport=<replaceable>NUMBER</replaceable></option></term>
      <listitem>
       <para>
        Affecte <replaceable>NUMBER</replaceable> comme numéro de port par
        défaut pour le serveur et les clients.  Le défaut est 5432. Le port peut
        toujours être changé après, mais si vous le spécifiez ici alors le
        serveur et les clients auront la même valeur compilée par défaut, ce qui
        peut être très pratique. Habituellement la seule bonne raison de choisir
        une valeur différente du défaut est si vous prévoyez d'exécuter
        plusieurs serveurs <productname>PostgreSQL</productname> sur la même
        machine.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-krb-srvnam-meson">
      <term><option>-Dkrb_srvnam=<replaceable>NAME</replaceable></option></term>
      <listitem>
       <para>
        Le nom par défaut du compte de service Kerberos utilisé par GSSAPI.
        <literal>postgres</literal> est la valeur par défaut. Il n'y a,
        habituellement, pas de raison de changer ceci sauf si vous compilez sur
        un environnement Windows, et dans ce cas, il doit être en casse haute
        <literal>POSTGRES</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-segsize-meson">
      <term><option>-Dsegsize=<replaceable>SEGSIZE</replaceable></option></term>
      <listitem>
       <para>
        Affecte la <firstterm>taille du segment</firstterm> en giga-octets. Les
        tables volumineuses sont divisées en plusieurs fichiers sur le système
        d'exploitation, chacune ayant la taille d'un segment. Ceci permet
        d'éviter des problèmes dûs aux limites de taille de fichier qui existent
        sur de nombreuses plateformes. La taille par défaut du segment, 1
        giga-octet, est sûre sur toutes les plateformes supportées. Si votre
        système d'exploitation a le support <quote>largefile</quote> (ce qui est
        le cas pour la plupart, de nos jours), vous pouvez utiliser une taille
        de segment plus large. Ceci peut être utile pour réduire le nombre de
        descripteurs de fichiers utilisés lorsque vous travaillez sur des tables
        volumineuses.  Mais soyez prudent de ne pas choisir une valeur plus
        large que ne peut supporter votre plateforme et le système de fichiers
        que vous prévoyez d'utiliser.  D'autres outils que vous pourriez
        utiliser, tel que <application>tar</application>, pourrait aussi limiter
        la taille utilisable d'un fichier.  Il est recommandé, mais pas
        absolument nécessaire, que cette value soit une puissance de 2.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-blocksize-meson">
      <term><option>-Dblocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
      <listitem>
       <para>
        Affecte la <firstterm>taille de bloc</firstterm>, en kilo-octets. Ceci
        est l'unité de stockage et d'I/O à l'intérieur des tables. Le défaut, 8
        kilo-octets, est approprié pour la majorité des situations&nbsp;; mais
        d'autres valeurs peuvent être utiles dans des cas spéciaux.  Cette
        valeur doit être une puissance de 2 entre 1 et 32 (kilo-octets).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-wal-blocksize-meson">
      <term><option>-Dwal_blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
      <listitem>
       <para>
        Affecte la <firstterm>taille de bloc d'un journal de
        transactions</firstterm>, en kilo-octets. C'est l'unité de stockage et
        d'I/O à l'intérieur des journaux WAL. Le défaut, 8 kilo-octets, est
        approprié pour la majorité des situations&nbsp;; mais d'autres valeurs
        peuvent être utiles dans des cas spéciaux.  Cette valeur doit être une
        puissance de 2 entre 1 et 64 (kilo-octets).
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3 id="meson-options-devel">
    <title>Options développeur</title>

    <para>
     La plupart des options dans cette section sont seulement intéressantes pour
     le développement ou le debug de <productname>PostgreSQL</productname>.
     Elles ne sont pas recommandées pour les compilations de production, sauf
     pour <option>--debug</option>, qui peut être utile pour activer les
     rapports de bug détaillés si vous avez l'infortune de rencontrer un bug.
     Sur les plateformes supportant DTrace, l'option <option>-Ddtrace</option>
     pourrait aussi être raisonnablement utilisée en production.
    </para>

    <para>
     Lorsque vous compilez une installation qui sera utilisé pour développer du
     code serveur, il est recommandé d'utiliser au moins les options
     <option>--buildtype=debug</option> et <option>-Dcassert</option>.
    </para>

    <variablelist>
     <varlistentry id="configure-buildtype-meson">
      <term><option>--buildtype=<replaceable>BUILDTYPE</replaceable></option></term>
      <listitem>
       <para>
        Cette option peut être utilisée pour indiquer le type de compilation à
        utiliser&nbsp;; le défaut est <option>debugoptimized</option>. Si vous
        préférez un contrôle plus fin sur les symboles de debug et les niveaux
        d'optimisation que cette option peut fournir, vous pouvez vous référer
        aux drapeaux <option>--debug</option> et
        <option>--optimization</option>.
       </para>

       <para>
        Les types de compilation suivants sont principalement utilisés&nbsp;:
        <option>plain</option>, <option>debug</option>,
        <option>debugoptimized</option> et <option>release</option>. Plus
        d'information à leur sujet peut être trouvé dans la <ulink
        url="https://mesonbuild.com/Running-Meson.html#configuring-the-build-directory">documentation
        Meson</ulink>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-debug-meson">
      <term><option>--debug</option></term>
      <listitem>
       <para>
        Compile tous les programmes et bibliothèques avec les symboles de debug.
        Cela signifie que vous pouvez exécuter les programmes dans une debugger
        pour analyser les problèmes. Ceci augmente fortement la taille des
        exécutables installés, et sur les compilateurs non GCC, désactive
        habituellement aussi les optimisations compilateur, entrainant des
        ralentissements. Cependant, avoir les symboles disponibles peut s'avérer
        extrêmement utile pour gérer tous les problèmes qui peuvent survenir.
        Actuellement, cette option est recommandée sur des installations de
        production uniquement si vous utilisez GCC. Mais vous devrez toujours
        l'avoir si vous effectuez des travaux de développement ou exécutez une
        version bêta.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-optimization-meson">
      <term><option>--optimization</option>=<replaceable>LEVEL</replaceable></term>
      <listitem>
       <para>
        Indique le niveau d'optimisation. <option>LEVEL</option> peut être
        affecté à n'importe quelle valeur de {0,g,1,2,3,s}.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-werror-meson">
      <term><option>--werror</option></term>
      <listitem>
       <para>
        Activer cette option indique au compilateur de traiter les avertissements
        comme des erreurs. Cela peut être utile pour du développement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-cassert-meson">
      <term><option>-Dcassert={ true | false }</option></term>
      <listitem>
       <para>
        Active les vérifications d'<firstterm>assertion</firstterm> sur le
        serveur, qui testent de nombreuses conditions qui <quote>ne peuvent se
        produire</quote>. Ceci est très appréciable dans le but de développer
        du code, mais les tests ralentissent notablement le serveur. De plus,
        avoir les tests activés ne va pas nécessairement améliorer la stabilité
        de votre serveur&nbsp;! Les vérifications d'assertion ne sont pas
        catégorisées par sévérité, ainsi ce qui pourrait être un bug
        relativement inoffensif peut entrainer un redémarrage de serveur s'il
        déclenche un échec d'assertion. Cette option n'est pas recommandée pour
        une utilisation en production, mais vous pouvez l'activer lors de
        travaux de développement ou en testant une version bêta.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-tap-tests-meson">
      <term><option>-Dtap_tests={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        Active les tests utilisant les outils Perl TAP. Le défaut est auto et
        nécessite une installation de Perl et du module Perl
        <literal>IPC::Run</literal>. Voir
        <xref linkend="regress-tap"/> pour plus d'information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-pg-test-extra-meson">
      <term><option>-DPG_TEST_EXTRA=<replaceable>TEST_SUITES</replaceable></option></term>
      <listitem>
       <para>
        Active des suites de tests supplémentaires, qui ne sont pas exécutées
        par défaut parce qu'elles ne sont pas sûres sur un système
        multi-utilisateur, requièrent un logiciel spécial pour fonctionner, ou
        demandent des ressources importantes. L'argument est une liste de tests à
        activer, séparés par des espaces blancs. Voir <xref
        linkend="regress-additional"/> pour les détails. Si la variable
        d'environnement <envar>PG_TEST_EXTRA</envar> est configurée quand les
        tests sont exécutés, elle surcharge cette option.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-b-coverage-meson">
      <term><option>-Db_coverage={ true | false }</option></term>
      <listitem>
       <para>
        Si vous utilisez GCC, tous les programmes et bibliothèques seront
        compilées avec une instrumentation de test de couverture de code.
        Exécutés, ils généreront des fichiers dans le répertoire de debug avec
        des mesures de couverture de code. Voir <xref linkend="regress-coverage"/>
        pour plus d'information. Cette option n'est utilisable qu'avec
        GCC et pour effectuer des travaux de développement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-dtrace-meson">
      <term><option>-Ddtrace={ auto | enabled | disabled }</option></term>
      <listitem>
       <para>
        <indexterm>
         <primary>DTrace</primary>
        </indexterm>
        Activée, cette option compile <productname>PostgreSQL</productname> avec
        le support pour l'outil de profilage dynamique DTrace. Voir <xref
        linkend="dynamic-trace"/> pour plus d'informations.
       </para>

       <para>
        Pour pointer le programme <command>dtrace</command>, l'option
        <option>DTRACE</option> peut être valuée. Ceci est souvent nécessaire
        parce que <command>dtrace</command> est habituellement installé sous
        <filename>/usr/sbin</filename>, qui pourrait ne pas être dans votre
        <envar>PATH</envar>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="configure-injection-points-meson">
      <term><option>-Dinjection_points={ true | false }</option></term>
      <listitem>
       <para>
        Compiles <productname>PostgreSQL</productname> with support for
        injection points in the server. Injection points allow to run
        user-defined code from within the server in pre-defined code paths.
        This helps in testing and in the investigation of concurrency scenarios
        in a controlled fashion. This option is disabled by default.  See
        <xref linkend="xfunc-addin-injection-points"/> for more details.  This
        option is intended to be used only by developers for testing.
       </para>
      </listitem>
     </varlistentry>

      <varlistentry id="configure-segsize-blocks-meson">
       <term><option>-Dsegsize_blocks=SEGSIZE_BLOCKS</option></term>
       <listitem>
        <para>
         Cette option est destinée aux développeurs pour tester le code en lien
         aux segments. Indique la taille de segment d'une relation en blocs. Si
         l'option <option>-Dsegsize</option> et celle ci sont affectées, cette
         option l'emporte.
        </para>
       </listitem>
      </varlistentry>

    </variablelist>
   </sect3>
  </sect2>

  <sect2 id="targets-meson">
   <title>Cibles de construction <literal>meson</literal></title>

   <para>
    Des cibles individuelles de construction peuvent être construites en
    utilisant <command>ninja</command> <replaceable>cible</replaceable>.

    Quand aucune cible n'est indiquée, tout est construit sauf la documentation.
    Les produits individuels de construction peuvent être construit en utilisant
    le chemin/nom du fichier comme <replaceable>cible</replaceable>.
   </para>

   &targets-meson;
  </sect2>

 </sect1>

<sect1 id="install-post">
<title>Initialisation post-installation</title>

<sect2 id="install-post-shlibs">
 <title>Bibliothèques partagées</title>

 <indexterm>
  <primary>bibliothèques partagées</primary>
 </indexterm>

 <para>
  Sur certains systèmes gérant des bibliothèques partagées,
  il faut spécifier comment trouver
  les nouvelles bibliothèques partagées. Les systèmes sur lesquels ce
  n'est <emphasis>pas</emphasis> nécessaire comprennent
  <systemitem class="osname">FreeBSD</systemitem>,
  <systemitem class="osname">Linux</systemitem>,
  <systemitem class="osname">NetBSD</systemitem>, <systemitem
  class="osname">OpenBSD</systemitem> et
  <systemitem class="osname">Solaris</systemitem>.
 </para>

 <para>
  La méthode pour le faire varie selon la plateforme, mais la plus
  répandue consiste à positionner la variable d'environnement
  <envar>LD_LIBRARY_PATH</envar> ainsi&nbsp;: avec les shells Bourne
  (<command>sh</command>, <command>ksh</command>, <command>bash</command>, <command>zsh</command>)&nbsp;:
  <programlisting>LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH</programlisting>
    ou en <command>csh</command> ou <command>tcsh</command>&nbsp;:
<programlisting>setenv LD_LIBRARY_PATH /usr/local/pgsql/lib</programlisting>
    Remplacez <literal>/usr/local/pgsql/lib</literal> par la valeur donnée à
    <option><literal>--libdir</literal></option> dans l'<xref linkend="configure"/>.
    Vous pouvez mettre ces commandes dans un script de démarrage tel
    que <filename>/etc/profile</filename> ou <filename>~/.bash_profile</filename>.
    De bons conseils sur les mises en garde associées à cette
    méthode peuvent être trouvés sur
    <ulink url="http://xahlee.info/UnixResource_dir/_/ldpath.html"></ulink>.
   </para>

   <para>
    Sur certains systèmes, il peut être préférable de renseigner la
    variable d'environnement
    <envar>LD_RUN_PATH</envar> <emphasis>avant</emphasis>
    la compilation.
   </para>

   <para>
    Avec <systemitem class="osname">Cygwin</systemitem>, placez le répertoire
    des bibliothèques dans la variable <envar>PATH</envar>, ou déplacez les
    fichiers <filename>.dll</filename> dans le répertoire
    <filename>bin</filename>.
   </para>

   <para>
    En cas de doute, référez-vous aux pages de man de votre système (peut-être
    <command>ld.so</command> ou <command>rld</command>). Si vous avez
    ultérieurement un message tel que
<screen>psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory</screen>
    alors cette étape est vraiment nécessaire. Occupez-vous en alors.
   </para>

   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>
    Si votre système d'exploitation est
    <systemitem class="osname">Linux</systemitem>
    et que vous avez les accès de superutilisateur, vous pouvez exécuter&nbsp;:
<programlisting>/sbin/ldconfig /usr/local/pgsql/lib</programlisting>
    (ou le répertoire équivalent) après l'installation pour permettre à
    l'éditeur de liens de trouver les bibliothèques partagées plus rapidement.
    Référez-vous aux pages man portant sur <command>ldconfig</command> pour plus
    d'informations. Pour les systèmes d'exploitation <systemitem
    class="osname">FreeBSD</systemitem>, <systemitem
    class="osname">NetBSD</systemitem> et <systemitem class="osname">OpenBSD</systemitem>,
    la commande est&nbsp;:
<programlisting>/sbin/ldconfig -m /usr/local/pgsql/lib</programlisting>
    Les autres systèmes d'exploitation ne sont pas connus pour avoir de
    commande équivalente.
   </para>
  </sect2>

  <sect2 id="install-post-env-vars">
   <title>Variables d'environnement</title>

   <indexterm>
    <primary><envar>PATH</envar></primary>
   </indexterm>

   <para>
    Si l'installation a été réalisée dans
    <filename>/usr/local/pgsql</filename> ou à un autre chemin hors des
    répertoires où par défaut sont recherchés les exécutables, vous devez ajouter
    <filename>/usr/local/pgsql/bin</filename> (ou le répertoire fourni à
    <option><literal>--bindir</literal></option> au moment de l'<xref linkend="configure"/>)
    dans votre <envar>PATH</envar>. À strictement parler, ce n'est pas une obligation, mais
    cela rendra l'utilisation de <productname>PostgreSQL</productname> plus confortable.
   </para>

   <para>
    Pour ce faire, ajoutez ce qui suit dans le fichier d'initialisation de
    votre shell, comme
    <filename>~/.bash_profile</filename> (ou <filename>/etc/profile</filename>, si vous voulez
    que tous les utilisateurs l'aient)&nbsp;:
<programlisting>PATH=/usr/local/pgsql/bin:$PATH
export PATH</programlisting>
    Si vous utilisez le <command>csh</command> ou le <command>tcsh</command>, alors utilisez
    la commande&nbsp;:
<programlisting>set path = ( /usr/local/pgsql/bin $path )</programlisting>
   </para>

   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
    Pour que votre système trouve la documentation <application>man</application>,
    il vous faut ajouter des lignes telles que celles qui suivent à votre
    fichier d'initialisation du shell, à moins que vous installiez ces pages
    dans un répertoire où elles sont recherchées normalement&nbsp;:
<programlisting>MANPATH=/usr/local/pgsql/share/man:$MANPATH
export MANPATH</programlisting>
   </para>

   <para>
    Les variables d'environnement <envar>PGHOST</envar> et <envar>PGPORT</envar>
    indiquent aux applications clientes l'hôte et le port du serveur de base.
    Elles surchargent les valeurs utilisées lors de la compilation. Si vous
    exécutez des applications clientes à distance, alors il est plus pratique que
    tous les utilisateurs prévoyant d'utiliser la base de données
    paramètrent <envar>PGHOST</envar>. Ce n'est pas une
    obligation, cependant, la configuration peut être communiquée via les
    options de lignes de commande à la plupart des programmes clients.
   </para>
  </sect2>
 </sect1>

 <sect1 id="supported-platforms">
  <title>Plateformes supportées</title>

  <para>
   Une plateforme (c'est-à-dire une combinaison d'un processeur et d'un système
   d'exploitation) est considérée comme supportée par la communauté des développeurs de
   <productname>PostgreSQL</productname> si le code permet le fonctionnement
   sur cette plateforme, et que la compilation et les tests de régression
   ont été récemment validés sur cette plateforme. Actuellement, la plupart
   des tests de compatibilité de plateforme se font automatiquement par des
   machines de tests dans la <ulink
   url="https://buildfarm.postgresql.org/">ferme de compilation de
   PostgreSQL</ulink>. Si vous êtes intéressé par l'utilisation de
   <productname>PostgreSQL</productname> sur une plateforme qui n'est pas
   représentée dans la ferme de compilation, mais pour laquelle le code
   fonctionne ou peut fonctionner, nous vous suggérons fortement de monter
   une machine qui sera membre de la ferme pour que la compatibilité puisse
   être assurée dans la durée.
  </para>

  <para>
   En général, <productname>PostgreSQL</productname> doit fonctionner sur
   les architectures processeur suivantes&nbsp;: x86, PowerPC, S/390, SPARC,
   ARM, MIPS et RISC-V, incluant les variantes
   big-endian, little-endian, 32 bits et 64 bits si disponible.
  </para>

  <para>
   De manière générale, <productname>PostgreSQL</productname> doit fonctionner
   sur les versions actuelles des systèmes d'exploitation suivants&nbsp;: Linux,
   Windows, FreeBSD, OpenBSD, NetBSD, DragonFlyBSD, macOS, Solaris et
   illumos. D'autres systèmes de type
   Unix peuvent aussi fonctionner, mais ne sont pas testés pour le moment. Dans
   la plupart des cas, toutes les architectures processeurs supportées par
   un système d'exploitation donné fonctionneront. Cherchez dans le
   répertoire <xref linkend="installation-platform-notes"/> ci-dessous pour
   voir s'il y a des informations spécifiques à votre système d'exploitation,
   tout particulièrement dans le cas d'un ancien système.
  </para>

  <para>
   Si vous avez des problèmes d'installation sur une plateforme connue
   comme supportée d'après des résultats récents de la ferme de
   compilation, merci de rapporter cette information à
   <email>pgsql-bugs@lists.postgresql.org</email>. Si vous êtes intéressé pour porter
   <productname>PostgreSQL</productname> sur une nouvelle plateforme,
   <email>pgsql-hackers@lists.postgresql.org</email> est l'endroit approprié pour en
   discuter.
  </para>

  <para>
   Les versions historiques de <productname>PostgreSQL</productname> ou POSTGRES
   tournent aussi sur les architectures CPU telles que Alpha, Itanium, M32R, M68K,
   M88K, NS32K, PA-RISC, SuperH et VAX, et les systèmes d'exploitation tels que 4.3BSD, AIX, BEOS,
   BSD/OS, DG/UX, Dynix, HP-UX, IRIX, NeXTSTEP, QNX, SCO, SINIX, Sprite, SunOS,
   Tru64 UNIX, et ULTRIX.
  </para>
 </sect1>

 <sect1 id="installation-platform-notes">
  <title>Notes spécifiques à des plateformes</title>

  <para>
   Cette section documente des problèmes spécifiques additionnels liés à des
   plateformes, en ce qui concerne l'installation et le paramétrage de PostgreSQL.
   Assurez-vous de lire aussi les instructions d'installation, et en particulier
   <xref linkend="install-requirements"/>. Par ailleurs, consultez
   <xref linkend="regress"/> à propos de l'interprétation
   des tests de régression.
  </para>

  <para>
   Les plateformes qui ne sont pas traitées ici n'ont pas de problèmes d'installation
   spécifiques connus.
 </para>

<sect2 id="installation-notes-cygwin">
 <title>Cygwin</title>

 <indexterm zone="installation-notes-cygwin">
  <primary>Cygwin</primary>
  <secondary>installation sur</secondary>
 </indexterm>

 <para>
  PostgreSQL peut être compilé avec Cygwin, un environnement similaire à
  Linux pour Windows, mais cette méthode est inférieure à la version native
  Windows et exécuter un serveur sur Cygwin n'est plus recommandé.
 </para>

 <para>
  Quand vous compilez à partir des sources, suivant la procédure
  d'installation de style Unix (c'est-à-dire
  <literal>./configure; make;</literal>, etc.),
  notez les différences suivantes spécifiques à Cygwin&nbsp;:

  <itemizedlist>
   <listitem>
    <para>
     Positionnez le PATH pour utiliser le répertoire binaire Cygwin avant
     celui des utilitaires Windows. Cela évitera des problèmes à
     la compilation.
    </para>
   </listitem>

   <listitem>
    <para>
     La  commande <command>adduser</command> n'est pas supportée&nbsp;; utilisez
     les outils appropriés de gestion d'utilisateurs sous Windows.
     Sinon, sautez cette étape.
    </para>
   </listitem>

   <listitem>
    <para>
     La commande <command>su</command> n'est pas supportée&nbsp;; utilisez ssh
     pour simuler la commande <command>su</command> sous Windows. Sinon, sautez
     cette étape.
    </para>
   </listitem>

   <listitem>
    <para>
     <productname>OpenSSL</productname> n'est pas supporté.
    </para>
   </listitem>

   <listitem>
    <para>
     Démarrez <command>cygserver</command>  pour le support de la mémoire
     partagée.
     Pour cela, entrez la commande <literal>/usr/sbin/cygserver
      &amp;</literal>. Ce programme doit fonctionner à chaque fois que
     vous démarrez le serveur PostgreSQL ou que vous initialisez un cluster
     de bases de données (<command>initdb</command>). La configuration par
     défaut de <command>cygserver</command> pourrait nécessiter des changements
     (par exemple, augmenter <symbol>SEMMNS</symbol>) pour éviter à PostgreSQL
     d'échouer en raison d'un manque de ressources système.
    </para>
   </listitem>

   <listitem>
    <para>
     Il se peut que la compilation échoue sur certains systèmes quand
     une locale autre que C est utilisée. Pour résoudre ce problème,
     positionnez la locale à C avec la commande
     <command>export LANG=C.utf8</command> avant de lancer la compilation,
     puis, une fois PostgreSQL installé, repositionnez-là à son ancienne valeur.
    </para>
   </listitem>

   <listitem>
    <para>
     Les tests de régression en parallèle (<literal>make check</literal>)
     peuvent générer des échecs de tests de régression aléatoires en raison
     d'un dépassement de capacité de la file d'attente de <function>listen()</function>
     qui cause des erreurs de connexion refusée ou des blocages. Vous pouvez
     limiter le nombre de connexions en utilisant la variable de make
     <varname>MAX_CONNECTIONS</varname> comme ceci&nbsp;:
     <programlisting>
make MAX_CONNECTIONS=5 check
     </programlisting>
     (Sur certains systèmes, vous pouvez avoir jusqu'à 10 connexions
     simultanées).
    </para>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Il est possible d'installer <command>cygserver</command> et le serveur
  PostgreSQL en tant que services Windows NT. Pour plus d'informations sur
  comment le faire, veuillez vous référer au document <filename>README</filename>
  inclus avec le paquets binaire PostgreSQL sur Cygwin.
  Il est installé dans le répertoire <filename>/usr/share/doc/Cygwin</filename>.
 </para>
</sect2>

<sect2 id="installation-notes-macos">
 <title>macOS</title>

 <indexterm zone="installation-notes-macos">
  <primary>macOS</primary>
  <secondary>installation sur</secondary>
 </indexterm>

 <para>
  Sur les versions récentes de <productname>macOS</productname>, il est
  nécessaire d'embarquer le chemin <quote>sysroot</quote> dans les options
  d'inclusion utilisées pour trouver les fichiers d'en-tête système. Ceci a
  pour résultat la génération d'un script
  <application>configure</application> variant suivant la version du SDK
  utilisée durant <application>configure</application>. Ceci ne devrait pas
  poser de problèmes dans les scénarios simples, mais si vous essayez de
  faire quelque chose comme compiler une extension sur une machine
  différente de celle sur laquelle le code serveur a été compilé, vous
  pouvez avoir besoin de forcer l'utilisation d'un chemin sysroot
  différent. Pour cela, configurez <varname>PG_SYSROOT</varname> ainsi
  <programlisting>
make PG_SYSROOT=<replaceable>/desired/path</replaceable> all
  </programlisting>
  Pour trouver le chemin approprié sur votre machine, lancez
  <programlisting>
xcrun --show-sdk-path
  </programlisting>
  Notez que compiler une extension en utilisant une version sysroot
  différente de celle utilisée pour compiler le serveur n'est pas
  vraiment recommandée&nbsp;; dans le pire des cas, cela peut entraîner des
  incohérences d'ABI difficiles à débugger.
 </para>

 <para>
  Vous pouvez aussi sélectionner un chemin sysroot différent de celui par
  défaut lors du <application>configure</application>
  en indiquant <varname>PG_SYSROOT</varname> à
  <application>configure</application>&nbsp;:
  <programlisting>
./configure ... PG_SYSROOT=<replaceable>/desired/path</replaceable>
  </programlisting>
    Ceci sera principalement utile pour faire de la cross-compilation pour
    d'autres versions de macOS. Il n'y a pas de garantie que les exécutables
    qui vont en résulter fonctionneront sur l'hôte actuel.
   </para>

   <para>
    Pour supprimer les options <option>-isysroot</option>, utilisez
<programlisting>
./configure ... PG_SYSROOT=none
</programlisting>
    (tout nom de chemin non existant fonctionnera). Ceci pourrait être utile
    si vous souhaitez compiler avec un compilateur autre que celui d'Apple,
    mais attention au fait que ce cas n'est ni testé ni supporté par les
    développeurs PostgreSQL.
 </para>

 <para>
  La fonctionnalité <quote>System Integrity Protection</quote> (SIP) de
  <productname>macOS</productname> casse <literal>make check</literal>,
  car elle empêche de transmettre la configuration nécessaire de
  <literal>DYLD_LIBRARY_PATH</literal> vers les exécutables en cours de
  tests. Vous pouvez contourner cela en exécutant <literal>make
   install</literal> avant <literal>make check</literal>. Ceci étant dit, la
  plupart des développeurs Postgres désactivent simplement SIP.
 </para>
</sect2>

<sect2 id="installation-notes-mingw">
 <title>MinGW</title>

 <indexterm zone="installation-notes-mingw">
  <primary>MinGW</primary>
  <secondary>installation sur</secondary>
 </indexterm>

 <para>
  PostgreSQL pour Windows peut être compilé en utilisant MinGW, un environnement
  de compilation similaire à celui disponible sous Unix pour les systèmes
  d'exploitation Microsoft. Il est recommandé d'utiliser l'environnement <ulink
  url="https://www.msys2.org/">MSYS2</ulink> pour cela, mais aussi pour installer
  les paquets requis.
 </para>

 <sect3 id="mingw-crash-dumps">
  <title>Récupérer des dumps suite aux plantages</title>

  <para>
   Si PostgreSQL sous Windows plante, il peut générer des
   <productname>minidumps</productname> qui peuvent être utilisés pour dépister la cause du plantage&nbsp;;
   ils sont semblables aux <foreignphrase>core dumps</foreignphrase> d'Unix.
   Vous pouvez lire ces dumps avec
   <productname>Windows Debugger Tools</productname> ou avec
   <productname>Visual Studio</productname>. Pour permettre la génération des dumps sous Windows, créez un
   sous-répertoire nommé <filename>crashdumps</filename>
   dans le répertoire des données du cluster. Ainsi les dumps seront écrits dans ce répertoire
   avec un nom unique généré à partir de l'identifiant du processus planté et du moment du plantage.
  </para>
 </sect3>
</sect2>

<sect2 id="installation-notes-solaris">
 <title>Solaris</title>

 <indexterm zone="installation-notes-solaris">
  <primary>Solaris</primary>
  <secondary>installation sur</secondary>
 </indexterm>

 <para>
  PostgreSQL est bien supporté sous Solaris. Plus le système d'exploitation
  est à jour, moins vous aurez de problèmes.
 </para>

 <sect3 id="installation-notes-solaris-req-tools">
  <title>Outils requis</title>

  <para>
   Vous pouvez compiler soit avec GCC, soit avec le compilateur de Sun.
   Pour une meilleure optimisation du code, le compilateur de Sun est
   fortement recommandé sur l'architecture SPARC. Si vous utilisez le compilateur de Sun,
   attention à ne pas sélectionner <filename>/usr/ucb/cc</filename>&nbsp;;
   utilisez <filename>/opt/SUNWspro/bin/cc</filename>.
  </para>

  <para>
   Vous pouvez télécharger Sun Studio sur <ulink
   url="https://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>.
   De nombreux outils GNU sont intégrés dans Solaris 10, ou sont présents
   sur le Solaris companion CD. Si vous avez besoin des paquets pour des
   versions plus anciennes de Solaris, vous pouvez trouver ces outils sur
   <ulink url="http://www.sunfreeware.com"></ulink>. Si vous préférez les
   sources, allez sur <ulink
   url="https://www.gnu.org/order/ftp.html"></ulink>.
  </para>
 </sect3>

 <sect3 id="installation-notes-solaris-configure-complains">
  <title>configure se plaint d'un programme de test en échec</title>

  <para>
   Si <command>configure</command> se plaint d'un programme de test en échec,
   il s'agit probablement de l'éditeur de lien à l'exécution qui ne trouve
   pas une bibliothèque, probablement libz, libreadline ou une autre bibliothèque
   non standard telle que libssl. Pour lui indiquer le bon endroit, positionnez
   la variable d'environnement <envar>LDFLAGS</envar> sur la ligne de commande
   de <command>configure</command>, par exemple,
   <programlisting>
configure ... LDFLAGS="-R /usr/sfw/lib:/opt/sfw/lib:/usr/local/lib"
   </programlisting>
   Voir la man page de
   <citerefentry><refentrytitle>ld</refentrytitle><manvolnum>1</manvolnum></citerefentry>
   pour plus d'informations.
  </para>
 </sect3>

 <sect3 id="installation-notes-solaris-comp-opt-perf">
  <title>Compiler pour des performances optimales</title>

  <para>
   Sur l'architecture SPARC, Sun Studio est fortement recommandé pour
   la compilation. Essayez d'utiliser l'option d'optimisation
   <option>-xO5</option> pour générer des binaires sensiblement
   plus rapides. N'utilisez pas d'options modifiant le comportement
   des opérations à virgule flottante ni le traitement de
   <varname>errno</varname> (par exemple, <option>-fast</option>).
  </para>

  <para>
   Si vous n'avez pas de raison d'utiliser des binaires 64 bits sur SPARC,
   préférez la version 32 bits. Les opérations et
   les binaires 64 bits sont plus lents que les variantes 32 bits. D'un autre
   côté, le code 32 bits sur un processeur de la famille AMD64 n'est pas natif,
   donc le code 32 bits est significativement plus lent sur cette
   famille de processeurs.
  </para>
 </sect3>

 <sect3 id="installation-notes-solaris-using-dtrace">
  <title>Utiliser DTrace pour tracer PostgreSQL</title>

  <para>
   Oui, l'utilisation de DTrace est possible. Voir <xref
   linkend="dynamic-trace"/> pour davantage d'informations.
  </para>

  <para>
   Si vous voyez l'édition de liens de l'exécutable <command>postgres</command>
   échouer avec un message d'erreur similaire à&nbsp;:
   <screen>
Undefined                       first referenced
 symbol                             in file
AbortTransaction                    utils/probes.o
CommitTransaction                   utils/probes.o
ld: fatal: Symbol referencing errors. No output written to postgres
collect2: ld returned 1 exit status
make: *** [postgres] Error 1
   </screen>
   l'installation DTrace est trop ancienne pour gérer les sondes dans les
   fonctions statiques. Solaris 10u4 ou plus récent est nécessaire pour
   utiliser DTrace.
  </para>
 </sect3>
</sect2>

  <sect2 id="installation-notes-visual-studio">
   <title>Visual Studio</title>

   <indexterm zone="installation-notes-visual-studio">
    <primary>Visual Studio</primary>
    <secondary>installation</secondary>
   </indexterm>

   <para>
    Il est recommandé que les utilisateurs téléchargent la version binaire pour
    Windows, disponible sous la forme d'un installeur graphique à partir du
    site <productname>PostgreSQL</productname> sur
    <ulink url="https://www.postgresql.org/download/"></ulink>. Construire à
    partir des sources est principalement utilisé par les personnes développant
    le moteur <productname>PostgreSQL</productname> ou des extensions.
   </para>

   <para>
    PostgreSQL pour Windows avec Visual Studio peut être construit avec meson,
    comme décrit dans <xref linkend="install-meson"/>. Le port natif nécessite
    une version 32 ou 64 bits de Windows 10 (ou une version ultérieure).
   </para>

   <para>
    Les constructions natives de <application>psql</application> n'acceptent
    pas l'édition de la ligne de commande. La construction
    <productname>Cygwin</productname> accepte l'édition en ligne de commande,
    donc elle doit être utilisée quand psql est nécessaire pour une utilisation
    interactive sur <productname>Windows</productname>.
   </para>

   <para>
    PostgreSQL peut être construit avec la suite de compilateur Visual C++ de
    Microsoft. Ces compilateurs peuvent venir de These compilers can be either
    from <productname>Visual Studio</productname>, <productname>Visual Studio
    Express</productname> ou certaines versions du <productname>Microsoft
    Windows SDK</productname>. Si vous n'avez pas déjà un environnement
    <productname>Visual Studio</productname> de configuré, le plus simple
    revient à utiliser les compilateurs de <productname>Visual Studio
    2022</productname> ou ceux du <productname>Windows SDK 10</productname>,
    qui sont tous les deux disponibles sous la forme de téléchargement gratuit
    sur le site de Microsoft.
   </para>

   <para>
    Des constructions 32 bits et 64 bits sont possibles avec la suite Microsoft
    Compiler. Les constructions 32 bits de PostgreSQL sont possibles de
    <productname>Visual Studio 2015</productname> à <productname>Visual Studio
    2022</productname>, ainsi qu'avec la version autonome du Windows SDK,
    versions 10 et supérieures. Les constructions 64 bits sont possibles avec
    <productname>Microsoft Windows SDK</productname> version 10 et ultérieur ou
    <productname>Visual Studio 2015</productname> et ultérieur.
    <!--
        For 2015 requirements:
        https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2015-sysrequirements-vs
        For 2017 requirements:
        https://docs.microsoft.com/en-us/visualstudio/productinfo/vs2017-system-requirements-vs
        For 2019 requirements:
        https://docs.microsoft.com/en-us/visualstudio/releases/2019/system-requirements
        For 2022 requirements:
        https://docs.microsoft.com/en-us/visualstudio/releases/2022/system-requirements
    -->
   </para>

   <para>
    Si votre environnement de construction ne vient pas avec une version
    supportée du <productname>Microsoft Windows SDK</productname>, il est
    recommandé de mettre à jour vers la dernière version (actuellement la 10),
    disponible en téléchargement à partir de <ulink
    url="https://www.microsoft.com/download"></ulink>.
   </para>

   <para>
    Vous devez toujours inclure la partie <application>Windows Headers and
    Libraries</application> du SDK. Si vous installez un <productname>Windows
    SDK</productname> incluant <application>Visual C++ Compilers</application>,
    vous n'avez pas besoin de <productname>Visual Studio</productname> pour le
    construire. Notez qu'à partir de la version 8.0a, le Windows SDK n'apporte
    plus un environnement complet en ligne de commande.
   </para>

   <sect3 id="windows-requirements">
    <title>Prérequis</title>
    <para>
     Les produits supplémentaires suivants sont requis pour construire
     <productname>PostgreSQL</productname> sur Windows.

     <variablelist>
      <varlistentry>
       <term><productname>Strawberry Perl</productname></term>
       <listitem><para>
        Strawberry Perl est requis pour exécuter les scripts de génération de
        la construction. MinGW ou Cygwin Perl ne fonctionneront pas. Il doit
        être en plus présent dans le PATH. Les binaires sont téléchargeables à
        partir de
        <ulink url="https://strawberryperl.com"></ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>Bison</productname> et
        <productname>Flex</productname></term>
       <listitem>
       <para>
        Les binaires pour <productname>Bison</productname> et
	<productname>Flex</productname> peuvent être téléchargés à partir de
	<ulink url="https://github.com/lexxmark/winflexbison"></ulink>.
       </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
     Les produits supplémentaires suivants ne sont pas requis pour commencer
     mais ils sont requis pour construire le paquet complet.

     <variablelist>
      <varlistentry>
       <term><productname>Magicsplat Tcl</productname></term>
       <listitem><para>
        Requis pour construire <application>PL/Tcl</application>.
        Les binaires peuvent être téléchargés à partir du
        <ulink url="https://www.magicsplat.com/tcl-installer/index.html">site
        officiel</ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>Diff</productname></term>
       <listitem><para>
        Diff est requis pour exécuter les tests de régression et peut être
        téléchargé à partir de <ulink
        url="http://gnuwin32.sourceforge.net"></ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>Gettext</productname></term>
       <listitem><para>
        Gettext est requis pour construire avec le support de NLS, et
        peut être téléchargé à partir de <ulink
        url="http://gnuwin32.sourceforge.net"></ulink>. Notez que les binaires,
        dépendances et fichiers développeur sont tous nécessaires.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>MIT Kerberos</productname></term>
       <listitem><para>
        Requis pour le support de l'authentification GSSAPI. MIT Kerberos peut
        être téléchargé à partir de
        <ulink url="https://web.mit.edu/Kerberos/dist/index.html"></ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>libxml2</productname> et
        <productname>libxslt</productname></term>
       <listitem><para>
        Requis pour le support de XML. Les binaires peuvent être téléchargées
        à partir de <ulink
        url="https://zlatkovic.com/pub/libxml"></ulink> et les sources à partir
        de <ulink url="http://xmlsoft.org"></ulink>. Notez que libxml2 requiert
        iconv, qui est disponible à partir du même emplacement de téléchargement.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>LZ4</productname></term>
       <listitem><para>
        Requis pour accepter la compression <productname>LZ4</productname>.
        Les binaires et les sources peuvent être téléchargés à partir de
        <ulink url="https://github.com/lz4/lz4/releases"></ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>Zstandard</productname></term>
       <listitem><para>
        Requis pour accepter la compression <productname>Zstandard</productname>.
        Les binaires et les sources peuvent être téléchargés à partir de
        <ulink url="https://github.com/facebook/zstd/releases"></ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>OpenSSL</productname></term>
       <listitem><para>
        Requis pour le support de SSL. Les binaires et peuvent être téléchargés
        à partir de <ulink
        url="https://slproweb.com/products/Win32OpenSSL.html"></ulink> alors que
        les sources sont disponibles sur <ulink
        url="https://www.openssl.org"></ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>ossp-uuid</productname></term>
       <listitem><para>
        Requis pour le support de UUID-OSSP (uniquement pour le module contrib).
        Les sources peuvent être téléchargés à partir de
        <ulink url="http://www.ossp.org/pkg/lib/uuid/"></ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>Python</productname></term>
       <listitem><para>
        Requis pour construire <application>PL/Python</application>. Les
        binaires peuvent être téléchargés à partir de <ulink
        url="https://www.python.org"></ulink>.
       </para></listitem>
      </varlistentry>

      <varlistentry>
       <term><productname>zlib</productname></term>
       <listitem><para>
        Requis pour le support de la compression dans
        <application>pg_dump</application> et
        <application>pg_restore</application>. Les binaires peuvent être
        téléchargés à partir de <ulink url="https://www.zlib.net"></ulink>.
       </para></listitem>
      </varlistentry>

     </variablelist>
    </para>
   </sect3>

   <sect3 id="install-windows-full-64-bit">
    <title>Considérations spéciales pour Windows 64 bits</title>
    <para>
     PostgreSQL pourra seulement être construit pour l'architecture x64 sur un
     Windows 64 bits.
    </para>
    <para>
     Mixer les versions 32 et 64 bits dans le même arbre de construction n'est
     pas supporté. Le système de construction détectera automatiquement s'il
     fonctionne sur un environnement 32 ou 64 bits, et construira PostgreSQL
     suivant cela. Pour cette raison, il est important de lancer la bonne invite
     de commande avant de lancer la construction.
    </para>
    <para>
     Pour utiliser une bibliothèque tierce côté serveur, comme
     <productname>Python</productname> ou
     <productname>OpenSSL</productname>, cette bibliothèque
     <emphasis>doit</emphasis> aussi être en 64 bits. Il n'est pas possible de
     charger une bibliothèque 32 bits sur un serveur 64 bits. Certaines
     bibliothèquestierces pourraient être uniquement disponibles en version 32
     bits, auquel cas elles ne pourront pas être utilisées avec un PostgreSQL
     64 bits.
    </para>
   </sect3>

   <sect3 id="windows-crash-dumps">
    <title>Récupérer les dumps de crash</title>

    <para>
     Si PostgreSQL sur Windows s'arrête brutalement, il peut générer des
     <productname>minidumps</productname> qui peuvent être utilisés pour
     trouver la cause du crash, tout comme les <foreignphrase>core
     dumps</foreignphrase> sous Unix. Ces <foreignphrase>dumps</foreignphrase>
     peuvent être lus en utilisant <productname>Windows Debugger
     Tools</productname> ou <productname>Visual Studio</productname>. Pour
     activer la génération de <foreignphrase>dumps</foreignphrase> sous
     Windows, créez un sous-répertoire nommé <filename>crashdumps</filename>
     dans le répertoire de données principal de l'instance. Les
     <foreignphrase>dumps</foreignphrase> seront alors écrits dans ce
     répertoire avec un nom unique basé sur l'identifiant du processus qui
     s'est arrêté brutalement et l'heure de l'arrêt.
    </para>
   </sect3>
  </sect2>
</sect1>

</chapter>
