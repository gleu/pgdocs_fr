<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="pgstatstatements" xreflabel="pg_stat_statements">
 <title>pg_stat_statements</title>

 <indexterm zone="pgstatstatements">
  <primary>pg_stat_statements</primary>
 </indexterm>

 <para>
  Le module <filename>pg_stat_statements</filename> fournit un moyen de
  surveiller les statistiques d'exécution de tous les ordres SQL exécutés par
  un serveur.
 </para>

 <para>
  Le module doit être chargé par l'ajout de
  <literal>pg_stat_statements</literal> à <xref
  linkend="guc-shared-preload-libraries"/> dans le fichier de configuration
  <filename>postgresql.conf</filename> parce qu'il a besoin de mémoire
  partagée supplémentaire. Ceci signifie qu'il faut redémarrer le serveur pour
  ajouter ou supprimer le module.
 </para>

 <para>
   Quand <filename>pg_stat_statements</filename> est chargé, il récupère des
   statistiques sur toutes les bases de données du serveur. Pour y accéder et
   les manipuler, le module fournit une vue,
   <structname>pg_stat_statements</structname>, et les fonctions
   <function>pg_stat_statements_reset</function> et
   <function>pg_stat_statements</function>. Elles ne sont pas disponibles
   globalement mais peuvent être activées pour une base de données spécifique
   avec l'instruction <command>CREATE EXTENSION pg_stat_statements</command>.
 </para>

 <sect2>
  <title>La vue <structname>pg_stat_statements</structname></title>

  <para>
   Les statistiques collectées par le module sont rendues disponibles par une
   vue nommée <structname>pg_stat_statements</structname>. Cette vue contient
   une ligne pour chaque identifiant de base de données, identifiant
   utilisateur et identifiant de requête distincts (jusqu'au nombre maximum
   d'ordres distincts que le module peut surveiller). Les colonnes de la vue
   sont affichées dans <xref linkend="pgstatstatements-columns"/>.
  </para>

  <table id="pgstatstatements-columns">
   <title>Colonnes de <structname>pg_stat_statements</structname></title>

   <tgroup cols="4">
    <thead>
     <row>
      <entry>Nom</entry>
      <entry>Type</entry>
      <entry>Référence</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>userid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
      <entry>OID de l'utilisateur qui a exécuté l'ordre SQL</entry>
     </row>

     <row>
      <entry><structfield>dbid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.oid</literal></entry>
      <entry>
       OID de la base de données dans laquelle l'ordre SQL a été exécuté
      </entry>
     </row>

     <row>
      <entry><structfield>queryid</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>
       Code de hachage interne, calculé à partir de l'arbre d'analyse de la
       requête.
      </entry>
     </row>

     <row>
      <entry><structfield>query</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>Texte de l'ordre SQL représentatif</entry>
     </row>

     <row>
      <entry><structfield>calls</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre d'exécutions</entry>
     </row>

     <row>
      <entry><structfield>total_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>Durée d'exécution de l'instruction SQL, en millisecondes</entry>
     </row>

     <row>
      <entry><structfield>min_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>Durée minimum d'exécution de l'instruction SQL, en millisecondes</entry>
     </row>

     <row>
      <entry><structfield>max_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>Durée maximum d'exécution de l'instruction SQL, en millisecondes</entry>
     </row>

     <row>
      <entry><structfield>mean_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>Durée moyenne d'exécution de l'instruction SQL, en millisecondes</entry>
     </row>

     <row>
      <entry><structfield>stddev_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
       Déviation standard de la durée d'exécution de l'instruction SQL, en
       millisecondes
      </entry>
     </row>

     <row>
      <entry><structfield>rows</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de lignes renvoyées ou affectées par l'ordre SQL</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_hit</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs partagés lus dans le cache par l'ordre
       SQL</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs partagés lus sur disque par l'ordre
       SQL</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_dirtied</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs partagés mis à jour par l'ordre SQL</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs partagés écrits sur disque par l'ordre
       SQL</entry>
     </row>

     <row>
      <entry><structfield>local_blks_hit</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs locaux lus dans le cache par l'ordre
       SQL</entry>
     </row>

     <row>
      <entry><structfield>local_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs locaux lus sur disque par l'ordre
       SQL</entry>
     </row>

     <row>
      <entry><structfield>local_blks_dirtied</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs locaux mis à jour par l'ordre SQL.</entry>
     </row>

     <row>
      <entry><structfield>local_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs locaux écrits sur disque par l'ordre
       SQL</entry>
     </row>

     <row>
      <entry><structfield>temp_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs temporaires lus par l'ordre SQL</entry>
     </row>

     <row>
      <entry><structfield>temp_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Nombre total de blocs temporaires écrits par l'ordre SQL</entry>
     </row>

     <row>
      <entry><structfield>blk_read_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
       Durée totale du temps passé par l'ordre SQL à lire des blocs, en
       millisecondes (si <xref linkend="guc-track-io-timing"/> est activé,
       sinon zéro)
      </entry>
     </row>

     <row>
      <entry><structfield>blk_write_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
       Durée totale du temps passé par l'ordre SQL à écrire des blocs sur
       disque, en millisecondes (si <xref linkend="guc-track-io-timing"/> est
       activé, sinon zéro)
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   Pour raisons de sécurité, seuls les super utilisateurs et les membres du
   rôle <literal>pg_read_all_stats</literal> sont autorisé à voir le texte SQL
   ainsi que le champ <structfield>queryid</structfield> des requêtes exécutées
   par d'autres utilisateurs.  Les autres utilisateurs peuvent cependant voir
   les statistiques, si la vue a été installée dans leur base de données.
  </para>

  <para>
   Les requêtes qui disposent d'un plan d'exécution (c'est-à-dire <command>SELECT</command>, <command>INSERT</command>,
   <command>UPDATE</command>, et <command>DELETE</command>) sont combinées en
   une entrée unique dans <structname>pg_stat_statements</structname> lorsqu'elles
   ont un plan d'exécution similaire (d'après leur hachage). En substance, cela
   signifie que deux requêtes seront considérées comme équivalentes si elles sont
   sémantiquement les mêmes mais disposent de valeurs littérales différentes
   dans la requête. Les requêtes utilitaires (c'est-à-dire toutes les autres)
   ne sont considérées comme unique que lorsqu'elles sont égales au caractère près.
  </para>

  <para>
   Quand la valeur d'une constante a été ignorée pour pouvoir comparer la
   requête à d'autres requêtes, la constante est remplacée par un symbole de
   paramètre, tel que <literal>$1</literal>, dans l'affichage de
   <structname>pg_stat_statements</structname>.  Le reste du texte de la
   requête est tel qu'était la première requête ayant la valeur de hashage
   <structfield>queryid</structfield> spécifique assoiée à l'entrée dans
   <structname>pg_stat_statements</structname>.
  </para>

  <para>
   Dans certains cas, les requêtes SQL avec des textes différents peuvent être
   fusionnés en une seule entrée <structname>pg_stat_statements</structname>.
   Normalement, cela n'arrive que pour les requêtes dont la sémantique est
   équivalente, mais il y a une petite chance que des collisions de l'algorithme
   de hachage aient pour conséquence la fusion de requêtes sans rapport en une
   entrée. (Cela ne peut cependant pas arriver pour des requêtes appartenant à
   des utilisateurs différents ou des bases de données différentes).
  </para>

  <para>
   Puisque la valeur de hachage <structfield>queryid</structfield> est calculée
   sur la représentation de la requête après analyse, l'inverse est également
   possible&nbsp;: des requêtes avec un texte identique peuvent apparaître
   comme des entrées séparées, si elles ont des significations différentes en
   fonction de facteurs externes, comme des réglages de
   <varname>search_path</varname> différents.
  </para>

  <para>
   Les programmes utilisant <structname>pg_stat_statements</structname> pourraient
   préférer utiliser <structfield>queryid</structfield> (peut-être en
   association avec <structfield>dbid</structfield> et <structfield>userid</structfield>)
   pour disposer d'un identifiant plus stable et plus sûr pour chaque entrée
   plutôt que le texte de la requête.  Cependant, il est important de
   comprendre qu'il n'y a qu'une garantie limitée sur la stabilité de la valeur
   de hachage de <structfield>queryid</structfield>.  Puisque l'identifiant est
   dérivé de l'arbre après analyse, sa valeur est une fonction, entre autres
   choses, des identifiants d'objet interne apparaissant dans cette
   représentation.  Cela a des implications paradoxales.  Par exemple,
   <filename>pg_stat_statements</filename> considérera deux requêtes apparemment
   identiques comme distinctes, si elles référencent une table qui a été
   supprimée et recréée entre l'exécution de ces deux requêtes.  Le processus de
   hachage est également sensible aux différences d'architecture des machines
   ainsi que d'autres facettes de la plateforme.  De plus, il n'est pas sûr de
   partir du principe que <structfield>queryid</structfield> restera stable
   entre des versions majeures de <productname>PostgreSQL</productname>.
  </para>

  <para>
   De manière générale, on peut supposer que les valeurs de
   <structfield>queryid</structfield> sont stables et comparables tant que la
   version de serveur sous-jacente et que les informations de métadonnées du
   catalogue restent exactement les même.  Deux serveurs en réplication à base
   de rejeu de journaux de transactions physique devraient avoir des valeurs de
   <structfield>queryid</structfield> identiques pour une même requête.
   Toutefois, les mécanismes de réplication logique ne garantissent pas de
   conserver des réplicats identiques pour tous les détails entrant en jeu, par
   conséquent <structfield>queryid</structfield> ne sera pas un identifiant
   utile pour accumuler des coûts sur un ensemble de réplicats logiques.  En cas
   de doute, il est recommandé de tester directement.
  </para>

  <para>
   Le symbole de paramètre utilité pour remplacer les constantes dans le texte
   représentatif de la requête démarre après le plus grand paramètre
   <literal>$</literal><replaceable>n</replaceable> dans le texte de la requête
   originale, ou <literal>$1</literal> s'il n'y en avait pas.  Il est
   intéressant de noter que dans cerains cas il pourrait y avoir un symbole de
   paramètre caché qui affecte cette numérotation.  Par exemple,
   <application>PL/pgSQL</application> utilise des symbole de paramètre cachés
   pour insérer des valeurs de variables locales à la fonction dans les
   requêtes, ainsi un ordre <application>PL/pgSQL</application> comme
   <literal>SELECT i + 1 INTO j</literal> aurait un texte représentatif tel que
   <literal>SELECT i + $2</literal>.
  </para>

  <para>
   Les textes des requêtes sont conservées dans un fichier texte externe et ne
   consomment pas de mémoire partagée. De ce fait, même lees textes très longs
   de requêtes peuvent être enregistrés avec succès. Néanmoins, si beaucoup de
   textes très longs de requêtes sont accumulées, le fichier externe peut
   devenir suffisamment gros pour ne plus être gérable. Si cela survient,
   comme méthode de restauration, <filename>pg_stat_statements</filename> peut
   choisir d'ignorer les textes de requêtes. Dans ce cas, le champ
   <structfield>query</structfield> apparaitra vide sur les lignes de la vue
   <structname>pg_stat_statements</structname> mais les statistiques associées
   seront préservées. Si cela arrive, réfléchissez à réduire la valeur du
   paramètre <varname>pg_stat_statements.max</varname> pour empêcher que cela
   ne recommence.
  </para>
 </sect2>

 <sect2>
  <title>Fonctions</title>

  <variablelist>
   <varlistentry>

    <term>
     <function>pg_stat_statements_reset() returns void</function>
     <indexterm>
      <primary>pg_stat_statements_reset</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <function>pg_stat_statements_reset</function> ignore toutes les
      statistiques collectées jusque-là par
      <filename>pg_stat_statements</filename>. Par défaut, cette fonction peut
      uniquement être exécutée par les super-utilisateurs.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>pg_stat_statements(showtext boolean) returns setof record</function>
     <indexterm>
      <primary>pg_stat_statements</primary>
      <secondary>fonction</secondary>
     </indexterm>
    </term>

    <listitem>
     <para>
      La vue <structname>pg_stat_statements</structname> est basée sur une
      fonction également nommée <function>pg_stat_statements</function>.  Les
      clients peuvent appeler la fonction <function>pg_stat_statements</function>
      directement, et peuvent en spécifiant <literal>showtext := false</literal>
      ne pas récupérer le texte de la requête (ce qui veut dire que l'argument
      <literal>OUT</literal> qui correspond à la colonne <structfield>query</structfield>
      de la vue retournera des NULL).  Cette fonctionnalité est prévue pour le
      support d'outils externes qui pourraient vouloir éviter le surcoût de
      récupérer de manière répétée les textes des requêtes de longueur
      indeterminées.  De tels outils peuvent à la place eux-même mettre le
      premier texte de requête récupéré pour chaque entrée, puisque c'est déjà
      ce que fait <filename>pg_stat_statements</filename> lui-même, et ensuite
      récupérer les textes de requêtes uniquement si nécessaire.  Puisque le
      serveur stocke les textes de requête dans un fichier, cette approche
      pourrait réduire les entrée/sorties physiques pour des vérifications
      répétées des données de <structname>pg_stat_statements</structname>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
  <title>Paramètres de configuration</title>

  <variablelist>
   <varlistentry>
    <term>
     <varname>pg_stat_statements.max</varname> (<type>integer</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.max</varname> est le nombre maximum d'ordres
      tracés par le module (c'est-à-dire le nombre maximum de lignes dans la
      vue <structname>pg_stat_statements</structname>). Si un nombre supérieur
      d'ordres SQL distincts a été observé, c'est l'information sur les ordres
      les moins exécutés qui est ignorée. La valeur par défaut est 5000.
      Ce paramètre peut uniquement être positionné au démarrage du serveur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track</varname> (<type>enum</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track</varname> contrôle quels sont les ordres
      comptabilisés par le module. Spécifiez <literal>top</literal> pour suivre
      les ordres de plus haut niveau (ceux qui sont soumis directement par les
      clients), <literal>all</literal> pour suivre également les ordres
      imbriqués (tels que les ordres invoqués dans les fonctions) ou
      <literal>none</literal> pour désactiver la récupération des statistiques
      sur les requêtes. La valeur par défaut est
      <literal>top</literal>.
      Seuls les super-utilisateurs peuvent changer ce paramétrage.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track_utility</varname> (<type>boolean</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track_utility</varname> contrôle si les
      commandes utilitaires sont tracées par le module. Les commandes
      utilitaires sont toutes les commandes SQL sauf <command>SELECT</command>,
      <command>INSERT</command>, <command>UPDATE</command> et
      <command>DELETE</command>. La valeur par défaut est
      <literal>on</literal>. Seuls les superutilisateurs peuvent modifier
      cette configuration.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.save</varname> (<type>boolean</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.save</varname> précise s'il faut sauvegarder
      les statistiques lors des arrêts du serveur. S'il est
      <literal>off</literal>, alors les statistiques ne sont pas sauvegardées
      lors de l'arrêt ni rechargées au démarrage du serveur. La valeur par
      défaut est <literal>on</literal>.
      Ce paramètre peut uniquement être positionné dans le fichier
      <filename>postgresql.conf</filename> ou sur la ligne de commande du
      serveur.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Le module a besoin de mémoire partagée supplémentaire proportionnelle à
   <varname>pg_stat_statements.max</varname>.  Notez que cette
   mémoire est consommée quand le module est chargé, même si
   <varname>pg_stat_statements.track</varname> est positionné à
   <literal>none</literal>.
  </para>

  <para>
   Ces paramètres doivent être définis dans <filename>postgresql.conf</filename>.
   Un usage courant pourrait être&nbsp;:
  </para>

  <programlisting>
# postgresql.conf
shared_preload_libraries = 'pg_stat_statements'

pg_stat_statements.max = 10000
pg_stat_statements.track = all
  </programlisting>
 </sect2>

 <sect2>
  <title>Exemple de sortie</title>

  <screen>bench=# SELECT pg_stat_statements_reset();

$ pgbench -i bench
$ pgbench -c10 -t300 bench

bench=# \x
bench=# SELECT query, calls, total_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
-[ RECORD 1 ]---------------------------------------------------------------------
query       | UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2;
calls       | 3000
total_time  | 9609.00100000002
rows        | 2836
hit_percent | 99.9778970000200936
-[ RECORD 2 ]---------------------------------------------------------------------
query       | UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2;
calls       | 3000
total_time  | 8015.156
rows        | 2990
hit_percent | 99.9731126579631345
-[ RECORD 3 ]---------------------------------------------------------------------
query       | copy pgbench_accounts from stdin
calls       | 1
total_time  | 310.624
rows        | 100000
hit_percent | 0.30395136778115501520
-[ RECORD 4 ]---------------------------------------------------------------------
query       | UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2;
calls       | 3000
total_time  | 271.741999999997
rows        | 3000
hit_percent | 93.7968855088209426
-[ RECORD 5 ]---------------------------------------------------------------------
query       | alter table pgbench_accounts add primary key (aid)
calls       | 1
total_time  | 81.42
rows        | 0
hit_percent | 34.4947735191637631
  </screen>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>.
   La normalisation des requêtes a été ajoutée par Peter Geoghegan <email>peter@2ndquadrant.com</email>.
  </para>
 </sect2>

</sect1>
