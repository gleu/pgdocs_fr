<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="pgstatstatements" xreflabel="pg_stat_statements">
 <title>pg_stat_statements &mdash; récupérer les statistiques de planification
  et d'exécution de requêtes SQL</title>

 <indexterm zone="pgstatstatements">
  <primary>pg_stat_statements</primary>
 </indexterm>

 <para>
  Le module <filename>pg_stat_statements</filename> fournit un moyen de
  surveiller les statistiques d'optimisation et d'exécution de tous les
  ordres SQL exécutés par un serveur.
 </para>

 <para>
  Le module doit être chargé par l'ajout de
  <literal>pg_stat_statements</literal> à <xref
  linkend="guc-shared-preload-libraries"/> dans le fichier de configuration
  <filename>postgresql.conf</filename> parce qu'il a besoin de mémoire
  partagée supplémentaire. Ceci signifie qu'il faut redémarrer le serveur
  pour ajouter ou supprimer le module. De plus, le calcul de l'identifiant de
  requête doit être activé pour que le module soit actif, ce qui est fait
  automatiquement si <xref linkend="guc-compute-query-id"/> est configuré à
  <literal>auto</literal> ou <literal>on</literal>, ou tout autre module
  tiers chargé qui calcule les identifiants de requête.
 </para>

 <para>
  Quand <filename>pg_stat_statements</filename> est actif, il récupère des
  statistiques sur toutes les bases de données du serveur. Pour y accéder et
  les manipuler, le module fournit les vues
  <structname>pg_stat_statements</structname> et
  <structname>pg_stat_statements_info</structname>, et les fonctions
  <function>pg_stat_statements_reset</function> et
  <function>pg_stat_statements</function>. Elles ne sont pas disponibles
  globalement mais peuvent être activées pour une base de données spécifique
  avec l'instruction <command>CREATE EXTENSION pg_stat_statements</command>.
 </para>

 <sect2 id="pgstatstatements-pg-stat-statements">
  <title>La vue <structname>pg_stat_statements</structname></title>

  <para>
   Les statistiques collectées par le module sont rendues disponibles par une
   vue nommée <structname>pg_stat_statements</structname>. Cette vue contient
   une ligne pour chaque combinaison d'un identifiant de base de données,
   d'un identifiant utilisateur, d'un identifiant de requête et s'il s'agit
   d'une requête principale ou non (jusqu'au nombre maximum d'ordres
   distincts que le module peut surveiller). Les colonnes de la vue sont
   affichées dans <xref linkend="pgstatstatements-columns"/>.
  </para>

  <table id="pgstatstatements-columns">
   <title>Colonnes de <structname>pg_stat_statements</structname></title>

   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        Type de colonne
       </para>
       <para>
        Description
       </para></entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>userid</structfield> <type>oid</type>
        (référence <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.<structfield>oid</structfield>)
       </para>
       <para>
        OID de l'utilisateur qui a exécuté la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>dbid</structfield> <type>oid</type>
        (référence <link linkend="catalog-pg-database"><structname>pg_database</structname></link>.<structfield>oid</structfield>)
       </para>
       <para>
        OID de la base dans laquelle a été exécutée la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>toplevel</structfield> <type>bool</type>
      </para>
      <para>
       True si la requête a été exécutée comme instruction de haut niveau
       (toujours true si <varname>pg_stat_statements.track</varname> est
       configuré à <literal>top</literal>)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>queryid</structfield> <type>bigint</type>
       </para>
       <para>
        Code de hachage, calculé à partir de l'arbre d'analyse de la
        requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>query</structfield> <type>text</type>
       </para>
       <para>
        Texte d'une requête représentative
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>plans</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre d'optimisations de la requête
        (si <varname>pg_stat_statements.track_planning</varname> est activé,
        sinon zéro)
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>total_plan_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée totale passée à optimiser la requête, en millisecondes
        (si <varname>pg_stat_statements.track_planning</varname> est activé,
        sinon zéro)
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>min_plan_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée minimale passée à optimiser la requête, en millisecondes. Ce
        champ vaudra zéro si
        <varname>pg_stat_statements.track_planning</varname> est désactivé ou
        si le compteur a été réinitialisé en utilisant la fonction
        <function>pg_stat_statements_reset</function> avec le paramètre
        <structfield>minmax_only</structfield> initialisé à
        <literal>true</literal> et que la requête n'a pas été exécutée
        depuis.
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>max_plan_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée maximale passée à optimiser la requête, en millisecondes. Ce
        champ vaudra zéro si
        <varname>pg_stat_statements.track_planning</varname> est désactivé ou
        si le compteur a été réinitialisé en utilisant la fonction
        <function>pg_stat_statements_reset</function> avec le paramètre
        <structfield>minmax_only</structfield> initialisé à
        <literal>true</literal> et que la requête n'a pas été exécutée
        depuis.
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>mean_plan_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée moyenne passée à optimiser la requête, en millisecondes
        (si <varname>pg_stat_statements.track_planning</varname> est activé,
        sinon zéro)
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>stddev_plan_time</structfield> <type>double precision</type>
       </para>
       <para>
        Déviation standard de la durée passée à optimiser la requête, en
        millisecondes
        (si <varname>pg_stat_statements.track_planning</varname> est activé,
        sinon zéro)
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>calls</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre d'exécutions de la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>total_exec_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée totale passée à exécuter la requête, en millisecondes
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>min_exec_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée minimale passée à exécuter la requête, en millisecondes.
        Ce champ vaudra zéro jusqu'à ce que cette requête soit exécutée
        pour la première fois après la réinitialisation réalisée par la
        fonction <function>pg_stat_statements_reset</function> avec le
        paramètre <structfield>minmax_only</structfield> initialisé à
        <literal>true</literal>
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>max_exec_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée maximale passée à exécuter la requête, en millisecondes.
        Ce champ vaudra zéro jusqu'à ce que cette requête soit exécutée
        pour la première fois après la réinitialisation réalisée par la
        fonction <function>pg_stat_statements_reset</function> avec le
        paramètre <structfield>minmax_only</structfield> initialisé à
        <literal>true</literal>
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>mean_exec_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée moyenne passée à exécuter la requête, en millisecondes
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>stddev_exec_time</structfield> <type>double precision</type>
       </para>
       <para>
        Déviation standard de la durée passée à exécuter la requête, en
        millisecondes
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>rows</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de lignes récupérées ou affectées par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>shared_blks_hit</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs lus dans le cache partagé par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>shared_blks_read</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs lus hors cache partagé par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>shared_blks_dirtied</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs modifiés dans le cache partagé par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>shared_blks_written</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs du cache partagé écrit sur disque par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>local_blks_hit</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs lus dans le cache local par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>local_blks_read</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs lus hors du cache local par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>local_blks_dirtied</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs modifiés dans le cache local par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>local_blks_written</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs du cache local écrit sur disque par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>temp_blks_read</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs lus dans les fichiers temporaires par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>temp_blks_written</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total de blocs écrits dans les fichiers temporaires par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>shared_blk_read_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée totale de lecture des blocs des fichiers de données (hors cache)
        par la requête, en millisecondes (si <xref
        linkend="guc-track-io-timing"/> est activé, sinon zéro)
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>shared_blk_write_time</structfield> <type>double precision</type>
       </para>
       <para>
        Durée totale de l'écriture des blocs des fichiers de données (hors
        cache) par la requête, en millisecondes (si <xref
        linkend="guc-track-io-timing"/> est activé, sinon zéro)
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>local_blk_read_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durale totale de lecture de blocs locaux, en millisecondes
       (si <xref linkend="guc-track-io-timing"/> est activé, sinon zéro)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>local_blk_write_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durale totale d'écriture de blocs locaux, en millisecondes
       (si <xref linkend="guc-track-io-timing"/> est activé, sinon zéro)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>temp_blk_read_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durée totale des lectures des blocs de fichiers temporaires en millisecondes
       (si <xref linkend="guc-track-io-timing"/> est activé, sinon zéro)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>temp_blk_write_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durée totale des écritures des blocs de fichiers temporaires en millisecondes
       (si <xref linkend="guc-track-io-timing"/> est activé, sinon zéro)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>wal_records</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total d'enregistrements générés dans les WAL par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>wal_fpi</structfield> <type>bigint</type>
       </para>
       <para>
        Nombre total d'images complètes de blocs (<foreignphrase>full page
         images</foreignphrase>) générés dans les WAL par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
        <structfield>wal_bytes</structfield> <type>numeric</type>
       </para>
       <para>
        Nombre total d'octets générés dans les WAL par la requête
       </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_functions</structfield> <type>bigint</type>
      </para>
      <para>
       Nombre total de fonctions compilées par JIT pour cette requête
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_generation_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durée totale passée par la requête sur la génération de code JIT, en millisecondes
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_inlining_count</structfield> <type>bigint</type>
      </para>
      <para>
       Nombre de fois où les fonctions ont été incluses
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_inlining_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durée totale passée par la requête sur l'inclusion de fonctions, en millisecondes
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_optimization_count</structfield> <type>bigint</type>
      </para>
      <para>
       Nombre de fois où la requête a été optimisée
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_optimization_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durée totale passée sur l'optimisation de la requête, en millisecondes
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_emission_count</structfield> <type>bigint</type>
      </para>
      <para>
       Nombre de fois où du code a été émis
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_emission_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durée totale passée par la requête sur de l'émission de code, en millisecondes
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_deform_count</structfield> <type>bigint</type>
      </para>
      <para>
       Nombre total de fonctions deform de lignes pour le code compilé
       par JIT pour la requête
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>jit_deform_time</structfield> <type>double precision</type>
      </para>
      <para>
       Durée totale passée par la requête sur les fonctions deform pour le
       code compilé par JIT, en millisecondes
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>stats_since</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Moment à partir duquel les statistiques ont commencé à être
       récupérées pour cette requête
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>minmax_stats_since</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Moment à partir duquel les statistiques min/max ont commencé à être
       récupérées pour cette requête (champs
       <structfield>min_plan_time</structfield>,
       <structfield>max_plan_time</structfield>,
       <structfield>min_exec_time</structfield> et
       <structfield>max_exec_time</structfield>)
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Pour raisons de sécurité, seuls les superutilisateurs et les rôles
   disposant des droits du
   rôle <literal>pg_read_all_stats</literal> sont autorisé à voir le texte
   SQL ainsi que le champ <structfield>queryid</structfield> des requêtes
   exécutées par d'autres utilisateurs.  Les autres utilisateurs peuvent
   cependant voir les statistiques, si la vue a été installée dans leur base
   de données.
  </para>

  <para>
   Les requêtes qui disposent d'un plan d'exécution
   (c'est-à-dire <command>SELECT</command>, <command>INSERT</command>,
   <command>UPDATE</command>, <command>DELETE</command> et
   <command>MERGE</command>) et les commandes utilitaires sont combinées en
   une entrée unique dans <structname>pg_stat_statements</structname>
   lorsqu'elles ont un plan d'exécution similaire (d'après leur hachage). En
   substance, cela signifie que deux requêtes seront considérées comme
   équivalentes si elles sont sémantiquement les mêmes mais disposent de
   valeurs littérales différentes dans la requête.
  </para>

  <note>
   <para>
    Les détails suivant sur le remplacement des constantes et le
    <structfield>queryid</structfield> s'appliquent seulement si <xref
    linkend="guc-compute-query-id"/> est activé. Si vous utilisez un module
    externe pour calculer <structfield>queryid</structfield>, vous devez vous
    référer à sa documentation pour les détails.
   </para>
  </note>

  <para>
   Quand la valeur d'une constante a été ignorée pour pouvoir comparer la
   requête à d'autres requêtes, la constante est remplacée par un symbole de
   paramètre, tel que <literal>$1</literal>, dans l'affichage de
   <structname>pg_stat_statements</structname>.  Le reste du texte de la
   requête est tel qu'était la première requête ayant la valeur de hashage
   <structfield>queryid</structfield> spécifique associée à l'entrée dans
   <structname>pg_stat_statements</structname>.
  </para>

  <para>
   Les requêtes sur lesquelles la normalisation peut être appliquée peuvent
   être observées avec des valeurs constantes dans
   <structname>pg_stat_statements</structname>, principalement quand il y a
   un taux élevé de désallocations d'entrées. Pour réduire ce risque, pensez
   à augmenter <varname>pg_stat_statements.max</varname>. La vue
   <structname>pg_stat_statements_info</structname>, discutée ci-dessous dans
   <xref linkend="pgstatstatements-pg-stat-statements-info"/>, fournit des
   statistiques sur les désallocations d'entrées.
  </para>

  <para>
   Dans certains cas, les requêtes SQL avec des textes différents peuvent être
   fusionnés en une seule entrée <structname>pg_stat_statements</structname>.
   Normalement, cela n'arrive que pour les requêtes dont la sémantique est
   équivalente, mais il y a une petite chance que des collisions de
   l'algorithme de hachage aient pour conséquence la fusion de requêtes sans
   rapport en une entrée. (Cela ne peut cependant pas arriver pour des
   requêtes appartenant à des utilisateurs différents ou des bases de données
   différentes).
  </para>

  <para>
   Puisque la valeur de hachage <structfield>queryid</structfield> est
   calculée sur la représentation de la requête après analyse, l'inverse est
   également possible&nbsp;: des requêtes avec un texte identique peuvent
   apparaître comme des entrées séparées, si elles ont des significations
   différentes en fonction de facteurs externes, comme des réglages de
   <varname>search_path</varname> différents.
  </para>

  <para>
   Les programmes utilisant <structname>pg_stat_statements</structname>
   pourraient préférer utiliser <structfield>queryid</structfield> (peut-être
   en association avec <structfield>dbid</structfield> et
   <structfield>userid</structfield>) pour disposer d'un identifiant plus
   stable et plus sûr pour chaque entrée plutôt que le texte de la requête.
   Cependant, il est important de comprendre qu'il n'y a qu'une garantie
   limitée sur la stabilité de la valeur de hachage de
   <structfield>queryid</structfield>.  Puisque l'identifiant est dérivé de
   l'arbre après analyse, sa valeur est une fonction, entre autres choses, des
   identifiants d'objet interne apparaissant dans cette représentation.  Cela
   a des implications paradoxales.  Par exemple,
   <filename>pg_stat_statements</filename> considérera deux requêtes
   apparemment identiques comme distinctes, si elles référencent une table qui
   a été supprimée et recréée entre l'exécution de ces deux requêtes.  Le
   processus de hachage est également sensible aux différences d'architecture
   des machines ainsi que d'autres facettes de la plateforme.  De plus, il
   n'est pas sûr de partir du principe que <structfield>queryid</structfield>
   restera stable entre des versions majeures de
   <productname>PostgreSQL</productname>.
  </para>

  <para>
   Deux serveurs participant à une réplication basée sur le rejeu physique des
   journaux de transactions devraient avoir des valeurs de
   <structfield>queryid</structfield> identiques pour la même requête.
   Cependant, les systèmes de réplication logique ne promettent pas de conserver
   des réplicas identiques surtout les détails intéressants, donc
   <structfield>queryid</structfield> ne sera pas un identifiant utile pour
   accumuler les coûts dans un ensemble de réplicas logiques. En cas de doute,
   un test direct est recommandé.
  </para>

  <para>
   En règle général, il peut être supposé que les valeurs
   <structfield>queryid</structfield> sont stables entre des versions mineures
   de <productname>PostgreSQL</productname>, en supposant que les instances sont
   exécutées sur la même architecture matérielle et que les détails de
   métadonnées du catalogue correspondent. La compatibilité entre versions
   mineures ne sera cassée qu'en cas de dernière extrémité.
  </para>

  <para>
   Le symbole de paramètre utilité pour remplacer les constantes dans le texte
   représentatif de la requête démarre après le plus grand paramètre
   <literal>$</literal><replaceable>n</replaceable> dans le texte de la
   requête originale, ou <literal>$1</literal> s'il n'y en avait pas.  Il est
   intéressant de noter que dans certains cas il pourrait y avoir un symbole de
   paramètre caché qui affecte cette numérotation.  Par exemple,
   <application>PL/pgSQL</application> utilise des symbole de paramètre cachés
   pour insérer des valeurs de variables locales à la fonction dans les
   requêtes, ainsi un ordre <application>PL/pgSQL</application> comme
   <literal>SELECT i + 1 INTO j</literal> aurait un texte représentatif tel
   que <literal>SELECT i + $2</literal>.
  </para>

  <para>
   Les textes des requêtes sont conservées dans un fichier texte externe et ne
   consomment pas de mémoire partagée. De ce fait, même les textes très longs
   de requêtes peuvent être enregistrés avec succès. Néanmoins, si beaucoup de
   textes très longs de requêtes sont accumulées, le fichier externe peut
   devenir suffisamment gros pour ne plus être gérable. Si cela survient,
   comme méthode de restauration, <filename>pg_stat_statements</filename> peut
   choisir d'ignorer les textes de requêtes. Dans ce cas, le champ
   <structfield>query</structfield> apparaitra vide sur les lignes de la vue
   <structname>pg_stat_statements</structname> mais les statistiques associées
   seront préservées. Si cela arrive, réfléchissez à réduire la valeur du
   paramètre <varname>pg_stat_statements.max</varname> pour empêcher que cela
   ne recommence.
  </para>

  <para>
   <structfield>plans</structfield> et <structfield>calls</structfield>
   peuvent différer car les statistiques d'optimisation/planification et
   d'exécution sont mises à jours à leur fin respective, et seulement si elles
   ont réussi. Par exemple, si une requête est optimisée avec succès mais
   échoue sur la phase d'exécution, seules les statistiques
   d'optimisation/planification seront modifiées. Si
   l'optimisation/planification est ignorée parce qu'un plan en cache est
   utilisé, seules les statistiques d'exécution seront mises à jour.
  </para>
 </sect2>

 <sect2 id="pgstatstatements-pg-stat-statements-info">
  <title>La vue <structname>pg_stat_statements_info</structname></title>

  <indexterm>
   <primary>pg_stat_statements_info</primary>
  </indexterm>

  <para>
   Les statistiques du module <filename>pg_stat_statements</filename> lui-même
   sont tracées et rendues disponibles via une vue nommée
   <structname>pg_stat_statements_info</structname>. Cette vue contient une
   seule ligne. Les colonnes de la vue sont affichées dans <xref
   linkend="pgstatstatementsinfo-columns"/>.
  </para>

  <table id="pgstatstatementsinfo-columns">
   <title>Colonnes de <structname>pg_stat_statements_info</structname></title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Type de colonne
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>dealloc</structfield> <type>bigint</type>
      </para>
      <para>
       Nombre total de fois où les enregistrements de
       <structname>pg_stat_statements</structname> pour les requêtes les moins
       exécutées ont été désallouées parce que plus de
       <varname>pg_stat_statements.max</varname> requêtes distinctes
       ont été observées
      </para></entry>
     </row>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>stats_reset</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Horodatage de la dernière réinitialisation de toutes les statistiques de
       <structname>pg_stat_statements</structname>.
      </para></entry>
     </row>

    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2 id="pgstatstatements-funcs">
  <title>Fonctions</title>

  <variablelist>
   <varlistentry>

    <term>
     <function>pg_stat_statements_reset(userid Oid, dbid Oid, queryid bigint, minmax_only boolean) returns void</function>
     <indexterm>
      <primary>pg_stat_statements_reset</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <function>pg_stat_statements_reset</function> annule les statistiques
      récupérées jusqu'à maintenant par
      <filename>pg_stat_statements</filename> correspondant aux
      <structfield>userid</structfield>, <structfield>dbid</structfield> et
      <structfield>queryid</structfield> indiqués. Si un de ces paramètres
      n'est pas spécifié, la valeur par défaut <literal>0</literal>
      (invalide) est utilisée pour chacun d'entre eux et les statistiques qui
      correspondent avec les autres paramètres seront réinitialisées. Si
      aucun paramètre n'est spécifié ou si tous les paramètres spécifiés sont
      à <literal>0</literal> (invalide), elle annulera toutes les
      statistiques. Si toutes les statistiques de la vue
      <filename>pg_stat_statements</filename> sont annulées, cela va aussi
      réinitialiser les statistiques de la vue
      <structname>pg_stat_statements_info</structname>. Quand
      <structfield>minmax_only</structfield> vaut <literal>true</literal>,
      seules les valeurs des durées minimales et maximales, d'optimisation
      comme d'exécution, seront réinitialisées (c'est-à-dire les champs
      <structfield>min_plan_time</structfield>,
      <structfield>max_plan_time</structfield>,
      <structfield>min_exec_time</structfield> et
      <structfield>max_exec_time</structfield> fields). La valeur par défaut
      du paramètre <structfield>minmax_only</structfield> est
      <literal>false</literal>. Le moment où ces statistiques ont été
      réinitialisées est indiqué dans le champ
      <structfield>minmax_stats_since</structfield> de la vue
      <structname>pg_stat_statements</structname>. Cette fonction renvoie le
      moment d'une réinitialisation. Ce moment est sauvegardé dans le champ
      <structfield>stats_reset</structfield> de la vue
      <structname>pg_stat_statements_info</structname> ou le champ
      <structfield>minmax_stats_since</structfield> de la vue
      <structname>pg_stat_statements</structname> si la réinitialisation
      correspondante a été réellement effectuée. Par défaut, cette fonction
      peut seulement être exécutée par les superutilisateurs. L'accès peut
      être donné à d'autres utilisateurs en utilisant la commande
      <command>GRANT</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>pg_stat_statements(showtext boolean) returns setof record</function>
     <indexterm>
      <primary>pg_stat_statements</primary>
      <secondary>fonction</secondary>
     </indexterm>
    </term>

    <listitem>
     <para>
      La vue <structname>pg_stat_statements</structname> est basée sur une
      fonction également nommée <function>pg_stat_statements</function>.  Les
      clients peuvent appeler la fonction
      <function>pg_stat_statements</function> directement, et peuvent en
      spécifiant <literal>showtext := false</literal> ne pas récupérer le
      texte de la requête (ce qui veut dire que l'argument
      <literal>OUT</literal> qui correspond à la colonne
      <structfield>query</structfield> de la vue retournera des NULL).  Cette
      fonctionnalité est prévue pour le support d'outils externes qui
      pourraient vouloir éviter le surcoût de récupérer de manière répétée
      les textes des requêtes de longueur indéterminées.  De tels outils
      peuvent à la place eux-même mettre le premier texte de requête récupéré
      pour chaque entrée, puisque c'est déjà ce que fait
      <filename>pg_stat_statements</filename> lui-même, et ensuite récupérer
      les textes de requêtes uniquement si nécessaire.  Puisque le serveur
      stocke les textes de requête dans un fichier, cette approche pourrait
      réduire les entrée/sorties physiques pour des vérifications répétées
      des données de <structname>pg_stat_statements</structname>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 id="pgstatstatements-config-params">
  <title>Paramètres de configuration</title>

  <variablelist>
   <varlistentry>
    <term>
     <varname>pg_stat_statements.max</varname> (<type>integer</type>)
     <indexterm>
      <primary>paramètre de configuration <varname>pg_stat_statements.max</varname></primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.max</varname> est le nombre maximum d'ordres
      tracés par le module (c'est-à-dire le nombre maximum de lignes dans la
      vue <structname>pg_stat_statements</structname>). Si un nombre
      supérieur d'ordres SQL distincts a été observé, c'est l'information sur
      les ordres les moins exécutés qui est ignorée. Le nombre de fois où une
      telle information est ignorée est consultable dans la vu
      <structname>pg_stat_statements_info</structname>. La valeur par défaut
      est 5000. Ce paramètre peut uniquement être positionné au démarrage du
      serveur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track</varname> (<type>enum</type>)
     <indexterm>
      <primary>paramètre de configuration <varname>pg_stat_statements.track</varname></primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track</varname> contrôle quels sont les
      ordres comptabilisés par le module. Spécifiez <literal>top</literal>
      pour suivre les ordres de plus haut niveau (ceux qui sont soumis
      directement par les clients), <literal>all</literal> pour suivre
      également les ordres imbriqués (tels que les ordres invoqués dans les
      fonctions) ou <literal>none</literal> pour désactiver la récupération
      des statistiques sur les requêtes. La valeur par défaut est
      <literal>top</literal>. Seuls les superutilisateurs peuvent changer ce
      paramétrage.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track_utility</varname> (<type>boolean</type>)
     <indexterm>
      <primary>paramètre de configuration <varname>pg_stat_statements.track_utility</varname></primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track_utility</varname> contrôle si les
      commandes utilitaires sont tracées par le module. Les commandes
      utilitaires sont toutes les commandes SQL sauf
      <command>SELECT</command>, <command>INSERT</command>,
      <command>UPDATE</command>, <command>DELETE</command> et
      <command>MERGE</command>. La valeur par
      défaut est <literal>on</literal>. Seuls les superutilisateurs peuvent
      modifier cette configuration.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track_planning</varname> (<type>boolean</type>)
     <indexterm>
      <primary>paramètre de configuration <varname>pg_stat_statements.track_planning</varname></primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track_planning</varname> contrôle si les
      opérations d'optimisation/planification et leur durée sont tracées par
      ce module. Activer ce paramètre pourrait résulter en une perte visible
      de performance, spécialement quand les requêtes avec des structures
      identiques sont exécutées par de nombreuses connexions concurrentes, ce
      qui pousse à mettre à jour un petit nombre d'entrées de
      <structname>pg_stat_statements</structname>. La valeur par défaut est
      <literal>off</literal>. Seuls les superutilisateurs peuvent modifier
      cette configuration.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.save</varname> (<type>boolean</type>)
     <indexterm>
      <primary>paramètre de configuration <varname>pg_stat_statements.save</varname></primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.save</varname> précise s'il faut sauvegarder
      les statistiques lors des arrêts du serveur. S'il est
      <literal>off</literal>, alors les statistiques ne sont pas sauvegardées
      lors de l'arrêt ni rechargées au démarrage du serveur. La valeur par
      défaut est <literal>on</literal>. Ce paramètre peut uniquement être
      positionné dans le fichier <filename>postgresql.conf</filename> ou sur
      la ligne de commande du serveur.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Le module a besoin de mémoire partagée supplémentaire proportionnelle à
   <varname>pg_stat_statements.max</varname>.  Notez que cette mémoire est
   consommée quand le module est chargé, même si
   <varname>pg_stat_statements.track</varname> est positionné à
   <literal>none</literal>.
  </para>

  <para>
   Ces paramètres doivent être définis dans
   <filename>postgresql.conf</filename>. Un usage courant pourrait être&nbsp;:
  </para>

  <programlisting>
# postgresql.conf
shared_preload_libraries = 'pg_stat_statements'

compute_query_id = on
pg_stat_statements.max = 10000
pg_stat_statements.track = all
  </programlisting>
 </sect2>

 <sect2 id="pgstatstatements-sample-output">
  <title>Exemple de sortie</title>

  <screen>bench=# SELECT pg_stat_statements_reset();

$ pgbench -i bench
$ pgbench -c10 -t300 bench

bench=# \x
bench=# SELECT query, calls, total_exec_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_exec_time DESC LIMIT 5;

-[ RECORD 1 ]---+--------------------------------------------------&zwsp;------------------
query           | UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2
calls           | 3000
total_exec_time | 25565.855387
rows            | 3000
hit_percent     | 100.0000000000000000
-[ RECORD 2 ]---+--------------------------------------------------&zwsp;------------------
query           | UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2
calls           | 3000
total_exec_time | 20756.669379
rows            | 3000
hit_percent     | 100.0000000000000000
-[ RECORD 3 ]---+--------------------------------------------------&zwsp;------------------
query           | copy pgbench_accounts from stdin
calls           | 1
total_exec_time | 291.865911
rows            | 100000
hit_percent     | 100.0000000000000000
-[ RECORD 4 ]---+--------------------------------------------------&zwsp;------------------
query           | UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2
calls           | 3000
total_exec_time | 271.232977
rows            | 3000
hit_percent     | 98.8454011741682975
-[ RECORD 5 ]---+--------------------------------------------------&zwsp;------------------
query           | alter table pgbench_accounts add primary key (aid)
calls           | 1
total_exec_time | 160.588563
rows            | 0
hit_percent     | 100.0000000000000000


bench=# SELECT pg_stat_statements_reset(0,0,s.queryid) FROM pg_stat_statements AS s
            WHERE s.query = 'UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2';

bench=# SELECT query, calls, total_exec_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_exec_time DESC LIMIT 5;
-[ RECORD 1 ]---+--------------------------------------------------&zwsp;------------------
query           | UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2
calls           | 3000
total_exec_time | 20756.669379
rows            | 3000
hit_percent     | 100.0000000000000000
-[ RECORD 2 ]---+--------------------------------------------------&zwsp;------------------
query           | copy pgbench_accounts from stdin
calls           | 1
total_exec_time | 291.865911
rows            | 100000
hit_percent     | 100.0000000000000000
-[ RECORD 3 ]---+--------------------------------------------------&zwsp;------------------
query           | UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2
calls           | 3000
total_exec_time | 271.232977
rows            | 3000
hit_percent     | 98.8454011741682975
-[ RECORD 4 ]---+--------------------------------------------------&zwsp;------------------
query           | alter table pgbench_accounts add primary key (aid)
calls           | 1
total_exec_time | 160.588563
rows            | 0
hit_percent     | 100.0000000000000000
-[ RECORD 5 ]---+--------------------------------------------------&zwsp;------------------
query           | vacuum analyze pgbench_accounts
calls           | 1
total_exec_time | 136.448116
rows            | 0
hit_percent     | 99.9201915403032721

bench=# SELECT pg_stat_statements_reset(0,0,0);

bench=# SELECT query, calls, total_exec_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_exec_time DESC LIMIT 5;
-[ RECORD 1 ]---+--------------------------------------------------&zwsp;---------------------------
query           | SELECT pg_stat_statements_reset(0,0,0)
calls           | 1
total_exec_time | 0.189497
rows            | 1
hit_percent     |
-[ RECORD 2 ]---+--------------------------------------------------&zwsp;---------------------------
query           | SELECT query, calls, total_exec_time, rows, $1 * shared_blks_hit /          +
                |                nullif(shared_blks_hit + shared_blks_read, $2) AS hit_percent+
                |           FROM pg_stat_statements ORDER BY total_exec_time DESC LIMIT $3
calls           | 0
total_exec_time | 0
rows            | 0
hit_percent     |

  </screen>
 </sect2>

 <sect2 id="pgstatstatements-authors">
  <title>Auteurs</title>

  <para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>. La
   normalisation des requêtes a été ajoutée par Peter Geoghegan
   <email>peter@2ndquadrant.com</email>.
  </para>
 </sect2>

</sect1>
