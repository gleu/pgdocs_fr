<?xml version="1.0" encoding="UTF-8"?>
<chapter id="event-triggers">
 <title>Triggers sur événement</title>

 <indexterm zone="event-triggers">
  <primary>trigger sur événement</primary>
 </indexterm>

 <para>
  Afin d'améliorer le mécanisme des triggers expliqué dans <xref linkend="triggers"/>,
  <productname>PostgreSQL</productname> fournit également des triggers sur
  événement. À la différence des triggers normaux, qui sont attachés à une
  seule table et ne capturent que des événements DML, les triggers sur
  événements sont globaux sur une base en particulier et sont capables de
  capturer tous les événements DDL.
 </para>

 <para>
  Comme les triggers normaux, les triggers sur événement peuvent être écrits
  dans n'importe quel langage procédural qui inclut le support des triggers
  sur événement, ou en C, mais pas en pur SQL.
 </para>

 <sect1 id="event-trigger-definition">
  <title>Aperçu du fonctionnement des triggers sur événement</title>

  <para>
   Un trigger sur événement se déclenche chaque fois que l'événement qui lui
   est associé se déclenche sur la base qui lui est définie. Pour le moment,
   les événements supportés sont
   <literal>login</literal>,
   <literal>ddl_command_start</literal>,
   <literal>ddl_command_end</literal>,
   <literal>table_rewrite</literal>
   et <literal>sql_drop</literal>.
   Le support pour des événements additionnels pourrait être ajouté dans
   des versions ultérieures.
  </para>

  <sect2 id="event-trigger-login">
   <title>login</title>

  <para>
   L'événement <literal>login</literal> survient quand un utilisateur
   authentifié se connecte au système. Tout bug dans la procédure du trigger
   pour cet événement pourrait empêcher une connexion réussie au système. De
   tels bugs peuvent être contournés en configurant <xref
   linkend="guc-event-triggers"/> à <literal>false</literal>, soit dans une
   chaîne de connexion soit dans un fichier de configuration. Vous pouvez
   aussi redémarrer le système en mode simple-utilisateur (les triggers sur
   événement sont désactivés dans ce cas). Voir la page de référence de <xref
   linkend="app-postgres"/> pour des détails sur l'utilisation du mode
   simple-utilisateur. L'événement <literal>login</literal> se déclenchera
   aussi sur les serveurs secondaires. Pour empêcher les serveurs de devenir
   inaccessibles, de tels triggers doivent éviter d'écrire quoi que ce soit
   dans la base s'ils sont exécutés sur un serveur secondaire. De plus, il
   est recommandé d'éviter les requêtes longues à exécuter dans des triggers
   sur événement <literal>login</literal>. Notez que, par exemple, annuler
   une connexion dans <application>psql</application> n'annulera pas le
   trigger <literal>login</literal> en cours d'exécution.
  </para>

  <para>
    Pour un exemple sur la façon d'utiliser le trigger d'événement
    <literal>login</literal>, voir <xref
    linkend="event-trigger-database-login-example"/>.
  </para>
  </sect2>

  <sect2 id="event-trigger-ddl_command_start">
   <title>ddl_command_start</title>

  <para>
   L'événement <literal>ddl_command_start</literal> se déclenche juste avant
   l'exécution d'une commande DDL. Les commandes DDL dans ce contexte sont :
   <itemizedlist>
    <listitem><para><literal>CREATE</literal></para></listitem>
    <listitem><para><literal>ALTER</literal></para></listitem>
    <listitem><para><literal>DROP</literal></para></listitem>
    <listitem><para><literal>COMMENT</literal></para></listitem>
    <listitem><para><literal>GRANT</literal></para></listitem>
    <listitem><para><literal>IMPORT FOREIGN SCHEMA</literal></para></listitem>
    <listitem><para><literal>REINDEX</literal></para></listitem>
    <listitem><para><literal>REFRESH MATERIALIZED VIEW</literal></para></listitem>
    <listitem><para><literal>REVOKE</literal></para></listitem>
    <listitem><para><literal>SECURITY LABEL</literal></para></listitem>
   </itemizedlist>
   <literal>ddl_command_start</literal> se produit également juste avant
   l'exécution d'une commande <literal>SELECT INTO</literal>, car cela est
   équivalent à <literal>CREATE TABLE AS</literal>.
  </para>

<para>
   À titre d'exception, cet événement ne se produit pas pour les commandes DDL
   ciblant des objets partagés :
   <itemizedlist>
    <listitem><para>bases de données</para></listitem>
    <listitem><para>rôles (définitions de rôles et appartenances aux rôles)</para></listitem>
    <listitem><para>espaces de table</para></listitem>
    <listitem><para>privilèges de paramètre</para></listitem>
    <listitem><para><command>ALTER SYSTEM</command></para></listitem>
   </itemizedlist>
   Cet événement ne se produit pas non plus pour les commandes ciblant les
   triggers d'événement eux-mêmes.
 </para>

 <para>
   Aucune vérification de l'existence ou de l'inexistence de l'objet affecté
   n'est effectuée avant le déclenchement du trigger d'événement.
 </para>
 </sect2>

 <sect2 id="event-trigger-ddl_command_end">
    <title>ddl_command_end</title>

  <para>
   L'événement <literal>ddl_command_end</literal> se déclenche juste après
   l'exécution des mêmes ensembles de commandes que
   <literal>ddl_command_start</literal>. Pour obtenir plus de détails sur les
   opérations <acronym>DDL</acronym> qui interviennent, utilisez la fonction
   renvoyant un ensemble de lignes
   <literal>pg_event_trigger_ddl_commands()</literal> à partir du code du
   trigger répondant à l'événement <literal>ddl_command_end</literal> (voir
   <xref linkend="functions-event-triggers"/>). Notez que le trigger est
   exécuté après les actions qui sont intervenues (mais avant les validations
   de transactions), aussi les catalogues systèmes qui peuvent être lus ont
   déjà été modifiés.
  </para>
   </sect2>

   <sect2 id="event-trigger-sql_drop">
    <title>sql_drop</title>

  <para>
   L'événement <literal>sql_drop</literal> se déclenche juste avant le trigger
   sur événement <literal>ddl_command_end</literal> pour toute opération qui
   supprime des objets de la base. Notez qu'outre les commandes
   <literal>DROP</literal> évidentes, certaines commandes
   <literal>ALTER</literal> peuvent également déclencher un événement
   <literal>sql_drop</literal>.
  </para>

  <para>
   Pour lister les objets qui ont été supprimés, utilisez la fonction
   retournant des ensembles d'objets
   <literal>pg_event_trigger_dropped_objects()</literal> depuis le code du
   trigger sur événement <literal>sql_drop</literal> (voir <xref
   linkend="functions-event-triggers"/>). Notez que le trigger est exécuté
   après que les objets aient été supprimés du catalogue système, il n'est donc
   plus possible de les examiner.
  </para>

   </sect2>

   <sect2 id="event-trigger-table_rewrite">
    <title>table_rewrite</title>
  <para>
   L'événement <literal>table_rewrite</literal> se déclenche juste avant
   qu'une table soit modifiée par certaines actions des commandes
   <literal>ALTER TABLE</literal> et <literal>ALTER TYPE</literal>. Il existe
   d'autres commandes qui permettent de modifier une table, tel que
   <literal>CLUSTER</literal> et <literal>VACUUM</literal>, mais l'événement
   <literal>table_rewrite</literal> n'est pas déclenché pour eux. Pour trouver
   l'OID de la table qui a été réécrite, utilisez la fonction
   <literal>pg_event_trigger_table_rewrite_oid()</literal>, et pour découvrir
   la ou les raisons de la réécriture, utilisez la fonction
   <literal>pg_event_trigger_table_rewrite_reason()</literal> (voir <xref
   linkend="functions-event-triggers"/>).
   </para>
   </sect2>

   <sect2 id="event-trigger-aborted-transactions">
    <title>Triggers d'événements dans les transactions annulées</title>

  <para>
   Les triggers sur événement (comme les autres fonctions) ne peuvent être
   exécutés dans une transaction annulée. Ainsi, si une commande DDL échoue
   avec une erreur, tout trigger <literal>ddl_command_end</literal> associé ne
   sera pas exécuté. Inversement, si un trigger
   <literal>ddl_command_start</literal> échoue avec une erreur, aucun autre
   trigger sur événement ne se déclenchera, et aucune tentative ne sera faite
   pour exécuter la commande elle-même. De la même façon, si une commande
   <literal>ddl_command_end</literal> échoue avec une erreur, les effets de la
   commande DDL seront annulés, comme ils l'auraient été dans n'importe quel
   autre cas où la transaction qui la contient est annulée.
  </para>
   </sect2>

   <sect2 id="event-trigger-creating">
    <title>Création de triggers d'événements</title>

  <para>
   Les triggers sur événement sont créés en utilisant la commande <xref
   linkend="sql-createeventtrigger"/>. Afin de créer un trigger sur événement,
   vous devez d'abord créer une fonction avec le type de retour spécial
   <literal>event_trigger</literal>. Cette fonction n'a pas besoin (et ne
   devrait pas) retourner de valeur ; le type de retour sert uniquement comme
   signal pour que la fonction soit appelée comme un trigger sur événement.
  </para>

  <para>
   Si plus d'un trigger sur événement est défini pour un événement
   particulier, ils seront déclenchés par ordre alphabétique de leur nom.
  </para>

  <para>
   Une définition de trigger peut également spécifier une condition
   <literal>WHEN</literal> pour que, par exemple, un trigger
   <literal>ddl_command_start</literal> ne soit déclenché que pour des
   commandes particulières que l'utilisateur souhaite intercepter. Une
   utilisation typique de tels triggers serait de restreindre la portée des
   opérations DDL que les utilisateurs peuvent exécuter.
   </para>
   </sect2>

 <sect1 id="event-trigger-interface">
  <title>Écrire des fonctions trigger sur événement en C</title>

  <indexterm zone="event-trigger-interface">
   <primary>trigger sur événement</primary>
   <secondary>en C</secondary>
  </indexterm>

  <para>
   Cette section décrit les détails bas niveau de l'interface pour une fonction
   trigger sur événement bas niveau. Ces informations sont seulement nécessaires
   si vous écrivez des fonctions triggers sur événement en C. Si vous utilisez
   un langage de plus haut niveau, ces détails sont gérés pour vous. Dans la
   plupart des cas, vous devriez songer sérieusement à utiliser un langage
   procédural avant d'écrire vos triggers sur événement en C. La documentation
   de chaque langage procédurale explique comment écrire un trigger sur événement
   dans ce langage.
  </para>

  <para>
   Les fonctions de trigger sur événement doivent utiliser l'interface du
   gestionnaire de fonctions <quote>version 1</quote>.
  </para>

  <para>
   Quand une fonction est appelée par le gestionnaire de triggers sur événement,
   elle ne reçoit aucun argument normal mais un pointeur <quote>context</quote>
   lui est fourni. Il pointe vers une structure de type
   <structname>EventTriggerData</structname>. Les fonctions C peuvent vérifier
   si elles ont été appelées par le gestionnaire de triggers sur événement en
   exécutant la macro&nbsp;:
   <programlisting>
CALLED_AS_EVENT_TRIGGER(fcinfo)
   </programlisting>
   qui vaut en fait&nbsp;:
   <programlisting>
((fcinfo)-&gt;context != NULL &amp;&amp; IsA((fcinfo)-&gt;context, EventTriggerData))
   </programlisting>
   Si cela renvoie la valeur true, alors il est possible de convertir
   <literal>fcinfo-&gt;context</literal> vers le type <literal>EventTriggerData
    *</literal> et d'utiliser la structure pointée
   <structname>EventTriggerData</structname>. La fonction ne doit
   <emphasis>pas</emphasis> modifier la structure
   <structname>EventTriggerData</structname> ou toute donnée qu'elle fournit.
  </para>

  <para>
   <structname>struct EventTriggerData</structname> est défini dans
   <filename>commands/event_trigger.h</filename>&nbsp;:

   <programlisting>
typedef struct EventTriggerData
{
    NodeTag     type;
    const char *event;      /* event name */
    Node       *parsetree;  /* parse tree */
    CommandTag  tag;        /* command tag */
} EventTriggerData;
   </programlisting>

   dont les membres sont définis ainsi&nbsp;:

   <variablelist>
    <varlistentry>
     <term><structfield>type</structfield></term>
     <listitem>
      <para>
       Always <literal>T_EventTriggerData</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><structfield>event</structfield></term>
     <listitem>
      <para>
       Décrit l'événement pour lequel la fonction a été appelée. Ce sera soit
       <literal>login</literal>, <literal>"ddl_command_start"</literal>, soit
       <literal>"ddl_command_end"</literal>,
       soit <literal>"sql_drop"</literal>, soit <literal>"table_rewrite"</literal>.
       Voir <xref linkend="event-trigger-definition"/> pour la signification de
       ces événements.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><structfield>parsetree</structfield></term>
     <listitem>
      <para>
       Un pointeur vers l'arbre d'analyse de la commande. Vérifiez le code
       source de PostgreSQL pour les détails. La structure de l'arbre d'analyse
       est sujet à modification sans notification.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><structfield>tag</structfield></term>
     <listitem>
      <para>
       La balise de la commande associée avec l'événement pour lequel le trigger
       sur événement est exécuté, par exemple <literal>"CREATE FUNCTION"</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
   Une fonction trigger sur événement doit renvoyer un pointeur
   <symbol>NULL</symbol> (et <emphasis>pas</emphasis> une valeur SQL NULL,
   autrement dit ne pas configurer <parameter>isNull</parameter> à true).
  </para>
 </sect1>

 <sect1 id="event-trigger-example">
  <title>Un exemple complet de trigger sur événement</title>

  <para>
   Voici un exemple très simple d'une fonction trigger sur événement écrite en
   C. (Les exemples de triggers écrits en langage procédural peuvent être trouvés
   dans la documentation de ces langages procédurals.)
  </para>

  <para>
   La fonction <function>noddl</function> lève une exception à chaque fois
   qu'elle est appelée. La définition du trigger événement associe la fonction
   à l'événement <literal>ddl_command_start</literal>. L'effet est qu'aucune
   commande DDL (à l'exception de celles mentionnées dans <xref
   linkend="event-trigger-definition"/>) ne peut être exécutée.
  </para>

  <para>
   Voici le code source de la fonction trigger&nbsp;:
   <programlisting><![CDATA[
#include "postgres.h"

#include "commands/event_trigger.h"
#include "fmgr.h"


PG_MODULE_MAGIC;

Datum noddl(PG_FUNCTION_ARGS);

PG_FUNCTION_INFO_V1(noddl);

Datum
noddl(PG_FUNCTION_ARGS)
{
    EventTriggerData *trigdata;

    if (!CALLED_AS_EVENT_TRIGGER(fcinfo))  /* internal error */
        elog(ERROR, "not fired by event trigger manager");

    trigdata = (EventTriggerData *) fcinfo->context;

    (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),
     errmsg("command \"%s\" denied",
            GetCommandTagName(trigdata->tag))));

    PG_RETURN_NULL();
}
]]></programlisting>
   </para>

   <para>
    Après avoir compilé le code source (voir <xref linkend="dfunc"/>),
    déclarez la fonction et les triggers&nbsp;:
<programlisting>
CREATE FUNCTION noddl() RETURNS event_trigger
    AS 'noddl' LANGUAGE C;

CREATE EVENT TRIGGER noddl ON ddl_command_start
    EXECUTE FUNCTION noddl();
   </programlisting>
  </para>

  <para>
   Maintenant vous pouvez tester le bon fonctionnement du trigger&nbsp;:
   <screen>
=# \dy
                     List of event triggers
 Name  |       Event       | Owner | Enabled | Function | Tags
-------+-------------------+-------+---------+----------+------
 noddl | ddl_command_start | dim   | enabled | noddl    |
(1 row)

=# CREATE TABLE foo(id serial);
ERROR:  command "CREATE TABLE" denied
   </screen>
  </para>

  <para>
   Dans ce cas, pour pouvoir activier l'exécution de certaines commandes DDL,
   vous pouvez soit supprimer le trigger sur événement soit le désactiver. Il
   est généralement plus simple de désactiver le trigger pendant la durée de
   la transaction&nbsp;:
   <programlisting>
BEGIN;
ALTER EVENT TRIGGER noddl DISABLE;
CREATE TABLE foo (id serial);
ALTER EVENT TRIGGER noddl ENABLE;
COMMIT;
   </programlisting>
   (Pour rappel, les commandes DDL sur les triggers sur événement ne sont pas
   affectées par les triggers sur événement.)
  </para>
 </sect1>

 <sect1 id="event-trigger-table-rewrite-example">
  <title>Un exemple de trigger sur événement de table modifiée</title>

  <para>
   Grâce à l'événement <literal>table_rewrite</literal>, il est
   possible d'écrire une fonction qui autorise les modifications d'une
   table seulement pendant les heures de maintenance.
  </para>

  <para>
   Ci-dessous un exemple d'implémentation d'une telle règle.
   <programlisting>
CREATE OR REPLACE FUNCTION pas_de_modification()
 RETURNS event_trigger
 LANGUAGE plpgsql AS
$$
---
--- Implémentation d'une règle de modification de table:
---  pas de modifications de public.foo, les
---  autres tables peuvent l'être entre 01:00 et 06:00 du matin
---  sauf si elles ont plus de 100 blocs
---
DECLARE
  table_oid oid := pg_event_trigger_table_rewrite_oid();
  heure_courante integer := extract('hour' from current_time);
  pages integer;
  max_pages integer := 100;
BEGIN
  IF pg_event_trigger_table_rewrite_oid() = 'public.foo'::regclass
  THEN
        RAISE EXCEPTION 'Vous n''êtes pas autorisé à modifier la table %',
                        table_oid::regclass;
  END IF;

  SELECT INTO pages relpages FROM pg_class WHERE oid = table_oid;
  IF pages > max_pages
  THEN
        RAISE EXCEPTION 'les modifications ne sont seulement permises que pour les tables ayant un nombre de blocs inférieur à %',
                        max_pages;
  END IF;

  IF heure_courante NOT BETWEEN 1 AND 6
  THEN
        RAISE EXCEPTION 'les modifications sont seulement autorisées entre 01:00 et 06:00 du matin';
  END IF;
END;
$$;

CREATE EVENT TRIGGER pas_de_modifications_permises
                  ON table_rewrite
   EXECUTE FUNCTION pas_de_modification();
   </programlisting>
  </para>
 </sect1>


 <sect1 id="event-trigger-database-login-example">
  <title>Exemple de trigger sur événement de connexion</title>

  <para>
   Le trigger sur événement <literal>login</literal> peut être utile pour
   tracer les connexions d'utilisateur, pour vérifier la connexion et les
   rôles affectés d'après les circonstances actuelles, ou pour une
   initialisation des données de la session. Il est très important que tout
   trigger sur événement utilisant l'événement <literal>login</literal>
   vérifie si la base est en mode restauration avant de réaliser des
   écritures. Écrire sur un serveur secondaire rendra impossible toute
   connexion.
  </para>

  <para>
   L'exemple suivant montre ces options.
<programlisting>
-- créer les tables et les rôles pour ce test
CREATE TABLE user_login_log (
  "user" text,
  "session_start" timestamp with time zone
);
CREATE ROLE day_worker;
CREATE ROLE night_worker;

-- la fonction trigger d'exemple
CREATE OR REPLACE FUNCTION init_session()
  RETURNS event_trigger SECURITY DEFINER
  LANGUAGE plpgsql AS
$$
DECLARE
  hour integer = EXTRACT('hour' FROM current_time at time zone 'utc');
  rec boolean;
BEGIN
-- 1. Interdire les connexions entre 2 et 4 heures du matin
IF hour BETWEEN 2 AND 4 THEN
  RAISE EXCEPTION 'Login forbidden';
END IF;

-- Les vérifications ci-dessous ne peuvent pas être réalisées sur des
-- secondaires, donc on s'assure que la base n'est pas en restauration
-- avant de continuer.
SELECT pg_is_in_recovery() INTO rec;
IF rec THEN
  RETURN;
END IF;

-- 2. Affecte certains rôles. Le jour, on donne le rôle day_worker role,
-- et sinon le rôle night_worker.
IF hour BETWEEN 8 AND 20 THEN
  EXECUTE 'REVOKE night_worker FROM ' || quote_ident(session_user);
  EXECUTE 'GRANT day_worker TO ' || quote_ident(session_user);
ELSE
  EXECUTE 'REVOKE day_worker FROM ' || quote_ident(session_user);
  EXECUTE 'GRANT night_worker TO ' || quote_ident(session_user);
END IF;

-- 3. Initialise les données de session de l'utilisateur
CREATE TEMP TABLE session_storage (x float, y integer);
ALTER TABLE session_storage OWNER TO session_user;

-- 4. Trace le moment de la connexion
INSERT INTO public.user_login_log VALUES (session_user, current_timestamp);

END;
$$;

-- définition du trigger
CREATE EVENT TRIGGER init_session
  ON login
  EXECUTE FUNCTION init_session();
ALTER EVENT TRIGGER init_session ENABLE ALWAYS;
</programlisting>
    </para>
  </sect1>
</chapter>
