<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="ltree" xreflabel="ltree">
 <title>ltree</title>

 <indexterm zone="ltree">
  <primary>ltree</primary>
 </indexterm>

 <para>
  Ce module implémente le type de données <type>ltree</type> pour représenter
  des labels de données stockés dans une structure hiérarchique de type arbre.
  Des fonctionnalités étendues de recherche sont fournies.
 </para>

 <para>
  Ce module est considéré comme <quote>trusted</quote>, ce qui signifie qu'il
  peut être installé par des utilisateurs simples (sans attribut
  <literal>SUPERUSER</literal>) et qui ont l'attribut <literal>CREATE</literal>
  sur la base de données courante.
 </para>

 <sect2>
  <title>Définitions</title>

  <para>
   Un <firstterm>label</firstterm> est une séquence de caractères
   alphanumériques et de tirets bas (par exemple, dans la locale C, les
   caractères <literal>A-Za-z0-9_</literal> sont autorisés). La longueur d'un
   label est limité par 256 caractères.
  </para>

  <para>
   Exemples&nbsp;: <literal>42</literal>, <literal>Personal_Services</literal>
  </para>

  <para>
   Le <firstterm>chemin de label</firstterm> est une séquence de zéro
   ou plusieurs labels séparés par des points, par exemple
   <literal>L1.L2.L3</literal>, ce qui représente le chemin de la racine
   jusqu'à un nœud particulier. La longueur d'un chemin
   est limité à 65535 labels.
  </para>

  <para>
   Exemple&nbsp;: <literal>Top.Countries.Europe.Russia</literal>
  </para>

  <para>
   Le module <filename>ltree</filename> fournit plusieurs types de
   données&nbsp;:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <type>ltree</type> stocke un chemin de label.
    </para>
   </listitem>

   <listitem>
    <para>
     <type>lquery</type> représente un type d'expression rationnelle du chemin
     pour la correspondance de valeurs de type <type>ltree</type>. Un mot
     simple établit une correspondance avec ce label dans un chemin. Le
     caractère joker (<literal>*</literal>) est utilisé pour spécifier tout
     nombre de labels (niveaux). Ils peuvent être liés avec des points
     pour former des motifs qui doivent correspondre au chemin entier
     du label. Par exemple&nbsp;:
     <synopsis>
foo         <lineannotation>Correspond au chemin exact <literal>foo</literal></lineannotation>
*.foo.*     <lineannotation>Correspond à tout chemin contenant le label <literal>foo</literal></lineannotation>
*.foo       <lineannotation>Correspond à tout chemin dont le dernier label est
<literal>foo</literal></lineannotation>
     </synopsis>
    </para>

    <para>
     Les caractères joker et les mots simples peuvent être quantifiés pour
     restreindre le nombre de labels de la correspondance&nbsp;:
     <synopsis>
*{<replaceable>n</replaceable>}        <lineannotation>Correspond à exactement <replaceable>n</replaceable> labels</lineannotation>
*{<replaceable>n</replaceable>,}       <lineannotation>Correspond à au moins <replaceable>n</replaceable> labels</lineannotation>
*{<replaceable>n</replaceable>,<replaceable>m</replaceable>}      <lineannotation>Correspond à au moins <replaceable>n</replaceable> labels mais à pas plus de <replaceable>m</replaceable></lineannotation>
*{,<replaceable>m</replaceable>}       <lineannotation>Correspond à au moins <replaceable>m</replaceable> labels &mdash; identiques à </lineannotation>*{0,<replaceable>m</replaceable>}
foo{<replaceable>n</replaceable>,<replaceable>m</replaceable>}    <lineannotation>Correspond à au moins <replaceable>n</replaceable> mais pas plus que <replaceable>m</replaceable> occurrences de <literal>foo</literal></lineannotation>
foo{,}      <lineannotation>Correspond à n'importe quel nombre d'occurrences de <literal>foo</literal>, incluant zéro</lineannotation>
     </synopsis>
     En absence d'un quantificateur explicite, le défaut pour un symbole étoile
     est de correspondre à n'importe quel nombre de labels (c'est-à-dire <literal>{,}</literal>)
     tandis que le défaut pour un élément non-étoile est qu'il doit correspondre exactement
     une fois (c'est-à-dire <literal>{1}</literal>).
    </para>

    <para>
     Il existe plusieurs modificateurs qui peuvent être placés à la fin
     d'un élément <type>lquery</type> sans joker pour que la
     correspondance se fasse sur plus que la correspondance exacte&nbsp;:
     <synopsis>
@           <lineannotation>Correspondance sans vérification de casse, par exemple <literal>a@</literal> établit une correspondance avec <literal>A</literal></lineannotation>
*           <lineannotation>Correspondance d'un préfixe pour un label, par exemple <literal>foo*</literal> établit une correspondance avec <literal>foobar</literal></lineannotation>
%           <lineannotation>Correspondance avec les mots séparés par des tirets bas</lineannotation>
     </synopsis>
     Le comportement de <literal>%</literal> est un peu complexe. Il tente
     d'établir une correspondance avec des mots plutôt qu'avec un label
     complet. Par exemple, <literal>foo_bar%</literal> établit une
     correspondance avec <literal>foo_bar_baz</literal> mais pas avec
     <literal>foo_barbaz</literal>. S'il est combiné avec
     <literal>*</literal>, la correspondance du préfixe s'applique à chaque
     mot séparément. Par exemple, <literal>foo_bar%*</literal> établit une
     correspondance avec <literal>foo1_bar2_baz</literal>, mais pas avec
     <literal>foo1_br2_baz</literal>.
    </para>

    <para>
     Vous pouvez aussi écrire de nombreux éléments non-étoiles, modifiés ou non, séparés avec
     <literal>|</literal> (OR) pour correspondre à au moins un de ces éléments, et
     vous pouvez mettre un <literal>!</literal> (NOT) au début d'un groupe non-étoile
     pour correspondre à tout label qui ne correspond à aucune alternative.
     Un quantificateur, s'il y a, va toujours à la fin du groupe&nbsp;; cela signifie
     un certain nombre de correspondances pour le groupe entier (c'est-à-dire,
     un certain nombre de labels correspondants ou non correspondants à n'importe quelle
     alternative.)
    </para>

    <para>
     Voici un exemple annoté d'une <type>lquery</type>&nbsp;:
     <programlisting>
Top.*{0,2}.sport*@.!football|tennis{1,}.Russ*|Spain
a.  b.     c.      d.                   e.
     </programlisting>
     Cette requête établira une correspondance avec tout chemin qui&nbsp;:
    </para>
    <orderedlist numeration='loweralpha'>
     <listitem>
      <para>
       commence avec le label <literal>Top</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       et suit avec zéro ou deux labels jusqu'à
      </para>
     </listitem>
     <listitem>
      <para>
       un label commençant avec le préfixe <literal>sport</literal> quelque
       soit la casse
      </para>
     </listitem>
     <listitem>
      <para>
       puis un ou plusieurs labels, dont aucun ne correspond ni à
       <literal>football</literal> ni à <literal>tennis</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       et se termine enfin avec un label commençant par
       <literal>Russ</literal> ou correspond strictement à
       <literal>Spain</literal>.
      </para>
     </listitem>
    </orderedlist>
   </listitem>

   <listitem>
    <para><type>ltxtquery</type> représente en quelque sorte une recherche
     plein texte pour la correspondance de valeurs <type>ltree</type>. Une
     valeur <type>ltxtquery</type> contient des mots, quelque fois avec
     les modificateurs <literal>@</literal>, <literal>*</literal>,
     <literal>%</literal> à la fin&nbsp;; les modifications ont la même
     signification que dans un <type>lquery</type>. Les mots peuvent être
     combinés avec <literal>&amp;</literal> (AND), <literal>|</literal> (OR),
     <literal>!</literal> (NOT) et des parenthèses. La différence clé d'une
     <type>lquery</type> est que <type>ltxtquery</type> établit une
     correspondance avec des mots sans relation avec leur position dans
     le chemin de labels.
    </para>

    <para>
     Voici un exemple de <type>ltxtquery</type>&nbsp;:
     <programlisting>
     Europe &amp; Russia*@ &amp; !Transportation
     </programlisting>
     Ceci établira une correspondance avec les chemins contenant le label
     <literal>Europe</literal> et tout label commençant par
     <literal>Russia</literal> (quelque soit la casse), mais pas les chemins
     contenant le label <literal>Transportation</literal>. L'emplacement de
     ces mots dans le chemin n'est pas important. De plus, quand
     <literal>%</literal> est utilisé, le mot peut établir une correspondance
     avec tout mot séparé par un tiret bas dans un label, quelque soit sa
     position.
    </para>
   </listitem>

  </itemizedlist>

  <para>
   Note&nbsp;: <type>ltxtquery</type> autorise un espace blanc entre des
   symboles mais <type>ltree</type> et <type>lquery</type> ne le permettent
   pas.
  </para>
 </sect2>

 <sect2>
  <title>Opérateurs et fonctions</title>

  <para>
   Le type <type>ltree</type> dispose des opérateurs de comparaison habituels
   <literal>=</literal>, <literal>&lt;&gt;</literal>, <literal>&lt;</literal>,
   <literal>&gt;</literal>, <literal>&lt;=</literal>, <literal>&gt;=</literal>.
   Les comparaisons trient dans l'ordre du parcours d'un arbre, avec les
   enfants d'un nœud trié par le texte du label. De plus, les opérateurs
   spécialisés indiqués dans <xref linkend="ltree-op-table"/> sont
   disponibles.
  </para>

  <table id="ltree-op-table">
   <title>Opérateurs <type>ltree</type></title>

   <tgroup cols="1">
    <thead>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        Opérateur
       </para>
       <para>
        Description
       </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>@&gt;</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        L'argument gauche est-il un ancêtre de l'argument droit (ou
        identique)&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>&lt;@</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        L'argument gauche est-il un descendant de l'argument droit (ou
        identique)&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>~</literal> <type>lquery</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>lquery</type> <literal>~</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que <type>ltree</type> établie une correspondance avec
        <type>lquery</type>&nbsp;??
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>?</literal> <type>lquery[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>lquery[]</type> <literal>?</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que <type>ltree</type> établie une correspondance avec au moins un
        <type>lquery</type> dans ce tableau&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>@</literal> <type>ltxtquery</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>ltxtquery</type> <literal>@</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que <type>ltree</type> établie une correspondance avec
        <type>ltxtquery</type>&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>||</literal> <type>ltree</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Concatène des chemins <type>ltree</type>.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree</type> <literal>||</literal> <type>text</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para role="func_signature">
        <type>text</type> <literal>||</literal> <type>ltree</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Convertit du texte en <type>ltree</type> et concatène.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>@&gt;</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>ltree</type> <literal>&lt;@</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau contient un ancêtre de
        <type>ltree</type>&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>&lt;@</literal> <type>ltree</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>ltree</type> <literal>@&gt;</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau contient un descendant de
        <type>ltree</type>&nbsp;??
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>~</literal> <type>lquery</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>lquery</type> <literal>~</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau contient au moins un chemin correspondant à
        <type>lquery</type>&nbsp;??
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?</literal> <type>lquery[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>lquery[]</type> <literal>?</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau <type>ltree</type> contient au moins un chemin
        correspondant à un <type>lquery</type>&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>@</literal> <type>ltxtquery</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para role="func_signature">
        <type>ltxtquery</type> <literal>@</literal> <type>ltree[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le tableau contient au moins un chemin correspondant à
        <type>ltxtquery</type>&nbsp;??
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?@&gt;</literal> <type>ltree</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Renvoie la première entrée du tableau ancêtre de
        <type>ltree</type> ou NULL sinon.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?&lt;@</literal> <type>ltree</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Renvoie la première entrée du tableau qui est un descendant de
        <type>ltree</type> ou NULL sinon.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?~</literal> <type>lquery</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Renvoie la première entrée du tableau établissant une correspondance avec
        <type>lquery</type> et NULL sinon.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>ltree[]</type> <literal>?@</literal> <type>ltxtquery</type>
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Renvoie la première entrée du tableau établissant une correspondance avec
        <type>ltxtquery</type> et NULL sinon.
       </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Lesopérateurs operators <literal>&lt;@</literal>, <literal>@&gt;</literal>,
   <literal>@</literal> et <literal>~</literal> ont des versions analogues
   <literal>^&lt;@</literal>, <literal>^@&gt;</literal>, <literal>^@</literal>,
   <literal>^~</literal>, qui sont identiques sauf qu'elles n'utilisent pas les
   index. Elles sont utiles pour tester.
  </para>

  <para>
   Les fonctions disponibles sont indiquées dans
   <xref linkend="ltree-func-table"/>.
  </para>

  <table id="ltree-func-table">
   <title>Fonctions <type>ltree</type></title>

   <tgroup cols="1">
    <thead>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        Fonction
       </para>
       <para>
        Description
       </para>
       <para>
        Exemple(s)
       </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>subltree</primary></indexterm>
        <function>subltree</function> ( <type>ltree</type>, <parameter>start</parameter> <type>integer</type>, <parameter>end</parameter> <type>integer</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Retourne le sous-chemin du <type>ltree</type> à partir de la position
        <parameter>start</parameter> jusqu'à la position <parameter>end</parameter>-1
        (comptée à partir de 0).
       </para>
       <para>
        <literal>subltree('Top.Child1.Child2', 1, 2)</literal>
        <returnvalue>Child1</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>subpath</primary></indexterm>
        <function>subpath</function> ( <type>ltree</type>, <parameter>offset</parameter> <type>integer</type>, <parameter>len</parameter> <type>integer</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Retourne le sous-ensemble du <type>ltree</type> en commençant à
        la position <parameter>offset</parameter>, avec une longueur <parameter>len</parameter>.
        Si <parameter>offset</parameter> est négatif, le sous-ensemble débute depuis
        la fin de chemin et s'étend vers le début.
        Si <parameter>len</parameter> est négatif, cela élimine ce nombre (en valeur absolue)
        de labels depuis la fin du chemin.
       </para>
       <para>
        <literal>subpath('Top.Child1.Child2', 0, 2)</literal>
        <returnvalue>Top.Child1</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>subpath</function> ( <type>ltree</type>, <parameter>offset</parameter> <type>integer</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Retourne le sous-ensemble du <type>ltree</type> en commençant à
        la position <parameter>offset</parameter>, avec une longueur <parameter>len</parameter>.
        Si <parameter>offset</parameter> est négatif, le sous-ensemble débute depuis
        la fin de chemin et s'étend vers le début.
       </para>
       <para>
        <literal>subpath('Top.Child1.Child2', 1)</literal>
        <returnvalue>Child1.Child2</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>nlevel</primary></indexterm>
        <function>nlevel</function> ( <type>ltree</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Retourne le nombre de label dans le chemin.
       </para>
       <para>
        <literal>nlevel('Top.Child1.Child2')</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>index</primary></indexterm>
        <function>index</function> ( <parameter>a</parameter> <type>ltree</type>, <parameter>b</parameter> <type>ltree</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Retourne la position de la première occurence de <parameter>b</parameter>
        dans <parameter>a</parameter>, ou -1 si non trouvé.
       </para>
       <para>
        <literal>index('0.1.2.3.5.4.5.6.8.5.6.8', '5.6')</literal>
        <returnvalue>6</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>index</function> ( <parameter>a</parameter> <type>ltree</type>,  <parameter>b</parameter> <type>ltree</type>, <parameter>offset</parameter> <type>integer</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Retourne la position de la première occurence de <parameter>b</parameter>
        dans <parameter>a</parameter>, ou -1 si non trouvé. La recherche débute à
        la position <parameter>offset</parameter>&nbsp;; un <parameter>offset</parameter> négatif
        indique un départ à <parameter>-offset</parameter> label depuis la fin du chemin.
       </para>
       <para>
        <literal>index('0.1.2.3.5.4.5.6.8.5.6.8', '5.6', -4)</literal>
        <returnvalue>9</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>text2ltree</primary></indexterm>
        <function>text2ltree</function> ( <type>text</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Convertit un <type>text</type> en <type>ltree</type>.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>ltree2text</primary></indexterm>
        <function>ltree2text</function> ( <type>ltree</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Convertit un <type>ltree</type> en <type>text</type>.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>lca</primary></indexterm>
        <function>lca</function> ( <type>ltree</type> <optional>, <type>ltree</type> <optional>, ... </optional></optional> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Calcule le plus long ancêtre commun des chemins.
        (8 arguments sont supportés au maximum).
       </para>
       <para>
        <literal>lca('1.2.3', '1.2.3.4.5.6')</literal>
        <returnvalue>1.2</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>lca</function> ( <type>ltree[]</type> )
        <returnvalue>ltree</returnvalue>
       </para>
       <para>
        Calcule le plus long ancêtre commun des chemins dans un tableau.
       </para>
       <para>
        <literal>lca(array['1.2.3'::ltree, '1.2.3.4'])</literal>
        <returnvalue>1.2</returnvalue>
       </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Index</title>
  <para>
   <filename>ltree</filename> accepte différents types d'index pouvant
   améliorer les performances des oopérateurs indiqués&nbsp;:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Index B-tree sur <type>ltree</type>&nbsp;:
     <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>,
     <literal>&gt;=</literal>, <literal>&gt;</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     Index GiST sur <type>ltree</type> (classe d'opérateur
     <literal>gist_ltree_ops</literal>)&nbsp;:
     <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>,
     <literal>&gt;=</literal>, <literal>&gt;</literal>,
     <literal>@&gt;</literal>, <literal>&lt;@</literal>,
     <literal>@</literal>, <literal>~</literal>, <literal>?</literal>
    </para>
    <para>
     La classe d'opérateur GiST <literal>gist_ltree_ops</literal> effectue une
     approximation sur un ensemble de chemins de labels sous format de
     signature bitmap. La taille de la signature par défaut est 8 octets. Les
     valeurs valides de taille de signature sont entre 1 et 2024 octets.
     Des tailles de signatures plus longues permettent une recherche plus précise (en
     parcourant une fraction plus petite de l'index et moins de pages heap), au coût
     d'un plus large index.
    </para>
    <para>
     Exemple de création d'un tel index avec une taille de signature par défaut
     de 8 octets&nbsp;:
    </para>
    <programlisting>
     CREATE INDEX path_gist_idx ON test USING GIST (path);
    </programlisting>
    <para>
     Exemple de création d'un tel index avec une taille de signature de 100
     octets&nbsp;:
    </para>
    <programlisting>
CREATE INDEX path_gist_idx ON test USING GIST (path gist_ltree_ops(siglen=100));
    </programlisting>
   </listitem>
   <listitem>
    <para>
     Index GiST sur <type>ltree[]</type> (classe d'opérateur
     <literal>gist__ltree_ops</literal>&nbsp;:
     <literal>ltree[] &lt;@ ltree</literal>, <literal>ltree @&gt; ltree[]</literal>,
     <literal>@</literal>, <literal>~</literal>, <literal>?</literal>
    </para>
    <para>
     La classe d'opérateur GiST <literal>gist__ltree_ops</literal> fonctionne
     de façon similaire à <literal>gist_ltree_ops</literal> et aussi prend
     une taille de signature en paramètre. La valeur par défaut de
     <literal>siglen</literal> dans <literal>gist__ltree_ops</literal> est 28
     octets.
    </para>
    <para>
     Exemple de création d'un tel index avec la taille de signature par défaut
     de 28 octets&nbsp;:
    </para>
    <programlisting>
     CREATE INDEX path_gist_idx ON test USING GIST (array_path);
    </programlisting>
    <para>
     Note&nbsp;: ce type d'index est à perte.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
  <title>Exemple</title>

  <para>
   Cet exemple utilise les données suivantes (disponibles dans le fichier
   <filename>contrib/ltree/ltreetest.sql</filename> des sources)&nbsp;:
  </para>

  <programlisting>
CREATE TABLE test (path ltree);
INSERT INTO test VALUES ('Top');
INSERT INTO test VALUES ('Top.Science');
INSERT INTO test VALUES ('Top.Science.Astronomy');
INSERT INTO test VALUES ('Top.Science.Astronomy.Astrophysics');
INSERT INTO test VALUES ('Top.Science.Astronomy.Cosmology');
INSERT INTO test VALUES ('Top.Hobbies');
INSERT INTO test VALUES ('Top.Hobbies.Amateurs_Astronomy');
INSERT INTO test VALUES ('Top.Collections');
INSERT INTO test VALUES ('Top.Collections.Pictures');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Stars');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Galaxies');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Astronauts');
CREATE INDEX path_gist_idx ON test USING GIST (path);
CREATE INDEX path_idx ON test USING BTREE (path);
  </programlisting>

  <para>
   Maintenant, nous avons une table <structname>test</structname> peuplée
   avec des données décrivant la hiérarchie ci-dessous&nbsp;:
  </para>

  <programlisting>
                            Top
                         /   |  \
                 Science Hobbies Collections
                     /       |              \
            Astronomy   Amateurs_Astronomy Pictures
               /  \                            |
    Astrophysics  Cosmology                Astronomy
                                            /  |    \
                                     Galaxies Stars Astronauts
  </programlisting>

  <para>
   Nous pouvons faire de l'héritage&nbsp;:
  </para>

  <screen>
ltreetest=&gt; SELECT path FROM test WHERE path &lt;@ 'Top.Science';
                path
------------------------------------
 Top.Science
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(4 rows)
  </screen>

  <para>
   Voici quelques exemples de correspondance de chemins&nbsp;:
  </para>

  <screen>
ltreetest=&gt; SELECT path FROM test WHERE path ~ '*.Astronomy.*';
                     path
-----------------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Collections.Pictures.Astronomy
 Top.Collections.Pictures.Astronomy.Stars
 Top.Collections.Pictures.Astronomy.Galaxies
 Top.Collections.Pictures.Astronomy.Astronauts
(7 rows)

ltreetest=&gt; SELECT path FROM test WHERE path ~ '*.!pictures@.Astronomy.*';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
  </screen>

  <para>
   Voici quelques exemples de recherche plein texte&nbsp;:
  </para>
  <screen>
ltreetest=&gt; SELECT path FROM test WHERE path @ 'Astro*% &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Hobbies.Amateurs_Astronomy
(4 rows)

ltreetest=&gt; SELECT path FROM test WHERE path @ 'Astro* &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
  </screen>

  <para>
   Construction d'un chemin en utilisant les fonctions&nbsp;:
  </para>
  <screen>
ltreetest=&gt; SELECT subpath(path,0,2)||'Space'||subpath(path,2) FROM test WHERE path &lt;@ 'Top.Science.Astronomy';
                 ?column?
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
  </screen>

  <para>
   Nous pouvons simplifier ceci en créant une fonction SQL qui insère un
   label à une position spécifié dans un chemin&nbsp;:
  </para>
  <screen>
CREATE FUNCTION ins_label(ltree, int, text) RETURNS ltree
    AS 'select subpath($1,0,$2) || $3 || subpath($1,$2);'
    LANGUAGE SQL IMMUTABLE;

ltreetest=&gt; SELECT ins_label(path,2,'Space') FROM test WHERE path &lt;@ 'Top.Science.Astronomy';
                ins_label
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
  </screen>
 </sect2>

 <sect2>
  <title>Transformations</title>

  <para>
   Des extensions supplémentaires sont disponibles pour implémenter des
   transformations pour le type <type>ltree</type> pour PL/Python. Les
   extensions sont appelées <literal>ltree_plpythonu</literal>,
   <literal>ltree_plpython2u</literal> et <literal>ltree_plpython3u</literal>
   (voir <xref linkend="plpython-python23"/> pour la convention de nommage
   PL/Python). Si vous installez ces transformations et les spécifier lors de
   la création d'une fonction, les valeurs <type>ltree</type> sont converties
   en listes Python. Il est à noter que l'inverse n'est pas encore supportée.
  </para>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Tout le travail a été réalisé par Teodor Sigaev
   (<email>teodor@stack.net</email>) et Oleg Bartunov
   (<email>oleg@sai.msu.su</email>). Voir
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist"></ulink> pour des
   informations supplémentaires. Les auteurs voudraient remercier Eugeny
   Rodichev pour son aide. Commentaires et rapports de bogue sont les
   bienvenus.
  </para>
 </sect2>

</sect1>
