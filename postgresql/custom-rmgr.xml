<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/custom-rmgr.sgml -->

<chapter id="custom-rmgr">
 <title>Gestionnaires de ressources WAL personnalisées</title>

 <para>
  Ce chapitre explique l'interface entre le cœur du système
  <productname>PostgreSQL</productname> et les gestionnaires de
  ressources WAL personnalisées, qui permettent aux extensions de s'intégrer
  directement avec les <link linkend="wal"><acronym>WAL</acronym></link>.
 </para>
 <para>
  Une extension, en particulier <link linkend="tableam">une méthode d'accès à
  une table</link> ou <link linkend="indexam">une méthode d'accès à un index
  </link>, peut avoir besoin d'utiliser des WAL pour la restauration, la
  réplication et/ou le <link linkend="logicaldecoding">décodage logique</link>.
  Les gestionnaires de ressources personnalisés sont une alternative plus
  flexible aux <link linkend="generic-wal">enregistrements génériques des WAL
  </link> (qui ne prennent pas en charge le décodage logique), mais plus
  complexes à implémenter dans une extension.
 </para>
 <para>
  Pour créer un nouveau gestionnaire de ressources WAL personnalisées,
  définissez d'abord une structure <structname>RmgrData</structname>
  avec l'implémentation des méthodes du gestionnaire de ressources.
  Reportez-vous à
  <filename>src/backend/access/transam/README</filename> et
  <filename>src/include/access/xlog_internal.h</filename> dans le source de
  <productname>PostgreSQL</productname>.
<programlisting>
/*
 * Table de méthodes pour les gestionnaires de ressources.
 *
 * Cette structure doit rester synchronisée avec la définition de PG_RMGR dans
 * rmgr.c.
 *
 * rm_identify doit renvoyer un nom pour l'enregistrement relatif à xl_info
 * (sans référence au rmid). Par exemple, XLOG_BTREE_VACUUM serait nommé
 * "VACUUM". rm_desc peut ensuite être appelé pour obtenir des détails
 * supplémentaires pour l'enregistrement, s'ils sont disponibles (par exemple,
 * le dernier bloc).
 *
 * rm_mask prend en entrée une page modifiée par le gestionnaire de ressources
 * et masque les bits qui ne doivent pas être marqués par
 * wal_consistency_checking.
 *
 * RmgrTable[] est indexé par les valeurs de RmgrId (voir rmgrlist.h).
 * Si rm_name est NULL, l'entrée RmgrTable correspondante est considérée comme
 * invalide.
 */
typedef struct RmgrData
{
    const char *rm_name;
    void        (*rm_redo) (XLogReaderState *record);
    void        (*rm_desc) (StringInfo buf, XLogReaderState *record);
    const char *(*rm_identify) (uint8 info);
    void        (*rm_startup) (void);
    void        (*rm_cleanup) (void);
    void        (*rm_mask) (char *pagedata, BlockNumber blkno);
    void        (*rm_decode) (struct LogicalDecodingContext *ctx,
                              struct XLogRecordBuffer *buf);
} RmgrData;
</programlisting>
 </para>
 <para>
  Ensuite, enregistrez votre nouveau gestionnaire de ressources.

<programlisting>
/*
 * Enregistrez un nouveau gestionnaire de ressources WAL personnalisées.
 *
 * Les ID de gestionnaire de ressources doivent être uniques au monde pour
 * toutes les extensions. Se référer à
 * https://wiki.postgresql.org/wiki/CustomWALResourceManager pour réserver un
 * RmgrId unique pour votre extension, afin d'éviter les conflits avec les
 * extensions d'autres développeurs. Lors du développement, utilisez
 * RM_EXPERIMENTAL_ID pour éviter la réservation inutile d'un nouvel ID.
 */
extern void RegisterCustomRmgr(RmgrId rmid, RmgrData *rmgr);
</programlisting>
  <function>RegisterCustomRmgr</function> doit être appelé depuis la fonction
  <link linkend="xfunc-c-dynload">_PG_init</link> du module d'extension.
  Lors du développement d'une nouvelle extension, utilisez
  <literal>RM_EXPERIMENTAL_ID</literal> pour <parameter>rmid</parameter>.
  Lorsque vous êtes prêt à publier l'extension pour les utilisateurs, réservez
  un nouvel ID de gestionnaire de ressources sur la page <ulink
  url="https://wiki.postgresql.org/wiki/CustomWALResourceManagers">Custom WAL
  Resource Manager</ulink>.
 </para>

 <para>
  Mettez le module d'extension implémentant le gestionnaire de ressources
  personnalisées dans <xref linkend="guc-shared-preload-libraries"/> afin qu'il
  soit chargé assez tôt lors du démarrage de <productname>PostgreSQL
  </productname>.
 </para>
 <note>
   <para>
    L'extension doit rester dans shared_preload_libraries tant que des
    enregistrements personnalisés de WAL peuvent exister dans le système. Sinon,
    <productname>PostgreSQL</productname> ne pourra pas appliquer ou décoder les
    enregistrements personnalisés de WAL, ce qui peut empêcher le serveur
    de démarrer.
   </para>
 </note>
</chapter>
