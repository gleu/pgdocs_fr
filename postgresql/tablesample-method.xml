<?xml version="1.0" encoding="UTF-8"?>
<!-- doc/src/sgml/tablesample-method.sgml -->

<chapter id="tablesample-method">
 <title>Écrire une méthode d'échantillonnage de table</title>

 <indexterm zone="tablesample-method">
  <primary>méthode d'échantillonage de table</primary>
 </indexterm>

 <indexterm zone="tablesample-method">
  <primary>Méthode <literal>TABLESAMPLE</literal></primary>
 </indexterm>

 <para>
  L'implémentation de la clause <literal>TABLESAMPLE</literal> de
  <productname>PostgtreSQL</productname> supporte l'utilisation de
  méthodes personnalisées d'échantillonnage de table, en plus des
  méthodes <literal>BERNOULLI</literal> et <literal>SYSTEM</literal>
  qui sont requises par le standard SQL. La méthode d'échantillonnage
  détermine quelles lignes de la table seront sélectionnées lorsque
  la clause <literal>TABLESAMPLE</literal> sera utilisée.
 </para>

 <para>
  Au niveau SQL, une méthode d'echantillonnage de table est représentée
  par une simple fonction, classiquement implémentée en C, et qui a
  la signature suivante&nbsp;
<programlisting>
method_name(internal) RETURNS tsm_handler
</programlisting>
    Le nom de la fonction est le même que le nom de la méthode
    apparaissant dans la clause <literal>TABLESAMPLE</literal>. L'argument
    <type>internal</type> est factice (il a toujours une valeur de
    zéro) qui sert uniquement à interdire que cette fonction soit
    appelée directement à partir d'une commande SQL. Le résultat
    de cette fonction doit être une structure allouée avec palloc
    de type <type>TsmRoutine</type>, qui contient des pointeurs de
    fonction supportant la méthode d'échantillonnage. Ces fonctions
    sont des fonctions C pleines et entières qui ne sont ni visibles ni
    appellables au niveau SQL. Les fonctions de support sont décrites
    à <xref linkend="tablesample-support-functions"/>.
 </para>

 <para>
  En plus des pointeurs de fonction, la structure <type>TsmRoutine</type>
  doit fournir ces champs additionnels&nbsp;:
 </para>

 <variablelist>
  <varlistentry>
   <term><literal>List *parameterTypes</literal></term>
   <listitem>
    <para>
     Il s'agit d'une liste d'OIDs contenant les OIDs des types de
     données du ou des paramètre(s) qui seront acceptés par la
     clause <literal>TABLESAMPLE</literal> lorsque cette méthode
     d'échantillonnage sera utilisée. Par exemple, pour les méthodes
     incluses, cette liste contient un simple élément avec la valeur
     <literal>FLOAT4OID</literal>, qui représente le pourcentage
     d'échantillonnage. Les méthodes d'échantillonnage personnalisées
     peuvent avoir des paramètres en plus ou différents.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><literal>bool repeatable_across_queries</literal></term>
   <listitem>
    <para>
     Si <literal>true</literal>, la méthode d'échantillonnage
     peut renvoyer des échantillons identiques pour des requêtes
     successives, si les même paramètres et la valeur de graine de la
     clause <literal>REPEATABLE</literal> sont fournis à chaque fois et
     que le contenu de la table n'a pas changé. Lorsque positionné à
     <literal>false</literal>, la clause <literal>REPEATABLE</literal>
     n'est pas acceptée comme valable pour la méthode
     d'échantillonnnage.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><literal>bool repeatable_across_scans</literal></term>
   <listitem>
    <para>
     Si <literal>true</literal>, la méthode d'échantillonnage peut
     renvoyer des échantillons identiques pour des parcours successifs
     dans la même requête (en supposant des paramètres, une graine
     et une image de la base inchangés). Lorsque positionné à
     <literal>false</literal>, le planificateur ne sélectionnera pas
     des plans qui requièrent de parcourir la table échantillonnée
     plus d'une fois, dans la mesure où ceci pourrait entraîner des
     résultats de sortie incohérents.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  La structure <type>TsmRoutine</type> est déclarée dans le
  fichier <filename>src/include/access/tsmapi.h</filename>, auquel il
  convient de se référer pour des détails additionnels.
 </para>

 <para>
  Les méthodes d'échantillonnage de table incluses dans
  la distribution standard sont de bonnes références
  pour écrire la vôtre. Jeter un œil dans le répertoire
  <filename>src/backend/access/tablesample</filename> de l'arbre
  des sources pour les méthodes incluses, et dans le répertoire
  <filename>contrib</filename> pour des méthodes additionnelles.
 </para>

 <sect1 id="tablesample-support-functions">
  <title>Fonctions de support d'une méthode d'échantillonnage</title>

  <para>
   La fonction du gestionnaire TSM renvoie une structure
   <type>TsmRoutine</type> allouée avec palloc contenant des pointeurs
   vers les fonctions de support décrites ci-dessous. La plupart des
   fonctions sont obligatoires, mais certaines sont optionnelles, et ces
   pointeurs peuvent être NULL.
  </para>

  <para>
<programlisting>
void
SampleScanGetSampleSize (PlannerInfo *root,
                         RelOptInfo *baserel,
                         List *paramexprs,
                         BlockNumber *pages,
                         double *tuples);
</programlisting>
   Cette fonction est appelée durant la planification. Elle doit
   estimée le nombre de pages de la relation qui seront lues
   lors d'un simple parcours, et le nombre de lignes qui seront
   sélectionnées lors du parcours. (Par exemple, cela pourrait
   être déterminé en estimant la fraction échantillonnée,
   puis en multipliant <literal>baserel-&gt;pages</literal>
   et <literal>baserel-&gt;tuples</literal> par ce chiffre,
   après s'être assuré d'avoir arrondi ces chiffres à des
   valeurs entières.) La liste <literal>paramexprs</literal>
   contient les expressions qui sont les paramètres de la clause
   <literal>TABLESAMPLE</literal>. Il est recommandé d'utiliser
   la fonction <function>estimate_expression_value</function> pour
   essayer de réduire ces expressions à des constantes, si leurs
   valeurs sont nécessaires pour les besoins de l'estimation; mais la
   fonction doit renvoyer les estimations des tailles même si elles
   ne peuvent être réduites, et elle ne devrait pas échouer même
   si les valeurs apparaissent invalides (rappelez vous qu'il s'agit
   uniquement d'une estimation de valeurs futures à l'exécution). Les
   paramètres <literal>pages</literal> et <literal>tuples</literal>
   sont les valeurs de sorties.
  </para>

  <para>
<programlisting>
void
InitSampleScan (SampleScanState *node,
                int eflags);
</programlisting>

	Initialise pour l'exécution d'un nœud du plan SampleScan.
	La fonction est appelée au démarrage de l'exécuteur.  Elle
	devrait effectuer toutes les initialisations nécessaires
	avant que le traitement puisse commencer. Le nœud
	<structname>SampleScanState</structname> a déjà été
	créé, mais son champ <structfield>tsm_state</structfield>
	est NULL. La fonction peut allouer via palloc les
	données internes d'état nécessaires à la fonction
	d'échantillonnage, et enregistrer un pointeur dans
	<literal>node-&gt;tsm_state</literal>. Des informations à
	propos de la table à parcourir sont accessibles via d'autres
	champs du nœud <structname>SampleScanState</structname>
	(mais veuillez noter que le descripteur du parcours
	<literal>node-&gt;ss.ss_currentScanDesc</literal> n'est pas
	encore positionné à ce stade). <literal>eflags</literal>
	contient un ensemble de bits décrivant le mode opératoire de
	l'exécuteur pour ce nœud du plan.
  </para>

  <para>
   Lorsque <literal>(eflags &amp; EXEC_FLAG_EXPLAIN_ONLY)</literal> est
   true, le parcours ne sera actuellement pas effectué, dans ce cas cette
   fonction devrait effectuer uniquement le minimum requis pour mettre dans
   un état valide le nœud pour la commande <command>EXPLAIN</command>
   et la fonction <function>EndSampleScan</function>.
  </para>

  <para>
   Cette fonction est optionnelle (positionnez alors le pointeur sur
   NULL), auquel cas la fonction <function>BeginSampleScan</function>
   doit effectuer toutes les initialisations nécessaires à la méthode
   d'échantillonnage.
  </para>

  <para>
<programlisting>
void
BeginSampleScan (SampleScanState *node,
                 Datum *params,
                 int nparams,
                 uint32 seed);
</programlisting>

   Débute l'exécution d'un parcours d'échantillonnage.  Cette
   fonction est appelée juste avant la première tentative de
   récupérer une ligne, et peut être appelée à nouveau si le
   parcours a besoin d'être relancé. Des informations sur la table à
   parcourir sont accessibles via les champs de la structure du nœud
   <structname>SampleScanState</structname> (mais notez que le descripteur
   du parcours <literal>node-&gt;ss.ss_currentScanDesc</literal> n'est pas
   encore positionné à ce stade). Le tableau <literal>params</literal>,
   de longueur <literal>nparams</literal>, contient les valeurs des
   paramètres indiqués dans la clause <literal>TABLESAMPLE</literal>. Ces
   paramètres seront en nombre et de types spécifiés par la méthode
   d'échantillonnage dans la liste <literal>parameterTypes</literal>, et
   ont été vérifiés comme n'étant pas null. <literal>seed</literal>>
   contient une graine à usage de la méthode d'échantillonnage pour
   générer des nombres aléatoires; il s'agit soit d'un hash dérivé
   de la valeur de la clause <literal>REPEATABLE</literal> si fournie,
   soit sinon du résultat de la fonction <literal>random()</literal>.
  </para>

  <para>
   Cette fonction peut ajuster les champs
   <literal>node-&gt;use_bulkread</literal>
   et <literal>node-&gt;use_pagemode</literal>. Si
   <literal>node-&gt;use_bulkread</literal> est true, ce qui est le cas
   par défaut, le parcours utilisera une stratégie d'accès aux tampons
   mémoires qui encourage le recyclage des tampons après usage <!--celle
   là à la relecture... elle est ambigüe... ;-)...-->. Il peut être
   raisonnable de mettre cette valeur à <literal>false</literal>
   si le parcours doit visiter seulement une petite fraction des pages
   de la table. Si <literal>node-&gt;use_pagemode</literal> est
   <literal>true</literal>, ce qui est la valeur par défaut, le parcours
   effectuera une vérification de la visibilité avec un unique passage
   pour l'ensemble des lignes composant chaque page visitée. Il peut
   être raisonnable de mettre cette valeur à <literal>false</literal>
   si le parcours doit sélectionner seulement une petite fraction des lignes de
   chaque page visitée. Ceci aura pour conséquence un nombre moindre
   de vérifications de visibilité effectuées, mais chacune sera plus
   coûteuse car elle demandera plus de verrouillages.
  </para>

  <para>
   Si la méthode d'échantillonnage est marquée comme
   <literal>repeatable_across_scans</literal>, elle doit être capable de
   sélectionner le même ensemble de lignes lors d'un parcours relancé
   à nouveau comme elle l'a fait à l'origine, c'est à dire qu'un
   nouvel appel à la fonction <function>BeginSampleScan</function> doit
   engendrer la sélection des même lignes que précédemment (dans la
   mesure où les paramètres de la clause <literal>TABLESAMPLE</literal>
   et la graine ne changent pas).
  </para>

  <para>
<programlisting>
BlockNumber
NextSampleBlock (SampleScanState *node);
</programlisting>

   Renvoie le numéro du bloc de la page suivante à parcourir, ou
   <literal>InvalidBlockNumber</literal> si il n'y a plus de pages
   à parcourir.
  </para>

  <para>
   Cette fonction peut être omise (mettez le pointeur à la valeur NULL),
   auquel cas le code du serveur effectuera un parcours séquentiel de
   l'ensemble de la relation. Un tel parcours peut utiliser un parcours
   synchronisé, aussi la méthode d'échantillonnage ne peut pas supposer
   que les pages de la relation sont visitées dans le même ordre à
   chaque parcours.
  </para>

  <para>
<programlisting>
OffsetNumber
NextSampleTuple (SampleScanState *node,
                 BlockNumber blockno,
                 OffsetNumber maxoffset);
</programlisting>

    Renvoie le décalage de la ligne suivante à echantillonner sur la
    page spécifiée, ou <literal>InvalidOffsetNumber</literal> si il
    n'y a plus de lignes à échantillonner. <literal>maxoffset</literal>
    est le décalage le plus grand utilisé sur la page.
  </para>

  <note>
   <para>
    Il n'est pas explicitement indiqué à la fonction
    <function>NextSampleTuple</function> les décalages
    dans l'intervalle <literal>1 .. maxoffset</literal> qui
    contiennent des lignes valides. Ce n'est normalement pas
    un problème dans la mesure où le code du serveur ignore
    les requêtes pour échantillonner des lignes manquantes
    ou non visibles; ceci ne devrait pas entraîner de biais dans
    l'échantillon. Cependant, si nécessaire, la fonction peut examiner
    <literal>node-&gt;ss.ss_currentScanDesc-&gt;rs_vistuples[]</literal>
    pour identifier les lignes valides et visibles. (Ceci
    requiert que <literal>node-&gt;use_pagemode</literal> soit
    <literal>true</literal>.)
   </para>
  </note>

  <note>
   <para>
    La fonction <function>NextSampleTuple</function> ne doit
    <emphasis>pas</emphasis> assumer que <literal>blockno</literal>
    est le même numéro de page que celui renvoyé par le plus récent
    appel à la fonction <function>NextSampleBlock</function>. Le
    numéro a été renvoyé par un précédent appel à la fonction
    <function>NextSampleBlock</function>, mais le code du serveur
    est autorisé à appeler <function>NextSampleBlock</function>
    en amont du parcours des pages, pour rendre possible la
    récupération en avance. Il est OK d'assumer qu'une fois le
    parcours d'une page débuté, les appels successifs à la fonction
    <function>NextSampleTuple</function> se réfèrent tous à la
    même page jusqu'à ce que <literal>InvalidOffsetNumber</literal>
    soit retourné.
   </para>
  </note>

  <para>
<programlisting>
void
EndSampleScan (SampleScanState *node);
</programlisting>

   Termine le parcours et libère les ressources. Il est normalement pas
   important de libérer la mémoire allouée via palloc, mais toutes les
   ressources visibles à l'extérieur doivent être nettoyées. Cette
   fonction peut être omise (positionnez le pointeur sur la valeur NULL)
   dans la plupart des cas où de telles ressources n'existent pas.
  </para>

 </sect1>

</chapter>
