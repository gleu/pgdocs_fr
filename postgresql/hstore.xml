<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="hstore" xreflabel="hstore">
 <title>hstore</title>

 <indexterm zone="hstore">
  <primary>hstore</primary>
 </indexterm>

 <para>
  Ce module code le type de données <type>hstore</type>, qui permet de stocker
  des ensembles de paires clé/valeur dans une simple valeur
  <productname>PostgreSQL</productname>. Ce peut être utile dans divers
  cas, comme des lignes avec de nombreux attributs rarement examinés ou des données
  semi-structurées. Les clés et les valeurs sont de simples chaînes de texte.
 </para>

 <para>
  Ce module est considéré comme <quote>trusted</quote>, c'est-à-dire qu'il peut
  être installé par des  utilisateurs simples (sans attribut
  <literal>SUPERUSER</literal>) ayant le droit <literal>CREATE</literal> sur la
  base de données courante.
 </para>

 <sect2>
  <title>Représentation externe de <type>hstore</type></title>

  <para>
   La représentation textuelle d'une valeur <type>hstore</type>, utilisée en
   entrée et en sortie, inclut zéro ou plusieurs paires
   <replaceable>clé</replaceable>
   <literal>=&gt;</literal> <replaceable>valeur</replaceable> séparées par
   des virgules. Par exemple&nbsp;:

   <synopsis>
    k =&gt; v
    foo =&gt; bar, baz =&gt; whatever
    "1-a" =&gt; "anything at all"
   </synopsis>

   L'ordre des paires n'est pas significatif (et peut ne pas être reproduit
   en sortie). Les espaces blancs entre les paires ou autour des signes
   <literal>=&gt;</literal> sont ignorés. Ajoutez des guillemets
   pour les clés et valeurs contenant des espaces, virgules, <literal>=</literal> ou
   <literal>&gt;</literal>. Pour inclure un guillemet double ou un antislash
   dans une clé ou une valeur, échappez-le avec un antislash.
  </para>

  <para>
   Chaque clé dans un <type>hstore</type> est unique. Si vous déclarez un
   <type>hstore</type> avec des clés dupliquées, seule une sera stockée dans
   <type>hstore</type> et il n'y a pas de garantie sur celle qui sera
   conservée&nbsp;:

   <programlisting>
SELECT 'a=&gt;1,a=&gt;2'::hstore;
  hstore
----------
 "a"=&gt;"1"
   </programlisting>
  </para>

  <para>
   Une valeur, mais pas une clé, peut être un <literal>NULL</literal> SQL. Par
   exemple&nbsp;:

   <programlisting>
    key =&gt; NULL
   </programlisting>

   Le mot-clé <literal>NULL</literal> est insensible à la casse.
   Ajoutez des guillemets autour du <literal>NULL</literal> pour qu'il soit
   traité comme toute autre chaîne.
  </para>

  <note>
   <para>
    Gardez en tête que le format texte <type>hstore</type>, lorsqu'il est
    utilisé en entrée, s'applique <emphasis>avant</emphasis> tout guillemet ou
    échappement nécessaire. Si vous passez une valeur littérale de type
    <type>hstore</type> via un paramètre, aucun traitement supplémentaire n'est
    nécessaire. Par contre, si vous la passez comme constante littérale entre
    guillemets, alors les guillemets simples et, suivant la configuration du
    paramètre <varname>standard_conforming_strings</varname>, les caractères
    antislash doivent être échappés correctement. Voir <xref
    linkend="sql-syntax-strings"/> pour plus d'informations sur la gestion des
    chaînes constantes.
   </para>
  </note>

  <para>
   En sortie, mettez toujours des guillemets doubles autour des clés et valeurs,
   même quand cela n'est pas strictement nécessaire.
  </para>

 </sect2>

 <sect2>
  <title>Opérateurs et fonctions <type>hstore</type></title>

  <para>
   Les opérateurs fournis par le module <literal>hstore</literal> sont
   montrés dans <xref linkend="hstore-op-table"/> et les fonctions
   dans <xref linkend="hstore-func-table"/>.
  </para>

  <table id="hstore-op-table">
   <title>Opérateurs<type>hstore</type></title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        Operator
       </para>
       <para>
        Description
       </para>
       <para>
        Exemple(s)
       </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>-&gt;</literal> <type>text</type>
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Renvoie la valeur associée à une clé donnée
        (<literal>NULL</literal> si inexistante).
       </para>
       <para>
        <literal>'a=&gt;x, b=&gt;y'::hstore -&gt; 'a'</literal>
        <returnvalue>x</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>-&gt;</literal> <type>text[]</type>
        <returnvalue>text[]</returnvalue>
       </para>
       <para>
        Retourne la valeur associée à des clés
        (<literal>NULL</literal> si inexistantes).
       </para>
       <para>
        <literal>'a=&gt;x, b=&gt;y, c=&gt;z'::hstore -&gt; ARRAY['c','a']</literal>
        <returnvalue>{"z","x"}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>||</literal> <type>hstore</type>
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Concatène deux <type>hstore</type>s.
       </para>
       <para>
        <literal>'a=&gt;b, c=&gt;d'::hstore || 'c=&gt;x, d=&gt;q'::hstore</literal>
        <returnvalue>"a"=&gt;"b", "c"=&gt;"x", "d"=&gt;"q"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>?</literal> <type>text</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Ce <type>hstore</type> contient-il une clé donnée&nbsp;?
       </para>
       <para>
        <literal>'a=&gt;1'::hstore ? 'a'</literal>
        <returnvalue>t</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>?&amp;</literal> <type>text[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Ce <type>hstore</type> contient-il toutes les clés indiquées&nbsp;?
       </para>
       <para>
        <literal>'a=&gt;1,b=&gt;2'::hstore ?&amp; ARRAY['a','b']</literal>
        <returnvalue>t</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>?|</literal> <type>text[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Ce <type>hstore</type> contient-il une des clés indiquées&nbsp;?
       </para>
       <para>
        <literal>'a=&gt;1,b=&gt;2'::hstore ?| ARRAY['b','c']</literal>
        <returnvalue>t</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>@&gt;</literal> <type>hstore</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        L'opérande gauche contient-il le droit&nbsp;?
       </para>
       <para>
        <literal>'a=&gt;b, b=&gt;1, c=&gt;NULL'::hstore @&gt; 'b=&gt;1'</literal>
        <returnvalue>t</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>&lt;@</literal> <type>hstore</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        L'opérande gauche est-il contenu dans le droit&nbsp;?
       </para>
       <para>
        <literal>'a=&gt;c'::hstore &lt;@ 'a=&gt;b, b=&gt;1, c=&gt;NULL'</literal>
        <returnvalue>f</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>-</literal> <type>text</type>
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Supprime la clé dans l'opérande gauche.
       </para>
       <para>
        <literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'b'::text</literal>
        <returnvalue>"a"=&gt;"1", "c"=&gt;"3"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>-</literal> <type>text[]</type>
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Supprime les clés dans l'opérande gauche.
       </para>
       <para>
        <literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - ARRAY['a','b']</literal>
        <returnvalue>"c"=&gt;"3"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>hstore</type> <literal>-</literal> <type>hstore</type>
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Supprime les clés de l'opérande gauche qui correspondent à des paires
        de l'opérande droit.
       </para>
       <para>
        <literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'a=&gt;4, b=&gt;2'::hstore</literal>
        <returnvalue>"a"=&gt;"1", "c"=&gt;"3"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>anyelement</type> <literal>#=</literal> <type>hstore</type>
        <returnvalue>anyelement</returnvalue>
       </para>
       <para>
        Remplace les champs de l'opérande gauche (qui doit être un type composite)
        avec les valeurs correspondantes du <type>hstore</type>.
       </para>
       <para>
        <literal>ROW(1,3) #= 'f1=>11'::hstore</literal>
        <returnvalue>(11,3)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <literal>%%</literal> <type>hstore</type>
        <returnvalue>text[]</returnvalue>
       </para>
       <para>
        Convertit un <type>hstore</type> en tableau
        alternant les clés et les valeurs.
       </para>
       <para>
        <literal>%% 'a=&gt;foo, b=&gt;bar'::hstore</literal>
        <returnvalue>{a,foo,b,bar}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <literal>%#</literal> <type>hstore</type>
        <returnvalue>text[]</returnvalue>
       </para>
       <para>
        Convertit <type>hstore</type> en un tableau
        à deux dimensions clé/valeur.
       </para>
       <para>
        <literal>%# 'a=&gt;foo, b=&gt;bar'::hstore</literal>
        <returnvalue>{{a,foo},{b,bar}}</returnvalue>
       </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
    Avant PostgreSQL 8.2, les opérateurs de contenance @&gt; et &lt;@ étaient
    appelés respectivement @ et ~. Ces noms sont toujours utilisables mais sont
    obsolètes, et seront supprimés un jour.
    Notez que ces anciens noms sont inversés par rapport à la convention suivie par les
    types de données géométriques&nbsp;!
   </para>
  </note>

  <table id="hstore-func-table">
   <title><type>hstore</type> Functions</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        Fonction
       </para>
       <para>
        Description
       </para>
       <para>
        Exemple(s)
       </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>hstore</primary></indexterm>
        <function>hstore</function> ( <type>record</type> )
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Construit un <type>hstore</type> à partir d'un enregistrement
        ou d'une ligne.
       </para>
       <para>
        <literal>hstore(ROW(1,2))</literal>
        <returnvalue>"f1"=&gt;"1", "f2"=&gt;"2"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>hstore</function> ( <type>text[]</type> )
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Construit un <type>hstore</type> à partir d'un tableau, qui peut
        être soit un tableau clé/valeur, soit un tableau à deux dimensions.
       </para>
       <para>
        <literal>hstore(ARRAY['a','1','b','2'])</literal>
        <returnvalue>"a"=&gt;"1", "b"=&gt;"2"</returnvalue>
       </para>
       <para>
        <literal>hstore(ARRAY[['c','3'],['d','4']])</literal>
        <returnvalue>"c"=&gt;"3", "d"=&gt;"4"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>hstore</function> ( <type>text[]</type>, <type>text[]</type> )
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Construit un <type>hstore</type> à partir de tableaux séparés
        pour les clés et les valeurs.
       </para>
       <para>
        <literal>hstore(ARRAY['a','b'], ARRAY['1','2'])</literal>
        <returnvalue>"a"=&gt;"1", "b"=&gt;"2"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>hstore</function> ( <type>text</type>, <type>text</type> )
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Construit un <type>hstore</type> à un seul élément.
       </para>
       <para>
        <literal>hstore('a', 'b')</literal>
        <returnvalue>"a"=&gt;"b"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>akeys</primary></indexterm>
        <function>akeys</function> ( <type>hstore</type> )
        <returnvalue>text[]</returnvalue>
       </para>
       <para>
        Extrait les clés du <type>hstore</type> dans un tableau.
       </para>
       <para>
        <literal>akeys('a=&gt;1,b=&gt;2')</literal>
        <returnvalue>{a,b}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>skeys</primary></indexterm>
        <function>skeys</function> ( <type>hstore</type> )
        <returnvalue>setof text</returnvalue>
       </para>
       <para>
        Extrait les clés du <type>hstore</type> dans un ensemble.
       </para>
       <para>
        <literal>skeys('a=&gt;1,b=&gt;2')</literal>
        <returnvalue></returnvalue>
        <programlisting>
 a
 b
        </programlisting>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>avals</primary></indexterm>
        <function>avals</function> ( <type>hstore</type> )
        <returnvalue>text[]</returnvalue>
       </para>
       <para>
        Extrait les valeurs du <type>hstore</type> dans un tableau.
       </para>
       <para>
        <literal>avals('a=&gt;1,b=&gt;2')</literal>
        <returnvalue>{1,2}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>svals</primary></indexterm>
        <function>svals</function> ( <type>hstore</type> )
        <returnvalue>setof text</returnvalue>
       </para>
       <para>
        Extrait les valeurs du <type>hstore</type> dans un ensemble.
       </para>
       <para>
        <literal>svals('a=&gt;1,b=&gt;2')</literal>
        <returnvalue></returnvalue>
        <programlisting>
 1
 2
        </programlisting>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>hstore_to_array</primary></indexterm>
        <function>hstore_to_array</function> ( <type>hstore</type> )
        <returnvalue>text[]</returnvalue>
       </para>
       <para>
        Extrait les clés et les valeurs du <type>hstore</type> sous
        la forme d'un tableau de clés et valeurs alternées.
       </para>
       <para>
        <literal>hstore_to_array('a=&gt;1,b=&gt;2')</literal>
        <returnvalue>{a,1,b,2}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>hstore_to_matrix</primary></indexterm>
        <function>hstore_to_matrix</function> ( <type>hstore</type> )
        <returnvalue>text[]</returnvalue>
       </para>
       <para>
        Extrait les clés et valeurs <type>hstore</type> sous la forme
        d'un tableau à deux dimensions.
       </para>
       <para>
        <literal>hstore_to_matrix('a=&gt;1,b=&gt;2')</literal>
        <returnvalue>{{a,1},{b,2}}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>hstore_to_json</primary></indexterm>
        <function>hstore_to_json</function> ( <type>hstore</type> )
        <returnvalue>json</returnvalue>
       </para>
       <para>
        Convertit une valeur <type>hstore</type> en <type>json</type>,
        en convertissant toutes les valeurs non NULL en chaînes JSON.
       </para>
       <para>
        Cette fonction est appelée implicitement
        quand une valeur <type>hstore</type>
        est convertie vers du <type>json</type>.
       </para>
       <para>
        <literal>hstore_to_json('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal>
        <returnvalue>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>hstore_to_jsonb</primary></indexterm>
        <function>hstore_to_jsonb</function> ( <type>hstore</type> )
        <returnvalue>jsonb</returnvalue>
       </para>
       <para>
        Convertit une valeur <type>hstore</type> en <type>jsonb</type>,
        en convertissant toutes les valeurs non NULL en chaînes JSON.
       </para>
       <para>
        Cette fonction est appelée implicitement
        quand une valeur <type>hstore</type>
        est convertie vers du <type>jsonb</type>.
       </para>
       <para>
        <literal>hstore_to_jsonb('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal>
        <returnvalue>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>hstore_to_json_loose</primary></indexterm>
        <function>hstore_to_json_loose</function> ( <type>hstore</type> )
        <returnvalue>json</returnvalue>
       </para>
       <para>
        Convertit un <type>hstore</type> en une valeur <type>json</type>, mais
        en essayant de repérer les valeurs numériques et booléennes pour
        qu'elles ne soient pas entre guillemets dans le JSON.
       </para>
       <para>
        <literal>hstore_to_json_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal>
        <returnvalue>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>hstore_to_jsonb_loose</primary></indexterm>
        <function>hstore_to_jsonb_loose</function> ( <type>hstore</type> )
        <returnvalue>jsonb</returnvalue>
       </para>
       <para>
        Convertit un <type>hstore</type> en une valeur <type>jsonb</type>, mais
        en essayant de repérer les valeurs numériques et booléennes pour
        qu'elles ne soient pas entre guillemets dans le JSON.
       </para>
       <para>
        <literal>hstore_to_jsonb_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal>
        <returnvalue>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>slice</primary></indexterm>
        <function>slice</function> ( <type>hstore</type>, <type>text[]</type> )
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Extrait un sous-ensemble d'un <type>hstore</type> contenant seulement
        les clés indiquées.
       </para>
       <para>
        <literal>slice('a=&gt;1,b=&gt;2,c=&gt;3'::hstore, ARRAY['b','c','x'])</literal>
        <returnvalue>"b"=&gt;"2", "c"=&gt;"3"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>each</primary></indexterm>
        <function>each</function> ( <type>hstore</type> )
        <returnvalue>setof record</returnvalue>
        ( <parameter>key</parameter> <type>text</type>,
        <parameter>value</parameter> <type>text</type> )
       </para>
       <para>
        Extrait les clés et valeurs d'un <type>hstore</type> sous la forme
        d'un ensemble d'enregistrements.
       </para>
       <para>
        <literal>select * from each('a=&gt;1,b=&gt;2')</literal>
        <returnvalue></returnvalue>
        <programlisting>
  key | value
 -----+-------
  a   | 1
  b   | 2
        </programlisting>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>exist</primary></indexterm>
        <function>exist</function> ( <type>hstore</type>, <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Le <type>hstore</type> contient-il une clé donnée&nbsp;?
       </para>
       <para>
        <literal>exist('a=&gt;1', 'a')</literal>
        <returnvalue>t</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>defined</primary></indexterm>
        <function>defined</function> ( <type>hstore</type>, <type>text</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Le <type>hstore</type> contient-il une valeur non <literal>NULL</literal>
        comme clé&nbsp;?
       </para>
       <para>
        <literal>defined('a=&gt;NULL', 'a')</literal>
        <returnvalue>f</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>delete</primary></indexterm>
        <function>delete</function> ( <type>hstore</type>, <type>text</type> )
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Supprime la paire correspondant à une clé donnée.
       </para>
       <para>
        <literal>delete('a=&gt;1,b=&gt;2', 'b')</literal>
        <returnvalue>"a"=&gt;"1"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>delete</function> ( <type>hstore</type>, <type>text[]</type> )
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Supprime toutes les paires correspondant à ces clés.
       </para>
       <para>
        <literal>delete('a=&gt;1,b=&gt;2,c=&gt;3', ARRAY['a','b'])</literal>
        <returnvalue>"c"=&gt;"3"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>delete</function> ( <type>hstore</type>, <type>hstore</type> )
        <returnvalue>hstore</returnvalue>
       </para>
       <para>
        Supprime les paires correspondant à celles du second argument.
       </para>
       <para>
        <literal>delete('a=&gt;1,b=&gt;2', 'a=&gt;4,b=&gt;2'::hstore)</literal>
        <returnvalue>"a"=&gt;"1"</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>populate_record</primary></indexterm>
        <function>populate_record</function> ( <type>anyelement</type>, <type>hstore</type> )
        <returnvalue>anyelement</returnvalue>
       </para>
       <para>
        Remplacer tous les champs de l'opérande gauche (qui doit être un type composite)
        avec les valeurs correspondantes du <type>hstore</type>.
       </para>
       <para>
        <literal>populate_record(ROW(1,2), 'f1=>42'::hstore)</literal>
        <returnvalue>(42,2)</returnvalue>
       </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Index</title>

  <para>
   <type>hstore</type> est supporté par les index GiST et GIN pour les
   opérateurs <literal>@&gt;</literal>, <literal>?</literal>,
   <literal>?&amp;</literal> et <literal>?|</literal>. Par exemple&nbsp;:
  </para>
  <programlisting>
CREATE INDEX hidx ON testhstore USING GIST (h);

CREATE INDEX hidx ON testhstore USING GIN (h);
  </programlisting>

  <para>
   La classe d'opérateur GiST <literal>gist_hstore_ops</literal>
   opère une approximation d'un ensemble de clés/valeurs avec une signature bitmap.
   Son paramètre optionnel entier, <literal>siglen</literal>,
   détermine la longueur de la signature en octets.
   La longueur par défaut est 16 octets.
   Les valeurs valides de longueur de signature vont de 1 à 2024 octets.
   Des signatures plus longues mènent à des recherches plus précises
   (scannant une partie plus courte de l'index et moins de pages de la table),
   au prix d'un index plus gros.
  </para>

  <para>
   Exemple de création d'un tel index avec une longueur de signature
   de 32 octets&nbsp;:
   <programlisting>
CREATE INDEX hidx ON testhstore USING GIST (h gist_hstore_ops(siglen=32));
   </programlisting>
  </para>

  <para>
   <type>hstore</type> supporte aussi les index <type>btree</type> ou
   <type>hash</type> pour l'opérateur <literal>=</literal>. Cela permet aux
   colonnes <type>hstore</type> d'être déclarées <literal>UNIQUE</literal> et
   d'être utilisées dans des expressions <literal>GROUP BY</literal>,
   <literal>ORDER BY</literal> et <literal>DISTINCT</literal>. L'ordre de tri
   pour les valeurs <type>hstore</type> n'est pas particulièrement utile mais
   ces index peuvent servir à des recherches d'équivalence. Créez des
   index de comparaisons <literal>=</literal> de la façon suivante&nbsp;:
  </para>
  <programlisting>
CREATE INDEX hidx ON testhstore USING BTREE (h);

CREATE INDEX hidx ON testhstore USING HASH (h);
  </programlisting>
 </sect2>

 <sect2>
  <title>Exemples</title>

  <para>
   Ajouter une clé, ou mettre à jour une clé existante avec une nouvelle
   valeur&nbsp;:
  </para>
  <programlisting>
UPDATE tab SET h = h || hstore('c', '3');
  </programlisting>

  <para>
   Supprimer une clé&nbsp;:
  </para>
  <programlisting>
UPDATE tab SET h = delete(h, 'k1');
  </programlisting>

  <para>
   Convertir un enregistrement (<type>record</type>) en un <type>hstore</type>&nbsp;:
  </para>
  <programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT hstore(t) FROM test AS t;
                   hstore
---------------------------------------------
 "col1"=&gt;"123", "col2"=&gt;"foo", "col3"=&gt;"bar"
(1 row)
  </programlisting>

  <para>
   Convertir un type <type>hstore</type> en un type <type>record</type>
   prédéfini&nbsp;:
  </para>
  <programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);

SELECT * FROM populate_record(null::test,
                              '"col1"=&gt;"456", "col2"=&gt;"zzz"');
 col1 | col2 | col3
------+------+------
  456 | zzz  |
(1 row)
  </programlisting>

  <para>
   Modifier un enregistrement existant en utilisant les valeurs provenant
   d'un <type>hstore</type>&nbsp;:
  </para>
  <programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT (r).* FROM (SELECT t #= '"col3"=&gt;"baz"' AS r FROM test t) s;
 col1 | col2 | col3
------+------+------
  123 | foo  | baz
(1 row)
  </programlisting>
 </sect2>

 <sect2>
  <title>Statistiques</title>

  <para>
   Le type <type>hstore</type>, du fait de sa libéralité intrinsèque, peut
   contenir beaucoup de clés différentes. C'est à l'application de vérifier
   la validité des clés. Les exemples ci-dessous présentent plusieurs
   techniques pour vérifier les clés et obtenir des statistiques.
  </para>

  <para>
   Exemple simple&nbsp;:
  </para>
  <programlisting>
SELECT * FROM each('aaa=&gt;bq, b=&gt;NULL, ""=&gt;1');
  </programlisting>

  <para>
   En utilisant une table&nbsp;:
  </para>
  <programlisting>
SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;
  </programlisting>

  <para>
   Statistiques en ligne&nbsp;:
  </para>
  <programlisting>
SELECT key, count(*) FROM
  (SELECT (each(h)).key FROM testhstore) AS stat
  GROUP BY key
  ORDER BY count DESC, key;
    key    | count
-----------+-------
 line      |   883
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 org       |   189
...................
  </programlisting>
 </sect2>

 <sect2>
  <title>Compatibilité</title>

  <para>
   À partir de PostgreSQL 9.0, <type>hstore</type> utilise une représentation
   interne différente des anciennes versions. Cela ne présente aucun obstacle
   pour les mises à jour par sauvegarde/restauration car la représentation
   textuelle utilisée dans la sauvegarde n'est pas changée.
  </para>

  <para>
   Dans le cas d'une mise à jour binaire, la compatibilité ascendante est
   maintenue en faisant en sorte que le nouveau code reconnaisse les données
   dans l'ancien format. Ceci aura pour conséquence une légère pénalité au
   niveau des performances lors du traitement de données qui n'auront pas été
   modifiées par le nouveau code. Il est possible de forcer une mise à jour de
   toutes les valeurs d'une colonne de la table en réalisant la requête
   <literal>UPDATE</literal> suivante&nbsp;:
  </para>
  <programlisting>
UPDATE nom_table SET col_hstore = col_hstore || '';
  </programlisting>

  <para>
   Une autre façon de le faire&nbsp;:
   <programlisting>
ALTER TABLE nom_table ALTER col_hstore TYPE col_hstore USING hstorecol || '';
   </programlisting>
   La méthode <command>ALTER TABLE</command> requiert un verrou exclusif sur
   la table, mais n'a pas pour résultat un gonflement de la table à cause
   d'anciennes versions des lignes.
  </para>

 </sect2>

 <sect2>
  <title>Transformations</title>

  <para>
   Des extensions supplémentaires sont disponibles, qui implémentent des
   transformations pour le type <type>hstore</type> pour les langages PL/Perl et
   PL/Python. Les extensions pour PL/Perl sont appelées
   <literal>hstore_plperl</literal> et <literal>hstore_plperlu</literal>, pour
   les deux versions de PL/Perl. Si vous installez ces transformations et si
   vous les spécifiez lors de la création d'une fonction, les valeurs
   <type>hstore</type> sont converties en hachage Perl. Les extensions pour
   PL/Python sont appelées <literal>hstore_plpythonu</literal>,
   <literal>hstore_plpython2u</literal> et
   <literal>hstore_plpython3u</literal> (voir <xref linkend="plpython-python23"/>
   pour la convention de nommage PL/Python). Si vous les utilisez,
   les valeurs <type>hstore</type> sont converties en dictionnaires Python.
  </para>

  <para>
   De ces extensions additionnelles, <literal>hstore_plperl</literal> est
   considéré <quote>trusted</quote>&nbsp;; pas les autres.
  </para>

  <caution>
   <para>
    Il est fortement recommandé que les extensions de transformation soient
    installées dans le même schéma que <filename>hstore</filename>. Sinon, il
    existe un risque de sécurité si le schéma d'une extension de
    transformation contient des objets définis par un utilisateur hostile.
   </para>
  </caution>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscou, Université de Moscou,
   Russie
  </para>

  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscou, Delta-Soft Ltd.,
   Russie
  </para>

  <para>
   Améliorations supplémentaires par Andrew Gierth <email>andrew@tao11.riddles.org.uk</email>,
   Royaume Uni
  </para>
 </sect2>

</sect1>
