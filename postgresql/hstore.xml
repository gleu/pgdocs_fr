<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="hstore" xreflabel="hstore">
 <title>hstore</title>

 <indexterm zone="hstore">
  <primary>hstore</primary>
 </indexterm>

 <para>
  Ce module code le type de données <type>hstore</type> pour stocker des
  ensembles de paires clé/valeur à l'intérieur d'une simple valeur
  <productname>PostgreSQL</productname>. Cela peut s'avérer utile dans divers
  cas, comme les lignes à attributs multiples rarement examinées ou les données
  semi-structurées. Les clés et les valeurs sont de simples chaînes de texte.
 </para>

 <sect2>
  <title>Représentation externe de <type>hstore</type></title>

  <para>
   La représentation textuelle d'une valeur <type>hstore</type>, utilisée en
   entrée et en sortie, inclut zéro ou plusieurs paires
   <replaceable>clé</replaceable>
   <literal>=&gt;</literal> <replaceable>valeur</replaceable> séparées par
   des virgules. Par exemple&nbsp;:

   <synopsis>
    k =&gt; v
    foo =&gt; bar, baz =&gt; whatever
    "1-a" =&gt; "anything at all"
   </synopsis>

   L'ordre des paires n'est pas significatif (et pourrait ne pas être reproduit
   en sortie). Les espaces blancs entre les paires ou autour des signes
   <literal>=&gt;</literal> sont ignorés. Les clés et valeurs entre guillemets
   peuvent inclure des espaces blancs, virgules, <literal>=</literal> ou
   <literal>&gt;</literal>. Pour inclure un guillemet double ou un antislash
   dans une clé ou une valeur, échappez-le avec un antislash.
  </para>

  <para>
   Chaque clé dans un <type>hstore</type> est unique. Si vous déclarez un
   <type>hstore</type> avec des clés dupliquées, seule une sera stockée dans
   <type>hstore</type> et il n'y a pas de garantie sur celle qui sera
   conservée&nbsp;:

   <programlisting>
SELECT 'a=&gt;1,a=&gt;2'::hstore;
  hstore
----------
 "a"=&gt;"1"
   </programlisting>
  </para>

  <para>
   Une valeur, mais pas une clé, peut être un <literal>NULL</literal> SQL. Par
   exemple&nbsp;:

   <programlisting>
    key =&gt; NULL
   </programlisting>

   Le mot-clé <literal>NULL</literal> est insensible à la casse. La chaîne
   <literal>NULL</literal> entre des guillemets doubles fait que le chaîne est
   traitées comme tout autre chaîne.
  </para>

  <note>
  <para>
   Gardez en tête que le format texte <type>hstore</type>, lorsqu'il est
   utilisé en entrée, s'applique <emphasis>avant</emphasis> tout guillemet ou
   échappement nécessaire. Si vous passez une valeur litérale de type
   <type>hstore</type> via un paramètre, aucun traitement supplémentaire n'est
   nécessaire. par contre, si vous la passez comme constante litérale entre
   guillemets, alors les guillemets simples et, suivant la configuration du
   paramètre <varname>standard_conforming_strings</varname>, les caractères
   antislash doivent être échappés correctement. Voir <xref
   linkend="sql-syntax-strings"/> pour plus d'informations sur la gestion des
   chaînes constantes.
  </para>
  </note>

  <para>
   En sortie, guillemets doubles autour des clés et valeurs, en permanence,
   même quand cela n'est pas strictement nécessaire.
  </para>

 </sect2>

 <sect2>
  <title>Opérateurs et fonctions <type>hstore</type></title>

  <para>
   Les opérateurs fournis par le module <literal>hstore</literal> sont
   montrés dans <xref linkend="hstore-op-table"/> et les fonctions sont
   disponibles dans <xref linkend="hstore-func-table"/>.
  </para>

  <table id="hstore-op-table">
   <title>Opérateurs<type>hstore</type></title>

   <tgroup cols="4">
    <thead>
     <row>
      <entry>Opérateur</entry>
      <entry>Description</entry>
      <entry>Exemple</entry>
      <entry>Résultat</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>hstore</type> <literal>-&gt;</literal> <type>text</type></entry>
      <entry>obtenir la valeur de la clé (<literal>NULL</literal> si inexistante)</entry>
      <entry><literal>'a=&gt;x, b=&gt;y'::hstore -&gt; 'a'</literal></entry>
      <entry><literal>x</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>-&gt;</literal> <type>text[]</type></entry>
      <entry>obtenir les valeurs pour les clés (<literal>NULL</literal> si inexistant)</entry>
      <entry><literal>'a=&gt;x, b=&gt;y, c=&gt;z'::hstore -&gt; ARRAY['c','a']</literal></entry>
      <entry><literal>{"z","x"}</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>||</literal> <type>hstore</type></entry>
      <entry>concaténation de <type>hstore</type></entry>
      <entry><literal>'a=&gt;b, c=&gt;d'::hstore || 'c=&gt;x, d=&gt;q'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"b", "c"=&gt;"x", "d"=&gt;"q"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>?</literal> <type>text</type></entry>
      <entry><type>hstore</type> contient-il une clé donnée&nbsp;?</entry>
      <entry><literal>'a=&gt;1'::hstore ? 'a'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>?&amp;</literal> <type>text[]</type></entry>
      <entry><type>hstore</type> contient-il toutes les clés indiquées&nbsp;?</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?&amp; ARRAY['a','b']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>?|</literal> <type>text[]</type></entry>
      <entry><type>hstore</type> contient-il une des clés spécifiées&nbsp;?</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?| ARRAY['b','c']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>@&gt;</literal> <type>hstore</type></entry>
      <entry>l'opérande gauche contient-il l'opérande droit&nbsp;?</entry>
      <entry><literal>'a=&gt;b, b=&gt;1, c=&gt;NULL'::hstore @&gt; 'b=&gt;1'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>&lt;@</literal> <type>hstore</type></entry>
      <entry>l'opérande gauche est-il contenu dans l'opérande
      droit&nbsp;?</entry>
      <entry><literal>'a=&gt;c'::hstore &lt;@ 'a=&gt;b, b=&gt;1, c=&gt;NULL'</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>text</type></entry>
      <entry>supprimer la clé à partir de l'opérande gauche</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'b'::text</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>text[]</type></entry>
      <entry>supprimer les clés à partir de l'opérande gauche</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - ARRAY['a','b']</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>hstore</type></entry>
      <entry>supprimer les paires correspondantes à partir de l'opérande
        gauche</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'a=&gt;4, b=&gt;2'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>record</type> <literal>#=</literal> <type>hstore</type></entry>
      <entry>remplacer les chanmps dans <type>record</type> avec des valeurs
        correspondantes à <type>hstore</type></entry>
      <entry>see Examples section</entry>
      <entry></entry>
     </row>

     <row>
      <entry><literal>%%</literal> <type>hstore</type></entry>
      <entry>convertir <type>hstore</type> en un tableau de clés et valeurs
        alternatives</entry>
      <entry><literal>%% 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{a,foo,b,bar}</literal></entry>
     </row>

     <row>
      <entry><literal>%#</literal> <type>hstore</type></entry>
      <entry>convertir <type>hstore</type> en un tableau clé/valeur à deux
        dimensions</entry>
      <entry><literal>%# 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{{a,foo},{b,bar}}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   Avant PostgreSQL 8.2, les opérateurs de contenance @&gt; et &lt;@ étaient
   appelés respectivement @ et ~. Ces noms sont toujours disponibles mais sont
   devenus obsolètes et pourraient éventuellement être supprimés.
   Les anciens noms sont inversés par rapport à la convention suivie par les
   types de données géométriques.
  </para>

  <table id="hstore-func-table">
   <title>Fonctions <type>hstore</type></title>

   <tgroup cols="5">
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Type en retour</entry>
      <entry>Description</entry>
      <entry>Exemple</entry>
      <entry>Résultat</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>hstore(record)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>construire un <type>hstore</type> à partir d'un RECORD ou d'un
        ROW</entry>
      <entry><literal>hstore(ROW(1,2))</literal></entry>
      <entry><literal>f1=&gt;1,f2=&gt;2</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>construire un <type>hstore</type> à partir d'un tableau, qui peut
      être soit un tableau clé/valeur soit un tableau à deux dimensions</entry>
      <entry><literal>hstore(ARRAY['a','1','b','2']) || hstore(ARRAY[['c','3'],['d','4']])</literal></entry>
      <entry><literal>a=&gt;1, b=&gt;2, c=&gt;3, d=&gt;4</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text[], text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>construire un <type>hstore</type> à partir des tableaux séparés
       pour les clés et valeurs</entry>
      <entry><literal>hstore(ARRAY['a','b'], ARRAY['1','2'])</literal></entry>
      <entry><literal>"a"=&gt;"1","b"=&gt;"2"</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text, text)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>construire un <type>hstore</type> à un seul élément</entry>
      <entry><literal>hstore('a', 'b')</literal></entry>
      <entry><literal>"a"=&gt;"b"</literal></entry>
     </row>

     <row>
      <entry><function>akeys(hstore)</function></entry>
      <entry><type>text[]</type></entry>
      <entry>récupérer les clés du <type>hstore</type> dans un tableau</entry>
      <entry><literal>akeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,b}</literal></entry>
     </row>

     <row>
      <entry><function>skeys(hstore)</function></entry>
      <entry><type>setof text</type></entry>
      <entry>récupérer les clés du <type>hstore</type> dans un ensemble</entry>
      <entry><literal>skeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
a
b
</programlisting></entry>
     </row>

     <row>
      <entry><function>avals(hstore)</function></entry>
      <entry><type>text[]</type></entry>
      <entry>récupérer les valeurs du <type>hstore</type> dans un tableau</entry>
      <entry><literal>avals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{1,2}</literal></entry>
     </row>

     <row>
      <entry><function>svals(hstore)</function></entry>
      <entry><type>setof text</type></entry>
      <entry>récupérer les valeurs du <type>hstore</type> dans un
      ensemble</entry>
      <entry><literal>svals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
1
2
</programlisting></entry>
     </row>

     <row>
      <entry><function>hstore_to_array(hstore)</function></entry>
      <entry><type>text[]</type></entry>
      <entry>récupérer les clés et les valeurs du <type>hstore</type> sous
      la forme d'un tableau de clés et valeurs alternées</entry>
      <entry><literal>hstore_to_array('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,1,b,2}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_matrix(hstore)</function></entry>
      <entry><type>text[]</type></entry>
      <entry>récupérer les clés et valeurs <type>hstore</type> sous la forme
        d'un tableau à deux dimensions</entry>
      <entry><literal>hstore_to_matrix('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{{a,1},{b,2}}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_json(hstore)</function></entry>
      <entry><type>json</type></entry>
      <entry>get <type>hstore</type> as a json value</entry>
      <entry><literal>hstore_to_json('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_json_loose(hstore)</function></entry>
      <entry><type>json</type></entry>
      <entry>get <type>hstore</type> as a json value, but attempting to distinguish numerical and boolean values so they are unquoted in the json</entry>
      <entry><literal>hstore_to_json_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>

     <row>
      <entry><function>slice(hstore, text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>extraire un sous-ensemble d'un <type>hstore</type></entry>
      <entry><literal>slice('a=&gt;1,b=&gt;2,c=&gt;3'::hstore, ARRAY['b','c','x'])</literal></entry>
      <entry><literal>"b"=&gt;"2", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><function>each(hstore)</function></entry>
      <entry><type>setof (key text, value text)</type></entry>
      <entry>récupérer les clés et valeurs du <type>hstore</type> dans un
      ensemble</entry>
      <entry><literal>select * from each('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
 key | value
-----+-------
 a   | 1
 b   | 2
</programlisting></entry>
     </row>

     <row>
      <entry><function>exist(hstore,text)</function></entry>
      <entry><type>boolean</type></entry>
      <entry>le <type>hstore</type> contient-il une clé donnée&nbsp;?</entry>
      <entry><literal>exist('a=&gt;1','a')</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><function>defined(hstore,text)</function></entry>
      <entry><type>boolean</type></entry>
      <entry>le <type>hstore</type> contient-il une valeur non <literal>NULL</literal> pour la
      clé&nbsp;?</entry>
      <entry><literal>defined('a=&gt;NULL','a')</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,text)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>supprimer toute paire correspondant à une clé donnée</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','b')</literal></entry>
      <entry><literal>"a"=>"1"</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,text[])</function></entry>
      <entry><type>hstore</type></entry>
      <entry>supprimer toute paire de clés correspondante</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2,c=&gt;3',ARRAY['a','b'])</literal></entry>
      <entry><literal>"c"=>"3"</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,hstore)</function></entry>
      <entry><type>hstore</type></entry>
      <entry>supprimer les paires correspondant à celle du second argument</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','a=&gt;4,b=&gt;2'::hstore)</literal></entry>
      <entry><literal>"a"=>"1"</literal></entry>
     </row>

     <row>
      <entry><function>populate_record(record,hstore)</function></entry>
      <entry><type>record</type></entry>
      <entry>remplacer les champs dans <type>record</type> avec les valeurs
        correspondant au <type>hstore</type></entry>
      <entry>voir la section Exemples</entry>
      <entry></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
     The function <function>hstore_to_json</function> is used when an <type>hstore</type>
     value is cast to <type>json</type>.
   </para>
  </note>

  <note>
   <para>
    La fonction <function>populate_record</function> est en fait déclarée avec
    <type>anyelement</type>, et non pas <type>record</type>, en tant que
    premier argument mais elle rejettera les types qui ne sont pas des RECORD
    avec une erreur d'exécution.
   </para>
  </note>
 </sect2>

 <sect2>
  <title>Index</title>

  <para>
   <type>hstore</type> dispose du support pour les index GiST et GIN pour les
   opérateurs <literal>@&gt;</literal>, <literal>?</literal>,
   <literal>?&amp;</literal> et <literal>?|</literal>. Par exemple&nbsp;:
  </para>
  <programlisting>
CREATE INDEX hidx ON testhstore USING GIST (h);

CREATE INDEX hidx ON testhstore USING GIN (h);
  </programlisting>

  <para>
   <type>hstore</type> supporte aussi les index <type>btree</type> ou
   <type>hash</type> pour l'opérateur <literal>=</literal>. Cela permet aux
   colonnes <type>hstore</type> d'être déclarées <literal>UNIQUE</literal> et
   d'être utilisées dans des expressions <literal>GROUP BY</literal>,
   <literal>ORDER BY</literal> et <literal>DISTINCT</literal>. L'ordre de tri
   pour les valeurs <type>hstore</type> n'est pas particulièrement utile mais
   ces index pourraient l'être pour des recherches d'équivalence. Créer des
   index de comparaisons <literal>=</literal> de la façon suivante&nbsp;:
  </para>
  <programlisting>
CREATE INDEX hidx ON testhstore USING BTREE (h);

CREATE INDEX hidx ON testhstore USING HASH (h);
  </programlisting>
 </sect2>

 <sect2>
  <title>Exemples</title>

  <para>
   Ajouter une clé, ou mettre à jour une clé existante avec une nouvelle
   valeur&nbsp;:
  </para>
  <programlisting>
UPDATE tab SET h = h || hstore('c', '3');
  </programlisting>

  <para>
   Supprimer une clé&nbsp;:
  </para>
  <programlisting>
UPDATE tab SET h = delete(h, 'k1');
  </programlisting>

  <para>
   Convertiir un type <type>record</type> en un <type>hstore</type>&nbsp;:
  </para>
  <programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT hstore(t) FROM test AS t;
                   hstore                    
---------------------------------------------
 "col1"=&gt;"123", "col2"=&gt;"foo", "col3"=&gt;"bar"
(1 row)
  </programlisting>

  <para>
   Convertir un type <type>hstore</type> en un type <type>record</type>
   prédéfini&nbsp;:
  </para>
  <programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);

SELECT * FROM populate_record(null::test,
                              '"col1"=&gt;"456", "col2"=&gt;"zzz"');
 col1 | col2 | col3 
------+------+------
  456 | zzz  | 
(1 row)
  </programlisting>

  <para>
   Modifier une enregistrement existant en utilisant les valeurs provenant
   d'un <type>hstore</type>&nbsp;:
  </para>
  <programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT (r).* FROM (SELECT t #= '"col3"=&gt;"baz"' AS r FROM test t) s;
 col1 | col2 | col3 
------+------+------
  123 | foo  | baz
(1 row)
  </programlisting>
 </sect2>

 <sect2>
  <title>Statistiques</title>

  <para>
   Le type <type>hstore</type>, du fait de sa libéralité intrinsèque, peut
   contenir beaucoup de clés différentes. C'est à l'application de vérifier
   la validité des clés. Les exemples ci-dessous présentent plusieurs
   techniques pour vérifier les clés et obtenir des statistiques.
  </para>

  <para>
   Exemple simple&nbsp;:
  </para>
  <programlisting>
SELECT * FROM each('aaa=&gt;bq, b=&gt;NULL, ""=&gt;1');
  </programlisting>

  <para>
   En utilisant une table&nbsp;:
  </para>
  <programlisting>
SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;
  </programlisting>

  <para>
   Statistiques en ligne&nbsp;:
  </para>
  <programlisting>
SELECT key, count(*) FROM
  (SELECT (each(h)).key FROM testhstore) AS stat
  GROUP BY key
  ORDER BY count DESC, key;
    key    | count
-----------+-------
 line      |   883
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 org       |   189
...................
  </programlisting>
 </sect2>

 <sect2>
  <title>Compatibilité</title>

  <para>
   À partir de PostgreSQL 9.0, <type>hstore</type> utilise une représentation
   interne différente des anciennes versions. Cela ne présente aucun obstacle
   pour les mises à jour par sauvegarde/restauration car la représentation
   textuelle utilisée dans la sauvegarde n'est pas changée.
  </para>

  <para>
   Dans le cas d'une mise à jour binaire, la compatibilité ascendante est
   maintenue en faisant en sorte que le nouveau code reconnaisse les données
   dans l'ancien format. Ceci aura pour conséquence une légère pénalité au
   niveau des performances lors du traitement de données qui n'aura pas été
   modifiée par le nouveau code. Il est possible de forcer une mise à jour de
   toutes les valeurs d'une colonne de la table en réalisant la requête
   <literal>UPDATE</literal> suivante&nbsp;:
  </para>
  <programlisting>
UPDATE nom_table SET col_hstore = col_hstore || '';
  </programlisting>

  <para>
   Une autre façon de le faire&nbsp;:
  <programlisting>
ALTER TABLE nom_table ALTER col_hstore TYPE col_hstore USING hstorecol || '';
  </programlisting>
   La méthode <command>ALTER TABLE</command> requiert un verrou exclusif sur
   la table mais n'a pas pour résultat une fragmentation de la table avec
   d'anciennes versions des lignes.
  </para>

 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscou, Université de Moscou,
   Russie
  </para>

  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscou, Delta-Soft Ltd.,
   Russie
  </para>

  <para>
   Additional enhancements by Andrew Gierth <email>andrew@tao11.riddles.org.uk</email>,
   United Kingdom
  </para>
 </sect2>

</sect1>
