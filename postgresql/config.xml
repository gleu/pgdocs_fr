<?xml version="1.0" encoding="UTF-8"?>
<chapter id="runtime-config">
 <title>Configuration du serveur</title>

 <indexterm>
  <primary>configuration</primary>
  <secondary>du serveur</secondary>
 </indexterm>

 <para>
  Un grand nombre de paramètres de configuration permettent de modifier le
  comportement du système de bases de données. Dans la première section de ce
  chapitre, les méthodes de configuration de ces paramètres sont décrites&nbsp;; les
  sections suivantes discutent de chaque paramètre en détail.
 </para>

 <sect1 id="config-setting">
  <title>Paramètres de configuration</title>

  <sect2 id="config-setting-names-values">
   <title>Noms et valeurs des paramètres</title>

   <para>
    Tous les noms de paramètres sont insensibles à la casse. Chaque
    paramètre prend une valeur d'un de ces cinq types&nbsp;: booléen, chaîne
    de caractères, entier, nombre à virgule flottante ou énumération(enum).
    Le type détermine la syntaxe pour configurer le paramètre&nbsp;:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <emphasis>Booléen</emphasis>&nbsp;: les valeurs peuvent être écrites
      sous les formes
      <literal>on</literal>,
      <literal>off</literal>,
      <literal>true</literal>,
      <literal>false</literal>,
      <literal>yes</literal>,
      <literal>no</literal>,
      <literal>1</literal>,
      <literal>0</literal>
      (toutes insensibles à la casse) ou tout préfixe non ambigu basé sur un
      d'entre eux.
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>Chaîne de caractères</emphasis>&nbsp;: En général, entoure la
      valeur de guillemets simples, doublant tout guillemet simple compris
      dans la valeur. Les guillemets peuvent habituellement être omis si la
      valeur est un nombre ou un identifiant simple. (Les valeurs qui
      correspondent à un mot clé SQL nécessitent d'être mises (entre
      guillemets dans certains contextes.)
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>Numérique (entier ou nombre à virgule
       flottante)</emphasis>&nbsp;: les paramètres numériques peuvent être
      indiqués au format entier ou virgule flottante&nbsp;; dans ce dernier
      cas, la valeur est arrondie à l'entier le plus proche si le paramètre
      est de type entier. Les paramètres de type entier acceptent en plus une
      valeur hexadécimale (commençant par <literal>0x</literal>) et une valeur
      octale (commençant par <literal>0</literal>), mais ces formats n'ont pas
      de virgule flottante. Ne pas utiliser de séparateurs pour les milliers.
      Les guillemets ne sont pas requis en dehors du format hexadécimal.

     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>Numérique avec unité</emphasis>&nbsp;:
      Quelques paramètres numériques ont une unité implicite car elles
      décrivent des quantités de mémoire ou de temps. L'unité pourra être
      des octets, des kilo-octets, des blocs (généralement 8&nbsp;ko), des millisecondes,
      des secondes ou des minutes. Une valeur numérique sans unité pour
      un de ces paramètres utilisera l'unité par défaut du paramètre, qui
      est disponible dans le champ
      <structname>pg_settings</structname>.<structfield>unit</structfield>.
      Pour plus de facilité, les valeurs de certains paramètres peuvent se
      voir ajouter une unité explicitement, par exemple <literal>'120
       ms'</literal> pour une valeur d'intervalle, et elles seront
      automatiquement converties suivant l'unité par défaut du paramètre.
      Notez que la valeur doit être écrite comme une chaîne de caractères
      (avec des guillemets) pour utiliser cette fonctionnalité. Le nom de
      l'unité est sensible à la casse, et il peut y avoir des espaces blancs
      entre la valeur numérique et l'unité.

      <itemizedlist>
       <listitem>
        <para>
         Les unités valides de mémoire sont <literal>B</literal> (octets), <literal>kB</literal> (kilo-octets),
         <literal>MB</literal> (méga-octets), <literal>GB</literal>
         (giga-octets) et <literal>TB</literal> (téra-octets).
         Le multiplieur pour les unités de mémoire est 1024, et non pas 1000.
        </para>
       </listitem>

       <listitem>
        <para>
         Les unités valides d'intervalle sont <literal>us</literal> (microsecondes),
         <literal>ms</literal> (millisecondes),
         <literal>s</literal> (secondes), <literal>min</literal> (minutes),
         <literal>h</literal> (heures) et <literal>d</literal> (jours).
        </para>
       </listitem>
      </itemizedlist>

      Si une valeur à virgule flottante est indiquée avec une unité, elle sera
      arrondie au multiple de la prochaine unité la plus petite. Par exemple,
      <literal>30.1 GB</literal> sera convertie en <literal>30822
       MB</literal>, et non pas <literal>32319628902 B</literal>. Si le
      paramètre est de type entier, un arrondissement final en entier survient
      après toute conversion d'unité.
     </para>
    </listitem>

    <listitem>
     <para>
      <emphasis>Énuméré</emphasis>&nbsp;:
      Les valeurs des paramètres de type énuméré sont écrits de la même façon
      que les valeurs des paramètres de type chaînes de caractères mais sont
      restreintes à un ensemble limité de valeurs. Les valeurs autorisées d'un
      paramètre spécifique sont disponibles dans le champ
      <structname>pg_settings</structname>.<structfield>enumvals</structfield>.
      Les valeurs des paramètres de type énuméré ne sont pas sensibles à la
      casse.
     </para>
    </listitem>
   </itemizedlist>

  </sect2>

  <sect2 id="config-setting-configuration-file">
   <title>Interaction avec les paramètres via le fichier de configuration</title>

   <para>
    La façon fondamentale de configurer les paramètres est d'éditer le fichier
    <filename>postgresql.conf</filename><indexterm><primary>postgresql.conf</primary></indexterm>,
    qui est normalement conservé dans le répertoire des données. Une copie par
    défaut est installé dans le répertoire de l'instance lors de
    l'initialisation. Un exemple de contenu peut être&nbsp;:
    <programlisting># Ceci est un commentaire
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB</programlisting>
    Un paramètre est indiqué par ligne. Le signe égal entre le nom et la
    valeur est optionnel. Les espaces n'ont pas de signification (sauf à
    l'intérieur d'une valeur entre guillemets) et les lignes vides sont
    ignorées. Les symboles dièse (<literal>#</literal>) désignent le reste de
    la ligne comme un commentaire. Les valeurs des paramètres qui ne sont pas
    des identificateurs simples ou des nombres doivent être placées entre
    guillemets simples. Pour intégrer un guillemet simple dans la valeur d'un
    paramètre, on écrit soit deux guillemets (c'est la méthode préférée) soit
    un antislash suivi du guillemet. Si le fichier contient plusieurs entrées
    pour le même paramètre, elles sont toutes ignorées sauf la dernière.
   </para>

   <para>
    Les paramètres configurés de cette façon fournissent des valeurs par défaut
    pour l'instance. Le paramétrage considéré par les sessions actives sera
    ces valeurs sauf si elles sont surchargées. Les sections suivantes décrivent
    les différentes façons dont bénéficient l'administrateur et l'utilisateur
    pour surcharger les valeurs par défaut.
   </para>

   <para>
    <indexterm>
     <primary><literal>include_if_exists</literal></primary>
     <secondary>dans le fichier de configuration</secondary>
    </indexterm>
     Il existe aussi une directive <literal>include_if_exists</literal>, qui
     agit de la même façon que la directive <literal>include</literal>, sauf
     si le fichier n'existe pas ou ne peut pas être lu. La directive
     <literal>include</literal> traitera cela comme une erreur, mais la directive
     <literal>include_if_exists</literal> tracera cet événement et continuera le
     traitement du fichier de configuration.
   </para>

   <para>
    <indexterm>
     <primary>SIGHUP</primary>
    </indexterm>
     Le fichier de configuration est relu à chaque fois que le processus
     principal du serveur reçoit un signal <systemitem>SIGHUP</systemitem>&nbsp;;
     ce signal est facilement envoyé en exécutant <literal>pg_ctl
     reload</literal> sur la ligne de commande shell ou en appelant la fonction
     SQL <function>pg_reload_conf()</function>. Le processus principal propage
     aussi ce signal aux processus serveurs en cours d'exécution, pour que les
     sessions existantes récupèrent aussi les nouvelles valeurs (ceci survient
     après qu'elles aient terminées d'exécuter la commande en cours
     d'exécution pour le client). Il est aussi possible d'envoyer le signal à
     un processus serveur directement. Certains paramètres ne sont pris en
     compte qu'au démarrage du serveur&nbsp;; tout changement de ces
     paramètres dans le fichier de configuration sera ignoré jusqu'au
     redémarrage du serveur. Les configurations invalides de paramètres
     sont aussi ignorées (mais tracées) lors du traitement du signal
     <systemitem>SIGHUP</systemitem>.
    </para>

    <para>
     En plus du fichier <filename>postgresql.conf</filename>, un répertoire
     des données d'un serveur <productname>PostgreSQL</productname> contient
     un fichier <filename>postgresql.auto.conf</filename>
     <indexterm><primary>postgresql.auto.conf</primary></indexterm>, qui a le
     même format que le fichier <filename>postgresql.conf</filename>.
     Cependant, il a pour but d'être édité automatiquement et non pas
     manuellement. Ce fichier contient les configurations réalisées avec la
     commande <xref linkend="sql-altersystem"/>. Ce fichier est lu quand le
     fichier <filename>postgresql.conf</filename> et lu, et son contenu prend
     effet de la même façon. Les paramètres configurés dans
     <filename>postgresql.auto.conf</filename> surchargent ceux configurés
     dans <filename>postgresql.conf</filename>.
    </para>

    <para>
     Des outils externes peuvent aussi modifier
     <filename>postgresql.auto.conf</filename>. Il n'est pas recommandé de le
     faire alors que le serveur est en cours d'exécution car une commande
     <command>ALTER SYSTEM</command> exécutée en même temps pourrait écraser
     d'autres modifications. De tels outils devraient simplement ajouter les
     nouveaux paramètres à la fin ou ils pourraient choisir de supprimer les
     paramètres dupliqués et/ou supprimer les commentaires (comme le fait
     <command>ALTER SYSTEM</command>).
    </para>

    <para>
     La vue système
     <link linkend="view-pg-file-settings"><structname>pg_file_settings</structname></link>
     peut être utile pour tester par avance des modifications dans les
     fichiers de configuration, ou pour diagnostiquer des problèmes si
     un signal <systemitem>SIGHUP</systemitem> n'a pas eu les effets
     désirés.
    </para>
   </sect2>

   <sect2 id="config-setting-sql-command-interaction">
    <title>Interaction avec les paramètres via SQL</title>
     <para>
      <productname>PostgreSQL</productname> fournit trois commandes SQL pour
      établir les valeurs par défaut de la configuration. La première, déjà
      mentionnée, est la commande <xref linkend="sql-altersystem"/>. Elle
      fournit un moyen accessible via le SQL pour modifier les valeurs
      globales par défaut&nbsp;; c'est l'équivalent fonctionnel de l'édition
      manuelle du fichier <filename>postgresql.conf</filename>. Il existe
      aussi deux commandes qui permettent la configuration des valeurs par
      défaut par base de données et par rôle&nbsp;:
     </para>

     <itemizedlist>
     <listitem>
      <para>
       La commande <xref linkend="sql-alterdatabase"/> permet de surcharger le
       paramétrage global suivant la base de connexion.
      </para>
     </listitem>

     <listitem>
      <para>
       La commande <xref linkend="sql-alterrole"/> permet de surcharger le
       paramétrage global suivant la base et l'utilisateur de connexion.
      </para>
     </listitem>
    </itemizedlist>

     <para>
      Les paramètres configurés avec <command>ALTER DATABASE</command> et
      <command>ALTER ROLE</command> sont appliqués seulement lors du
      démarrage d'une nouvelle session. Ils surchargent les valeurs obtenues
      dans les fichiers de configuration ou sur la ligne de commande du
      lancement du serveur. Ils constituent les valeurs par défaut pour le
      reste de la session. Notez que certains paramétrages ne peuvent pas
      être modifiés après le démarrage du serveur, et ne peuvent donc pas être
      configurés avec ces commandes (ou celles citées ci-dessous).
    </para>

     <para>
      Une fois qu'un client est connecté à la base de données,
      <productname>PostgreSQL</productname> fournit deux commandes SQL
      supplémentaires (et fonctions équivalentes) pour interagir avec les
      paramètres de configuration de la session&nbsp;:
    </para>

    <itemizedlist>
     <listitem>
     <para>
      La commande <xref linkend="sql-show"/> autorise l'inspection de la valeur
      actuelle de tous les paramètres. La fonction correspondante est
      <function>current_setting(setting_name text)</function>.
     </para>
     </listitem>

     <listitem>
      <para>
       La commande <xref linkend="sql-set"/> permet la modification de la valeur
       actuelle de certains paramètres qui peuvent être configurés localement
       pour une session. Elle n'a pas d'effet sur les autres sessions. La
       fonction correspondante est
       <function>set_config(setting_name, new_value, is_local)</function>.
      </para>
     </listitem>
    </itemizedlist>

   <para>
     De plus, la vue système <link
     linkend="view-pg-settings"><structname>pg_settings</structname></link> peut
     être utilisée pour visualiser et modifier les valeurs locales à la
     session&nbsp;:
   </para>

    <itemizedlist>
     <listitem>
      <para>
       Exécuter une requête sur cette vue est similaire à l'utilisation de la
       commande <command>SHOW ALL</command>. Cependant, elle fournit plus de
       détails et est beaucoup plus flexible, vu qu'il est possible d'ajouter
       des conditions de filtre et des jointures vers d'autres relations.
      </para>
     </listitem>

    <listitem>
     <para>
       Utiliser <xref linkend="sql-update"/> sur cette vue, pour mettre à jour
       la colonne <structname>setting</structname>, est équivalent à exécuter
       la commande <command>SET</command>. Par exemple, l'équivalent de
 <programlisting>
 SET paramètre_configuration TO DEFAULT;
    </programlisting>
    est&nbsp;:
    <programlisting>
 UPDATE pg_settings SET setting = reset_val WHERE name = 'paramètre_configuration';
    </programlisting>
   </para>
  </listitem>
 </itemizedlist>

</sect2>

<sect2>
 <title>Interaction avec les paramètre via le shell</title>
 <para>
  En plus de pouvoir configurer les valeurs globales des paramètres et
  d'attacher une configuration spécifique aux bases et aux rôles, vous
  pouvez fournir un paramétrage à <productname>PostgreSQL</productname> via
  des options du shell. Le serveur et la bibliothèque client
  <application>libpq</application> acceptent des valeurs de paramètres
  via le shell.
 </para>

 <itemizedlist>
  <listitem>
   <para>
    Lors du démarrage du serveur, des configurations de paramètres peuvent
    être passées à la commande <command>postgres</command> via le paramètre
    en ligne de commande <option>-c</option>. Par exemple,
    <programlisting>
postgres -c log_connections=yes -c log_destination='syslog'
    </programlisting>
    Les paramétrages réalisés de cette façon surchargent ceux fournis dans
    le fichier <filename>postgresql.conf</filename> ou via la commande
    <command>ALTER SYSTEM</command>, donc ils ne peuvent pas être changés
    globalement sans redémarrer le serveur.
   </para>
  </listitem>

  <listitem>
   <para>
    Lors du démarrage d'une session client via <application>libpq</application>,
    un paramétrage peut être spécifié en utilisant la variable d'environnement
    <envar>PGOPTIONS</envar>. Le paramétrage établi ainsi constitue des valeurs
    par défaut pour la durée de la session, mais n'affecte pas les autres
    sessions. Pour des raisons historiques, le format de
    <envar>PGOPTIONS</envar> est similaire à celui utilisé lors du lancement
    de la commande <command>postgres</command>. Spécifiquement, l'option
    <option>-c</option> doit être indiquée. Par exemple&nbsp;:
    <programlisting>
env PGOPTIONS="-c geqo=off -c statement_timeout=5min" psql
    </programlisting>
   </para>

   <para>
    Les autres clients et autres bibliothèques peuvent fournir leur propres
    mécanismes via la shell ou autrement, pour permettre à l'utilisateur de
    modifier le paramétrage de la session sans avoir à utiliser des commandes
    SQL.
   </para>
  </listitem>
 </itemizedlist>
</sect2>

<sect2 id="config-includes">
 <title>Gestion du contenu des fichiers de configuration</title>

 <para>
  <productname>PostgreSQL</productname> fournit plusieurs fonctionnalités
  pour diviser le fichier de configuration
  <filename>postgresql.conf</filename> en plusieurs sous-fichiers. Ces
  fonctionnalités sont tout particulièrement utiles quand plusieurs
  serveurs sont à gérer alors qu'ils partagent une partie de la
  configuration.
 </para>

 <para>
  <indexterm>
   <primary><literal>include</literal></primary>
   <secondary>dans le fichier de configuration</secondary>
  </indexterm>
  En plus des paramètres, le fichier <filename>postgresql.conf</filename>
  peut contenir des <firstterm>directives d'inclusion</firstterm>, qui
  précisent les autres fichiers à lire et à traiter comme s'ils étaient
  insérés dans le fichier de configuration à cet emplacement. Cette
  fonctionnalité permet de diviser un fichier de configuration en
  plusieurs parties séparées. Les directives d'inclusion ressemblent
  à&nbsp;:
  <programlisting>
include 'nom_fichier'
  </programlisting>
  Si le nom du fichier n'est pas un chemin absolu, il est considéré comme
  relatif au répertoire contenant le fichier de configuration de
  référence. Les inclusions peuvent être imbriquées.
 </para>

 <para>
  <indexterm>
   <primary><literal>include_if_exists</literal></primary>
   <secondary>dans le fichier de configuration</secondary>
  </indexterm>
  Il existe aussi une directive <literal>include_if_exists</literal> qui
  agit de la même façon que la directive <literal>include</literal> sauf
  si le fichier référencé n'existe pas ou ne peut pas être lu. La
  directive <literal>include</literal> considère ces états comme une
  condition d'erreur mais <literal>include_if_exists</literal> ne fait
  que tracer un message et continue le traitement du fichier de
  configuration de référence.
 </para>

 <para>
  <indexterm>
   <primary><literal>include_dir</literal></primary>
   <secondary>dans le fichier de configuration</secondary>
  </indexterm>
  Le fichier <filename>postgresql.conf</filename> peut aussi contenir
  <literal>include_dir directives</literal>, qui précise un répertoire
  entier de fichiers de configuration à inclure. Il s'utilise de la
  même façon&nbsp;:
  <programlisting>
 include_dir 'répertoire'
  </programlisting>
  Les noms de répertoire relatifs sont pris comme ayant comme base le
  répertoire du fichier de configuration. Dans ce répertoire spécifique,
  seuls les fichiers dont le nom finit avec le suffixe
  <literal>.conf</literal> seront inclus. Les noms de fichiers qui
  commencent avec le caractère <literal>.</literal> sont aussi ignorés,
  pour éviter des erreurs vu que ces fichiers sont cachés sur certaines
  plateformes. Plusieurs fichiers dans un répertoire d'inclusion sont
  traités dans l'ordre des noms de fichiers (d'après les règles de la
  locale C, autrement dit les numéros avant les lettres, et les majuscules
  avant les minuscules).
 </para>

 <para>
  Les fichiers et répertoires inclus peuvent être utilisés pour séparer
  logiquement les portions de la configuration de la base de données,
  plutôt que d'avoir un gigantesque fichier
  <filename>postgresql.conf</filename>. Songez à une société qui a deux
  serveurs de bases de données, chacun avec une quantité de mémoire
  différente. Il existe vraisemblablement des éléments de la configuration
  qui vont être partagés entre les deux serveurs, comme par exemple la
  configuration des traces. Mais les paramètres relatifs à la mémoire sur
  le serveur varieront entre les deux. Et il pourrait aussi y avoir une
  personnalisation des serveurs. Une façon de gérer cette situation est
  de casser les changements de configuration en trois fichiers. Vous
  pouvre ajouter cela à la fin de votre fichier
  <filename>postgresql.conf</filename> pour les inclure&nbsp;:
  <programlisting>
 include 'commun.conf'
 include 'memoire.conf'
 include 'serveur.conf'
  </programlisting>
  Tous les systèmes auraient le même <filename>commun.conf</filename>.
  Chaque serveur avec une quantité particulière de mémoire pourrait partager
  le même <filename>memory.conf</filename>. Vous pourriez en avoir un pour
  tous les serveurs disposant de 8 Go de RAM, un autre pour ceux ayant 16 Go.
  Enfin, <filename>serveur.conf</filename> pourrait avoir les configurations
  réellement spécifiques à un serveur.
 </para>

 <para>
  Une autre possibilité revient à créer un répertoire de fichiers de
  configuration et de placer les fichiers dans ce répertoire. Par
  exemple, un répertoire <filename>conf.d</filename> pourrait être
  référencé à la fin du <filename>postgresql.conf</filename>&nbsp;:
  <screen>
 include_dir 'conf.d'
  </screen>
  Ensuite, vous pourriez renommer les fichiers dans le répertoire
  <filename>conf.d</filename> de cette façon&nbsp;:
  <screen>
 00commun.conf
 01memoire.conf
 02serveur.conf
  </screen>
  Cette convention de nommage établit un ordre clair dans lequel ces
  fichiers sont chargés. C'est important parce que seul le dernier
  paramétrage d'un paramètre particulier sera utilisé lors de la
  lecture de la configuration par le serveur. Dans cet exemple,
  un paramètre configuré dans
  <filename>conf.d/02server.conf</filename> surchargera la configuration
  du même paramètre dans <filename>conf.d/01memory.conf</filename>.
 </para>

 <para>
  Vous pouvez utiliser à la place cette approche pour nommer les fichiers
  de façon claire&nbsp;:
  <screen>
 00commun.conf
 01memoire-8Go.conf
 02serveur-truc.conf
  </screen>
  Ce type d'arrangement donne un nom unique pour chaque variation du
  fichier de configuration. Ceci peut aider à éliminer l'ambiguïté
  quand plusieurs serveurs ont leur configuration stockée au même endroit,
  par exemple dans un dépôt de contrôle de version. (Stocker les fichiers
  de configuration de la base avec un outil de contrôle de version est
  une autre bonne pratique à considérer.)
 </para>
</sect2>
</sect1>

<sect1 id="runtime-config-file-locations">
<title>Emplacement des fichiers</title>

<para>
 En plus du fichier <filename>postgresql.conf</filename> déjà mentionné,
 <productname>PostgreSQL</productname> utilise deux autres fichiers de
 configuration éditables manuellement. Ces fichiers contrôlent
 l'authentification du client (leur utilisation est discutée dans le
 <xref linkend="client-authentication"/>). Par défaut, les trois fichiers de
 configuration sont stockés dans le répertoire data du cluster de bases
 de données. Les paramètres décrits dans cette section permettent de
 déplacer les fichiers de configuration. Ce qui peut en faciliter
 l'administration. Il est, en particulier, souvent plus facile de
 s'assurer que les fichiers de configuration sont correctement sauvegardés
 quand ils sont conservés à part.
</para>

<variablelist>
 <varlistentry id="guc-data-directory" xreflabel="data_directory">
  <term><varname>data_directory</varname> (<type>string</type>)</term>
  <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>data_directory</varname></primary>
   </indexterm>
   <para>
    Indique le répertoire à utiliser pour le stockage des données.
    Ce paramètre ne peut être initialisé qu'au lancement du
    serveur.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-config-file" xreflabel="config_file">
  <term><varname>config_file</varname> (<type>string</type>)</term>
  <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>config_file</varname>
    </primary>
   </indexterm>
   <para>
    Indique le fichier de configuration principal du serveur
    (appelé <filename>postgresql.conf</filename>). Ce paramètre
    ne peut être initialisé que sur la ligne de commande de
    <command>postgres</command>.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-hba-file" xreflabel="hba_file">
  <term><varname>hba_file</varname> (<type>string</type>)</term>
  <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>hba_file</varname></primary>
   </indexterm>
   <para>
    Indique le fichier de configuration de l'authentification
    fondée sur l'hôte (appelé <filename>pg_hba.conf</filename>).
    Ce paramètre ne peut être initialisé qu'au lancement du
    serveur.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-ident-file" xreflabel="ident_file">
  <term><varname>ident_file</varname> (<type>string</type>)</term>
  <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>ident_file</varname></primary>
   </indexterm>
   <para>
    Indique le fichier de configuration pour la correspondance des
    noms d'utilisateurs, fichier appelé
    <filename>pg_ident.conf</filename>). Voir <xref
    linkend="auth-username-maps"/> pour plus de détails.
    Ce paramètre ne peut être initialisé qu'au lancement du
    serveur.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-external-pid-file"
 xreflabel="external_pid_file">
  <term><varname>external_pid_file</varname> (<type>string</type>)</term>
  <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>external_pid_file</varname></primary>
   </indexterm>
   <para>
    Indique le nom d'un fichier supplémentaire d'identifiant de
    processus (PID) créé par le serveur à l'intention des
    programmes d'administration du serveur.
    Ce paramètre ne peut être initialisé qu'au lancement du
    serveur.
   </para>
  </listitem>
 </varlistentry>
</variablelist>

<para>
 Dans une installation par défaut, aucun des paramètres ci-dessus n'est
 configuré explicitement. À la place, le répertoire des données est
 indiqué par l'option <option>-D</option> en ligne de commande ou par
 la variable d'environnement <envar>PGDATA</envar>. Les fichiers de
 configuration sont alors tous disponibles dans le répertoire des données.
</para>

<para>
 Pour conserver les fichiers de configuration dans un répertoire
 différent de data, l'option <option>-D</option> de la ligne de
 commande <command>postgres</command>
 ou la variable d'environnement <envar>PGDATA</envar> doit pointer sur le
 répertoire contenant les fichiers de configuration. Le paramètre
 <varname>data_directory</varname> doit alors être configuré dans le
 fichier <filename>postgresql.conf</filename> (ou sur la ligne de commande) pour
 préciser où est réellement situé le répertoire des données.
 <varname>data_directory</varname> surcharge <option>-D</option> et
 <envar>PGDATA</envar> pour l'emplacement du répertoire des données,
 mais pas pour l'emplacement des fichiers de configuration.
</para>

<para>
 les noms des fichiers de configuration et leur emplacement peuvent
 être indiqués individuellement en utilisant les
 paramètres <varname>config_file</varname>, <varname>hba_file</varname> et/ou
 <varname>ident_file</varname>. <varname>config_file</varname> ne peut être
 indiqué que sur la ligne de commande de <command>postgres</command>
 mais les autres peuvent être placés dans le fichier de configuration
 principal. Si les trois paramètres et <varname>data_directory</varname> sont
 configurés explicitement, alors il n'est pas nécessaire d'indiquer
 <option>-D</option> ou <envar>PGDATA</envar>.
</para>

<para>
 Lors de la configuration de ces paramètres, un chemin relatif est
 interprété d'après le répertoire d'où est lancé <command>postgres</command>.
</para>

</sect1>

<sect1 id="runtime-config-connection">
<title>Connexions et authentification</title>

<sect2 id="runtime-config-connection-settings">
 <title>Paramètres de connexion</title>

 <variablelist>

  <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
   <term><varname>listen_addresses</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>listen_addresses</varname>
     </primary>
    </indexterm>
    <para>
     Indique les adresses TCP/IP sur lesquelles le serveur écoute
     les connexions en provenance d'applications clientes. La valeur prend la forme
     d'une liste de noms d'hôte ou d'adresses IP numériques séparés
     par des virgules. L'entrée spéciale <literal>*</literal> correspond
     à toutes les interfaces IP disponibles.  L'enregistrement
     <literal>0.0.0.0</literal> permet l'écoute sur toutes les
     adresses IPv4 et <literal>::</literal> permet l'écoute sur
     toutes les adresses IPv6. Si la liste est vide, le
     serveur n'écoute aucune interface IP, auquel cas seuls les
     sockets de domaine Unix peuvent être utilisées pour s'y connecter.
     La valeur par défaut est <systemitem
     class="systemname">localhost</systemitem>, ce qui n'autorise que
     les connexions TCP/IP locales de type <quote>loopback</quote>.
     Bien que l'authentification client (<xref
     linkend="client-authentication"/>) permet un contrôle très fin
     sur les accès au serveur, <varname>listen_addresses</varname>
     contrôle les interfaces pouvant accepter des tentatives de
     connexion, ce qui permet d'empêcher des demandes répétées de connexion
     malveillantes sur des interfaces réseau non sécurisées. Ce paramètre
     ne peut être configuré qu'au lancement du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-port" xreflabel="port">
   <term><varname>port</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>port</varname></primary>
    </indexterm>
    <para>
     Le port TCP sur lequel le serveur écoute&nbsp;; 5432 par défaut.
     Le même numéro de port est utilisé pour toutes les
     adresses IP que le serveur écoute. Ce paramètre ne peut
     être configuré qu'au lancement du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-connections" xreflabel="max_connections">
   <term><varname>max_connections</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>max_connections</varname>
     </primary>
    </indexterm>
    <para>
     Indique le nombre maximum de connexions concurrentes au serveur de
     base de données. La valeur par défaut typique est de 100 connexions,
     mais elle peut être moindre si les paramètres du noyau ne le supportent pas
     (ce qui est déterminé lors de l'<application>initdb</application>). Ce
     paramètre ne peut être configuré qu'au lancement du serveur.
    </para>

    <para>
     Lors de l'exécution d'un serveur en attente, vous devez configurer ce
     paramètre à la même valeur ou à une valeur plus importante que sur le
     serveur maître. Sinon, des requêtes pourraient ne pas être autorisées
     sur le serveur en attente.
    </para>

    <para>
     Lorsque vous modifiez cette valeur, pensez également à ajuster
     <xref linkend="guc-max-parallel-workers"/>,
     <xref linkend="guc-max-parallel-workers-maintenance"/> et
     <xref linkend="guc-max-parallel-workers-per-gather"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-superuser-reserved-connections" xreflabel="superuser_reserved_connections">
   <term><varname>superuser_reserved_connections</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>superuser_reserved_connections</varname></primary>
    </indexterm>
    <para>
     Indique le nombre de connecteurs (<quote>slots</quote>) réservés
     aux connexions des superutilisateurs <productname>PostgreSQL</productname>.
     Au plus <xref linkend="guc-max-connections"/> connexions peuvent être
     actives simultanément. Dès que le nombre de connexions
     simultanément actives atteint <varname>max_connections</varname> moins
     <varname>superuser_reserved_connections</varname>, les nouvelles
     connexions ne sont plus acceptées que pour les superutilisateurs, et aucune
     nouvelle connexion de réplication ne sera acceptée.
    </para>

    <para>
     La valeur par défaut est de trois connexions. La valeur doit être plus
     petite que la valeur de <varname>max_connections</varname>. Ce paramètre
     ne peut être configuré qu'au lancement du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-unix-socket-directories" xreflabel="unix_socket_directories">
   <term><varname>unix_socket_directories</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>unix_socket_directories</varname></primary>
    </indexterm>
    <para>
     Indique le répertoire pour le(s) socket(s) de domaine Unix sur
     lequel le serveur va écouter les connexions des applications
     clientes. Plusieurs sockets peuvent être créés en listant plusieurs
     répertoires et en les séparant par des virgules. Les espaces blancs
     entre les entrées sont ignorés. Entourer un nom de répertoire avec
     des guillemets doubles si vous avez besoin d'inclure un espace blanc
     ou une virgule dans son nom. Une valeur vide désactive l'utilisation
     des sockets de domaine Unix, auquel cas seules les sockets TCP/IP
     pourront être utilisées pour se connecter au serveur. La valeur
     par défaut est habituellement <filename>/tmp</filename>, mais cela
     peut se changer au moment de la contruction. Sur Windows, la valeur par
     défaut est vide, ce qui signifie qu'aucun socket de domaine Unix n'est
     créé par défaut. Ce paramètre ne peut être configuré qu'au lancement du
     serveur.
    </para>

    <para>
     En plus du fichier socket, qui est nommé
     <literal>.s.PGSQL.<replaceable>nnnn</replaceable></literal> où
     <replaceable>nnnn</replaceable> est le numéro de port du serveur, un
     fichier ordinaire nommé
     <literal>.s.PGSQL.<replaceable>nnnn</replaceable>.lock</literal> sera
     créé dans chaque répertoire de <varname>unix_socket_directories</varname>.
     Les deux fichiers ne doivent pas être supprimés manuellement.
    </para>

    <para>
     Ce paramètre n'a pas de sens sur les systèmes qui ignorent complètement
     les droits sur les sockets, comme Solaris à partir de la version 10.
     Un effet similaire peut être atteint en pointant
     <varname>unix_socket_directories</varname> vers un répertoire ayant
     un droit de recherche limité à l'audience acceptée.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
   <term><varname>unix_socket_group</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>unix_socket_group</varname>
     </primary>
    </indexterm>
    <para>
     Configure le groupe propriétaire des sockets de domaine Unix
     (l'utilisateur propriétaire des sockets est toujours l'utilisateur
     qui lance le serveur). En combinaison avec le paramètre
     <varname>unix_socket_permissions</varname>, ceci peut être
     utilisé comme un mécanisme de contrôle d'accès supplémentaire pour
     les connexions de domaine Unix. Par défaut, il s'agit d'une
     chaîne vide, ce qui sélectionne le groupe par défaut de l'utilisateur
     courant. Ce paramètre ne peut être configuré qu'au lancement du
     serveur.
    </para>

    <para>
     Ce paramètre n'est pas supporté sous Windows. Sa configuration sera
     ignorée.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
   <term><varname>unix_socket_permissions</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>unix_socket_permissions</varname></primary>
    </indexterm>
    <para>
     Configure les droits d'accès aux sockets de domaine Unix. Ce socket
     utilise l'ensemble habituel des droits du système de fichiers
     Unix. Ce paramètre doit être indiqué sous une forme
     numérique telle qu'acceptée par les appels système
     <function>chmod</function> et <function>umask</function> (pour
     utiliser le format octal, ce nombre doit commencer avec un
     <literal>0</literal> (zéro)).
    </para>

    <para>
     Les droits par défaut sont <literal>0777</literal>, signifiant que
     tout le monde peut se connecter. Les alternatives raisonnables sont
     <literal>0770</literal> (utilisateur et groupe uniquement, voir
     aussi <varname>unix_socket_group</varname>) et
     <literal>0700</literal> (utilisateur uniquement) (pour un
     socket de domaine Unix, seul le droit d'accès en écriture
     importe&nbsp;; il n'est donc pas nécessaire de donner ou de révoquer les
     droits de lecture ou d'exécution).
    </para>

    <para>
     Ce mécanisme de contrôle d'accès est indépendant de celui décrit
     dans le <xref linkend="client-authentication"/>.
    </para>

    <para>
     Ce paramètre ne peut être configuré qu'au lancement du serveur.
    </para>

    <para>
     Ce paramètre est hors sujet sur certains systèmes comme Solaris, à partir
     de sa version 10, qui ignorent complètement les droits des sockets. Là,
     vous pouvez obtenir le même effet en pointant
     <varname>unix_socket_directories</varname> vers un répertoire ayant les
     droits de recherche limités à l'audience souhaité.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-bonjour" xreflabel="bonjour">
   <term><varname>bonjour</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>bonjour</varname></primary>
    </indexterm>
    <para>
     Active la promotion de l'existence du serveur via le protocole
     <productname>Bonjour</productname>. Désactivé par défaut, ce paramètre
     ne peut être configuré qu'au lancement du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
   <term><varname>bonjour_name</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>bonjour_name</varname></primary>
    </indexterm>
    <para>
     Indique le nom du service <productname>Bonjour</productname>.
     Le nom de l'ordinateur est utilisé si ce paramètre est configuré avec
     une chaîne vide (ce qui est la valeur par défaut). Ce paramètre est
     ignoré si le serveur n'est pas compilé avec le support
     <productname>Bonjour</productname>.
     Ce paramètre ne peut être configuré qu'au lancement du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
   <term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>tcp_keepalives_idle</varname></primary>
    </indexterm>
    <para>
     Indique la durée sans activité réseau après laquelle le système
     d'exploitation devra envoyer un message TCP au client. Si la valeur de ce
     paramètre est indiquée sans unité, la valeur est supposée être en
     secondes. Une valeur de 0 (valeur par défaut) utilise la valeur par
     défaut du système d'exploitation. Ce paramètre est seulement
     supporté par les systèmes qui supportent les symboles
     <symbol>TCP_KEEPIDLE</symbol> ou une option socket équivalente et
     sur Windows&nbsp;; sur les autres systèmes, ce paramètre doit valoir
     zéro.
     Pour les sessions connectées via une socket de domaine Unix, ce
     paramètre est ignoré et vaut toujours zéro.
     <note>
      <para>
       Sur Windows, une valeur de 0 configurera ce paramètre à deux heures
       car Windows ne fournit pas un moyen de lire la valeur par défaut du
       système.
      </para>
     </note>
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
   <term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>tcp_keepalives_interval</varname></primary>
    </indexterm>
    <para>
     Indique la durée après laquelle un message TCP keepalive qui n'a pas été
     répondu par le client devra être transmis de nouveau. Si la valeur de ce
     paramètre est indiquée sans unité, la valeur est supposée être en
     secondes. Une valeur de 0 (valeur par défaut) utilise la valeur par
     défaut du système d'exploitation. Ce paramètre est
     seulement supporté par les systèmes qui supportent le symbole
     <symbol>TCP_KEEPINTVL</symbol>  ou une option socket équivalente et sur
     Windows&nbsp;; sur les autres systèmes, ce paramètre doit valoir zéro.
     Pour les sessions connectées via une socket de domaine Unix, ce
     paramètre est ignoré et vaut toujours zéro.
     <note>
      <para>
       Sur Windows, une valeur de 0 configurera ce paramètre à une seconde
       car Windows ne fournit pas un moyen de lire la valeur par défaut du
       système.
      </para>
     </note>
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
   <term><varname>tcp_keepalives_count</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>tcp_keepalives_count</varname></primary>
    </indexterm>
    <para>
     Indique le nombre de messages TCP keepalive pouvant être perdus avant
     que la connexion au serveur soit considérée comme morte. Une valeur de
     0 (valeur par défaut) revient à utiliser la valeur système par défaut. Ce paramètre est
     seulement supporté par les systèmes qui supportent le symbole
     <symbol>TCP_KEEPCNT</symbol> ou une option socket équivalente, et sur
     Windows&nbsp;; sur les autres systèmes, ce paramètre doit valoir zéro.
     Pour les sessions connectées via une socket de domaine Unix, ce
     paramètre est ignoré et vaut toujours zéro.
     <note>
      <para>
       Ce paramètre n'est pas supporté sur Windows et doit donc valoir
       zéro.
      </para>
     </note>
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-tcp-user-timeout" xreflabel="tcp_user_timeout">
   <term><varname>tcp_user_timeout</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>tcp_user_timeout</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique la durée pendant laquelle les données transmises peuvent rester
     sans réponse avec que la connexion TCP ne soit fermée.Si la valeur de ce
     paramètre est indiquée sans unité, la valeur est supposée être en
     millisecondes. Une valeur de 0 (valeur par défaut) utilise la valeur par
     défaut du système d'exploitation.
     Ce paramètre est uniquement accepté sur les paramètres
     qui acceptent <symbol>TCP_USER_TIMEOUT</symbol>&nbsp;; sur les autres
     systèmes, il doit valoir zéro. Pour les sessions connectées via un socket
     de domaine Unix, ce paramètre est ignoré et vaut toujours zéro.
    </para>
    <note>
     <para>
      Ce paramètre n'est pas supporté sur Windows et doit valoir zéro.
     </para>
    </note>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>
<sect2 id="runtime-config-connection-authentication">
 <title>Authentification</title>

 <variablelist>
  <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
   <term><varname>authentication_timeout</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm><primary>délai</primary><secondary>authentification client</secondary></indexterm>
    <indexterm><primary>authentification client</primary><secondary>délai lors de</secondary></indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>authentication_timeout</varname></primary>
    </indexterm>
    <para>
     Temps maximum pour terminer l'authentification du client, en
     secondes. Si un client n'a pas terminé le protocole d'authentification
     dans ce délai, le serveur ferme la connexion. Cela protège le serveur
     des clients bloqués occupant une connexion indéfiniment. Si la valeur de
     ce paramètre est donné sans unité, l'unité sera la seconde. La valeur par
     défaut est d'une minute.
     Ce paramètre peut être configuré au lancement du serveur et dans le fichier
     <filename>postgresql.conf</filename>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-password-encryption" xreflabel="password_encryption">
   <term><varname>password_encryption</varname> (<type>enum</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>password_encryption</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Détermine l'algorithme utilisé pour chiffrer un mot de passe
     spécifié dans <xref linkend="sql-createrole"/>
     ou <xref linkend="sql-alterrole"/>. Le défaut est <literal>md5</literal>
     qui stocke le <foreignphrase>hash</foreignphrase> MD5 du mot de passe
     (<literal>on</literal> est aussi accepté comme alias de
     <literal>md5</literal>). Passer ce paramètre à
     <literal>scram-sha-256</literal> chiffrera le mot de passe avec
     SCRAM-SHA-256.
    </para>
    <para>
     Notez que des clients plus anciens pourraient ne pas disposer du support
     pour l'authentification SCRAM, et ne fonctionneraient pas avec des
     mots de passe chiffrés avec SCRAM-SHA-256. Voir
     <xref linkend="auth-password"/> pour les détails.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
   <term><varname>krb_server_keyfile</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>krb_server_keyfile</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique la position du fichier de clé du serveur Kerberos. Voir
     <xref linkend="gssapi-auth"/> pour les détails. Ce paramètre ne peut
     être positionné que dans le fichier <filename>postgresql.conf</filename>
     ou sur la ligne de commande du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
   <term><varname>krb_caseins_users</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>krb_caseins_users</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique si les noms d'utilisateur GSSAPI doivent être traités en
     respectant la casse. Le défaut est  <literal>off</literal> (sensible à
     la casse). Ce paramètre ne peut être positionné que dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
   <term><varname>db_user_namespace</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>db_user_namespace</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Ce paramètre autorise des noms d'utilisateur par base de données. Il
     est à <literal>off</literal> par défaut. Ce paramètre ne peut
     être positionné que dans le fichier <filename>postgresql.conf</filename>
     ou sur la ligne de commande du serveur.
    </para>

    <para>
     S'il est activé, vous devez créer des utilisateurs en tant que
     <replaceable>username@dbname</replaceable>. Quand
     <replaceable>username</replaceable> est transmis par une connexion
     cliente, <literal>@</literal> et le nom de la base sont ajoutés au
     nom d'utilisateur, et ce nom spécifique à la base sera recherché par
     le serveur. Notez que si vous créez des utilisateurs dont le nom
     comprend un <literal>@</literal>, vous devrez ajouter des guillemets
     autour de ce nom.
    </para>

    <para>
     Même avec ce paramètre activé, vous pouvez toujours créer les
     utilisateurs globaux ordinaires. Ajoutez simplement <literal>@</literal>
     en donnant le nom dans le client, comme par exemple
     <literal>pierre@</literal>. Le <literal>@</literal> sera supprimé
     avant la recherche de l'utilisateur par le serveur.
    </para>

    <para>
     <varname>db_user_namespace</varname> provoque un écart entre les
     représentations des noms du client et du serveur. Les tests
     d'authentification sont toujours fait avec le nom d'utilisateur du
     serveur, donc les méthodes d'authentification doivent être configurées
     avec le nom connu du serveur, pas celui du client. Comme
     <literal>md5</literal> utilise le nom d'utilisateur comme sel sur
     le client comme sur le serveur, <literal>md5</literal> ne peut être
     utilisé avec <varname>db_user_namespace</varname>.
    </para>

    <note>
     <para>
      Cette option est considérée comme une mesure provisoire jusqu'à ce
      qu'une solution complète soit trouvée. À ce moment, cette option sera
      supprimée.
     </para>
    </note>
   </listitem>
  </varlistentry>
 </variablelist>
</sect2>

<sect2 id="runtime-config-connection-ssl">
 <title>SSL</title>

 <para>
  Voir <xref linkend="ssl-tcp"/> pour plus d'informations sur la mise en
  œuvre de SSL.
 </para>

 <variablelist>
  <varlistentry id="guc-ssl" xreflabel="ssl">
   <term><varname>ssl</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>ssl</varname></primary>
    </indexterm>
    <para>
     Active les connexions <acronym>SSL</acronym>.
     Ce paramètre peut uniquement être modifié dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     La valeur par défaut est <literal>off</literal>.

    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-ciphers" xreflabel="ssl_ciphers">
   <term><varname>ssl_ciphers</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_ciphers</varname></primary>
    </indexterm>
    <para>
     Donne une liste d'algorithmes <acronym>SSL</acronym> autorisées à être
     utilisés sur des connexions SSL. Voir la page de manuel de
     <citerefentry><refentrytitle>ciphers</refentrytitle></citerefentry> dans
     le paquet <application>OpenSSL</application> pour la syntaxe de ce
     paramètre et une liste des valeurs supportées. Seules les connexions
     utilisant TLS version 1.2 et antérieures sont impactées. Il n'existe
     actuellement pas de paramètre contrôlant le choix des algorithmes
     utilisés par les connexions avec  TLS version 1.3. La valeur par défaut
     est <literal>HIGH:MEDIUM:+3DES:!aNULL</literal>. Cette valeur est
     généralement raisonnable, sauf si vous avez des besoins spécifiques en
     terme de sécurité.
    </para>

    <para>
     Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>

    <para>
     Voici une explication de la valeur par défaut&nbsp;;:
     <variablelist>
      <varlistentry>
       <term><literal>HIGH</literal></term>
       <listitem>
        <para>
         Algorithmes du groupe <literal>HIGH</literal> (par exemple AES,
         Camellia, 3DES)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>MEDIUM</literal></term>
       <listitem>
        <para>
         Algorithmes du groupe <literal>MEDIUM</literal> (par exemple RC4,
         SEED)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>+3DES</literal></term>
       <listitem>
        <para>
         L'ordre par défaut dans <literal>HIGH</literal> est problématique
         car il positionne 3DES avant AES128. Ceci est mauvais parce que
         3DES offre moins de sécurité que AES128, et il est aussi bien moins
         rapide. <literal>+3DES</literal> le réordonne après les algorithmes
         des groupes <literal>HIGH</literal> et <literal>MEDIUM</literal>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>!aNULL</literal></term>
       <listitem>
        <para>
         Désactive les algorithmes anonymes qui ne font pas d'authentification.
         Ces algorithmes sont vulnérables à des attaques de type
         <foreignphrase>man-in-the-middle</foreignphrase> et ne doivent donc pas
         être utilisés.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
     Les détails sur les algorithmes varient suivant les versions d'OpenSSL.
     Utiliser la commande <literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal>
     pour voir les détails réels de la version <application>OpenSSL</application>
     actuellement installée. Notez que cette liste est filtrée à l'exécution
     suivant le type de clé du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-prefer-server-ciphers" xreflabel="ssl_prefer_server_ciphers">
   <term><varname>ssl_prefer_server_ciphers</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_prefer_server_ciphers</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Précise s'il faut utiliser les préférences du serveur en terme
     d'algorithmes, ou celles du client.
     Ce paramètre peut uniquement être modifié dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     La valeur par défaut est <literal>on</literal>.
    </para>

    <para>
     Les versions plus anciennes de PostgreSQL n'ont pas ce paramètre et
     utilisent toujours les préférences du client. Ce paramètre a
     principalement pour but de maintenir une compatibilité ascendante avec
     ces versions. Utiliser les préférences du serveur est généralement
     conseillé car il est plus probable que le serveur soit correctement
     configuré.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-ecdh-curve" xreflabel="ssl_ecdh_curve">
   <term><varname>ssl_ecdh_curve</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_ecdh_curve</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique le nom de la courve à utiliser dans l'échange de clés
     <acronym>ECDH</acronym>. Elle doit être acceptée par tous les clients
     qui se connectent. Il n'est pas nécessaire que la même courbe soit
     utilisée par la clé Elliptic Curve.
     Ce paramètre peut uniquement être modifié dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     La valeur par défaut est <literal>prime256v1</literal>.
    </para>

    <para>
     Noms OpenSSL pour les courbes les plus courantes&nbsp;:
     <literal>prime256v1</literal> (NIST P-256),
     <literal>secp384r1</literal> (NIST P-384),
     <literal>secp521r1</literal> (NIST P-521).
     La liste complète des courbes disponibles peut être récupérée avec la
     commande <command>openssl ecparam -list_curves</command>. Toutes ne
     sont pas utilisables dans <acronym>TLS</acronym>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-ca-file" xreflabel="ssl_ca_file">
   <term><varname>ssl_ca_file</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_ca_file</varname></primary>
    </indexterm>
    <para>
     Indique le nom du fichier contenant l'autorité du certificat serveur SSL
     (CA).
     Les chemins relatifs sont relatifs par rapport au répertoire de données.
     Ce paramètre peut uniquement être modifié dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     Par défaut le paramètre est vide, ce qui veut dire qu'il n'y a pas de
     fichier d'autorité du certificat chargé, et donc que la vérification du
     certificat client n'est pas effectuée.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-cert-file" xreflabel="ssl_cert_file">
   <term><varname>ssl_cert_file</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_cert_file</varname></primary>
    </indexterm>
    <para>
     Indique le nom du fichier contenant le certificat SSL du serveur.
     Les chemins relatifs sont relatifs par rapport au répertoire de données.
     Ce paramètre peut uniquement être modifié dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     La valeur par défaut est <filename>server.crt</filename>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-crl-file" xreflabel="ssl_crl_file">
   <term><varname>ssl_crl_file</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_crl_file</varname></primary>
    </indexterm>
    <para>
     Indique le nom du fichier contenant la liste de révocation de certificat
     SSL serveur (CRL).
     Les chemins relatifs sont relatifs par rapport au répertoire de données.
     Ce paramètre peut uniquement être modifié dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     Par défaut, ce paramètre est vide, ce qui veut dire qu'aucune liste de
     révocation de certificat n'est chargée.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-key-file" xreflabel="ssl_key_file">
   <term><varname>ssl_key_file</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_key_file</varname></primary>
    </indexterm>
    <para>
     Indique le nom du fichier contenant la clé privée SSL du serveur.
     Les chemins relatifs sont relatifs par rapport au répertoire de données.
     Ce paramètre peut uniquement être modifié dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     La valeur par défaut est <filename>server.key</filename>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-min-protocol-version" xreflabel="ssl_min_protocol_version">
   <term><varname>ssl_min_protocol_version</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_min_protocol_version</varname></primary>
    </indexterm>
    <para>
     Configure la version minimale du protocole SSL/TLS à utiliser. Les
     valeurs valides sont actuellement&nbsp;: <literal>TLSv1</literal>,
     <literal>TLSv1.1</literal>, <literal>TLSv1.2</literal>,
     <literal>TLSv1.3</literal>. Les versions plus anciennes de la
     bibliothèque <productname>OpenSSL</productname> n'acceptent pas toutes
     les valeurs&nbsp;; une erreur peut survenir si une configuration non
     supportée est choisie. Les versions du protocole avant TLS 1.0, donc SSL
     version 2 et 3, sont toujours désactivées.
    </para>

    <para>
     La valeur par défaut est <literal>TLSv1.2</literal>, which satisfies industry
     best practices as of this writing.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-max-protocol-version" xreflabel="ssl_max_protocol_version">
   <term><varname>ssl_max_protocol_version</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_max_protocol_version</varname></primary>
    </indexterm>
    <para>
     Configure la version maximale du protocole SSL/TLS à utiliser. Les
     valeurs valides sont les mêmes que pour <xref
     linkend="guc-ssl-min-protocol-version"/>, avec la possibilité d'accepter
     une chaîne vide, qui permet toute version du protocole. Le comportement
     par défaut est d'autoriser toute version. Configurer la version maximale
     du protocole est principalement utile pour des tests ou si certains
     composants ont des problèmes pour travailler avec un protocole plus
     récent.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-dh-params-file" xreflabel="ssl_dh_params_file">
   <term><varname>ssl_dh_params_file</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_dh_params_file</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique le nom du fichier contenant les paramètres Diffie-Hellman utilisés
     pour la famille DH éphémère des algorithmes SSL. La valeur par défaut est
     une chaîne vide, auquel cas les paramètres DH par défaut sont utilisés.
     Utiliser des paramètres DH personnalisés réduit l'exposition si un attaquant
     réussit à craquer les paramètres DH internes bien connus. Vous pouvez créer
     votre propre fichier de paramètre DH avec la commande
     <command>openssl dhparam -out dhparams.pem 2048</command>.
    </para>
    <para>
     Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-passphrase-command" xreflabel="ssl_passphrase_command">
   <term><varname>ssl_passphrase_command</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_passphrase_command</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique une commande externe à appeler quand il faut obtenir une phrase
     de passe pour déchiffrer un fichier SSL tel que la clé privée. Par
     défaut, ce paramètre est vide, ce qui implique que le mécanisme interne
     de demande de cette phrase de passe sera utilisé.
    </para>
    <para>
     La commande doit envoyer la phrase de passe dans sa sortie standard et
     quitter avec le code 0. Dans la valeur du paramètre, <literal>%p</literal>
     est remplacée par la chaîne d'interrogation. (Écrivez
     <literal>%%</literal> pour afficher un <literal>%</literal>.) Notez que la
     chaîne d'interrogation contiendra probablement des espaces, donc
     mettez les guillemets adéquats. S'il y a une nouvelle ligne unique à la fin
     de la sortie, elle sera supprimée.
    </para>
    <para>
     En fait, la commande n'a pas besoin de demander une phrase de passe à
     l'utilisateur. Elle peut la lire depuis un fichier, l'obtenir d'un
     trousseau ou de quelque chose de ce genre. C'est à l'utilisateur de
     s'assurer que ce mécanisme est sûr.
    </para>
    <para>
     Ce paramètre ne peut être renseigné que dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-ssl-passphrase-command-supports-reload" xreflabel="ssl_passphrase_command_supports_reload">
   <term><varname>ssl_passphrase_command_supports_reload</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>ssl_passphrase_command_supports_reload</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Ce paramètre indique si la commande pour la phrase de passe désignée dans
     <varname>ssl_passphrase_command</varname> doit aussi être appelée lors d'un
     rechargement de configuration, si le fichier clé veut une phrase de
     passe. Si ce paramètre est <literal>off</literal>  (c'est le défaut),
     alors <varname>ssl_passphrase_command</varname> sera ignoré lors d'un
     rechargement et la configuration SSL ne sera pas rechargée si une phrase
     de passe était nécessaire. C'est la configuration correcte si la
     commande a besoin d'un TTY pour demander la phrase, qui pourrait ne pas
     être disponible quand le serveur fonctionne. Passer ce paramètre à
     <literal>on</literal> peut être approprié si la phrase de passe est
     obtenue, par exemple, depuis un fichier.
    </para>
    <para>
     Ce paramètre ne peut être renseigné que dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>
</sect1>

<sect1 id="runtime-config-resource">
<title>Consommation des ressources</title>

<sect2 id="runtime-config-resource-memory">
 <title>Mémoire</title>

 <variablelist>
  <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
   <term><varname>shared_buffers</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>shared_buffers</varname></primary>
    </indexterm>
    <para>
     Initialise la quantité de mémoire que le serveur de bases de données
     utilise comme mémoire partagée. La valeur par défaut, en général
     128&nbsp;Mo, peut être automatiquement abaissée si la configuration du
     noyau ne la supporte pas (déterminé lors de l'exécution de
     l'<application>initdb</application>). Ce paramètre doit être au minimum
     de 128&nbsp;ko + 16&nbsp;ko par <xref linkend="guc-max-connections"/>.
     Des valeurs significativement plus importantes que ce minimum sont
     généralement nécessaires pour de bonnes performances. Si cette valeur est
     spécifiée sans unité, elle sera interprétée comme un nombre de blocs,
     autrement dit <symbol>BLCKSZ</symbol> octets, typiquement 8 Ko. (Une
     valeur personnalisée de <symbol>BLCKSZ</symbol> changera la valeur
     minimale.) Ce paramètre ne peut être configuré qu'au lancement du
     serveur.
    </para>

    <para>
     Si vous disposez d'un serveur dédié à la base de données, avec 1&nbsp;Go
     de mémoire ou plus, une valeur de départ raisonnable pour ce paramètre
     est de 25% la mémoire de votre système. Certains cas peuvent nécessiter
     une valeur encore plus importante pour le
     <varname>shared_buffers</varname> mais comme
     <productname>PostgreSQL</productname> profite aussi du cache du système
     d'exploitation, il est peu probable qu'une allocation de plus de 40% de
     la mémoire fonctionnera mieux qu'une valeur plus restreinte. Des valeurs
     importantes pour le paramètre <varname>shared_buffers</varname>
     requièrent généralement une augmentation proportionnelle du
     <varname>max_wal_size</varname>, pour étendre dans le temps les
     écritures de grandes quantités de données, nouvelles ou modifiées.
    </para>

    <para>
     Sur des systèmes comprenant moins d'1&nbsp;Go de mémoire, un pourcentage
     plus restreint est approprié pour laisser une place suffisante au
     système d'exploitation.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-huge-pages" xreflabel="huge_pages">
   <term><varname>huge_pages</varname> (<type>enum</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>huge_pages</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Contrôle si les <foreignphrase>huge pages</foreignphrase> sont obligatoires
     pour la principale zone de mémoire partagée. Les valeurs valides sont
     <literal>try</literal> (le défaut), <literal>on</literal> et
     <literal>off</literal>. Avec <varname>huge_pages</varname> à
     <literal>try</literal>, le serveur tentera de demander des
     <foreignphrase>huge pages</foreignphrase> mais se rabattra sur le défaut
     en cas d'échec. Avec <literal>on</literal>, cet échec empêchera le serveur
     de démarrer. Avec <literal>off</literal>, il n'y aura pas de demande de
     <foreignphrase>huge pages</foreignphrase>.
    </para>

    <para>
     Pour le moment, ce paramètre n'est supporté que sur Linux et Windows.
     Il est ignoré sur les autres systèmes quand il est à <literal>try</literal>.
    </para>

    <para>
     L'utilisation des <foreignphrase>huge pages</foreignphrase> réduit la
     taille des tables de pages et la consommation CPU pour gérer la mémoire,
     améliorant ainsi les performances. Pour plus de détails sur la gestion
     des <foreignphrase>huge pages</foreignphrase> sur Linux,
     voir <xref linkend="linux-huge-pages"/>.
    </para>

    <para>
     Sous Windows, les <foreignphrase>huge pages</foreignphrase> sont connues
     sous le nom de  <foreignphrase>large pages</foreignphrase>. Pour les
     utiliser, vous devez assigner le droit
     «&nbsp;Verrouiller les pages en mémoire&nbsp;»
     (<foreignphrase>Lock Pages in Memory</foreignphrase>) à l'utilisateur
     Windows qui fait tourner <productname>PostgreSQL</productname>.
     Vous pouvez utiliser l'<productname>Éditeur de stratégie de groupe locale
     </productname> (gpedit.msc) pour assigner ce droit à l'utilisateur.
     Pour démarrer le serveur en ligne de commande en tant que processus
     autonome, et pas en tant que service Windows, l'invite de commande doit
     tourner en tant qu'administrateur, ou bien le contrôle de compte d'utilisateur
     (UAC, <foreignphrase>User Access Control</foreignphrase>) doit être
     désactivé. Quand l'UAC est activé, l'invite de commande normale révoque
     le droit «&nbsp;Verrouiller les pages en mémoire&nbsp;» de l'utilisateur
     au démarrage.
    </para>

    <para>
     Notez que ce paramètre n'affecte que la partie principale de la mémoire
     partagée. Des systèmes d'exploitation comme Linux, FreeBSD et Illumos
     peuvent aussi utiliser les <foreignphrase>huge pages</foreignphrase>
     automatiquement pour les allocations mémoire normales sans demande
     explicite de <productname>PostgreSQL</productname>. Sur Linux, cela
     s'appelle <quote>transparent huge pages</quote><indexterm>
      <primary>transparent huge pages</primary></indexterm> (THP). Elles sont
     connues pour causer une dégradation des performances avec
     <productname>PostgreSQL</productname> pour certains utilisateurs sur
     certaines versions de Linux&nbsp;; leur usage est donc actuellement
     déconseillé (au contraire de l'utilisation explicite de
     <varname>huge_pages</varname>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
   <term><varname>temp_buffers</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>temp_buffers</varname></primary>
    </indexterm>
    <para>
     Configure la quantité maximale de mémoire utilisée pour le cache des
     objets temporaires à l'intérieur de chaque session à la base. Ce sont des
     caches locaux à la session utilisés uniquement pour l'accès aux tables
     temporaires. Si cette valeur est spécifiée sans unité, elle est
     interprétée comme un nombre de blocs, de <symbol>BLCKSZ</symbol> octets,
     typiquement 8 Ko. La valeur par défaut est de 8 Mo
     (<literal>8MB</literal>). (Si <symbol>BLCKSZ</symbol> ne vaut pas 8 Ko,
     la valeur changera de façon proportionnée.) Ce paramètre peut être
     modifié à l'intérieur de sessions individuelles mais seulement jusqu'à la
     première utilisation des tables temporaires dans une session&nbsp;; les
     tentatives suivantes de changement de cette valeur n'ont aucun effet sur
     cette session.
    </para>

    <para>
     Une session alloue des tampons temporaires en fonction des besoins jusqu'à atteindre
     la limite donnée par <varname>temp_buffers</varname>. Positionner
     une valeur importante pour les sessions qui ne le nécessitent pas ne
     coûte qu'un descripteur de tampon, soit
     environ 64 octets, par incrément de <varname>temp_buffers</varname>. Néanmoins,
     si un tampon est réellement utilisé, 8192 autres octets sont consommés
     pour celui-ci (ou, plus généralement, <symbol>BLCKSZ</symbol> octets).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
   <term><varname>max_prepared_transactions</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>max_prepared_transactions</varname></primary>
    </indexterm>
    <para>
     Configure le nombre maximum de transactions simultanément dans
     l'état <quote>préparées</quote> (voir <xref
     linkend="sql-prepare-transaction"/>).
     Zéro, la configuration par défaut, désactive la fonctionnalité des
     transactions préparées
     Ce paramètre ne peut être configuré qu'au lancement du serveur.
    </para>

    <para>
     Si vous ne prévoyez pas d'utiliser les transactions préparées, ce
     paramètre devrait être positionné à zéro pour éviter toute création
     accidentelle de transactions préparées. Au contraire, si vous les
     utilisez, il peut être intéressant de positionner
     <varname>max_prepared_transactions</varname> au minimum à au moins
     <xref linkend="guc-max-connections"/> pour que chaque session puisse
     avoir sa transaction préparée.
    </para>

    <para>
     Lors de l'exécution d'un serveur en attente, vous devez configurer ce
     paramètre à la même valeur ou à une valeur plus importante que sur le
     serveur maître. Sinon, des requêtes pourraient ne pas être autorisées
     sur le serveur en attente.
    </para>
   </listitem>
  </varlistentry>

  <!-- SAS 20070119 : Dans le reste du fichier
     j'ai traduit merge join par jointure de fusion...
     Si jointure d'assemblage est préféré, ne pas oublié de corriger le
     reste du document.
     Idem pour hachage et découpage. -->
  <varlistentry id="guc-work-mem" xreflabel="work_mem">
   <term><varname>work_mem</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>work_mem</varname></primary>
    </indexterm>
    <para>
     Indique la quantité de mémoire maximale de base à utiliser pour
     l'exécution d'une requête (tel qu'un tri ou une table de hachage) avant
     d'écrire dans des fichiers temporaires sur disque. Si cette valeur est
     indiquée sans unité, elle est considérée être en Ko. La valeur par défaut
     est de 4 Mo (<literal>4MB</literal>). Pour une requête complexe, il peut
     y avoir plusieurs opérations de tri ou de hachage exécutées en
     parallèle&nbsp;; chacune peut utiliser de la mémoire à hauteur de cette
     valeur avant de commencer à placer les données dans des fichiers
     temporaires. De plus, de nombreuses sessions peuvent exécuter de telles
     opérations simultanément. La mémoire totale utilisée peut, de ce fait,
     atteindre plusieurs fois la valeur de <varname>work_mem</varname>&nbsp;;
     il est nécessaire de garder cela à l'esprit lors du choix de cette
     valeur. Les opérations de tri sont utilisées pour <literal>ORDER
      BY</literal>, <literal>DISTINCT</literal> et les jointures de fusion. Les
     tables de hachage sont utilisées dans les jointures de hachage, les
     agrégations et le traitement des sous-requêtes <literal>IN</literal>
     fondés sur le hachage.
    </para>
    <para>
     Les opérations basées sur le hachage sont généralement plus sensibles à
     la disponibilité de la mémoire que leur équivalent basé sur le tri. La
     mémoire disponible pour les tables de hachages est calculée en
     multipliant <varname>work_mem</varname> par
     <varname>hash_mem_multiplier</varname>. Cela rend possible pour les
     opérations de hachage d'utiliser une quantité de mémoire qui dépasse la
     quantité de base proposée par <varname>work_mem</varname>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-hash-mem-multiplier" xreflabel="hash_mem_multiplier">
   <term><varname>hash_mem_multiplier</varname> (<type>floating point</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>hash_mem_multiplier</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Utilisé pour calculer la quantité maximale de mémoire que les opérations
     basées sur le hachage peuvent utiliser. La limite finale est déterminée
     en multipliant <varname>work_mem</varname> par
     <varname>hash_mem_multiplier</varname>. La valeur par défaut est 1.0, ce
     qui rend les opérations de hachage sujettes au même maximum
     que<varname>work_mem</varname> pour les opérations basées sur le tri.
    </para>
    <para>
     Pensez à augmenter <varname>hash_mem_multiplier</varname> dans les
     environnements où l'utilisation de fichiers temporaires survient
     fréquemment, tout spécialement quand augmenter uniquement
     <varname>work_mem</varname> a pour résultat une pression mémoire trop
     importante (la pression mémoire prend typiquement la forme d'erreurs pour
     manque de mémoire). Une configuration de 1.5 ou 2.0 pourrait être
     efficace avec des charges de travail variées. Des configurations plus
     hautes (entre 2.0 et 8.0, voire encore plus) pourraient être plus
     efficaces dans les environnements où <varname>work_mem</varname> a déjà
     été augmenté à 40 Moi, voire plus.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-maintenance-work-mem"
  xreflabel="maintenance_work_mem">
   <term><varname>maintenance_work_mem</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration
      <varname>maintenance_work_mem</varname></primary>
    </indexterm>
    <para>
     Indique la quantité maximale de mémoire que peuvent utiliser les
     opérations de maintenance telles que <command>VACUUM</command>,
     <command>CREATE INDEX</command> et <command>ALTER TABLE ADD FOREIGN
      KEY</command>. Si cette valeur est indiquée sans unité, elle est
     considérée être en Ko. La valeur par défaut est de 64&nbsp;Mo.
     Puisque seule une de ces opérations peut être exécutée à la fois
     dans une session et que, dans le cadre d'un fonctionnement
     normal, peu d'opérations de ce genre sont exécutées
     concurrentiellement sur une même installation, il est possible d'initialiser
     cette variable à une valeur bien plus importante que
     <varname>work_mem</varname>. Une grande valeur peut
     améliorer les performances des opérations VACUUM et de la
     restauration des sauvegardes.
    </para>

    <para>
     Quand autovacuum fonctionne, un maximum de
     <xref linkend="guc-autovacuum-max-workers"/> fois cette quantité de
     mémoire peut être utilisée. Il convient donc de s'assurer de ne pas
     configurer la valeur par défaut de façon trop importante. Il pourrait
     être utile de contrôler ceci en configurant <xref
     linkend="guc-autovacuum-work-mem"/> séparément.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-autovacuum-work-mem" xreflabel="autovacuum_work_mem">
   <term><varname>autovacuum_work_mem</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>autovacuum_work_mem</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique la quantité maximale de mémoire à utiliser pour chaque processus
     autovacuum worker. Si cette valeur est indiquée sans unité, elle est
     considérée être en Ko. Ce paramètre vaut -1 par défaut, indiquant que la
     valeur de <xref linkend="guc-maintenance-work-mem"/> doit être utilisée à
     la place. Ce paramétrage n'a pas d'effet sur le comportement de
     <command>VACUUM</command> lorsqu'il est exécuté dans d'autres contextes.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-logical-decoding-work-mem" xreflabel="logical_decoding_work_mem">
   <term><varname>logical_decoding_work_mem</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>logical_decoding_work_mem</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique la quantité de mémoire à utiliser pour le décodage logique, avant
     que certaines données décodées ne soient écrites sur les disques locaux.
     Ceci limite la quantité de mémoire utilisée par la réplication logique en
     flux. Elle vaut par défaut 64 Mo (<literal>64MB</literal>). Comme chaque
     connexion de réplication utilise un seul tampon de cette taille et qu'une
     installation ne peut avoir normalement beaucoup de connexions simultanées
     de ce type (étant donné qu'elles sont limitées par
     <varname>max_wal_senders</varname>), il est plus sûr de configurer cette
     valeur bien plus haute que <varname>work_mem</varname>, réduisant la
     quantité de données décodées écrites sur disque.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
   <term><varname>max_stack_depth</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>max_stack_depth</varname>
     </primary>
    </indexterm>
    <para>
     Indique la profondeur maximale de la pile d'exécution du serveur. La
     configuration idéale pour ce paramètre est la limite réelle de la pile
     assurée par le noyau (configurée par <literal>ulimit -s</literal> ou
     équivalent local) à laquelle est soustraite une marge de sécurité d'un Mo
     environ. La marge de sécurité est nécessaire parce que la profondeur de
     la pile n'est pas vérifiée dans chaque routine du serveur mais uniquement
     dans les routines clés potentiellement récursives. Si cette valeur est
     indiquée sans unité, elle est considérée être en Ko. Le paramétrage par
     défaut est de 2&nbsp;Mo, valeur faible qui implique peu de risques.
     Néanmoins, elle peut s'avérer trop petite pour autoriser l'exécution de
     fonctions complexes. Seuls les superutilisateurs peuvent modifier ce
     paramètre.
    </para>

    <para>
     Configurer ce paramètre à une valeur plus importante que la limite
     réelle du noyau signifie qu'une fonction récursive peut
     occasionner un arrêt brutal d'un processus serveur particulier.
     Sur les plateformes où
     <productname>PostgreSQL</productname> peut déterminer la limite du
     noyau, il interdit de positionner cette variable à une valeur
     inadéquate. Néanmoins, toutes les plateformes ne fournissent pas
     cette information, et une grande attention doit être portée au
     choix de cette valeur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-shared-memory-type" xreflabel="shared_memory_type">
   <term><varname>shared_memory_type</varname> (<type>enum</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>shared_memory_type</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique l'implémentation de mémoire partagée que le serveur doit utiliser
     pour la principale région de mémoire partagée contenant le cache disque
     de <productname>PostgreSQL</productname> et d'autres données partagées.
     Les valeurs possibles sont <literal>mmap</literal> (pour la mémoire
     partagée anonyme allouée en utilisant <function>mmap</function>),
     <literal>sysv</literal> (pour la mémoire partagée System V allouée via
     <function>shmget</function>) et <literal>windows</literal> (pour la
     mémoire partagée Windows). Toutes les valeurs ne sont pas forcément
     supportées sur toutes les plateformes&nbsp;; la première option supportée
     est la valeur par défaut pour cette plateforme. L'utilisation de l'option
     <literal>sysv</literal>, qui n'est pas la valeur par défaut quelque soit
     la plateforme, est généralement non conseillée car elle nécessite
     habituellement une configuration du noyau différente de la configuration
     par défaut pour permettre de grosses allocations (voir <xref
     linkend="sysvipc"/>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-dynamic-shared-memory-type" xreflabel="dynamic_shared_memory_type">
   <term><varname>dynamic_shared_memory_type</varname> (<type>enum</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>dynamic_shared_memory_type</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique l'implémentation de mémoire partagée dynamique que le serveur
     doit utiliser. Les valeurs possibles sont <literal>posix</literal> (pour
     la mémoire partagée POSIX allouée en utilisant <literal>shm_open</literal>),
     <literal>sysv</literal> (pour la mémoire partagée System V allouée en*
     utilisant <literal>shmget</literal>), <literal>windows</literal> (pour la
     mémoire partagée Windows), <literal>mmap</literal> (pour simuler la mémoire
     partagée en utilisant les fichiers de mémoire enregistrés dans le
     répertoire des données). Toutes les valeurs ne sont pas forcément supportées
     sur toutes les plateformes&nbsp;; la première option supportée est la
     valeur par défaut pour cette plateforme. L'utilisation de l'option
     <literal>mmap</literal>, qui n'est la valeur par défaut d'aucune plateforme,
     est généralement déconseillée car le système d'exploitation pourrait écrire
     des pages modifiées sur disque de manière répétée, augmentant la charge
     disque du système. Néanmoins, cela peut se révéler utile pour débugger, quand
     le répertoire <literal>pg_dynshmem</literal> est stocké dans un disque RAM ou
     quand les autres options de mémoire partagée ne sont pas disponibles.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-resource-disk">
 <title>Disque</title>

 <variablelist>
  <varlistentry id="guc-temp-file-limit" xreflabel="temp_file_limit">
   <term><varname>temp_file_limit</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>temp_file_limit</varname></primary>
    </indexterm>
    <para>
     Spécifie la quantité maximale d'espace disque qu'un processus peut
     utiliser pour les fichiers temporaires, comme par exemple ceux
     utilisés pour les tris et hachages, ou le fichier de stockage pour
     un curseur détenu. Une transaction tentant de dépasser cette limite
     sera annulée. La valeur a pour unité le ko. La valeur spéciale
     <literal>-1</literal> (valeur par défaut) signifie sans limite. Seuls
     les superutilisateurs peuvent modifier cette configuration.
    </para>
    <para>
     Ce paramètre contraint l'espace total utilisé à tout instant par tous
     les fichiers temporaires utilisés pour un processus
     <productname>PostgreSQL</productname> donnée. Il doit être noté que
     l'espace disque utilisé pour les tables temporaires explicites, à
     l'opposé des fichiers temporaires utilisés implicitement pour
     l'exécution des requêtes, n'est <emphasis>pas</emphasis> pris en
     compte pour cette limite.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-resource-kernel">
 <title>Usage des ressources du noyau</title>
 <variablelist>

  <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
   <term><varname>max_files_per_process</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>max_files_per_process</varname></primary>
    </indexterm>
    <para>
     Positionne le nombre maximum de fichiers simultanément ouverts par
     sous-processus serveur. La valeur par défaut est de 1000 fichiers. Si le
     noyau assure une limite par processus, il n'est pas nécessaire de
     s'intéresser à ce paramètre. Toutefois, sur certaines plateformes
     (notamment les systèmes BSD) le noyau autorise les processus
     individuels à ouvrir plus de fichiers que le système ne peut
     effectivement en supporter lorsqu'un grand nombre de processus
     essayent tous d'ouvrir ce nombre de fichiers. Si le message
     <quote>Too many open files</quote> (<quote>Trop de fichiers
      ouverts</quote>) apparaît, il faut essayer de
     réduire ce paramètre. Ce paramètre ne peut être configuré qu'au
     lancement du serveur.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<!-- SAS 20070119 : La traduction de cost-based vacuum delay n'est
probablement pas très heureuse, mais l'idée est bien de dire que le vacuum
est interrompu un certain temps (donc reporté) en fonction du coût estimé
des opération du vacuum. -->
<sect2 id="runtime-config-resource-vacuum-cost">
 <title>Report du VACUUM en fonction de son coût</title>

 <para>
  Lors de l'exécution des commandes
  <xref linkend="sql-vacuum"/> et
  <xref linkend="sql-analyze"/>, le système
  maintient un compteur interne qui conserve la trace du coût estimé
  des différentes opérations d'entrée/sortie réalisées. Quand le coût
  accumulé atteint une limite (indiquée par
  <varname>vacuum_cost_limit</varname>), le processus traitant l'opération
  s'arrête un court moment (précisé par <varname>vacuum_cost_delay</varname>).
  Puis, il réinitialise le compteur et continue l'exécution.
 </para>

 <para>
  Le but de cette fonctionnalité est d'autoriser les administrateurs à
  réduire l'impact des entrées/sorties de ces commandes en fonction de
  l'activité des bases de données. Nombreuses sont les situations pour
  lesquelles il n'est pas très important que les commandes de
  maintenance telles que <command>VACUUM</command> et
  <command>ANALYZE</command> se finissent rapidement, mais
  il est généralement très
  important que ces commandes n'interfèrent pas de façon significative
  avec la capacité du système à réaliser d'autres opérations sur les bases
  de données. Le report du VACUUM en fonction de son coût fournit aux
  administrateurs un moyen d'y parvenir.
 </para>

 <para>
  Cette fonctionnalité est désactivée par défaut pour les commandes
  <command>VACUUM</command> lancées manuellement. Pour l'activer,
  la variable <varname>vacuum_cost_delay</varname> doit être
  initialisée à une valeur différente de zéro.
 </para>

 <variablelist>
  <varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
   <term><varname>vacuum_cost_delay</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_cost_delay</varname></primary>
    </indexterm>
    <para>
     Indique le temps, en millisecondes, de repos du processus quand la limite
     de coût a été atteinte. Si cette valeur est indiquée sans unité, elle est
     comprise comme des millisecondes. La valeur par défaut est zéro, ce qui
     désactive la fonctionnalité de report du VACUUM en fonction de
     son coût. Une valeur positive active cette fonctionnalité.
    </para>

    <para>
     Lors d'utilisation de vacuum basée sur le coût, les valeurs appropriées
     pour <varname>vacuum_cost_delay</varname> sont habituellement assez
     petites, inférieures à 1 milliseconde. Bien que
     <varname>vacuum_cost_delay</varname> puisse être configuré à des valeurs
     à virgule flottante en millisecondes, ces délais pourraient ne pas
     pouvoir être mesurés de façon précise sur les anciennes plateformes. Sur
     ce type de plateforme, augmenter la consommation de ressource du
     <command>VACUUM</command> au-dessus de ce que vous obtiendrez avec 1ms
     nécessitera de modifier les autres paramètres de coût. De plus, vous
     devrez garder <varname>vacuum_cost_delay</varname> aussi petit que ce que
     votre plateforme peut mesurer correctement. De gros délais n'aident pas.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
   <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_cost_page_hit</varname></primary>
    </indexterm>
    <para>
     Indique Le coût estimé du nettoyage par VACUUM d'un tampon trouvé dans le
     cache des tampons partagés. Cela représente le coût de
     verrouillage de la réserve de tampons, la recherche au sein de la table de
     hachage partagée et le parcours du contenu de la page. La valeur
     par défaut est 1.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
   <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_cost_page_miss</varname></primary>
    </indexterm>
    <para>
     Indique le coût estimé du nettoyage par VACUUM d'un tampon qui doit être lu
     sur le disque. Cela représente l'effort à fournir pour
     verrouiller la réserve de tampons, rechercher dans la table de
     hachage partagée, lire le bloc désiré sur le disque et
     parcourir son contenu. La valeur par défaut est 10.
    </para>
   </listitem>
  </varlistentry>

  <!-- dirty block : sale est-il le terme adéquat ?
Ne s'agit-il pas plutôt d'un bloc non encore écrit sur le disque ? Clean
block : bloc vidé,  dirty bloc : bloc à vider ?
-->
  <varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
   <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_cost_page_dirty</varname></primary>
    </indexterm>
    <para>
     Indique le coût estimé de modification par VACUUM d'un bloc
     précédemment vide (<foreignphrase>clean block</foreignphrase>).
     Cela représente les entrées/sorties
     supplémentaires nécessaires pour vider à nouveau le bloc
     modifié (<foreignphrase>dirty block</foreignphrase>) sur le
     disque. La valeur par défaut est 20.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
   <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_cost_limit</varname></primary>
    </indexterm>
    <para>
     Indique Le coût cumulé qui provoque l'endormissement du processus de
     VACUUM. La valeur par défaut est 200.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

 <note>
  <para>
   Certaines opérations détiennent des verrous critiques et doivent
   donc se terminer le plus vite possible. Les reports de
   VACUUM en fonction du coût ne surviennent pas pendant ces opérations.
   De ce fait, il
   est possible que le coût cumulé soit bien plus important que la
   limite indiquée. Pour éviter des délais inutilement longs dans de
   tels cas, le délai réel est calculé de la façon suivante&nbsp;:
   <varname>vacuum_cost_delay</varname> * <varname>accumulated_balance</varname> /
   <varname>vacuum_cost_limit</varname> avec un maximum de
   <varname>vacuum_cost_delay</varname> * 4.
  </para>
 </note>

</sect2>

<!-- Scripteur d'arrière-plan ? -->
<sect2 id="runtime-config-resource-background-writer">
 <title>Processus d'écriture en arrière-plan</title>

 <para>
  Il existe un processus serveur séparé appelé <firstterm>background
   writer</firstterm> dont le but est d'écrire les tampons
  <quote>sales</quote> (parce que nouveaux ou modifiés). Ce processus
  écrit les tampons partagés pour que les processus serveur gérant les
  requêtes des utilisateurs n'aient jamais ou peu fréquemment à attendre
  qu'une écriture se termine. Néanmoins, ce processus d'écriture en
  tâche de fond implique une augmentation globale de la charge des
  entrées/sorties disque car, quand une page fréquemment modifiée
  pourrait n'être écrite qu'une seule fois par CHECKPOINT, le processus
  d'écriture en tâche de fond pourrait l'avoir écrit plusieurs fois si
  cette page a été modifiée plusieurs fois dans le même intervalle. Les
  paramètres discutés dans cette sous-section peuvent être utilisés
  pour configurer finement son comportement pour les besoins locaux.
 </para>

 <variablelist>
  <varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
   <term><varname>bgwriter_delay</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>bgwriter_delay</varname></primary>
    </indexterm>
    <para>
     Indique le délai entre les tours d'activité du processus
     d'écriture en arrière-plan. À chaque tour, le processus
     écrit un certain nombre de tampons modifiés (contrôlable par les
     paramètres qui suivent). Puis, il s'endort pour
     <varname>bgwriter_delay</varname> millisecondes et recommence.
     Quand il n'y a pas de tampons modifiés dans le cache, il s'endort
     plus profondément sans considération du <varname>bgwriter_delay</varname>.
     Si cette valeur est indiquée sans unité, elle est prise comme des
     millisecondes. La valeur par défaut est de 200 millisecondes.
     Sur de nombreux systèmes, la résolution réelle du <command>sleep</command>
     est de 10&nbsp;millisecondes&nbsp;; positionner
     <varname>bgwriter_delay</varname> à une valeur qui n'est pas un multiple
     de 10 peut avoir le même résultat que de le positionner au
     multiple de 10 supérieur.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
   <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>bgwriter_lru_maxpages</varname></primary>
    </indexterm>
    <para>
     Nombre maximum de tampons qui peuvent être écrits à chaque tour
     par le processus d'écriture en tâche de fond. Le configurer à zéro désactive
     l'écriture en tâche de fond.
     (Notez que les checkpoints ne sont pas affectés. Ils sont gérés par
     un autre processus, dédié à cette tâche.)
     La valeur par défaut est de 100 tampons.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de
     commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-bgwriter-lru-multiplier" xreflabel="bgwriter_lru_multiplier">
   <term><varname>bgwriter_lru_multiplier</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>bgwriter_lru_multiplier</varname></primary>
    </indexterm>
    <para>
     Le nombre de tampons sales écrits à chaque tour est basé sur le nombre
     de nouveaux tampons qui ont été requis par les processus serveur lors
     des derniers tours. Le besoin récent moyen est multiplié par
     <varname>bgwriter_lru_multiplier</varname> pour arriver à une
     estimation du nombre de tampons nécessaire au prochain tour. Les
     tampons sales sont écrits pour qu'il y ait ce nombre de tampons
     propres, réutilisables.
     (Néanmoins, au maximum <varname>bgwriter_lru_maxpages</varname> tampons sont écrits par
     tour.)
     De ce fait, une configuration de 1.0 représente une politique d'écriture
     <quote>juste à temps</quote> d'exactement le nombre de tampons prédits.
     Des valeurs plus importantes fournissent une protection
     contre les pics de demande, alors qu'une valeur plus petite laisse
     intentionnellement des écritures aux processus serveur. La valeur par
     défaut est de 2.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de
     commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-bgwriter-flush-after" xreflabel="bgwriter_flush_after">
   <term><varname>bgwriter_flush_after</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>bgwriter_flush_after</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Quand plus de ce nombre d'octets ont été
     écrit par le processus d'écriture en tâche de fond (bgwriter), tente de
     forcer le système d'exploitation à écrire les données sur disque. Faire
     cela limite la quantité de données modifiées dans le cache disque du
     noyau, réduisant le risque de petites pauses dues à l'exécution d'un
     <function>fsync</function> à la fin d'un checkpoint ou à l'écriture massive en tâche de fond
     des données modifiées. Souvent, cela réduira fortement la latence des
     transactions mais il existe aussi quelques cas de dégradation des
     performances, tout spécialement avec les charges de travail plus
     importantes que <xref linkend="guc-shared-buffers"/>, mais plus petites
     que le cache disque du système d'exploitation. Ce paramètre pourrait ne
     pas avoir d'effet sur certaines plateformes. L'intervalle valide se situe
     entre <literal>0</literal>, qui désactive le <quote>writeback</quote>
     forcé, et <literal>2MB</literal>. Si cette valeur est indiquée sans unité,
     elle est compris comme des blocs, autrement dit <symbol>BLCKSZ</symbol>
     octets, typiquement 8 Ko. La valeur par défaut est
     <literal>512KB</literal> sur Linux, <literal>0</literal> ailleurs. (Si
     <symbol>BLCKSZ</symbol> ne vaut pas 8&nbsp;ko, les valeurs par défaut et
     maximales évoluent de façon proportionnelles à cette constante.) Ce
     paramètre est seulement configurable dans le fichier
     <filename>postgresql.conf</filename> et à la ligne de commande.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

 <!-- Modification par rapport à la version 8.2 -->
 <para>
  Des valeurs plus faibles de <varname>bgwriter_lru_maxpages</varname> et
  <varname>bgwriter_lru_multiplier</varname> réduisent la
  charge supplémentaire des entrées/sorties induite par le processus
  d'écriture en arrière-plan. En contrepartie, la probabilité que les
  processus serveurs effectuent plus d'écritures par eux-mêmes augmente,
  ce qui retarde les requêtes interactives.
 </para>
</sect2>

<sect2 id="runtime-config-resource-async-behavior">
 <title>Comportement asynchrone</title>

 <variablelist>
  <varlistentry id="guc-effective-io-concurrency" xreflabel="effective_io_concurrency">
   <term><varname>effective_io_concurrency</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>effective_io_concurrency</varname></primary>
    </indexterm>
    <para>
     Positionne le nombre d'opérations d'entrées/sorties disque concurrentes
     que <productname>PostgreSQL</productname> pense pouvoir exécuter
     simultanément. Augmenter cette valeur va augmenter le nombre d'opérations
     d'entrée/sortie que chaque session <productname>PostgreSQL</productname>
     individuelle essayera d'exécuter en parallèle. Les valeurs autorisées
     vont de 1 à 1000, ou zéro pour désactiver l'exécution de requêtes
     d'entrée/sortie asynchrones. Actuellement, ce paramètre ne
     concerne que les parcours de type <foreignphrase>bitmap
      heap</foreignphrase>.
    </para>

    <para>
     Pour les disques magnétiques, un bon point départ pour ce paramètre est
     le nombre de disques que comprend un agrégat par bande RAID 0 ou miroir
     RAID 1 utilisé pour la base de données. (Pour du RAID 5, le disque de
     parité ne devrait pas être pris en compte.) Toutefois, si la base est
     souvent occupée par de nombreuses requêtes exécutées dans des sessions
     concurrentes, des valeurs plus basses peuvent être suffisantes pour
     maintenir le groupe de disques occupé. Une valeur plus élevée que
     nécessaire pour maintenir les disques occupés n'aura comme seul résultat
     que de surcharger le processeur. Les SSD et autres méthodes de stockage
     basées sur de la mémoire peuvent souvent traiter un grand nombre de
     demandes concurrentes, donc la meilleure valeur pourrait être dans les
     centaines.
    </para>

    <para>
     Les entrées/sorties asynchrones dépendent de la présence d'une fonction
     <function>posix_fadvise</function> efficace, ce que n'ont pas certains
     systèmes d'exploitation. Si la fonction n'est pas présente, alors
     positionner ce paramètre à une valeur autre que zéro entraînera une
     erreur. Sur certains systèmes (par exemple Solaris), cette fonction
     est présente mais n'a pas d'effet.
    </para>

    <para>
     La valeur par défaut est 1 sur les systèmes supportés, et 0 pour les
     autres. Cette valeur peut être surchargée pour les tables d'un tablespace
     particulier en configuration le paramètre tablespace du même nom (voir
     <xref linkend="sql-altertablespace"/>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-maintenance-io-concurrency" xreflabel="maintenance_io_concurrency">
   <term><varname>maintenance_io_concurrency</varname> (<type>integer</type>)
    <indexterm>
     <primary><varname>maintenance_io_concurrency</varname> configuration parameter</primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Similaire à <varname>effective_io_concurrency</varname>, mais utilisé
     pour le travail de maintenance réaliser pour les nombreuses sessions
     clientes.
    </para>
    <para>
     La valeur par défaut est 10 sur les systèmes supportés, 0 sinon. Cette
     valeur peut être surchargée pour les tables d'un tablespace particulier en
     configurant le paramètre de même nom pour ce tablespace (voir <xref
     linkend="sql-altertablespace"/>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-worker-processes" xreflabel="max_worker_processes">
   <term><varname>max_worker_processes</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>max_worker_processes</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure le nombre maximum de background workers acceptés par le
     système. Ce paramètre n'est configurable qu'au démarrage du serveur. La
     valeur par défaut est 8.
    </para>

    <para>
     S'il s'agit de la configuration d'un serveur esclave, vous devez
     configurer ce paramètre à une valeur supérieure ou égale à celui du
     serveur maître. Dans le cas contraire, il ne sera pas possible d'exécuter
     des requêtes sur le serveur esclave.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-parallel-workers-per-gather" xreflabel="max_parallel_workers_per_gather">
   <term><varname>max_parallel_workers_per_gather</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>max_parallel_workers_per_gather</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure le nombre maximum de processus parallèles pouvant être lancé
     par un seul nœud <literal>Gather</literal> ou <literal>Gather
      Merge</literal>. Les processus parallèles sont pris dans l'ensemble de
     processus établi par <xref
     linkend="guc-max-worker-processes"/>, limité par
     <xref linkend="guc-max-parallel-workers"/>. Notez que le nombre demandé de
     processus parallèles pourrait ne pas être disponible à l'exécution. Si
     cela survient, le plan s'exécutera avec moins de processus qu'attendu, ce
     qui pourrait être inefficace. La valeur par défaut est 2. Positionner
     cette valeur à 0 désactive l'exécution parallélisée de requête.
    </para>

    <para>
     Notez que les requêtes parallélisées peuvent consommer considérablement
     plus de ressources que des requêtes non parallélisées parce que chaque
     processus parallèle est un processus totalement séparé qui a en gros le
     même impact sur le système qu'une session utilisateur supplémentaire.
     Ceci doit être pris en considération lors du choix d'une valeur pour ce
     paramètre, ainsi que lors de la configuration d'autres paramètres qui
     contrôlent l'utilisation des ressources, comme par exemple <xref
     linkend="guc-work-mem"/>. Les limites de ressources comme
     <varname>work_mem</varname> sont appliquées individuellement pour chaque
     processus, ce qui signifie que l'utilisation totale pourrait être bien
     plus importante que pour un seul processus. Par exemple, une requête
     parallélisée utilisant quatre processus pourrait utiliser jusqu'à cinq
     fois plus de CPU, de mémoire, de bande passante disque, et ainsi de suite
     qu'une requête non parallélisée.
    </para>

    <para>
     Pour plus d'informations sur les requêtes parallélisées, voir <xref
     linkend="parallel-query"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-parallel-workers-maintenance" xreflabel="max_parallel_maintenance_workers">
   <term><varname>max_parallel_maintenance_workers</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>max_parallel_maintenance_workers</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique le nombre maximum de workers parallèles qu'une commande utilitaire
     peut démarrer. Actuellement, les commandes utilitaires qui supportent
     les workers parallèles est <command>CREATE INDEX</command>, et seulement
     à la création d'un index B-tree, et <command>VACUUM</command> sans l'option
     <literal>FULL</literal>. Les workers parallèles sont déduits du
     pool de processus défini par <xref linkend="guc-max-worker-processes"/>,
     dans la limite de <xref linkend="guc-max-parallel-workers"/>. Notez que le
     nombre de workers demandé peut ne pas être disponible lors de l'exécution.
     Si cela arrive, l'opération utilitaire fonctionnera avec moins de workers
     qu'attendu. Le défaut est de 2. Passer cette valeur à 0 désactive
     l'utilisation des workers parallèles par les commandes utilitaires.
    </para>

    <para>
     Notez que les commandes utilitaires parallélisées ne devraient pas consommer
     beaucoup plus de mémoire que leur équivalent non parallélisé. Cette stratégie
     diffère de celle adoptée pour les requêtes parallélisées, où les limites
     de ressources s'appliquent généralement par processus (worker).
     Les commandes utilitaires parallélisées traitent la limite de ressource
     <varname>maintenance_work_mem</varname> comme une limite à appliquer à la
     commande entière, sans considération du nombre de workers parallèles.
     Cependant, les commandes utilitaires parallélisées peuvent consommer
     nettement plus de CPU et de bande passante.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-parallel-workers" xreflabel="max_parallel_workers">
   <term><varname>max_parallel_workers</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>max_parallel_workers</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Positionne le nombre maximum de workers que le système peut supporter pour
     le besoin des requêtes parallèles.  La valeur par défaut est 8.  Lorsque
     cette valeur est augmentée ou diminuée, pensez également à modifier
     <xref linkend="guc-max-parallel-workers-maintenance"/> et
     <xref linkend="guc-max-parallel-workers-per-gather"/>.
     De plus, veuillez noter que positionner cette valeur plus haut que
     <xref linkend="guc-max-worker-processes"/> n'aura pas d'effet puisque les
     workers parallèles sont pris de la réserve de processus établie par ce
     paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-backend-flush-after" xreflabel="backend_flush_after">
   <term><varname>backend_flush_after</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>backend_flush_after</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Lorsque plus de ce nombre d'octets ont été
     écrit par un simple processus serveur,  tente de forcer le système
     d'exploitation à écrire les données sur disque. Faire cela limite la
     quantité de données modifiées dans le cache disque du noyau, réduisant le
     risque de petites pauses dues à l'exécution d'un <function>fsync</function> à la fin d'un
     checkpoint ou à l'écriture massive en tâche de fond des données
     modifiées. Souvent, cela réduira fortement la latence des transactions
     mais il existe aussi quelques cas de dégradation des performances, tout
     spécialement avec les charges de travail plus importantes que <xref
     linkend="guc-shared-buffers"/>, mais plus petites que le cache disque du
     système d'exploitation. Ce paramètre pourrait ne pas avoir d'effet sur
     certaines plateformes. Si cette valeur est indiquée sans unité,
     elle est compris comme des blocs, autrement dit <symbol>BLCKSZ</symbol>
     octets, typiquement 8 Ko. L'intervalle valide se situe entre
     <literal>0</literal>, qui désactive le <quote>writeback</quote> forcé,
     et <literal>2MB</literal>.  La valeur par défaut est <literal>0</literal>
     (autrement dit pas de vidage forcé). (Si <symbol>BLCKSZ</symbol> ne vaut
     pas 8&nbsp;ko, la valeur maximale évolue de façon proportionnelle à cette
     constante.)
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-old-snapshot-threshold" xreflabel="old_snapshot_threshold">
   <term><varname>old_snapshot_threshold</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>old_snapshot_threshold</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure la durée minimale d'utilisation d'une image sans risque
     d'erreur <literal>snapshot too old</literal> survenant lors de
     l'utilisation de l'image. Les données mortes depuis plus longtemps
     que cette limite peuvent être nettoyées. Ceci peut aider à empêcher
     la fragmentation dans le cas de
     snapshots qui restent utiliser sur une longue période. Pour empêcher des
     résultats incorrects suite au nettoyage des données qui auraient été
     visibles par l'image, une erreur est générée quand l'image est plus
     ancienne que cette limite et que l'image est utilisée pour lire un bloc
     qui a été modifié depuis la construction du snapshot.
    </para>

    <para>
     Si cette valeur est spécifiée sans unité, elle est considérée comme un
     nombre de minutes. Une valeur de <literal>-1</literal> (valeur par
     défaut) désactive cette fonctionnalité, en configurant la limite d'âge à
     l'infini. Ce paramètre peut seulement être configuré au démarrage du
     serveur.
    </para>

    <para>
     Les valeurs utiles en production vont probablement
     d'un petit nombre d'heures à quelques jours. De petites valeurs (tels que
     <literal>0</literal> ou <literal>1min</literal>) sont seulement autorisés
     parce qu'ils pourraient être utiles pour des tests. Bien qu'une
     configuration aussi haute que <literal>60d</literal> est autorisée, notez
     que dans de nombreux cas, une fragmentation extrême ou une réutilisation
     des identifiants de transaction pourrait survenir très rapidement.
    </para>

    <para>
     Quand cette fonctionnalité est activée, l'espace libérée à la fin de la
     relation ne peut pas être rendu au système d'exploitation car cela
     supprimerait les informations nécessaires pour détecter la condition
     <quote>snapshot too old</quote>. Tout l'espace alloué pour une
     relation reste associé avec cette relation pour une réutilisation par
     cette relation sauf si elle est explicitement libérée (par exemple, avec
     <command>VACUUM FULL</command>).
    </para>

    <para>
     Ce paramètre ne tente pas de garantir qu'une erreur sera générée sous
     quelques circonstances. En fait, si les résultats corrects peuvent être
     générés à partir (par exemple) d'un curseur qui a matérialisé un ensemble
     de résultat, aucune erreur ne sera renvoyée même si les lignes impactées
     dans la table de référence ont été nettoyées. Certaines tables ne peuvent
     pas être nettoyées tôt proprement, et donc ne seront pas affectées par ce
     paramètre, comme les catalogues systèmes. Pour ces tables, ce paramètre ne
     réduira pas la fragmentation et ne pourra être la raison d'une erreur
     <quote>snapshot too old</quote> lors de son parcours.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</sect2>
</sect1>

<sect1 id="runtime-config-wal">
<title>Write Ahead Log</title>

<para>
 Voir aussi la <xref linkend="wal-configuration"/> pour plus d'informations
 sur la configuration de ces paramètres.
</para>

<sect2 id="runtime-config-wal-settings">
 <title>Paramètres</title>
 <variablelist>


  <varlistentry id="guc-wal-level" xreflabel="wal_level">
   <term><varname>wal_level</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>wal_level</varname></primary>
    </indexterm>
    <para>
     <varname>wal_level</varname> détermine la quantité d'informations
     écrite dans les journaux de transactions.
     <varname>wal_level</varname> détermine la quantité d'informations qui sera
     écrite dans les WAL.  La valeur par défaut est <literal>replica</literal>,
     qui écrit suffisamment de données pour pouvoir utiliser l'archivage des
     WAL ainsi que la réplication, y compris exécuter des requêtes en lecture
     seule sur un serveur secondaire. <literal>minimal</literal> supprime toute
     la journalisation à l'exception des informations nécessaire pour pouvoir
     effectuer une récupération suite à un arrêt brutal ou un arrêt immédiat.
     Enfin, <literal>logical</literal> ajoute les informations
     nécessaires au support du décodage logique. Chaque niveau inclut les
     informations tracées dans les niveaux inférieurs.
     Ce paramètre peut seulement être configuré au lancement du
     serveur.
    </para>
    <para>
     Au niveau <literal>minimal</literal>, aucune information n'est tracée
     pour les tables permanentes pour le reste d'une transaction qui les crée
     et les réécrit. Ceci peut rendre certaines opérations bien plus rapides
     (voir <xref linkend="populate-pitr"/>). Les opérations qui initient cette
     optimisation incluent&nbsp;:
     <simplelist>
      <member><command>CREATE TABLE AS</command></member>
      <member><command>CREATE INDEX</command></member>
      <member><command>ALTER ... SET TABLESPACE</command></member>
      <member><command>CLUSTER</command></member>
      <member><command>COPY</command> dans des tables qui ont été créées ou
       tronquées dans la même transaction</member>
      <member><command>CREATE TABLE</command></member>
      <member><command>REFRESH MATERIALIZED VIEW</command>
       (without <option>CONCURRENTLY</option>)</member>
      <member><command>REINDEX</command></member>
      <member><command>TRUNCATE</command></member>
     </simplelist>
     Mais, du coup, les journaux au niveau minimal ne contiennent pas suffisamment
     d'informations pour reconstruire les données à partir d'une sauvegarde
     de base et des journaux de transactions. Donc, les niveaux
     <literal>replica</literal> ou supérieurs doivent
     être utilisés pour activer l'archivage des journaux de transactions
     (<xref linkend="guc-archive-mode"/>) et la réplication en flux.
    </para>
    <para>
     Dans le niveau <literal>logical</literal>, les mêmes informations sont
     enregistrées que pour le mode <literal>replica</literal>. Des
     informations supplémentaires sont ajoutées pour permettre d'extraire les
     modifications logiques depuis les journaux de transactions. En utilisant
     le niveau <literal>logical</literal>, le volume des journaux de
     transactions va augmenter, tout particulièrement si plusieurs tables
     sont configurées pour  <literal>REPLICA IDENTITY FULL</literal> et que
     de nombreux <command>UPDATE</command> et <command>DELETE</command> sont
     exécutés.
    </para>
    <para>
     Dans les versions antérieures à la 9.6, ce paramètre autorise aussi les
     valeurs <literal>archive</literal> et <literal>hot_standby</literal>. Elles
     sont toujours acceptées mais sont converties silencieusement en
     <literal>replica</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-fsync" xreflabel="fsync">
   <term><varname>fsync</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>fsync</varname></primary>
    </indexterm>
    <para>
     Si ce paramètre est activé, le serveur <productname>PostgreSQL</productname>
     tente de s'assurer que les mises à jour sont écrites physiquement
     sur le disque à l'aide d'appels système <function>fsync()</function>
     ou de méthodes équivalentes (voir <xref linkend="guc-wal-sync-method"/>).
     Cela permet de s'assurer que le cluster de bases de données peut revenir
     à un état cohérent après une panne matérielle ou du système d'exploitation.
    </para>

    <para>
     Bien que désactiver <varname>fsync</varname> améliore fréquemment les
     performances, cela peut avoir pour conséquence une corruption des
     données non récupérables dans le cas d'une perte de courant ou d'un
     crash du système. Donc, il est seulement conseillé de désactiver
     <varname>fsync</varname> si vous pouvez facilement recréer la base de
     données complète à partir de données externes.
    </para>

    <para>
     Quelques exemples de circonstances permettant de désactiver
     <varname>fsync</varname>&nbsp;: le chargement initial d'une nouvelle
     instance à partir d'une sauvegarde, l'utilisation de l'instance pour
     traiter un flot de données après quoi la base sera supprimée puis recréée,
     la création d'un clone d'une base en lecture seule, clone qui serait
     recréé fréquemment et n'est pas utilisé pour du failover. La haute
     qualité du matériel n'est pas une justification suffisante pour
     désactiver <varname>fsync</varname>.
    </para>

    <para>
     Pour une restauration fiable lors de la modification de
     <varname>fsync</varname> de off à on, il est nécessaire de forcer tous
     les tampons modifiés disponibles dans le cache du noyau à être écrits
     sur un stockage durable. Ceci peut se faire alors que l'instance est
     arrêtée ou lorsque <function>fsync</function> est activé en exécutant <command>initdb
      --sync-only</command>, en exécutant <command>sync</command>, en démontant
     le système de fichiers ou en redémarrant le serveur.
    </para>

    <para>
     Dans de nombreuses situations, désactiver <xref
     linkend="guc-synchronous-commit"/> pour les transactions non critiques
     peut fournir une grande partie des performances de la désactivation de
     <varname>fsync</varname>, sans les risques associés de corruption de
     données.
    </para>

    <para>
     <varname>fsync</varname> ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     Si ce paramètre est désactivé (<literal>off</literal>), il est
     intéressant de désactiver aussi <xref linkend="guc-full-page-writes"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-synchronous-commit" xreflabel="synchronous_commit">
   <term><varname>synchronous_commit</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>synchronous_commit</varname></primary>
    </indexterm>
    <para>
     Indique quel traitement des WAL doit se faire avant que le serveur de
     bases de données ne renvoie une indication de <quote>succès</quote> au
     client. Les valeurs valides sont <literal>remote_apply</literal>,
     <literal>on</literal> (par défaut), <literal>remote_write</literal>,
     <literal>local</literal> et <literal>off</literal>.
    </para>

    <para>
     Si <varname>synchronous_standby_names</varname> est vide, les seules
     valeurs sensées sont <literal>on</literal> et
     <literal>off</literal>&nbsp;;  <literal>remote_apply</literal>,
     <literal>remote_write</literal> et <literal>local</literal> fournissent
     toutes le même niveau de synchronisation locale que
     <literal>on</literal>. Le comportement local de tous les modes différents
     de <literal>off</literal> est d'attendre le vidage local sur disque des
     WAL. Dans le mode <literal>off</literal>, il n'y a pas d'attente, donc il
     peut y avoir un délai entre le retour du succès au client et le fait que
     la transaction est garantie d'être sécurisée contre un crash du serveur.
     (Le délai maximum est de trois fois <xref
     linkend="guc-wal-writer-delay"/>.)
     Contrairement à <xref linkend="guc-fsync"/>, la configuration de ce
     paramètre à <literal>off</literal> n'implique aucun risque
     d'incohérence dans la base de données&nbsp;: un arrêt brutal du système
     d'exploitation ou d'une base de données peut résulter en quelques
     transactions récentes prétendument validées perdues malgré tout.
     Cependant, l'état de la base de données est identique à celui obtenu
     si les transactions avaient été correctement annulées. C'est pourquoi
     la désactivation de <varname>synchronous_commit</varname> est une
     alternative utile quand la performance est plus importante que la
     sûreté de la transaction. Pour plus de discussion, voir <xref
     linkend="wal-async-commit"/>.
    </para>

    <para>
     Si <xref linkend="guc-synchronous-standby-names"/> n'est pas vide,
     <varname>synchronous_commit</varname> contrôle aussi si les validations
     de transactions attendront que leurs enregistrements WAL soient traités
     sur le serveur secondaire.
    </para>

    <para>
     Quand il est configuré à <literal>remote_apply</literal>, les validations
     attendront la réponse des serveurs secondaires synchrones indiquant
     qu'ils ont bien reçu l'enregistrement de validation de la transaction et
     qu'ils l'ont bien appliqués, pour qu'elle devienne visible aux requêtes
     sur les serveurs secondaires, et aussi écrites sur un stockage durable.
     Ceci causera les plus gros délais de validation par rapport aux
     configurations précédentes car il faut attendre le rejeu des WAL. Quand
     il est configuré à <literal>on</literal>, les validations attendent que
     les réponses des serveurs secondaires synchrones indiquent qu'ils ont
     reçu l'enregistrement de validation de la transaction et qu'ils l'ont
     écrit sur un stockage durable. Ceci assure que la transaction ne sera pas
     perdu sauf si le primaire et les secondaires synchrones souffrent de
     corruption au niveau disque. Quand il est configuré à
     <literal>remote_write</literal>, les validations attendront que les
     réponses des serveurs secondaires synchrones indiquent avoir reçu
     l'enregistrement de validation de la transaction et l'avoir écrit sur
     disque. Ce paramétrage assure de la préservation des données si une
     instance secondaire de <productname>PostgreSQL</productname> s'arrête
     brutalement, mais pas si le serveur secondaire souffre d'un crash au
     niveau du système d'exploitation parce que les données n'ont pas
     nécessairement atteint un stockage durable sur le secondaire. Le
     paramétrage <literal>local</literal> fait que les validations attendent
     uniquement le vidage local sur disque, mais n'attendent pas le retour des
     serveurs secondaires synchrones. Ceci n'est généralement pas souhaité
     quand la réplication synchrone est utilisée mais est fourni pour être
     complet.
    </para>

    <para>
     Ce paramètre peut être changé à tout moment&nbsp;; le comportement
     pour toute transaction est déterminé par la configuration en cours
     lors de la validation. Il est donc possible et utile d'avoir certaines
     validations validées en synchrone et d'autres en asynchrone.
     Par exemple, pour réaliser une validation asynchrone de transaction
     à plusieurs instructions avec une valeur par défaut inverse, on exécute
     l'instruction <command>SET LOCAL synchronous_commit TO OFF</command>
     dans la transaction.
    </para>

    <para>
     <xref linkend="synchronous-commit-matrix"/> résume les possibilités
     de configuration de <varname>synchronous_commit</varname>.
    </para>

    <table id="synchronous-commit-matrix">
     <title>Modes pour synchronous_commit</title>
     <tgroup cols="5">
      <colspec colname="col1" colwidth="1.5*"/>
      <colspec colname="col2" colwidth="1*"/>
      <colspec colname="col3" colwidth="1*"/>
      <colspec colname="col4" colwidth="1*"/>
      <colspec colname="col5" colwidth="1*"/>
      <thead>
       <row>
        <entry>synchronous_commit</entry>
        <entry>validation locale durable</entry>
        <entry>valide durable du standby après un crash de PG</entry>
        <entry>valide durable du standby après un crash de l'OS</entry>
        <entry>cohérence des requêtes sur le standby</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry>remote_apply</entry>
        <entry align="center">&bull;</entry>
        <entry align="center">&bull;</entry>
        <entry align="center">&bull;</entry>
        <entry align="center">&bull;</entry>
       </row>
       <row>
        <entry>on</entry>
        <entry align="center">&bull;</entry>
        <entry align="center">&bull;</entry>
        <entry align="center">&bull;</entry>
        <entry align="center"></entry>
       </row>
       <row>
        <entry>remote_write</entry>
        <entry align="center">&bull;</entry>
        <entry align="center">&bull;</entry>
        <entry align="center"></entry>
        <entry align="center"></entry>
       </row>
       <row>
        <entry>local</entry>
        <entry align="center">&bull;</entry>
        <entry align="center"></entry>
        <entry align="center"></entry>
        <entry align="center"></entry>
       </row>
       <row>
        <entry>off</entry>
        <entry align="center"></entry>
        <entry align="center"></entry>
        <entry align="center"></entry>
        <entry align="center"></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
   <term><varname>wal_sync_method</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>wal_sync_method</varname></primary>
    </indexterm>
    <para>
     Méthode utilisée pour forcer les mises à jour des WAL sur le disque.
     Si <varname>fsync</varname> est désactivé, alors ce paramètre est
     inapplicable, car les mises à jour des journaux de transactions ne sont pas du tout forcées. Les
     valeurs possibles sont&nbsp;:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <literal>open_datasync</literal> (écrit les fichiers WAL avec l'option
       <symbol>O_DSYNC</symbol> de <function>open()</function>)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>fdatasync</literal> (appelle <function>fdatasync()</function> à chaque
       validation)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>fsync_writethrough</literal> (appelle <function>fsync()</function> à chaque
       validation, forçant le mode <foreignphrase>write-through</foreignphrase> de tous les caches disque en
       écriture)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>fsync</literal> (appelle <function>fsync()</function> à chaque validation)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>open_sync</literal> (écrit les fichiers WAL avec l'option
       <symbol>O_SYNC</symbol> de <function>open()</function>)
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Ces options ne sont pas toutes disponibles sur toutes les plateformes.
     La valeur par défaut est la première méthode de la liste ci-dessus
     supportée par la plateforme.
     Les options <literal>open_</literal>* utilisent aussi
     <literal>O_DIRECT</literal> s'il est disponible.
     L'outil <filename>src/tools/fsync</filename> disponible dans le code
     source de PostgreSQL permet de tester les performances des différentes
     méthodes de synchronisation.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
   <term><varname>full_page_writes</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>full_page_writes</varname></primary>
    </indexterm>
    <para>
     Quand ce paramètre est activé, le serveur
     écrit l'intégralité du contenu de chaque page disque dans les WAL lors de la
     première modification de cette page qui intervient après un point de
     vérification. C'est nécessaire car l'écriture d'une page lors
     d'un plantage du système d'exploitation peut n'être
     que partielle, ce qui conduit à une page sur disque
     qui contient un mélange d'anciennes et de nouvelles données.
     Les données de modification de niveau ligne stockées
     habituellement dans les WAL ne sont pas suffisantes pour restaurer
     complètement une telle page lors de la récupération qui suit la panne.
     Le stockage de l'image de la page complète garantit une restauration
     correcte de la page, mais au prix d'un accroissement de la quantité
     de données à écrire dans les WAL. (Parce que la relecture des WAL
     démarre toujours à un point de vérification, il suffit de
     faire cela lors de la première modification de chaque page survenant
     après un point de vérification. De ce fait, une façon de réduire le
     coût d'écriture de pages complètes consiste à augmenter le paramètre
     réglant les intervalles entre points de vérification.)
    </para>

    <para>
     La désactivation de ce paramètre accélère les opérations normales, mais
     peut aboutir soit à une corruption impossible à corriger soit à une
     corruption silencieuse, après un échec système. Les risques sont
     similaires à la désactivation de <varname>fsync</varname>, bien que
     moindres. Sa désactivation devrait se faire en se basant sur les mêmes
     recommandations que cet autre paramètre.
    </para>

    <para>
     La désactivation de ce paramètre n'affecte pas l'utilisation de l'archivage des
     WAL pour la récupération d'un instantané, aussi appelé <acronym>PITR</acronym>
     (voir <xref linkend="continuous-archiving"/>).
    </para>

    <para>
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-log-hints" xreflabel="wal_log_hints">
   <term><varname>wal_log_hints</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>wal_log_hints</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Quand ce paramètre a la valeur <literal>on</literal>, le serveur
     <productname>PostgreSQL</productname> écrit le contenu entier de chaque
     page disque dans les journaux de transactions lors de la première
     modification de cette page après un checkpoint, même pour des
     modifications non critiques comme les hint bits.
    </para>

    <para>
     Si les sommes de contrôle sont activées, la mise à jour des hint bits
     est toujours enregistrée dans les journaux et ce paramètre est ignoré.
     Vous pouvez utiliser ce paramètre pour tester le volume supplémentaire
     de journaux induit par l'activiation des sommes de contrôle sur les
     fichiers de données.
    </para>

    <para>
     Ce paramètre n'est configurable qu'au démarrage du serveur. La valeur
     par défaut vaut <literal>off</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-compression" xreflabel="wal_compression">
   <term><varname>wal_compression</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>wal_compression</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Lorsque ce paramètre est à <literal>on</literal>, le
     serveur <productname>PostgreSQL</productname> compresse
     une image d'une page complète écrite dans les WAL lorsque
     <xref linkend="guc-full-page-writes"/> est à on ou durant
     une sauvegarde de base. Une image compressée d'une page sera
     décompressée durant le rejeu des WAL. La valeur par défaut est
     à <literal>off</literal>. Seuls les superutilisateurs peuvent
     modifier ce paramètre.
    </para>

    <para>
     Activer ce paramètre peut réduire le volume des WAL sans augmenter
     le risque de données corrompues irrécupérables, mais avec l'effet
     d'avoir un coût supplémentaire en terme de puissance CPU sur la
     compression durant l'écriture des WAL et sur la décompression lors
     du rejeu des WAL.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-init-zero" xreflabel="wal_init_zero">
   <term><varname>wal_init_zero</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>wal_init_zero</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Si configuré à <literal>on</literal> (la valeur par défaut), cette option
     fait que les nouveaux journaux de transactions sont remplis de zéro. Sur
     certains systèmes de fichiers, ceci assure que la place est allouée avant
     qu'il ne soit nécessaire d'écrire les enregistrements WAL. Néanmoins, les
     systèmes de fichiers <firstterm>Copy-On-Write</firstterm> (COW)
     pourraient ne pas bénéficier de cette technique, donc l'option est donnée
     pour éviter ce travail inutile. Si configuré à <literal>off</literal>,
     seul l'octet final est écrit quand le fichier est créé pour qu'il ait la
     taille attendue.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-recycle" xreflabel="wal_recycle">
   <term><varname>wal_recycle</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>wal_recycle</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Si configuré à <literal>on</literal> (la valeur par défaut), cette option
     fait que les fichiers WAL sont recyclés en les renommant, pour éviter
     d'avoir à créer de nouveaux fichiers. Sur les systèmes de fichiers COW,
     il pourrait être plus rapide d'en créer de nouveaux, donc l'option est
     donnée pour désactiver ce comportement.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
   <term><varname>wal_buffers</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>wal_buffers</varname></primary>
    </indexterm>
    <para>
     La quantité de mémoire partagée utilisée pour les données des
     journaux de transactions qui n'ont pas encore été écrites sur
     disque. La configuration par défaut de -1 sélectionne une taille
     égale à 1/32 (environ 3%) de <xref
     linkend="guc-shared-buffers"/>, mais pas moins de
     <literal>64kB</literal>, et pas plus que la taille d'un journal
     de transactions, soit généralement <literal>16MB</literal>. Cette
     valeur peut être configurée manuellement si le choix automatique
     est trop élevé ou trop faible, mais tout valeur positive inférieure
     à <literal>32kB</literal> sera traitée comme étant exactement
     <literal>32kB</literal>.
     Si cette valeur est spécifiée sans unité, elle est prise en tant que
     nombre de blocs de journaux de transactions, autrement dit
     <symbol>XLOG_BLCKSZ</symbol> octets, typiquement 8 Ko. Ce paramètre ne
     peut être configuré qu'au démarrage du serveur.
    </para>

    <para>
     Le contenu du cache des journaux de transactions est écrit sur
     le disque à chaque validation d'une transaction, donc des valeurs
     très importantes ont peu de chance d'apporter un gain
     significatif. Néanmoins, configurer cette valeur à au moins
     quelques mégaoctets peut améliorer les performances en écriture
     sur un serveur chargé quand plusieurs clients valident en même
     temps. La configuration automatique sélectionnée par défaut avec
     la valeur -1 devrait être convenable.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-writer-delay" xreflabel="wal_writer_delay">
   <term><varname>wal_writer_delay</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>wal_writer_delay</varname></primary>
    </indexterm>
    <para>
     Indique à quelle fréquence (une durée) le walwriter vide les journaux sur disque. Après
     avoir vidé les journaux sur disque, ce processus s'endort pour la durée
     indiquée par le paramètre <varname>wal_writer_delay</varname> sauf s'il est réveillé
     par une transaction validée en asynchrone. Dans le cas où le dernier
     vidage est survenu il y a moins de <varname>wal_writer_delay</varname>
     millisecondes et que moins de <varname>wal_writer_flush_after</varname>
     octets ont été produits dans les WAL depuis, le WAL est seulement écrit via le
     système d'exploitation mais pas forcément écrit sur disque.
     Si cette valeur est spécifiée sans unité, elle est considérée être en millisecondes. La valeur par
     défaut est 200 millisecondes (<literal>200ms</literal>). Notez que sur de
     nombreux systèmes, la résolution réelle du délai d'endormissement est de
     10 millisecondes&nbsp;; configurer <varname>wal_writer_delay</varname> à
     une valeur qui n'est pas un multiple de 10 pourrait avoir le même
     résultat que de le configurer au prochain multiple de 10. Ce paramètre
     est seulement configurable dans le fichier
     <filename>postgresql.conf</filename> ainsi que sur la ligne de commande
     du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-writer-flush-after" xreflabel="wal_writer_flush_after">
   <term><varname>wal_writer_flush_after</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>wal_writer_flush_after</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique à quelle fréquence (une quantité) le walwriter vide les journaux
     sur disque. Dans le cas où le dernier vidage est arrivé il y a moins de
     <varname>wal_writer_delay</varname> millisecondes et que moins de
     <varname>wal_writer_flush_after</varname> octets de WAL ont été produits
     depuis, les WAL sont seulement écrit via le système d'exploitation, et
     pas forcé sur disque. Si <varname>wal_writer_flush_after</varname> est
     configuré à <literal>0</literal>, le WAL est écrit et vidé à chaque fois
     que le walwriter doit écrire dans un WAL. Si cette valeur est indiquée
     sans unité, est est considérée comme un nombre de blocs dans les journaux
     de transactions, autrement dit <symbol>XLOG_BLCKSZ</symbol> octets,
     typiquement 8 Ko. La valeur par défaut est <literal>1MB</literal>. Ce
     paramètre est seulement configurable dans le fichier
     <filename>postgresql.conf</filename> ainsi que sur la ligne de commande
     du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-skip-threshold" xreflabel="wal_skip_threshold">
   <term><varname>wal_skip_threshold</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>wal_skip_threshold</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Quand <varname>wal_level</varname> vaut <literal>minimal</literal> et une
     transaction valide après création et réécriture une table permanente, ce
     paramètre détermine comment les nouvelles données persistent. Si la
     donnée est plus petit que ce paramétrage, l'écrire dans les journaux de
     transactions&nbsp;; sinon, utiliser une demande de synchronisation
     (fsync) des fichiers affectés. Suivant les propriétés de votre stockage,
     augmenter ou abaisser cette valeur pourrait aider si de telles
     validations de données ralentissent les transactions en cours. Si cette
     valeur est indiquée sans unité, elle est considérée être un nombre de Ko.
     La valeur par défaut est de deux mégaoctets (<literal>2MB</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
   <term><varname>commit_delay</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>commit_delay</varname>
     </primary>
    </indexterm>
    <para>
     Configurer <varname>commit_delay</varname> ajoute un délai
     avant qu'un vidage du journal de transactions ne soit effectué. Ceci
     peut améliorer les performances de la validation en groupe en permettant
     la validation d'un grand nombre transactions en un seul vidage des
     journaux, si la charge système est suffisamment importante pour que
     des transactions supplémentaires soient prêt ç être valider dans le
     même intervalle. Néanmoins, cela augmente aussi la latence jusqu'à
     la valeur de <varname>commit_delay</varname> pour chaque vidage de
     journaux. Comme le délai est perdu si aucune autre transaction n'est
     prête à être validée, un délai n'est respecté que si au moins
     <varname>commit_siblings</varname> autres transactions sont actives
     quand un vidage doit être initié. De plus, aucun délai ne sera pris
     en compte si <varname>fsync</varname> est désactivé. Si cette valeur
     est indiquée sans unité, elle est considérée comme un nombre de
     microsecondes. La valeur par
     défaut de <varname>commit_delay</varname> est zéro (aucun délai).
     Seuls les superutilisateurs peuvent modifier cette configuration.
    </para>
    <para>
     Dans les versions de <productname>PostgreSQL</productname> antérieures
     à la 9.3, <varname>commit_delay</varname> se comportait différemment
     et était bien moins efficace&nbsp;: il n'affectait que les validations
     plutôt que les vidages de journaux et attendait que le délai complet
     soit passé même si le vidage du journal était terminé avant. À partir
     de <productname>PostgreSQL</productname> 9.3, le premier processus prêt
     à vider le journal attend pendant l'intervalle configuré alors que les
     autres processus attendent que le premier termine l'opération de vidage.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
   <term><varname>commit_siblings</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>commit_siblings</varname>
     </primary>
    </indexterm>
    <para>
     Nombre minimum de transactions concurrentes ouvertes en même
     temps nécessaires avant
     d'attendre le délai <varname>commit_delay</varname>. Une valeur plus
     importante rend plus probable le fait qu'au moins une autre
     transaction soit prête à valider pendant le délai. La
     valeur par défaut est de cinq transactions.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-wal-checkpoints">
 <title>Points de vérification</title>

 <variablelist>
  <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
   <term><varname>checkpoint_timeout</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>checkpoint_timeout</varname></primary>
    </indexterm>
    <para>
     Temps maximum entre deux points de vérification automatique des WAL.
     Si cette valeur est indiquée sans unité, elle est considérée comme un nombre
     de secondes. L'intervalle valide se situe entre 30 secondes et un jour. La
     valeur par défaut est de cinq minutes. Augmenter ce paramètre peut
     accroitre le temps nécessaire à une récupération après un arrêt brutal.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-checkpoint-completion-target" xreflabel="checkpoint_completion_target">
   <term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>checkpoint_completion_target</varname></primary>
    </indexterm>
    <para>
     Précise la cible pour la fin du CHECKPOINT, sous le format d'une
     fraction de temps entre deux CHECKPOINT. La valeur par défaut est 0.5.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-checkpoint-flush-after" xreflabel="checkpoint_flush_after">
   <term><varname>checkpoint_flush_after</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>checkpoint_flush_after</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Quand plus que cette quantité de données ont été
     écrites par le processus d'écriture en tâche de fond (bgwriter), tente de
     forcer le système d'exploitation à écrire les données sur disque. Faire
     cela limite la quantité de données modifiées dans le cache disque du
     noyau, réduisant le risque de petites pauses dues à l'exécution d'un
     fsync à la fin d'un checkpoint ou à l'écriture massive en tâche de fond
     des données modifiées. Souvent, cela réduira fortement la latence des
     transactions mais il existe aussi quelques cas de dégradation des
     performances, tout spécialement avec les charges de travail plus
     importantes que <xref linkend="guc-shared-buffers"/>, mais plus petites
     que le cache disque du système d'exploitation. Ce paramètre pourrait ne
     pas avoir d'effet sur certaines plateformes. Si cette valeur est indiquée
     sans unité, elle est considérée comme un nombre de blocs, autrement dit
     <symbol>BLCKSZ</symbol> octets, typiquement 8 Ko. L'intervalle valide se situe
     entre <literal>0</literal>, qui désactive le <quote>writeback</quote>
     forcé, et <literal>2MB</literal>. La valeur par défaut est
     <literal>256KB</literal> sur Linux, <literal>0</literal> ailleurs. (Si
     <symbol>BLCKSZ</symbol> ne vaut pas 8&nbsp;ko, les valeurs par défaut et
     maximale n'évoluent pas de façon proportionnelle à cette constante.) Ce
     paramètre est seulement configurable dans le fichier
     <filename>postgresql.conf</filename> et à la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
   <term><varname>checkpoint_warning</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>checkpoint_warning</varname></primary>
    </indexterm>
    <para>
     Si deux points de vérification imposés par le remplissage des
     fichiers segment interviennent dans un délai plus court que celui
     indiqué par cette durée (ce qui laisse supposer qu'il faut augmenter la
     valeur du paramètre <varname>max_wal_size</varname>), un message
     est écrit dans le fichier de traces du serveur.
     Si cette valeur est indiquée sans unité, elle est considérée être un
     nombre de secondes. Par défaut, 30 secondes.
     Une valeur nulle (0) désactive cet avertissement.
     Aucun avertissement ne sera fait si <varname>checkpoint_timeout</varname>
     est inférieur à <varname>checkpoint_warning</varname>.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-wal-size" xreflabel="max_wal_size">
   <term><varname>max_wal_size</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>max_wal_size</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Taille maximale de l'augmentation des WAL entre deux points de
     vérification automatique des WAL. C'est une limite souple&nbsp;; la
     taille des WAL peut excéder <varname>max_wal_size</varname> sous
     certaines circonstances, comme une surcharge du serveur, une commande
     <varname>archive_command</varname> qui échoue, ou une configuration haute
     pour <varname>wal_keep_size</varname>. Si cette valeur est indiquée
     sans unité, elle est considérée être un nombre de Mo. La valeur par
     défaut est 1 Go. Augmenter ce paramètre peut augmenter le temps
     nécessaire pour le rejeu suite à un crash. Ce paramètre ne peut être
     configuré que dans le fichier <filename>postgresql.conf</filename> ou
     indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-min-wal-size" xreflabel="min_wal_size">
   <term><varname>min_wal_size</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>min_wal_size</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Tant que l'occupation disque reste sous la valeur de ce paramètre, les
     anciens fichiers WAL sont toujours recyclés pour une utilisation future
     lors des points de vérification, plutôt que supprimés. Ceci peut être
     utilisé pour s'assurer qu'un espace suffisant est réservé pour faire face
     à des pics dans l'usage des WAL, par exemple lorsque d'importants travaux
     en lots sont lancés. Si cette valeur est indiquée sans unité, elle est
     considérée être un nombre de Mo. La valeur par défaut est 80 Mo. Ce
     paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-wal-archiving">
 <title>Archivage</title>

 <variablelist>
  <varlistentry id="guc-archive-mode" xreflabel="archive_mode">
   <term><varname>archive_mode</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>archive_mode</varname></primary>
    </indexterm>
    <para>
     Quand <varname>archive_mode</varname> est activé, les segments
     WAL remplis peuvent être archivés en configurant <xref
     linkend="guc-archive-command"/>. En plus de
     <literal>off</literal>, pour désactiver, il y a deux autres
     modes&nbsp;: <literal>on</literal>, et <literal>always</literal>. Lors
     du fonctionnement normal du serveur, il n'y a pas de différences
     entre les deux modes, mais lorsqu'il est positionné sur
     <literal>always</literal>, l'archiveur des WAL est aussi activé lors
     d'un rejeu des archives et en mode standby. Dans le
     mode <literal>always</literal>, tous les fichiers restaurés
     à partir de l'archive ou envoyés lors de la réplication en
     continue seront archivés (à nouveau). Voir
     <xref linkend="continuous-archiving-in-standby"/> pour des détails.
    </para>

    <para>
     <varname>archive_mode</varname>
     et <varname>archive_command</varname> sont des variables
     séparées de façon à ce que <varname>archive_command</varname>
     puisse être modifiée sans quitter le mode d'archivage. Ce
     paramètre ne peut être configuré qu'au lancement du serveur.
     <varname>archive_mode</varname> ne peut pas être activé quand
     <varname>wal_level</varname> est configuré à
     <literal>minimal</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-archive-command" xreflabel="archive_command">
   <term><varname>archive_command</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>archive_command</varname></primary>
    </indexterm>
    <para>
     Commande shell à exécuter pour archiver un segment terminé de
     la série des fichiers WAL. Tout <literal>%p</literal> dans la
     chaîne est remplacé par le chemin du fichier à archiver
     et tout <literal>%f</literal> par le seul nom du fichier.
     (Le chemin est relatif au répertoire de travail du serveur,
     c'est-à-dire le répertoire de données du cluster.)
     <literal>%%</literal> est utilisé pour intégrer un caractère
     <literal>%</literal> dans la commande.  Il est important que la
     commande renvoit un code zéro seulement si elle a réussit l'archivage.
     Pour plus d'informations, voir <xref linkend="backup-archiving-wal"/>.
    </para>
    <para>
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de
     commande. Il est ignoré sauf si <varname>archive_mode</varname> a été
     activé au lancement du serveur. Si <varname>archive_command</varname>
     est une chaîne vide (la valeur par défaut) alors que
     <varname>archive_mode</varname> est activé, alors l'archivage des
     journaux de transactions est désactivé temporairement mais le serveur
     continue d'accumuler les fichiers des journaux de transactions dans
     l'espoir qu'une commande lui soit rapidement proposée. Configurer
     <varname>archive_command</varname> à une commande qui ne fait rien
     tout en renvoyant true, par exemple <literal>/bin/true</literal>
     (<literal>REM</literal> sur Windows),
     désactive l'archivage mais casse aussi la chaîne des fichiers des
     journaux de transactions nécessaires pour la restauration d'une
     archive. Cela ne doit donc être utilisé quand lors de circonstances
     inhabituelles.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
   <term><varname>archive_timeout</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>archive_timeout</varname></primary>
    </indexterm>
    <para>
     Le <xref linkend="guc-archive-command"/> n'est appelé que pour les
     segments WAL remplis. De ce fait, si le serveur n'engendre que peu de trafic
     WAL (ou qu'il y a des périodes de plus faible activité), il se peut qu'un long moment
     s'écoule entre la fin d'une transaction et son archivage certain.
     Pour limiter l'âge des données non encore archivées,
     <varname>archive_timeout</varname> peut être configuré pour forcer le
     serveur à basculer périodiquement sur un nouveau segment WAL.
     Lorsque ce paramètre est positif, le serveur bascule sur un nouveau
     segment à chaque fois que cette durée
     s'est écoulée depuis le dernier changement de segment et qu'il n'y a pas
     eu d'activité de la base de données, y compris un seul CHECKPOINT.
     (les points de reprise sont ne sont pas effectués s'il n'y a pas
     d'activité sur les bases.)
     Les fichiers archivés clos par anticipation suite à une
     bascule imposée sont toujours de la même taille que les fichiers
     complets. Il est donc déconseillé de configurer un temps très
     court pour <varname>archive_timeout</varname> &mdash; cela va faire exploser
     la taille du stockage des archives. Un paramétrage
     d'<varname>archive_timeout</varname> de l'ordre de la minute est
     habituellement raisonnable. Cependant, vous devriez considérer
     l'utilisation de la réplication en flux à la place de l'archivage si
     vous voulez que les données soient envoyées du serveur maître plus
     rapidement que cela. Si cette valeur est indiquée sans unité, elle est
     considérée comme un nombre de secondes. Ce paramètre ne peut être
     configuré que dans le fichier <filename>postgresql.conf</filename> ou
     indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-wal-archive-recovery">

 <title>Restauration des archives</title>

 <indexterm>
  <primary>configuration</primary>
  <secondary>de la restauration</secondary>
  <tertiary>d'un serveur standby</tertiary>
 </indexterm>

 <para>
  Cette section décrit la configuration s'appliquant uniquement pendant la
  durée d'une restauration. Les paramètres doivent être reconfigurés pour
  toute restauration que vous souhaitez réaliser.
 </para>

 <para>
  La <quote>restauration</quote> couvre l'utilisation d'un serveur en tant
  que standby ainsi que l'exécution d'une restauration ciblée. Typiquement,
  le mode standby sera utilisé pour fournir de la haute disponibilité et/ou
  de la répartition de charge en lecture, alors qu'une restauration ciblée
  sera utilisée dans le cas d'une perte de données.
 </para>

 <para>
  Pour démarrer le serveur en mode standby, créez le fichier
  <filename>standby.signal</filename><indexterm><primary>standby.signal</primary></indexterm>
  dans le répertoire principal des données. Le serveur entrera en mode
  restauration et n'arrêtera la restauration que quand la fin d'un WAL
  archivé est rencontré, mais il essaiera de continuer la restauration en
  se connectant au serveur d'envoi spécifié par le paramètre
  <varname>primary_conninfo</varname> et/ou en récupérant les segments WAL
  avec la <varname>restore_command</varname>. Pour ce mode, les paramètres
  de cette section et de <xref
  linkend="runtime-config-replication-standby"/> sont intéressants. Les
  paramètres de <xref linkend="runtime-config-wal-recovery-target"/> seront
  aussi appliqués mais ne sont généralement pas utiles dans ce mode.
 </para>

 <para>
  Pour démarrer le serveur en mode restauration ciblée, créez le fichier
  <filename>recovery.signal</filename><indexterm><primary>recovery.signal</primary></indexterm>
  dans le répertoire des données. Si les fichiers
  <filename>standby.signal</filename> et
  <filename>recovery.signal</filename> sont créés, le mode standby est
  prioritaire. Le mode de restauration ciblée s'arrêtera quand le WAL
  archivé est complètement rejoué ou quand
  <varname>recovery_target</varname> est atteint. Dans ce mode, les
  paramètres de cette section et de <xref
  linkend="runtime-config-wal-recovery-target"/> seront utilisés.
 </para>

 <variablelist>
  <varlistentry id="guc-restore-command" xreflabel="restore_command">
   <term><varname>restore_command</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>restore_command</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     La commande shell locale à exécuter pour récupérer un segment WAL
     archivé. Ce paramètre est requi pour une restauration d'archive, et
     optionnel pour une réplication en streaming. Tout
     <literal>%f</literal> dans la chaîne est remplacé par le nom du
     fichier à récupérer dans le répertoire d'archivage, et tout
     <literal>%p</literal> est remplacé par le nom du chemin destination de
     la copie sur le serveur. (Le chemin est relatif au répertoire actuel,
     donc le répertoire de données principal de l'instance.) Tout
     <literal>%r</literal> est remplacé par le nom du fichier contenant le
     dernier point de redémarrage valide. C'est le fichier le plus récent à
     conserver pour permettre le lancement d'une restauration, pour que
     cette information puisse être utilisée pour tronquer l'archive au
     minimum requis pour permettre le redémarrage de la restauration en
     cours. <literal>%r</literal> est généralement utilisé seulement pour
     les configurations warm-standby (voir <xref linkend="warm-standby"/>).
     Écrire <literal>%%</literal> pour ajouter un caractère
     <literal>%</literal>.
    </para>

    <para>
     Il est important que la commande renvoie un code de sortie zéro
     uniquement en cas de succès. La commande <emphasis>doit</emphasis>
     gérer le fait que des fichiers ne soient pas présents dans les
     archives&nbsp;; dans ce cas, elle doit renvoyer un code de sortie
     différent de zéro. Par exemple&nbsp;:
     <programlisting>
restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy "C:\\server\\archivedir\\%f" "%p"'  # Windows
     </programlisting>
     Il existe une exception quand la commande est arrêtée avec un signal
     (autre que <systemitem>SIGTERM</systemitem>, qui est utilisé pour
     l'arrêt du serveur de bases de données) ou une erreur provenant du
     shell (par exemple <quote>command not found</quote>), alors la
     restauration s'arrêtera et le serveur ne démarrera pas.
    </para>

    <para>
     Cette paramètre peut seulement être configuré au démarrage du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-archive-cleanup-command" xreflabel="archive_cleanup_command">
   <term><varname>archive_cleanup_command</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>archive_cleanup_command</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Ce paramètre optionnel indique une commande shell exécutée à chaque
     restartpoint. Le but de <varname>archive_cleanup_command</varname> est
     de fournir un mécanisme pour nettoyer les anciens fichiers WAL
     archivés qui ne sont plus nécessaire sur le serveur standby. Tout
     <literal>%r</literal> est remplacé par le nom du fichier contenant le
     dernier point de redémarrage valide. C'est le fichier le plus ancien à
     <emphasis>conserver</emphasis> pour permettre une restauration, et
     donc tous les fichiers plus ancien que <literal>%r</literal> peuvent
     être supprimés en toute sécurité. Cette information peut être utilisée
     pour tronquer les archives au minimum requis pour supporter le
     redémarrage à partir de la restauration en cours. Le module <xref
     linkend="pgarchivecleanup"/> est souvent utilisé dans
     <varname>archive_cleanup_command</varname> pour les configurations
     avec un seul standby, par exemple&nbsp;::
     <programlisting>archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'</programlisting>
        Notez néanmoins que si plusieurs serveurs standby exécutent leur
        restauration à partir du même répertoire d'archivage, vous aurez
        besoin de vous assurer que vous ne supprimez que des fichiers WAL dont
        aucun serveur n'a besoin. <varname>archive_cleanup_command</varname>
        serait typiquement utilisé dans une configuration warm-standby (voir
        <xref linkend="warm-standby"/>). Écrire <literal>%%</literal> pour
        intégrer un vrai caractère <literal>%</literal> dans la commande.
       </para>
       <para>
        Si la commande renvoie un code de sortie différent de zéro, alors un
        message d'avertissement sera écrit dans les traces. Une exception
        survient quand la commande est terminée par un signal ou une erreur du
        shell (tel que <quote>command not found</quote>), une erreur fatale
        sera renvoyée.
       </para>
       <para>
        Ce paramètre peut seulement être configuré dans le fichier
        <filename>postgresql.conf</filename> ou sur la ligne de commande du
        serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-end-command" xreflabel="recovery_end_command">
      <term><varname>recovery_end_command</varname> (<type>string</type>)
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_end_command</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ce paramètre indique une commande shell à exécuter une fois arrivé à
        la fin de la restauration. Ce paramètre est optionnel. Le but de
        <varname>recovery_end_command</varname> est de fournir un mécanisme
        pour nettoyer après une réplication ou une restauration. Tout
        <literal>%r</literal> est remplacé par le nom du fichier contenant le
        dernier point de redémarrage valide, comme dans <xref
        linkend="guc-archive-cleanup-command"/>.
       </para>
       <para>
        Si la commande renvoie un code de sortie différent de zéro, alors un
        message d'avertissement sera écrit dans les traces et la base de
        données continuera à démarrer. Une exception survient si la commande a
        été terminée par un signal ou une erreur du shell (tel que
        <quote>command not found</quote>), la base de données ne continuera
        pas avec le démarrage.
       </para>
       <para>
        Ce paramètre peut seulement être configuré dans le fichier
        <filename>postgresql.conf</filename> ou sur la ligne de commande du
        serveur.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="runtime-config-wal-recovery-target">

    <title>Cible de restauration</title>

     <para>
      Par défaut, la restauration continuera jusqu'à la fin des WAL. Les
      paramètres suivants peuvent être utilisés pour indiquer un point d'arrêt
      précédent. Au moins un des paramètres parmi
      <varname>recovery_target</varname>,
      <varname>recovery_target_lsn</varname>,
      <varname>recovery_target_name</varname>,
      <varname>recovery_target_time</varname> et
      <varname>recovery_target_xid</varname> peut être utilisé. Si plus d'un
      paramètre est indiqué dans le fichier de configuration, une erreur sera
      renvoyée. Ces paramètres ne peuvent être configurés qu'au démarrage du
      serveur.
     </para>

     <variablelist>
     <varlistentry id="guc-recovery-target" xreflabel="recovery_target">
      <term><varname>recovery_target</varname><literal> = 'immediate'</literal>
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_target</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ce paramètre indique que la restauration doit s'arrêter dès qu'un
        point de cohérence est atteint, autrement dit le plus tôt possible.
        Lors de la restauration d'une sauvegarde, cela signifie le moment où
        la sauvegarde s'est terminée.
       </para>
       <para>
        Techniquement, la valeur est une chaîne de caractère, mais
        <literal>'immediate'</literal> est actuellement la seule valeur
        autorisée.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-name" xreflabel="recovery_target_name">
      <term><varname>recovery_target_name</varname> (<type>string</type>)
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_target_name</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ce paramètre indique le point de restauration nommé (créé précédemment
        avec <function>pg_create_restore_point()</function>) où la
        restauration doit s'arrêter.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-time" xreflabel="recovery_target_time">
      <term><varname>recovery_target_time</varname> (<type>timestamp</type>)
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_target_time</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ce paramètre indique jusqu'à quel date et heure la restauration doit
        s'arrêter. Le point d'arrêt précis est aussi influencé par <xref
        linkend="guc-recovery-target-inclusive"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-xid" xreflabel="recovery_target_xid">
      <term><varname>recovery_target_xid</varname> (<type>string</type>)
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_target_xid</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ce paramètre indique l'identifiant de transaction final où la
        restauration s'arrêtera. Gardez en tête que, bien que les identifiants
        soient affectés séquentiellement au début de la transaction, la
        transaction peut se terminer dans un ordre numérique différent. Les
        transactions qui seront restaurées sont celles validées avant (et en
        option en incluant) celle indiquée. Le point d'arrêt précis est aussi
        influencé par <xref linkend="guc-recovery-target-inclusive"/>.
       </para>

       <para>
        La valeur de ce paramètre est un horodatage dans le même format que
        celui accepté par le type de données <type>timestamp with time
        zone</type>, à l'exception que vous ne pouvez pas utiliser une
        abréviation de fuseau horaire (sauf si le paramètre <xref
        linkend="guc-timezone-abbreviations"/> a été configuré précédemment
        dans le fichier de configuration). Le style préféré est d'utiliser un
        décalage numérique à partir d'UTC. Vous pouvez aussi écrire un nom
        complet de fuseau horaire, par exemple
        <literal>Europe/Helsinki</literal>, et non pas
        <literal>EEST</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-lsn" xreflabel="recovery_target_lsn">
      <term><varname>recovery_target_lsn</varname> (<type>pg_lsn</type>)
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_target_lsn</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ce paramètre indique le LSN où la restauration s'arrêtera. Le point
        d'arrêt précis est aussi influencé par <xref
        linkend="guc-recovery-target-inclusive"/>. Ce paramètre est analysé en
        utilisant le type de données système <link
        linkend="datatype-pg-lsn"><type>pg_lsn</type></link>.
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

     <para>
       Les options suivants indiquent plus en détails la cible de
       restauration, et affectent ce qui survient quand la cible est
       atteinte&nbsp;:
     </para>

     <variablelist>
     <varlistentry id="guc-recovery-target-inclusive"
                   xreflabel="recovery_target_inclusive">
      <term><varname>recovery_target_inclusive</varname> (<type>boolean</type>)
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_target_inclusive</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Indique s'il faut arrêter juste après la cible de restauration
        indiquée (<literal>on</literal>) ou juste avant
        (<literal>off</literal>). S'applique quand <xref
        linkend="guc-recovery-target-lsn"/>, <xref
        linkend="guc-recovery-target-time"/> ou <xref
        linkend="guc-recovery-target-xid"/> est spécifié. Ce paramètre
        contrôle si les transactions ayant exactement, respectivement, le même
        emplacement WAL (LSN), heure de validation, ou identifiant de
        transaction seront incluses dans la restauration. La valeur par défaut
        est <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-timeline"
                   xreflabel="recovery_target_timeline">
      <term><varname>recovery_target_timeline</varname> (<type>string</type>)
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_target_timeline</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Indique la restauration jusqu'à une certaine timeline. La valeur peut
        être un identifiant numérique de timeline. La valeur
        <literal>current</literal> restaure uniquement sur la même timeline
        que celle de la sauvegarde de base. La valeur
        <literal>latest</literal> restaure jusqu'à la dernière timeline
        trouvée dans les archives, ce qui est utile pour un serveur standby.
        <literal>latest</literal> est la valeur par défaut.
       </para>

       <para>
        Vous avez seulement besoin de configurer ce paramètre dans les
        situations complexes de re-restaurations, où vous avez besoin de
        retourner à un état qui a été lui-même atteint après une restauration
        à un point dans le temps. Voir <xref linkend="backup-timelines"/> pour
        plus de détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-action"
                   xreflabel="recovery_target_action">
      <term><varname>recovery_target_action</varname> (<type>enum</type>)
      <indexterm>
        <primary>paramètre de configuration <varname>recovery_target_action</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Indique l'action que le serveur devra prendre une fois la cible de
        restauration atteinte. La valeur par défaut est
        <literal>pause</literal>, ce qui signifie que la restauration sera
        mise en pause. <literal>promote</literal> signifie que le processus de
        restauration finira et que le serveur démarrera pour accepter toute
        connexion. Enfin, <literal>shutdown</literal> arrêtera le serveur
        après avoir atteint la cible de restauration.
       </para>
       <para>
        Le but de la configuration <literal>pause</literal> est de permettre
        d'exécuter des requêtes sur la base pour vérifier si la cible de
        restauration est le point réellement souhaité pour la fin de la
        restauration. La mise en pause peut être annulée en utilisant
        <function>pg_wal_replay_resume()</function> (voir <xref
        linkend="functions-recovery-control-table"/>), qui cause ainsi la fin
        de la restauration. Si la cible de restauration n'est pas le point
        d'arrêt souhaité, alors arrêtez le serveur, modifiez la configuration
        de la cible de restauration à un point ultérieur et redémarrer pour
        continuer la restauration.
       </para>
       <para>
        La configuration <literal>shutdown</literal> est utile pour avoir
        l'instance prête au point de rejeu exact désiré. L'instance sera
        toujours capable de rejouer plus d'enregistrements WAL (et en fait,
        continuera à rejouer des enregistrements WAL depuis le dernier
        checkpoint à son redémarrage).
       </para>
       <para>
        Notez que comme <filename>recovery.signal</filename> ne sera pas
        supprimé quand <varname>recovery_target_action</varname> est configuré
        à <literal>shutdown</literal>, tout redémarrage finira avec un arrêt
        immédiat à moins que la configuration ait changé ou que le fichier
        <filename>recovery.signal</filename> ait été supprimé manuellement.
       </para>
       <para>
        Cette configuration n'a pas d'effet si aucune cible de restauration
        n'a été configurée. Si <xref linkend="guc-hot-standby"/> n'est pas
        activé, une configuration à <literal>pause</literal> agira de la même
        façon qu'une configuration à <literal>shutdown</literal>.
        Si la cible de restauration est atteinte alors qu'une promotion est en
        cours, une configuration à <literal>pause</literal> agira de la même
        façon qu'une configuration à <literal>promote</literal>.
       </para>
       <para>
        Dans tous les cas, si une cible de restauration est configurée mais
        que la restauration d'archive se termine avant d'avoir atteint la
        cible, le serveur s'arrêtera avec une erreur fatale.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

</sect1>

<sect1 id="runtime-config-replication">
<title>Réplication</title>

<para>
 Ces paramètres contrôlent le comportement de la fonctionnalité interne
 de <firstterm>réplication en flux</firstterm> (voir
 <xref linkend="streaming-replication"/>).  Les serveurs seront soit
 maître soit esclave. Les maîtres peuvent envoyer des données alors
 que les esclaves sont toujours des récepteurs des données de réplication.
 Quand la réplication en cascade est utilisée (voir <xref
 linkend="cascading-replication"/>), les esclaves peuvent aussi
 envoyer des données en plus de les réceptionner. Les paramètres sont
 principalement pour les serveurs d'envoi et en standby, bien que
 certains n'ont un intérêt que pour le serveur maître. Les
 paramètres peuvent varier dans l'instance sans problèmes si cela est
 requis.
</para>

<sect2 id="runtime-config-replication-sender">
 <title>Serveurs d'envoi</title>

 <para>
  Ces paramètres peuvent être configurés sur les serveur qui
  va envoyer les données de réplication à un ou plusieurs serveurs.
  Le maître est toujours un serveur en envoi. Donc ces paramètres doivent
  être configurés sur le maître. Le rôle et la signification de ces
  paramètres ne changent pas après qu'un serveur standby soit devenu le
  serveur maître.
 </para>

 <variablelist>
  <varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
   <term><varname>max_wal_senders</varname> (<type>integer</type>)</term>
   <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>max_wal_senders</varname></primary>
   </indexterm>
    <para>
     Indique le nombre maximum de serveurs standby (autrement dit, le nombre
     maximum de processus walsender en cours d'exécution). La valeur par
     défaut est <literal>10</literal>. La valeur <literal>0</literal> signifie
     que la réplication est désactivée. Une déconnexion abrute d'un client de
     réplication pourrait avoir pour effet un slot de connexion orpheline
     jusqu'au dépassement d'un délai, donc ce paramètre peut être configuré
     un peu au-dessus du nombre maximum de clients attendus pour que les
     clients déconnectés puissent immédiatement se reconnecter. Ce paramètre
     n'est configurable qu'au démarrage du serveur.
     <varname>wal_level</varname> doit être configuré au minimum à
     <literal>replica</literal> pour permettre des connexions des serveurs
     esclaves.
    </para>

    <para>
      Lors de l'exécution d'un serveur standby, vous devez configurer ce
      paramètre à la même valeur ou à une valeur supérieure à celle se
      trouvant sur le serveur d'envoi. Dans le cas contraire, les requêtes ne
      seront pas autorisées sur le serveur standby.
     </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
   <term><varname>max_replication_slots</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>max_replication_slots</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique le nombre maximum de slots de réplication (voir <xref
     linkend="streaming-replication-slots"/>) que le serveur peut accepter.
     La valeur par défaut est 10. Ce paramètre est seulement configurable
     au lancement du serveur.
     Descendre ce paramètre à une valeur inférieure au nombre de slots de
     réplication existants empêchera le serveur de démarrer.
     <varname>wal_level</varname> doit aussi être positionné à
     <literal>replica</literal> ou au-delà pour permettre l'utilisation des
     slots de réplication.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-keep-size" xreflabel="wal_keep_size">
   <term><varname>wal_keep_size</varname> (<type>integer</type>)</term>
   <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>wal_keep_size</varname></primary>
   </indexterm>
    <para>
     Indique la taille minimale de journaux de transactions passés à conserver dans
     le répertoire <filename>pg_wal</filename>, au cas où un serveur en
     attente a besoin de les récupérer pour la réplication en flux.
     Si un serveur en attente connecté
     au primaire se laisse distancer par le serveur en envoi pour plus de
     <varname>wal_keep_size</varname> méga-octets, le serveur en envoi pourrait
     supprimer un journal de transactions toujours utile au serveur en
     attente, auquel cas la connexion de réplication serait fermée.
     Les connexions en aval seront également vouées à l'échec.
     (Néanmoins, le serveur en attente peut continuer la restauration en
     récupérant le segment des archives si l'archivage des journaux de
     transactions est utilisé.)
    </para>

    <para>
     Cette option ne configure que la volumétrie minimale de fichiers à
     conserver dans <filename>pg_wal</filename>&nbsp;; le système pourrait
     avoir besoin de conserver plus de fichiers pour l'archivage ou pour
     restaurer à partir d'un CHECKPOINT. Si <varname>wal_keep_size</varname>
     vaut zéro (ce qui est la valeur par défaut), le système ne conserve aucun
     fichier supplémentaire pour les serveurs en attente et le nombre des
     anciens journaux disponibles pour les serveurs en attente est seulement
     basé sur l'emplacement du dernier CHECKPOINT ainsi que sur l'état de
     l'archivage des journaux de transactions. Si cette valeur est configurée
     sans unité, elle est prise comme des méga-octets. Ce paramètre peut
     seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-slot-wal-keep-size" xreflabel="max_slot_wal_keep_size">
   <term><varname>max_slot_wal_keep_size</varname> (<type>integer</type>)
   <indexterm>
    <primary>paramètre de configuration <varname>max_slot_wal_keep_size</varname></primary>
   </indexterm>
   </term>
   <listitem>
   <para>
    Indique la taille maximale des journaux de transaction que les <link
    linkend="streaming-replication-slots">slots de réplication</link> sont
    autorisés à conserver dans le répertoire <filename>pg_wal</filename> lors
    d'un checkpoint. Si <varname>max_slot_wal_keep_size</varname> vaut -1
    (valeur par défaut), les slots de réplication contiennent une quantité
    illimitée de fichiers de journaux de transactions. Si la valeur du
    restart_lsn d'un slot de réplication est en retard de plus de ce nombre de
    mégaoctets depuis le LSN actuel, le standby utilisant le slot pourrait ne
    plus pouvoir continuer la réplication du fait de la suppression des
    fichiers WAL requis. Vous pouvez avoir la disponibilité des journaux de
    transactions pour les slots de réplication dans la vue <link
    linkend="view-pg-replication-slots">pg_replication_slots</link>.
   </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-sender-timeout" xreflabel="wal_sender_timeout">
   <term><varname>wal_sender_timeout</varname> (<type>integer</type>)</term>
   <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>wal_sender_timeout</varname></primary>
   </indexterm>
    <para>
     Termine les connexions de réplication qui sont inactives pour plus
     longtemps que cette durée. Ceci est utile pour que le serveur d'envoi
     détecte le crash d'un standby ou une perte réseau. Si cette valeur est
     spécifiée sans unité, elle est comprise comme un nombre de millisecondes.
     La valeur par défaut est de 60 secondes. À zéro, le mécanisme est
     désactivé.
    </para>
    <para>
     Avec un cluster distribué sur plusieurs lieux géographiques, utiliser
     plusieurs valeurs par lieu fournit plus de flexibilité dans la gestion
     du cluster. Une valeur plus petite est utile pour une détection plus
     rapide des problèmes avec un standby ayant un réseau à basse latence.
     Une valeur plus haute aide à mieux juger la santé d'un standby si ce
     dernier est situé sur un lieu distant, avec une connexion réseau à
     haute latence.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-track-commit-timestamp" xreflabel="track_commit_timestamp">
   <term><varname>track_commit_timestamp</varname> (<type>boolean</type>)
    <indexterm>
        <primary>paramètre de configuration <varname>track_commit_timestamp</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Enregistre la date et l'heure des transactions validées. Ce
     paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande
     du serveur. La valeur par défaut est <literal>off</literal>.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</sect2>

<sect2 id="runtime-config-replication-master">
 <title>Serveur maître</title>

 <para>
  Ces paramètres peuvent être configurés sur le serveur maître/primaire
  pour envoyer des données de réplication à un ou plusieurs serveurs en
  standby. Notez qu'en plus de ces paramètres,
  <xref linkend="guc-wal-level"/> doit être configuré correctement sur
  le serveur maître et que l'archivage des journaux de transactions
  peut aussi être activé (voir <xref linkend="runtime-config-wal-archiving"/>).
  Les valeurs de ces paramètres ne sont pas pris en compte sur les serveurs
  en standby. Il peut être intéressant de les mettre en place malgré tout en
  préparation de la possibilité qu'un standby devienne le maître.
 </para>

 <variablelist>

  <varlistentry id="guc-synchronous-standby-names" xreflabel="synchronous_standby_names">
   <term><varname>synchronous_standby_names</varname> (<type>string</type>)</term>
   <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>synchronous_standby_names</varname></primary>
   </indexterm>
    <para>
     Précise une liste de noms de serveurs en standby acceptant une <firstterm>réplication
      synchrone</firstterm>, comme décrite dans <xref
     linkend="synchronous-replication"/>. À tout moment, il y aura au
     moins un serveur standby synchrone actif&nbsp;; les
     transactions en attente de validation seront autorisées à
     continuer après que les serveurs standbys synchrones auront confirmé la réception
     des données. Les standbys synchrones sont les serveurs standbys
     nommés dans cette liste, qui sont à la fois connectés et qui récupèrent
     les données en temps réel (comme indiqué par l'état
     <literal>streaming</literal> dans la vue
     <link linkend="monitoring-pg-stat-replication-view">
     <structname>pg_stat_replication</structname></link>).
     Indiquer plus d'un serveur standby synchrone permet une meilleure haute-
     disponibilité et une meilleure protection contre les pertes de données.
    </para>
    <para>
     Le nom d'un serveur standby est indiqué dans ce cas au niveau du
     paramètre <varname>application_name</varname> du standby, tel qu'il est
     configuré dans l'information de connexion du standby. Dans le cas d'un
     standby en réplication physique, ceci doit être configuré dans le
     paramètre <varname>primary_conninfo</varname>. La valeur par défaut est
     la configuration de <xref linkend="guc-cluster-name"/> si configuré, et
     sinon <literal>walreceiver</literal>. Pour la réplication logique, cela
     peut se configurer dans l'information de connexion de la souscription, et
     vaut par défaut le nom de la souscription. Pour les autres consommateurs
     de flux de réplication, veuillez consulter leur documentation.
    </para>
    <para>
     Ce paramètre indique une liste de serveurs standbys en utilisant une des
     deux syntaxes suivantes&nbsp;:
<synopsis>
[FIRST] <replaceable class="parameter">nb_sync</replaceable> ( <replaceable class="parameter">nom_standby</replaceable> [, ...] )
ANY <replaceable class="parameter">nb_sync</replaceable> ( <replaceable class="parameter">nom_standby</replaceable> [, ...] )
<replaceable class="parameter">nom_standby</replaceable> [, ...]
     </synopsis>
     où <replaceable class="parameter">num_sync</replaceable> est le nombre de
     standbys synchrones dont les transactions doivent attendre des réponses,
     et <replaceable class="parameter">nom_standby</replaceable> est le nom
     d'un serveur secondaire (standby).
     <literal>FIRST</literal> et <literal>ANY</literal> spécifie la méthode
     pour choisir les serveurs secondaires synchrones dans la liste des
     serveurs.
    </para>
    <para>
     Le mot-clé <literal>FIRST</literal>, utilisé avec
     <replaceable class="parameter">num_sync</replaceable>, spécifie une
     réplication synchrone basée sur la priorité, si bien que chaque validation
     de transaction attendra jusqu'à ce que les enregistrements des WAL soient
     répliqués de manière synchrone sur <replaceable
     class="parameter">num_sync</replaceable> serveurs secondaires, choisis
     en fonction de leur priorités.  Par exemple, utiliser la valeur
     <literal>FIRST 3 (s1, s2, s3, s4)</literal> forcera chaque commit à
     attendre la réponse de trois serveurs secondaire de plus haute priorité
     choisis parmis les serveurs secondaires <literal>s1</literal>,
     <literal>s2</literal>, <literal>s3</literal> et <literal>s4</literal>.
     Les noms de serveurs secondaires qui apparaissent avant dans la liste
     reçoivent des priorités plus importantes et seront pris en considération
     pour être synchrones. Les autres serveurs secondaires apparaissant plus
     loin dans cette liste représentent les serveurs secondaire potentiellement
     synchrones. Si l'un des serveurs secondaires actuellement synchrones se
     déconnecte pour quelque raison que ce soit, il sera remplacé par le
     serveur secondaire de priorité la plus proche.  Le mot clé
     <literal>FIRST</literal> est facultatif.
    </para>
    <para>
     Le mot-clé <literal>ANY</literal>, utilisé avec
     <replaceable class="parameter">num_sync</replaceable>, spécifie une
     réplication synchrone basée sur un quorum, si bien que chaque validation
     de transaction attendra jusqu'à ce que les enregistrements des WAL soient
     répliqués de manière synchrone sur <emphasis>au moins</emphasis>
     <replaceable class="parameter">num_sync</replaceable> des serveurs
     secondaires listés.  Par exemple, utiliser la valeur
     <literal>ANY 3 (s1, s2, s3, s4)</literal> ne bloquera chaque commit que le
     temps qu'au moins trois des serveurs de la liste <literal>s1</literal>,
     <literal>s2</literal>, <literal>s3</literal> and <literal>s4</literal>
     aient répondu, quels qu'ils soient.
    </para>
    <para>
     <literal>FIRST</literal> et <literal>ANY</literal> sont insensibles à la
     casse.  Si ces mots-clés sont utilisés comme nom d'un serveur secondaire,
     le paramètre <replaceable class="parameter">standby_name</replaceable>
     doit être entouré de guillemets doubles.
    </para>
    <para>
     La troisième syntaxe était utilisée avant
     <productname>PostgreSQL</productname> version 9.6 est toujours
     supportée. Cela revient à la nouvelle syntaxe avec
     <literal>FIRST</literal> et <replaceable
     class="parameter">num_sync</replaceable> égal à 1.  Par exemple,
     <literal>FIRST 1 (s1, s2)</literal> et <literal>s1, s2</literal> ont la
     même signification : soit <literal>s1</literal> soit <literal>s2</literal>
     est choisit comme serveur secondaire synchrone.
    </para>
    <para>
     L'entrée spéciale <literal>*</literal> correspond à tout nom de standby.
    </para>
    <para>
     Il n'existe pas de mécanisme pour forcer l'unicité des noms de standby.
     Dans le cas de noms en double, un des standbys concernés sera considéré
     d'une priorité plus haute mais il n'est pas possible de prévoir lequel.
    </para>
    <note>
     <para>
      Chaque <replaceable class="parameter">nom_standby</replaceable> doit
      avoir la forme d'un identifiant SQL valide, sauf si <literal>*</literal>
      est utilisé. Vous pouvez utiliser des guillemets doubles si nécessaire
      mais notez que les <replaceable
      class="parameter">nom_standby</replaceable> sont comparés au nom
      d'application des standbys sans faire attention à la casse, qu'ils aient
      des guillemets doubles ou non.
     </para>
    </note>
    <para>
     Si aucun nom de serveur en standby synchrone n'est indiqué ici, alors
     la réplication synchrone n'est pas activée et la validation
     des transactions n'attendra jamais la réplication. Ceci est la
     configuration par défaut. Même si la réplication synchrone est
     activée, les transactions individuelles peuvent être configurées
     pour ne pas avoir à attendre la réplication en configurant le
     paramètre <xref linkend="guc-synchronous-commit"/> à
     <literal>local</literal> ou <literal>off</literal>.
    </para>
    <para>
     Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande
     du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-defer-cleanup-age" xreflabel="vacuum_defer_cleanup_age">
   <term><varname>vacuum_defer_cleanup_age</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_defer_cleanup_age</varname></primary>
    </indexterm>
    <para>
     Indique le nombre de transactions pour lesquelles <command>VACUUM</command>
     et les mises à jour <acronym>HOT</acronym> vont différer le nettoyage des
     versions de lignes mortes. La valeur par défaut est de 0 transactions.
     Cela signifie que les versions de lignes mortes peuvent être supprimées
     dès que possible, autrement dit dès qu'elles ne sont plus visibles par
     les transactions ouvertes. Vous pouvez configurer ce paramètre à une valeur
     supérieure à 0 sur un serveur primaire qui dispose de serveurs en Hot
     Standby comme décrit dans <xref linkend="hot-standby"/>. Ceci donne plus
     de temps aux requêtes des serveur en standby pour qu'elles se terminent
     sans engendrer de conflits dû à un nettoyage rapide des lignes. Néanmoins,
     comme la valeur correspond à un nombre de transactions en écriture
     survenant sur le serveur primaire, il est difficile de prédire le temps
     additionnel que cela donne aux requêtes exécutées sur le serveur en standby.
     Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande
     du serveur.
    </para>
    <para>
     Vous pouvez aussi configurer <varname>hot_standby_feedback</varname>
     sur les serveurs standby à la place de ce paramètre.
    </para>
    <para>
     Ceci n'empêche pas le nettoyage des lignes mortes qui ont atteint l'âge
     spécifié par <varname>old_snapshot_threshold</varname>.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-replication-standby">
 <title>Serveurs standby (en attente)</title>

 <para>
  Ces paramètres contrôlent le comportement d'un serveur en attente pour
  qu'il puisse recevoir les données de réplication. Leur configuration
  sur le serveur maître n'a aucune importance.
 </para>

 <variablelist>

  <varlistentry id="guc-primary-conninfo" xreflabel="primary_conninfo">
   <term><varname>primary_conninfo</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>primary_conninfo</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique une chaîne de connexion à utiliser pour la connexion du serveur
     standby vers le serveur primaire. Cette chaîne doit être dans le format
     décrit dans <xref linkend="libpq-connstring"/>. Si une option n'est pas
     spécifiée dans cette chaîne, alors la variable d'environnement
     correspondante (voir <xref linkend="libpq-envars"/>) est vérifiée. Si la
     variable d'environnement n'est pas configurée, la valeur par défaut est
     utilisée.
    </para>
    <para>
     La chaîne de connexion doit indiquer le nom d'hôte (ou l'adresse) du
     serveur d'envoi, ainsi que le numéro de port s'il ne s'agit pas du même
     numéro de port que la valeur par défaut du serveur standby. De plus,
     indiquez un nom d'utilisateur correspondant à un rôle suffisamment
     privilégié du serveur d'envoi (voir <xref
     linkend="streaming-replication-authentication"/>). Un mot de passe doit
     aussi être fourni si le serveur d'envoi réclame une authentification par
     mot de passe. Il peut être indiqué dans la chaîne
     <varname>primary_conninfo</varname> ou dans un fichier
     <filename>~/.pgpass</filename> sur le serveur standby (utiliser
     <literal>replication</literal> comme nom de base). N'indiquez pas de nom
     de base dans la chaîne <varname>primary_conninfo</varname>.
    </para>
    <para>
     Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur. Si ce paramètre est modifié alors que le processus walreceiver
     est en cours d'exécution, le processus reçoit une demandé d'arrêt et sera
     redémarré avec la nouvelle configuration (sauf si
     <varname>primary_conninfo</varname> est une chaîne vide). Il n'a pas
     d'effet si le serveur n'est pas en mode standby.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry id="guc-primary-slot-name" xreflabel="primary_slot_name">
   <term><varname>primary_slot_name</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>primary_slot_name</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique en option un slot de réplication existant à utiliser lors de la
     connexion au serveur d'envoi via la réplication en flux pour contrôler la
     suppression des journaux du serveur d'envoi (voir <xref
     linkend="streaming-replication-slots"/>). Ce paramètre peut seulement
     être configuré dans le fichier <filename>postgresql.conf</filename> ou
     sur la ligne de commande du serveur. Si ce paramètre est modifié alors
     que le processus walreceiver est en cours d'exécution, le processus
     reçoit une demandé d'arrêt et sera redémarré avec la nouvelle
     configuration (sauf si <varname>primary_conninfo</varname> est une chaîne
     vide). Il n'a pas d'effet si <varname>primary_conninfo</varname> n'est
     pas configuré ou si le serveur n'est pas en mode standby.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-promote-trigger-file" xreflabel="promote_trigger_file">
   <term><varname>promote_trigger_file</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>promote_trigger_file</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique un fichier trigger dont la présence termine la restauration sur
     le serveur secondaire. Même si cette valeur n'est pas configurée, vous
     pouvez toujours promouvoir le standby en utilisant <command>pg_ctl
      promote</command> ou en appelant <function>pg_promote()</function>. Ce
     paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-hot-standby" xreflabel="hot_standby">
   <term><varname>hot_standby</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>hot_standby</varname></primary>
    </indexterm>
    <para>
     Indique si vous pouvez vous connecter et exécuter des requêtes lors de
     la restauration, comme indiqué dans <xref linkend="hot-standby"/>.
     Activé par défaut. Ce paramètre peut seulement être configuré au
     lancement du serveur. Il a un effet seulement lors de la restauration
     des archives ou en mode serveur en attente.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-standby-archive-delay" xreflabel="max_standby_archive_delay">
   <term><varname>max_standby_archive_delay</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>max_standby_archive_delay</varname></primary>
    </indexterm>
    <para>
     Quand le Hot Standby est activé, ce paramètre détermine le temps
     maximum d'attente que le serveur esclave doit observer avant d'annuler
     les requêtes en lecture qui entreraient en conflit avec des
     enregistrements des journaux de transactions à appliquer, comme c'est
     décrit dans <xref linkend="hot-standby-conflict"/>.
     <varname>max_standby_archive_delay</varname> est utilisé quand les
     données de journaux de transactions sont lues à partir des archives
     de journaux de transactions (et du coup accuse un certain retard par
     rapport au serveur maître). Si cette valeur est indiquée sans unité, elle
     est comprise comme un nombre de millisecondes. La valeur par défaut est de 30 secondes.
     L'unité est la milliseconde si cette dernière n'est pas spécifiée.
     Une valeur de -1 autorise le serveur en attente à attendre indéfiniment
     la fin d'exécution des requêtes en conflit. Ce paramètre peut seulement
     être configuré dans le fichier <filename>postgresql.conf</filename>
     ou sur la ligne de commande du serveur.
    </para>
    <para>
     Notez que <varname>max_standby_archive_delay</varname> ne correspond
     pas au temps d'exécution maximum d'une requête avant son
     annulation&nbsp;; il s'agit plutôt du temps maximum autorisé pour
     enregistrer les données d'un journal de transactions. Donc, si une
     requête a occasionné un délai significatif au début du traitement d'un
     journal de transactions, les requêtes suivantes auront un délai
     beaucoup moins important.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-standby-streaming-delay" xreflabel="max_standby_streaming_delay">
   <term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>max_standby_streaming_delay</varname></primary>
    </indexterm>
    <para>
     Quand Hot Standby est activé, ce paramètre détermine le délai maximum
     d'attente que le serveur esclave doit observer avant d'annuler les
     requêtes en lecture qui entreraient en conflit avec les enregistrements
     de transactions à appliquer, comme c'est décrit dans <xref
     linkend="hot-standby-conflict"/>.
     <varname>max_standby_streaming_delay</varname> est utilisé quand les
     données des journaux de données sont reçues via la connexion de la
     réplication en flux. Si cette valeur est indiquée sans unité, elle
     est comprise comme un nombre de millisecondes. La valeur par défaut est de 30 secondes.
     L'unité est la milliseconde si cette dernière n'est pas spécifiée.
     Une valeur de -1 autorise le serveur en attente à attendre indéfiniment
     la fin d'exécution des requêtes en conflit. Ce paramètre peut seulement
     être configuré dans le fichier <filename>postgresql.conf</filename>
     ou sur la ligne de commande du serveur.
    </para>
    <para>
     Notez que <varname>max_standby_streaming_delay</varname> ne correspond
     pas au temps d'exécution maximum d'une requête avant son
     annulation&nbsp;; il s'agit plutôt du temps maximum autorisé pour
     enregistrer les données d'un journal de transactions une fois qu'elles
     ont été récupérées du serveur maître. Donc, si une requête a
     occasionné un délai significatif au début du traitement d'un journal
     de transactions, les requêtes suivantes auront un délai beaucoup moins
     important.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-receiver-create-temp-slot" xreflabel="wal_receiver_create_temp_slot">
   <term><varname>wal_receiver_create_temp_slot</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>wal_receiver_create_temp_slot</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique si le processus walreceiver doit créer un slot de réplication
     temporaire sur l'instance distante lorsqu'aucun slot de réplication
     permanent n'a été configuré (en utilisant <xref
     linkend="guc-primary-slot-name"/>). La valeur par défaut est off. Ce
     paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur. Si ce paramètre est modifié alors que le processus walreceiver
     est en cours d'exécution, alors ce processus reçoit un signal pour
     s'arrêter et utilisera le nouveau paramètre à son redémarrage.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-receiver-status-interval" xreflabel="wal_receiver_status_interval">
   <term><varname>wal_receiver_status_interval</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration  <varname>wal_receiver_status_interval</varname></primary>
    </indexterm>
    <para>
     Indique la fréquence minimale pour que le processus de réception
     (walreceiver) sur le serveur de standby envoie des informations sur la
     progression de la réplication au serveur en envoi, où elles sont
     disponibles en utilisant la vue <link linkend="monitoring-pg-stat-replication-view">
      <structname>pg_stat_replication</structname></link>.
     Le serveur en standby renvoie la dernière position écrite dans le journal
     de transactions, la dernière position vidée sur disque du journal de
     transactions, et la dernière position rejouée. La valeur de ce paramètre
     est la durée maximale entre les rapports. Les mises à jour sont envoyées
     à chaque fois que les positions d'écriture ou de vidage ont changées et
     de toute façon au moins aussi fréquemment que l'indique ce paramètre. Du
     coup, la position de rejeu pourrait avoir un certain retard par rapport à
     la vraie position. Si cette valeur est indiquée sans unité, elle est
     considérée en secondes. La valeur par défaut est de 10 secondes.
     Configurer ce paramètre à zéro désactive totalement les mises à jour de
     statut. Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-hot-standby-feedback" xreflabel="hot_standby">
   <term><varname>hot_standby_feedback</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>hot_standby_feedback</varname></primary>
    </indexterm>
    <para>
     Spécifie si un serveur en Hot Standby enverra des informations
     au serveur en envoi sur les requêtes en cours d'exécution sur
     le serveur en standby. Ce paramètre peut être utilisé pour
     éliminer les annulations de requêtes nécessaires au nettoyage des
     enregistrements. Par contre, il peut causer une fragmentation
     plus importante sur le serveur principal pour certaines charges.
     Les messages d'informations ne seront pas envoyés plus fréquemment
     qu'une fois par <varname>wal_receiver_status_interval</varname>.
     La valeur par défaut est <literal>off</literal>. Ce paramètre
     peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande
     du serveur.
    </para>
    <para>
     Si la réplication en cascade est utilisée, les informations sont passées
     à l'émetteur jusqu'à arriver au serveur primaire. Les serveurs en
     standby ne font aucun usage des informations qu'ils reçoivent, en dehors
     de les envoyer à leur émetteur des données de réplication.
    </para>
    <para>
     Ce paramètre ne surcharge pas le comportement de
     <varname>old_snapshot_threshold</varname> sur le primaire&nbsp;; une
     image de la base sur le standby qui dépasse la limite d'âge du primaire
     peut devenir invalide, résultant en une annulation des transactions sur
     le standby. Ceci a pour explication que
     <varname>old_snapshot_threshold</varname> a pour but de fournir une
     limite absolue sur la durée où des lignes mortes peuvent contribuer à la
     fragmentation, qui, dans le cas contraire, pourrait être transgressé à
     cause de la configuration du standby.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-receiver-timeout" xreflabel="wal_receiver_timeout">
   <term><varname>wal_receiver_timeout</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>wal_receiver_timeout</varname></primary>
    </indexterm>
    <para>
     Termine les connexions de réplication qui sont inactives pour plus
     longtemps que cette durée. Ceci est utile pour que le serveur de
     réception détecte le crash d'un serveur primaire ou une perte réseau. Si
     cette valeur est spécifiée sans unité, elle est comprise comme un nombre
     de millisecondes. La valeur par défaut est de 60 secondes. À zéro, le
     mécanisme est désactivé. Ce paramètre peut seulement être configuré dans
     le fichier <filename>postgresql.conf</filename> ou en ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-wal-retrieve-retry-interval" xreflabel="wal_retrieve_retry_interval">
   <term><varname>wal_retrieve_retry_interval</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>wal_retrieve_retry_interval</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Indique combien de temps le serveur standby doit attendre lorsque les
     données des WAL ne sont pas disponibles auprès des sources habituelles
     (réplication en continu, localement à partir de
     <filename>pg_wal</filename> ou de l'archivage des WAL) avant d'essayer à
     nouveau de récupérer les WAL. Si cette valeur est spécifiée sans unité,
     elle est comprise comme un nombre de millisecondes. La valeur par défaut
     est de 5 secondes. Ce paramètre peut seulement être configuré dans le
     fichier <filename>postgresql.conf</filename> ou sur la ligne de commande
     du serveur.
    </para>
    <para>
     Ce paramètre est utile dans les configurations où un nœud en
     cours de restauration a besoin de contrôler le temps à attendre
     pour la disponibilité de nouveaux WAL. Par exemple, en mode
     restauration à partir des archives, il est possible d'avoir une
     restauration plus réactive dans la détection d'un nouveau fichier
     WAL en réduisant la valeur de ce paramètre. Sur un système avec
     une génération faible de WAL, l'augmenter réduit le nombre de
     requêtes nécessaires pour accèder aux WAL archivés, quelque
     chose utile par exemple dans les environnements cloud où le nombre
     de fois où l'infrastructure est accédée est pris en compte.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-recovery-min-apply-delay" xreflabel="recovery_min_apply_delay">
   <term><varname>recovery_min_apply_delay</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>recovery_min_apply_delay</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Par défaut, un serveur standby restaure les enregistrements des WAL du
     serveur d'envoi dès que possible. Il peut être utile d'avoir une copie
     qui appliquer les données de réplication avec un délai spécifié pour
     prévenir en cas de perte de données. Ce paramètre vous permet de
     repousser l'application de la restauration sur une période de temps
     fixée. Par exemple, si vous configurez ce paramètre à
     <literal>5min</literal>, le standby ne rejouera chaque validation de
     transaction seulement quand l'heure système sur le standby est au moins
     cinq minutes après l'heure de validation rapportée par le primaire. Si
     cette valeur est spécifiée sans unité, elle est comprise comme un nombre
     de millisecondes. La valeur par défaut est zéro, pour ne pas ajouter de
     délai.
    </para>
    <para>
     Il est possible que le délai de réplication entre les serveurs dépasse la
     valeur de ce paramètre, auquel cas aucun délai n'est ajouté. Notez que le
     délai est calculé entre l'horodatage du WAL écrit sur le primaire et
     l'heure système actuel sur le secondaire. Les délais dans le transfert, à
     cause d'un retard réseau ou de configuration de réplication en cascade,
     pourraient réduire le temps d'attente de façon importante. Si les
     horloges systèmes du primaire et du secondaire ne sont pas synchronisées,
     ceci pourrait amener la restauration à appliquer des enregistrements plus
     rapidement que souhaité. Ceci n'est pas un problème important parce que
     la configuration intéressante de ce paramètre est bien plus importante
     que les déviations habituelles d'horloge entre serveurs.
    </para>
    <para>
     Le délai n'est appliqué que sur les enregistrements WAL des validations
     de transaction. Les autres enregistrements sont rejoués aussi rapidement
     que possible, ce qui n'est pas un problème vu que les règles de
     visibilité avec MVCC nous assurent que les effets ne sont pas visibles
     tant que l'enregistrement de validation correspondant n'est pas appliqué.
    </para>
    <para>
     Le délai survient une fois que la base de données en restauration a
     atteint un point de cohérence, et jusqu'à ce que le standby soit promu.
     Après cela, le standby arrêtera toute restauration et sans délai.
    </para>
    <para>
     Ce paramètre vise les déploiements de réplication par flux. Néanmoins,
     la configuration de ce paramètre sera honorée dans tous les cas,
     sauf dans le cas de la restauration après un crash.

     <varname>hot_standby_feedback</varname> se verra imposé le délai, ce qui
     peut amener de la fragmentation sur le serveur primaire. N'activez les
     deux qu'avec précaution.

     <warning>
      <para>
       La réplication synchrone est affectée par ce paramétrage quand
       <varname>synchronous_commit</varname> est configuré à
       <literal>remote_apply</literal>&nbsp;; chaque <literal>COMMIT</literal>
       aura besoin d'attendre son application.
      </para>
     </warning>
    </para>
    <para>
     Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-replication-subscriber">
 <title>Souscripteurs</title>

 <para>
  Ces réglages contrôlent le comportement d'un souscripteur de réplication
  logique.  Leurs valeurs sur le serveur publiant les données est sans
  importance.
 </para>

 <para>
  Veuillez noter que les paramètres de configuration
  <varname>wal_receiver_timeout</varname>,
  <varname>wal_receiver_status_interval</varname> et
  <varname>wal_retrieve_retry_interval</varname> affectent également les
  workers de réplication logique.
 </para>

 <variablelist>

  <varlistentry id="guc-max-logical-replication-workers" xreflabel="max_logical_replication_workers">
   <term><varname>max_logical_replication_workers</varname> (<type>int</type>)
    <indexterm>
     <primary>Paramètre de configuration <varname>max_logical_replication_workers</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Spécifie le nombre maximal de workers de réplication logique.  Cela
     inclue à la fois les workers ainsi que les workers de synchronisation
     de table.
    </para>
    <para>
     Les workers de réplication logique sont pris de la réserve définie par
     <varname>max_worker_processes</varname>.
    </para>
    <para>
     La valeur par défaut est 4.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-max-sync-workers-per-subscription" xreflabel="max_sync_workers_per_subscription">
   <term><varname>max_sync_workers_per_subscription</varname> (<type>integer</type>)
    <indexterm>
     <primary>Paramètre de configuration <varname>max_sync_workers_per_subscription</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Le nombre maximal de workers de synchronisation par souscription.  Ce
     paramètre contrôle la quantité de parallélisme pour la copie initiale
     de données durant l'initialisation de la souscription ou quand de
     nouvelles tables sont ajoutées.
    </para>
    <para>
     Pour le moment, il ne peut y avoir qu'un seul worker de synchronisation
     par table.
    </para>
    <para>
     Les workers de synchronisation sont pris de la réserve définie par
     <varname>max_logical_replication_workers</varname>.
    </para>
    <para>
     La valeur par défaut est 2.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

</sect1>

<sect1 id="runtime-config-query">
<title>Planification des requêtes</title>

<sect2 id="runtime-config-query-enable">
 <title>Configuration de la méthode du planificateur</title>

 <para>
  Ces paramètres de configuration fournissent une méthode brutale pour
  influencer les plans de requête choisis par l'optimiseur de requêtes.
  Si le plan choisi par défaut par l'optimiseur pour une requête
  particulière n'est pas optimal, une solution
  <emphasis>temporaire</emphasis> peut provenir de l'utilisation de l'un
  de ces paramètres de configuration pour forcer l'optimiseur à choisir
  un plan différent. De meilleures façons d'améliorer la qualité des
  plans choisis par l'optimiseur passent par l'ajustement des constantes
  de coût du planificateur (voir <xref
  linkend="runtime-config-query-constants"/>), le lancement plus fréquent
  de <xref linkend="sql-analyze"/>, l'augmentation de la valeur du
  paramètre de configuration <xref
  linkend="guc-default-statistics-target"/> et l'augmentation du nombre
  de statistiques récupérées pour des colonnes spécifiques en utilisant
  <command>ALTER TABLE SET STATISTICS</command>.
 </para>

 <variablelist>
  <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
   <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>parcours bitmap</primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_bitmapscan</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des plans de parcours de bitmap
     (<foreignphrase>bitmap-scan</foreignphrase>) par
     le planificateur de requêtes. Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-gathermerge" xreflabel="enable_gathermerge">
   <term><varname>enable_gathermerge</varname> (<type>boolean</type>)
    <indexterm>
     <primary>Paramètre de configuration <varname>enable_gathermerge</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Active ou désactive l'utilisation des plans de type gather merge.
     La valeur par défaut est <literal>on</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
   <term><varname>enable_hashagg</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_hashagg</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des plans d'agrégation hachée
     (<foreignphrase>hashed aggregation</foreignphrase>) par le
     planificateur. Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
   <term><varname>enable_hashjoin</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_hashjoin</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des jointures de hachage
     (<foreignphrase>hash-join</foreignphrase>) par le
     planificateur. Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-incremental-sort" xreflabel="enable_incremental_sort">
   <term><varname>enable_incremental_sort</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>enable_incremental_sort</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Active ou désactive l'utilisation des tris incrémentaux par le
     planificateur. La valeur par défaut est <literal>on</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
   <term><varname>enable_indexscan</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>index scan</primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_indexscan</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des parcours d'index
     (<foreignphrase>index-scan</foreignphrase>) par le
     planificateur. Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-indexonlyscan" xreflabel="enable_indexonlyscan">
   <term><varname>enable_indexonlyscan</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>parcours index-only</primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_indexonlyscan</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des parcours d'index seuls
     (<foreignphrase>index-only-scan</foreignphrase>) par le planificateur
     (voir <xref linkend="indexes-index-only-scans"/>). Activé par défaut
     (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-material" xreflabel="enable_material">
   <term><varname>enable_material</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_material</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation de la matérialisation par le
     planificateur. Il est impossible de supprimer complètement son
     utilisation mais la désactivation de cette variable permet d'empêcher
     le planificateur d'insérer des n&oelig;uds de matérialisation sauf
     dans le cas où son utilisation est obligatoire pour des raisons de
     justesse de résultat. Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
   <term><varname>enable_mergejoin</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_mergejoin</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des jointures de fusion
     (<foreignphrase>merge-join</foreignphrase>)par le
     planificateur. Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
   <term><varname>enable_nestloop</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_nestloop</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des jointures de boucles imbriquées
     (<foreignphrase>nested-loop</foreignphrase>)
     par le planificateur. Il n'est pas possible de supprimer
     complètement les jointures de boucles imbriquées mais la
     désactivation de cette variable décourage le planificateur d'en
     utiliser une si d'autres méthodes sont disponibles.
     Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-parallel-append" xreflabel="enable_parallel_append">
   <term><varname>enable_parallel_append</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>enable_parallel_append</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Active ou désactive l'utilisation de plans Append parallélisés.
     La valeur par défaut est <literal>on</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-parallel-hash" xreflabel="enable_parallel_hash">
   <term><varname>enable_parallel_hash</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>enable_parallel_hash</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Active ou désactive l'utilisation des plans parallélisés de jointure
     par hachage. N'a pas d'effet si les plans de jointure par hachage ne
     sont pas activés. La valeur par défaut est
     <literal>on</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-partition-pruning" xreflabel="enable_partition_pruning">
   <term><varname>enable_partition_pruning</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>enable_partition_pruning</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Active ou désactive la capacité du planificateur à éliminer les
     partitions d'une table partitionnée dans les plans d'exécution. Cela
     contrôle aussi la capacité du planificateur à générer des plans de
     requête autorisant l'exécuteur à supprimer (ignorer) les partitions
     durant l'exécution. Le défaut est <literal>on</literal>.
     Voir <xref linkend="ddl-partition-pruning"/> pour les détails.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-partitionwise-join" xreflabel="enable_partitionwise_join">
   <term><varname>enable_partitionwise_join</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>enable_partitionwise_join</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Active ou désactive l'utilisation par le planificateur des jointures
     entre partitions, qui permettent aux jointures entre tables partitionnées
     d'être effectuées en joignant les partitions correspondantes. Pour le
     moment, une jointure entre partitions ne s'applique que si la condition de
     jointure inclut toutes les clés de partition, qui doivent être du même
     type et avoir exactement les mêmes ensembles de partitions filles.
     Parce que la planification des jointures entre partitions peut utiliser
     significativement plus de CPU et de mémoire lors de la planification,
     le défaut est <literal>off</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-partitionwise-aggregate" xreflabel="enable_partitionwise_aggregate">
   <term><varname>enable_partitionwise_aggregate</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>enable_partitionwise_aggregate</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Active ou désactive l'utilisation par le planificateur des regroupements
     ou agrégation par partition, qui permettent, dans les tables
     partitionnées, d'exécuter regroupement ou agrégation séparément pour
     chaque partition. Si la clause  <literal>GROUP BY</literal> n'inclut pas
     les clés de partition, seule une agrégation partielle peut être
     effectuée par partition, et la finalisation interviendra plus tard.
     Parce que le regroupement et l'agrégation par partition peuvent utiliser
     significativement plus de CPU et de mémoire lors de la planification,
     le défaut est <literal>off</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
   <term><varname>enable_seqscan</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>parcours séquentiel</primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_seqscan</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des parcours séquentiels
     (<foreignphrase>sequential scan</foreignphrase>) par le
     planificateur. Il n'est pas possible de supprimer complètement les
     parcours séquentiels mais la désactivation de cette variable décourage le
     planificateur d'n utiliser un si d'autres méthodes sont disponibles.
     Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
   <term><varname>enable_sort</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_sort</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des étapes de tri explicite par le
     planificateur. Il n'est pas possible de supprimer complètement ces tris
     mais la désactivation de cette variable décourage le planificateur
     d'en utiliser un si d'autres méthodes sont disponibles. Activé par défaut
     (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
   <term><varname>enable_tidscan</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>enable_tidscan</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'utilisation des parcours de <acronym>TID</acronym> par
     le planificateur. Activé par défaut (<literal>on</literal>).
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>
<sect2 id="runtime-config-query-constants">
 <title>Constantes de coût du planificateur</title>

 <para>
  Les variables de <firstterm>coût</firstterm> décrites dans cette section
  sont mesurées sur une échelle arbitraire. Seules leurs valeurs relatives
  ont un intérêt. De ce fait, augmenter ou diminuer leurs valeurs d'un même facteur
  n'occasione aucun changement dans les choix du planificateur.
  Par défaut, ces variables de coût sont basées sur le coût de
  récupération séquentielle d'une page&nbsp;; c'est-à-dire que
  <varname>seq_page_cost</varname> est, par convention, positionné à
  <literal>1.0</literal> et les autres variables de coût sont configurées
  relativement à cette référence. Il est toutefois possible d'utiliser
  une autre échelle, comme les temps d'exécution réels en millisecondes sur
  une machine particulière.
 </para>

 <note>
  <para>
   Il n'existe malheureusement pas de méthode bien définie pour
   déterminer les valeurs idéales des variables de coût.
   Il est préférable de les considérer comme moyennes sur un jeu complet
   de requêtes d'une installation particulière. Cela signifie que
   modifier ces paramètres sur la seule base de quelques expériences est très risqué.
  </para>
 </note>

 <variablelist>

  <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
   <term><varname>seq_page_cost</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>seq_page_cost</varname></primary>
    </indexterm>
    <para>
     Initialise l'estimation faite par le planificateur du coût de
     récupération d'une page disque incluse dans une série de récupérations
     séquentielles. La valeur par défaut est 1.0. Cette valeur peut être
     surchargée pour les tables et index d'un tablespace spécifique en
     configurant le paramètre du même nom pour un tablespace (voir <xref
     linkend="sql-altertablespace"/>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
   <term><varname>random_page_cost</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>random_page_cost</varname></primary>
    </indexterm>
    <para>
     Initialise l'estimation faite par le planificateur du coût de
     récupération non-séquentielle d'une page disque. Mesurée comme un
     multiple du coût de récupération d'une page séquentielle, sa valeur
     par défaut est 4.0. Cette valeur peut être
     surchargée pour les tables et index d'un tablespace spécifique en configurant le paramètre du
     même nom pour un tablespace (voir <xref
     linkend="sql-altertablespace"/>).
    </para>

    <para>
     Réduire cette valeur par rapport à <varname>seq_page_cost</varname>
     incite le système à privilégier les parcours d'index&nbsp;;
     l'augmenter donne l'impression de parcours d'index plus
     coûteux. Les deux valeurs peuvent être augmentées ou diminuées
     concomitament pour modifier l'importance des coûts d'entrées/sorties disque
     par rapport aux coûts CPU, décrits par les paramètres qui suivent.
    </para>

    <para>
     Les accès aléatoires sur du stockage mécanique sont généralement bien
     plus coûteux que quatre fois un accès séquentiel. Néanmoins, une valeur
     plus basse est utilisée (4,0) car la majorité des accès disques
     aléatoires, comme les lectures d'index, est supposée survenir en cache.
     La valeur par défaut peut être vu comme un modèle d'accès aléatoire 40
     fois plus lent que l'accès séquentiel, en supposant que 90% des lectures
     aléatoires se font en cache.
    </para>

    <para>
     Si vous pensez qu'un taux de 90% est incorrect dans votre cas, vous pouvez
     augmenter la valeur du paramètre random_page_cost pour que cela
     corresponde mieux au coût réel d'un accès aléatoire. De la même façon, si
     vos données ont tendance à être entièrement en cache (par exemple quand
     la base de données est plus petite que la quantité de mémoire du serveur),
     diminuer random_page_cost peut être approprié. Le stockage qui a un coût
     de lecture aléatoire faible par rapport à du séquentiel (par exemple les
     disques SSD) peut aussi être mieux tenu en compte avec une valeur plus
     faible pour random_page_cost, par exemple <literal>1.1</literal>.
    </para>

    <tip>
     <para>
      Bien que le système permette de configurer
      <varname>random_page_cost</varname> à une valeur inférieure à celle
      de <varname>seq_page_cost</varname>, cela n'a aucun intérêt.
      En revanche, les configurer à des valeurs identiques prend tout son
      sens si la base tient entièrement dans le cache en RAM. En effet, dans ce
      cas, il n'est pas pénalisant d'atteindre des pages qui ne se suivent
      pas. De plus, dans une base presque entièrement en cache, ces valeurs
      peuvent être abaissées relativement aux paramètres CPU car le coût de
      récupération d'une page déjà en RAM est bien moindre à celui de sa
      récupération sur disque.
     </para>
    </tip>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
   <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>cpu_tuple_cost</varname></primary>
    </indexterm>
    <para>
     Initialise l'estimation faite par le planificateur du coût de
     traitement de chaque ligne lors d'une requête. La valeur
     par défaut est 0.01.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
   <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>cpu_index_tuple_cost</varname></primary>
    </indexterm>
    <para>
     Initialise l'estimation faite par le planificateur du coût de
     traitement de chaque entrée de l'index lors d'un parcours d'index.
     La valeur par défaut est 0.005.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
   <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>cpu_operator_cost</varname></primary>
    </indexterm>
    <para>
     Initialise l'estimation faite par le planificateur du coût de
     traitement de chaque opérateur ou fonction exécutée dans une requête.
     La valeur par défaut est 0.0025.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-parallel-setup-cost" xreflabel="parallel_setup_cost">
   <term><varname>parallel_setup_cost</varname> (<type>floating point</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>parallel_setup_cost</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure le coût estimé par l'optimiseur pour le lancement de
     processus de travail parallèle. La valeur par défaut est 1000.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-parallel-tuple-cost" xreflabel="parallel_tuple_cost">
   <term><varname>parallel_tuple_cost</varname> (<type>floating point</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>parallel_tuple_cost</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure le coût estimé par l'optimiseur pour le transfert d'une
     ligne d'un processus de travail parallèle à un autre. La valeur par
     défaut est 0,1.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-min-parallel-table-scan-size" xreflabel="min_parallel_table_scan_size">
   <term><varname>min_parallel_table_scan_size</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>min_parallel_table_scan_size</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Spécifie la quantité minimale de donnée de la table qui doit être
     parcourue pour qu'un parcours parallèle soit envisagé.  Pour un
     parcours séquentiel parallèle, la quantité de données de la table
     parcourue est toujours égale à la taille de la table, mais quand des
     index sont utilisés la quantité de données de la table parcourue sera
     normalement moindre. Si cette valeur est spécifiée sans unité, elle
     est comprise comme un nombre de blocs, autrement dit
     <symbol>BLCKSZ</symbol> octets, typiquement 8 Ko. La valeur par défaut
     est 8 Mo (<literal>8MB</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-min-parallel-index-scan-size" xreflabel="min_parallel_index_scan_size">
   <term><varname>min_parallel_index_scan_size</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>min_parallel_index_scan_size</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Spécifie la quantité minimale de donnée d'index qui doit être
     parcourue pour qu'un parcours parallèle soit envisagé.  Veuillez noter
     qu'un parcours d'index parallèle ne touchera en général pas la
     totalité de l'index&nbsp;; il s'agit du nombre de page que
     l'optimisateur pensera réellement toucher durant le parcours qui est
     important. Ce paramètre est aussi utilisé pour décider si un index
     particulier peut participer à un vacuum parallélisé. Voir <xref
     linkend="sql-vacuum"/>. Si cette valeur est spécifiée sans unité, elle
     est comprise comme un nombre de blocs, autrement dit
     <symbol>BLCKSZ</symbol> octets, typiquement 8 Ko. La valeur par défaut
     est 512 kilooctets (<literal>512kB</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
   <term><varname>effective_cache_size</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>effective_cache_size</varname></primary>
    </indexterm>
    <para>
     Initialise l'estimation faite par le planificateur de la taille
     réelle du cache disque disponible pour une requête. Ce paramètre est
     lié à l'estimation du coût d'utilisation d'un index&nbsp;; une valeur
     importante favorise les parcours d'index, une valeur faible les
     parcours séquentiels. Pour configurer ce paramètre, il est important
     de considérer à la fois les tampons partagés de
     <productname>PostgreSQL</productname> et la portion de cache disque
     du noyau utilisée pour les fichiers de données de
     <productname>PostgreSQL</productname>, bien que certaines données pourraient
     être présentes aux deux endroits. Il faut également tenir
     compte du nombre attendu de requêtes concurrentes sur des tables
     différentes car elles partagent l'espace disponible. Ce paramètre n'a
     pas d'influence sur la taille de la mémoire partagée allouée par
     <productname>PostgreSQL</productname>, et ne réserve pas non plus le
     cache disque du noyau&nbsp;; il n'a qu'un rôle estimatif. Le système
     ne suppose pas non plus que les données reste dans le cache du disque
     entre des requêtes. Si cette valeur est indiquée sans unité, elle est
     pris comme un nombre de blocs, autrement dit <symbol>BLCKSZ</symbol>
     octets, typiquement 8 Ko. La valeur par défaut est de 4&nbsp;Go
     (<literal>4GB</literal>). (Si <symbol>BLCKSZ</symbol> n'est pas 8 Ko, les
     valeurs par défaut changent de façon proportionnée.)
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-jit-above-cost" xreflabel="jit_above_cost">
   <term><varname>jit_above_cost</varname> (<type>floating point</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>jit_above_cost</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure le coût de la requête au-dessus duquel la compilation JIT
     est activée (voir <xref linkend="jit"/>). Exécuter
     <acronym>JIT</acronym> coûte en temps de planification mais peut
     accélérer l'exécution de la requête. Configurer ce paramètre à
     <literal>-1</literal> désactive la compilation JIT. Le défaut est
     <literal>100000</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-jit-inline-above-cost" xreflabel="jit_inline_above_cost">
   <term><varname>jit_inline_above_cost</varname> (<type>floating point</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>jit_inline_above_cost</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure le coût de requête au-dessus duquel la compilation JIT tente
     de mettre à plat fonctions et opérateurs. Ceci ajoute au temps de
     planification mais peut améliorer la durée d'exécution. Il n'y a pas
     de sens à le configurer à une valeur inférieure à celle de
     <varname>jit_above_cost</varname>. Le configurer à
     <literal>-1</literal> désactive cette mise à plat. Le défaut est
     <literal>500000</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-jit-optimize-above-cost" xreflabel="jit_optimize_above_cost">
   <term><varname>jit_optimize_above_cost</varname> (<type>floating point</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>jit_optimize_above_cost</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure le coût de requête au-dessus duquel la compilation JIT
     utilise aussi les optimisations coûteuses. De telles optimisations
     ajoutent au temps de planification mais peuvent améliorer la durée
     d'exécution. Il n'y a pas de sens à le configurer à une valeur
     inférieure à celle de <varname>jit_above_cost</varname>, et il y a peu
     d'intérêt à le configurer à une valeur supérieure à
     <varname>jit_inline_above_cost</varname>. Le configurer à
     <literal>-1</literal> désactive ces optimisations. Le défaut est
     <literal>500000</literal>.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>

</sect2>
<sect2 id="runtime-config-query-geqo">
 <title>Optimiseur génétique de requêtes</title>

 <para>
  L'optimiseur génétique de requête (GEQO) est un algorithme qui fait la
  planification d'une requête en utilisant une recherche heuristique. Cela
  réduit le temps de planification pour les requêtes complexes (celles qui
  joignent de nombreuses relations), au prix de plans qui sont quelques
  fois inférieurs à ceux trouvés par un algorithme exhaustif. Pour plus
  d'informations, voir <xref linkend="geqo"/>.
 </para>

 <variablelist>

  <varlistentry id="guc-geqo" xreflabel="geqo">
   <term><varname>geqo</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>optimisation génétique des requêtes</primary>
    </indexterm>
    <indexterm>
     <primary>GEQO</primary>
     <see>optimisation génétique des requêtes</see>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>geqo</varname></primary>
    </indexterm>
    <para>
     Active ou désactive l'optimisation génétique des requêtes. Activé par
     défaut. Il est généralement préférable de ne pas le désactiver sur un
     serveur en production. La variable <varname>geqo_threshold</varname>
     fournit un moyen plus granulaire de désactiver le GEQO.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
   <term><varname>geqo_threshold</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>geqo_threshold</varname></primary>
    </indexterm>
    <para>
     L'optimisation génétique des requêtes est utilisée pour planifier les
     requêtes si, au minimum, ce nombre d'éléments est impliqué dans la clause
     <literal>FROM</literal> (une construction <literal>FULL OUTER JOIN</literal>
     ne compte que pour un élément du <literal>FROM</literal>). La valeur par
     défaut est 12. Pour des requêtes plus simples, il est préférable d'utiliser
     le planificateur standard, à recherche exhaustive. Par contre, pour les requêtes
     avec un grand nombre de tables, la recherche exhaustive prend trop de temps,
     souvent plus de temps que la pénalité à l'utilisation d'un plan non optimal.
     Du coup, une limite sur la taille de la requête est un moyen simple de gérer
     l'utilisation de GEQO.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
   <term><varname>geqo_effort</varname>
    (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>geqo_effort</varname></primary>
    </indexterm>
    <para>
     Contrôle le compromis entre le temps de planification et l'efficacité
     du plan de requête dans GEQO. Cette variable est un entier
     entre 1 et 10. La valeur par défaut est de cinq. Des valeurs plus
     importantes augmentent le temps passé à la planification de
     la requête mais aussi la probabilité qu'un plan de
     requête efficace soit choisi.
    </para>

    <para>
     <varname>geqo_effort</varname> n'a pas d'action directe&nbsp;;
     il est simplement utilisé pour calculer les
     valeurs par défaut des autres variables influençant le
     comportement de GEQO (décrites ci-dessous). Il est également
     possible de les configurer manuellement.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
   <term><varname>geqo_pool_size</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>geqo_pool_size</varname>
     </primary>
    </indexterm>
    <para>
     <!-- Taille de la queue, hum... Il s'agit plutôt d'un ensemble
	 d'individus -->
     Contrôle la taille de l'ensemble utilisé par GEQO. C'est-à-dire
     le nombre d'individus au sein d'une population génétique. Elle
     doit être au minimum égale à deux, les valeurs utiles étant
     généralement comprises entre 100 et 1000. Si elle est configurée
     à zéro (valeur par défaut), alors une valeur convenable est choisie
     en fonction de <varname>geqo_effort</varname> et du nombre de
     tables dans la requête.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
   <term><varname>geqo_generations</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>geqo_generations</varname>
     </primary>
    </indexterm>
    <para>
     Contrôle le nombre de générations utilisées par GEQO.
     C'est-à-dire le nombre d'itérations de l'algorithme. Il doit être au
     minimum de un, les valeurs utiles se situent dans la même plage que la
     taille de l'ensemble. S'il est configuré à zéro (valeur par
     défaut), alors une valeur convenable est choisie en fonction de
     <varname>geqo_pool_size</varname>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
   <term><varname>geqo_selection_bias</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>geqo_selection_bias</varname>
     </primary>
    </indexterm>
    <para>
     Contrôle le biais de sélection utilisé par GEQO. C'est-à-dire la
     pression de sélectivité au sein de la population. Les valeurs
     s'étendent de 1.50 à 2.00 (valeur par défaut).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-geqo-seed" xreflabel="geqo_seed">
   <term><varname>geqo_seed</varname> (<type>floating point</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>geqo_seed</varname></primary>
    </indexterm>
    <para>
     Contrôle la valeur initiale du générateur de nombres aléatoires
     utilisé par GEQO pour sélectionner des chemins au hasard dans l'espace
     de recherche des ordres de jointures. La valeur peut aller de zéro
     (valeur par défaut) à un. Varier la valeur modifie l'ensemble des
     chemins de jointure explorés et peut résulter en des chemins meilleurs
     ou pires.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>
<sect2 id="runtime-config-query-other">
 <title>Autres options du planificateur</title>

 <variablelist>

  <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
   <term><varname>default_statistics_target</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>default_statistics_target</varname></primary>
    </indexterm>
    <para>
     Initialise la cible de statistiques par défaut pour les colonnes de
     table pour lesquelles aucune cible de colonne spécifique n'a été configurée via
     <command>ALTER TABLE SET STATISTICS</command>. Des valeurs élevées
     accroissent le temps nécessaire à l'exécution
     d'<command>ANALYZE</command> mais peuvent permettre d'améliorer la
     qualité des estimations du planificateur. La valeur par
     défaut est 100. Pour plus d'informations sur l'utilisation des
     statistiques par le planificateur de requêtes, se référer à la
     <xref linkend="planner-stats"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
   <term><varname>constraint_exclusion</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>constraint exclusion</primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>constraint_exclusion</varname></primary>
    </indexterm>
    <para>
     Contrôle l'utilisation par le planificateur de requête des contraintes
     pour optimiser les requêtes.
     Les valeurs autorisées de <varname>constraint_exclusion</varname> sont
     <literal>on</literal> (examiner les contraintes pour toutes les tables),
     <literal>off</literal> (ne jamais examiner les contraintes) et
     <literal>partition</literal> (n'examiner les contraintes que pour les
     tables enfants d'un héritage et pour les sous-requêtes <literal>UNION ALL</literal>).
     <literal>partition</literal> est la valeur par défaut. C'est souvent
     utilisé avec les tables héritées pour améliorer les performances.
    </para>

    <para>
     Quand ce paramètre l'autorise pour une table particulière, le planificateur
     compare les conditions de la requête avec les contraintes <literal>CHECK</literal>
     sur la table, et omet le parcourt des tables pour lesquelles les
     conditions contredisent les contraintes. Par exemple&nbsp;:

     <programlisting>CREATE TABLE parent(clef integer, ...);
CREATE TABLE fils1000(check (clef between 1000 and 1999)) INHERITS(parent);
CREATE TABLE fils2000(check (clef between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE clef = 2400;</programlisting>

	Avec l'activation de l'exclusion par contraintes, ce <command>SELECT</command>
	ne parcourt pas <structname>fils1000</structname>, ce qui améliore les
	performances.
       </para>

       <para>
        À l'heure actuelle, l'exclusion de contraintes est activée par défaut
        seulement pour les cas souvent utilisés pour implémenter le
        partitionnement de tables via les arbres d'héritage. L'activer pour
        toutes les tables impose une surcharge de planification qui est
        visible pour de simples requêtes, sans apporter de bénéfices pour ces
        requêtes. Si vous n'avez pas de tables partitionnées utilisant
        l'héritage traditionnel, vous pourriez vouloir le désactiver. (Notez
        que la fonctionnalité équivalente pour les tables partitionnées est
        contrôlée par un paramètre séparé, <xref
        linkend="guc-enable-partition-pruning"/>.)
       </para>

       <para>
        Reportez vous à <xref linkend="ddl-partitioning-constraint-exclusion"/>
        pour plus d'informations sur l'utilisation d'exclusion de contraintes
        pour implémenter le partitionnement.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cursor-tuple-fraction" xreflabel="cursor_tuple_fraction">
      <term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>cursor_tuple_fraction</varname></primary>
      </indexterm>
       <para>
        Positionne la fraction, estimée par le planificateur, d'enregistrements
        d'un curseur qui sera récupérée.
        La valeur par défaut est 0.1. Des valeurs plus petites de ce paramètre
        rendent le planificateur plus enclin à choisir des plans à démarrage
        rapide (<quote>fast start</quote>), qui récupèreront les premiers
        enregistrements rapidement, tout en mettant peut être un temps plus long
        à récupérer tous les enregistrements. Des valeurs plus grandes mettent
        l'accent sur le temps total estimé. À la valeur maximum 1.0 du paramètre,
        les curseurs sont planifiés exactement comme des requêtes classiques,
        en ne prenant en compte que le temps total estimé et non la vitesse à
        laquelle les premiers enregistrements seront fournis.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>from_collapse_limit</varname></primary>
      </indexterm>
       <para>
        Le planificateur assemble les sous-requêtes dans des requêtes
	supérieures si la liste <literal>FROM</literal> résultante contient
	au plus ce nombre d'éléments. Des valeurs faibles réduisent le temps
	de planification mais conduisent à des plans de requêtes inférieurs.
	La valeur par défaut est de 8. Pour plus d'informations, voir <xref
	linkend="explicit-joins"/>.
       </para>

       <para>
        Configurer cette valeur à <xref linkend="guc-geqo-threshold"/> ou plus
	pourrait déclencher l'utilisation du planificateur GEQO, ce qui pourrait
	aboutir à la génération de plans non optimaux. Voir <xref
	linkend="runtime-config-query-geqo"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit" xreflabel="jit">
      <term><varname>jit</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>jit</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Détermine si la compilation <acronym>JIT</acronym> peut être utilisée
        par <productname>PostgreSQL</productname>, quand elle est disponible
        (voir <xref linkend="jit"/>). La valeur par défaut est
        <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
        <primary>paramètre de configuration <varname>join_collapse_limit</varname></primary>
      </indexterm>
        <para>
          Le planificateur réécrit les constructions <literal>JOIN</literal>
	  explicites (à l'exception de <literal>FULL JOIN</literal>) en une
	  liste d'éléments <literal>FROM</literal> à chaque fois qu'il n'en
	  résulte qu'une liste ne contenant pas plus de ce nombre
	  d'éléments. Des valeurs faibles réduisent le temps de
	  planification mais conduisent à des plans de requêtes inférieurs.
        </para>

        <para>
	  Par défaut, cette variable a la même valeur que
	  <varname>from_collapse_limit</varname>, valeur adaptée à la
	  plupart des utilisations. Configurer cette variable à 1
	  empêche le réordonnancement des <literal>JOIN</literal>tures explicites.
	  De ce fait, l'ordre des jointures explicites indiqué dans la requête
	  est l'ordre réel dans lequel les relations
	  sont jointes. Le planificateur de la requête ne choisit pas toujours
	  l'ordre de jointure optimal&nbsp;; les utilisateurs aguerris peuvent
	  choisir d'initialiser temporairement cette variable à 1 et
	  d'indiquer explicitement l'ordre de jointure souhaité.
	  Pour plus d'informations, voir <xref linkend="explicit-joins"/>.
        </para>

       <para>
        Configurer cette valeur à <xref linkend="guc-geqo-threshold"/> ou plus
	pourrait déclencher l'utilisation du planificateur GEQO, ce qui pourrait
	aboutir à la génération de plans non optimaux. Voir <xref
	linkend="runtime-config-query-geqo"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-parallel-leader-participation" xreflabel="parallel_leader_participation">
      <term>
       <varname>parallel_leader_participation</varname> (<type>boolean</type>)
       <indexterm>
        <primary>
         <varname>parallel_leader_participation</varname> configuration
         parameter
        </primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Permet au processus «&nbsp;leader&nbsp;» d'exécuter le plan d'exécution
        sous les nœuds <literal>Gather</literal> et <literal>Gather Merge
        </literal>, au lieu d'attendre les workers. Le défaut est
        <literal>on</literal>. Passer cette valeur à <literal>off</literal>
        réduit la probabilité que les workers soient bloqués parce que le
        processus leader ne lit pas les enregistrements assez vite, mais
        nécessite que le processus leader attende que les workers démarrent
        avant que le premier enregistrement ne soit produit. À quel point
        le leader peut aider ou gêner la performance dépend du type de plan, du
        nombre de workers et de la durée de la requête.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-force-parallel-mode" xreflabel="force_parallel_mode">
      <term><varname>force_parallel_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>force_parallel_mode</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Autorise l'utilisation de requêtes parallélisées pour des raisons de
        test y compris dans des cas où aucune amélioration des performances
        n'est attendue. Les valeurs autorisées de
        <varname>force_parallel_mode</varname> sont <literal>off</literal>
        (utilise le mode parallèle seulement quand une amélioration des
        performances est attendue), <literal>on</literal> (force la
        parallélisation de toutes les requêtes qui sont parallélisables) et
        <literal>regress</literal> (identique à <literal>on</literal>, mais
        avec un comportement supplémentaire expliqué ci-dessous).
       </para>

       <para>
        Plus spécifiquement, configurer cette valeur à <literal>on</literal>
        ajoutera un nœud <literal>Gather</literal> au -dessus de tout plan
        d'exécution pour lequel cela semble sain, permettant ainsi à la
        requête d'être exécuté par un processus parallélisé. Même si un
        processus parallélisé n'est pas disponible ou ne peut pas être
        utilisé, les opérations, telles que le démarrage d'une sous-
        transaction qui serait interdite dans un contexte de parallélisation
        d'une requête, seront interdites sauf si le planificateur pense que
        cela ferait échouer la requête. Si des échecs ou des résultats
        inattendus surviennent avec cette option activée, certaines fonctions
        utilisées par cette requête devraient être marquées <literal>PARALLEL
        UNSAFE</literal> (ou potentiellement <literal>PARALLEL
        RESTRICTED</literal>).
       </para>

       <para>
        Configurer ce paramètre à <literal>regress</literal> a les mêmes
        effets que le configurer à <literal>on</literal> avec quelques effets
        supplémentaires ayant pour but de faciliter le test automatique de
        régressions. Habituellement, les messages d'un processus parallèle
        incluent une ligne de contexte le précisant, mais une configuration de
        ce paramètre à la valeur <literal>regress</literal> supprime cette
        ligne pour que la sortie soit identique à une sortie pour une
        exécution non parallélisée. De plus, les nœuds
        <literal>Gather</literal> ajoutés au plan par ce paramètre sont cachés
        dans la sortie <literal>EXPLAIN</literal> pour que la sortie
        corresponde à ce qui serait obtenue si ce paramètre était désactivé
        (valeur <literal>off</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-plan-cache_mode" xreflabel="plan_cache_mode">
      <term><varname>plan_cache_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>plan_cache_mode</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Les requêtes préparées (soit explicitement préparées soit
        implicitement générées, par exemple dans PL/pgSQL) peuvent être
        exécutées en utilisant des plans personnalisés ou génériques. Les
        plans personnalisés sont de nouveau créés à chaque exécution en
        utilisant son ensemble spécifique de valeurs de paramètres, alors que
        les plans génériques ne se basent pas sur les valeurs des paramètres
        et peuvent être ré-utilisés au fil des exécutions. De ce fait,
        l'utilisation d'un plan générique permet d'éviter de gâcher du temps
        de planification mais si le plan idéal dépend fortement des valeurs de
        paramètres, alors un plan générique pourrait être inefficace. Le choix
        entre ces options est généralement fait automatiquement mais il peut
        être forcé avec le paramètre <varname>plan_cache_mode</varname>. Les
        valeurs autorisées sont <literal>auto</literal> (valeur par défaut),
        <literal>force_custom_plan</literal> et
        <literal>force_generic_plan</literal>. Ce paramètre est considéré
        quand un plan en cache va être exécuté, et non pas quand il va être
        préparé. Pour plus d'informations, voir <xref linkend="sql-prepare"/>.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-logging">
    <title>Remonter et tracer les erreurs</title>

    <indexterm zone="runtime-config-logging">
     <primary>traces serveur</primary>
    </indexterm>

    <sect2 id="runtime-config-logging-where">
     <title>Où tracer</title>

     <indexterm zone="runtime-config-logging-where">
      <primary>où tracer</primary>
     </indexterm>

     <indexterm>
       <primary>current_logfiles</primary>
       <secondary>ainsi que le paramètre de configuration log_destination</secondary>
     </indexterm>

     <variablelist>

       <varlistentry id="guc-log-destination" xreflabel="log_destination">
         <term><varname>log_destination</varname> (<type>string</type>)</term>
       <listitem>
         <indexterm>
           <primary>paramètre de configuration <varname>log_destination</varname></primary>
       </indexterm>
         <para>
           <productname>PostgreSQL</productname> supporte plusieurs méthodes
           pour la journalisation des messages du serveur, dont
	   <systemitem>stderr</systemitem>, <systemitem>csvlog</systemitem> et
           <systemitem>syslog</systemitem>. Sur Windows,
           <systemitem>eventlog</systemitem> est aussi supporté. Ce
	   paramètre se configure avec la liste des destinations souhaitées
	   séparées par des virgules. Par défaut, les traces ne sont
	   dirigées que vers <systemitem>stderr</systemitem>.
	   Ce paramètre ne peut être configuré que dans le fichier
	   <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
         </para>
       <para>
        Si <systemitem>csvlog</systemitem> est la valeur de
	<varname>log_destination</varname>, les entrées du journal applicatif
	sont enregistrées dans le format <acronym>CSV</acronym> (<quote>comma separated
        value</quote>), ce qui est bien pratique pour les charger dans des
	programmes. Voir <xref linkend="runtime-config-logging-csvlog"/> pour
	les détails.
        <xref linkend="guc-logging-collector"/> doit être activé pour produire des
	journaux applicatifs au format CSV.
       </para>

       <para>
        Quand soit <systemitem>stderr</systemitem> ou soit
        <systemitem>csvlog</systemitem> sont inclus, le fichier
        <filename>current_logfiles</filename> est créé pour enregistrer
        l'emplacement du ou des fichiers de traces actuellement utilisés par le
        collecteur de traces ainsi que la destination de trace associée.  Cela
        fournit un moyen pratique pour trouver le fichier de trace actuellement
        utilisé par l'instance.  Voici un exemple du contenu de ce fichier :
<programlisting>
stderr log/postgresql.log
csvlog log/postgresql.csv
     </programlisting>

     <filename>current_logfiles</filename> est recréé quand un nouveau
     fichier de trace est crée du à une rotation, et quand
     <varname>log_destination</varname> est rechargé.  Il est supprimé quand
     ni <systemitem>stderr</systemitem> ni <systemitem>csvlog</systemitem>
     ne sont inclus dans <varname>log_destination</varname>, et quand le
     collecteur de traces es désactivé.
    </para>

    <note>
     <para>
      Sur la plupart des systèmes Unix, il est nécessaire de modifier la
      configuration du démon <application>syslog</application> pour utiliser
      l'option <systemitem>syslog</systemitem> de
      <varname>log_destination</varname>.  <productname>PostgreSQL</productname>
      peut tracer dans les niveaux <application>syslog</application>
      <literal>LOCAL0</literal> à <literal>LOCAL7</literal> (voir <xref
      linkend="guc-syslog-facility"/>) mais la configuration par défaut de
      <application>syslog</application> sur la plupart des plateformes
      ignore de tels messages. Il faut ajouter une ligne similaire à&nbsp;:
      <programlisting>
local0.*    /var/log/postgresql
      </programlisting>
      dans le fichier de configuration de <application>syslog</application>
      pour obtenir ce type de journalisation.
     </para>
     <para>
      Sur Windows, quand vous utilisez l'option <literal>eventlog</literal>
      pour <varname>log_destination</varname>, vous devez enregistrer une
      source d'événement et sa bibliothèque avec le système d'exploitation,
      pour que le visualisateur des événements Windows puisse affiche
      correctement les traces. Voir
      <xref linkend="event-log-registration"/> pour les détails.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-logging-collector" xreflabel="logging_collector">
   <term><varname>logging_collector</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>logging_collector</varname></primary>
    </indexterm>
    <para>
     Ce paramètre active le collecteur de traces (<firstterm>logging
      collector</firstterm>), qui est un processus en tâche de fond capturant
     les traces envoyées sur <systemitem>stderr</systemitem> et les
     enregistrant dans des fichiers. Cette approche est souvent plus utile
     que la journalisation avec <application>syslog</application>, car
     certains messages peuvent ne pas apparaître dans
     <application>syslog</application>. (Un exemple standard concerne les
     messages d'échec de l'édition dynamique&nbsp;; un autre concerne les
     messages d'erreurs produits par les scripts comme
     <varname>archive_command</varname>.). Ce paramètre ne peut être configuré
     qu'au lancement du serveur.
    </para>

    <note>
     <para>
      Il est possible de tracer sur <systemitem>stderr</systemitem> sans
      utiliser le collecteur de traces. Les messages iront à l'endroit où
      est redirigé la sortie des erreurs (<systemitem>stderr</systemitem>)
      du système. Néanmoins, cette méthode est seulement acceptable pour les
      petits volumes de traces car il ne fournit pas de moyens corrects pour
      gérer la rotation des fichiers de traces. Ainsi, sur certaines
      plateformes n'utilisant pas le collecteur des traces, cela peut avoir
      pour résultat la perte ou la corruption des traces, notamment si
      plusieurs processus écrivent en même temps dans le même fichier de
      traces, écrasant ainsi les traces des autres processus.
     </para>
    </note>

    <note>
     <para>
      Le collecteur des traces est conçu pour ne jamais perdre de
      messages. Cela signifie que, dans le cas d'une charge extrêmement
      forte, les processus serveur pourraient se trouver bloqués lors de
      l'envoi de messages de trace supplémentaires. Le collecteur
      pourrait accumuler dans ce cas du retard.
      <application>syslog</application> préfère supprimer des messages
      s'il ne peut pas les écrire. Il pourrait donc ne pas récupérer
      certains messages dans ces cas mais il ne bloquera pas le reste du
      système.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-directory" xreflabel="log_directory">
   <term><varname>log_directory</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_directory</varname>
     </primary>
    </indexterm>
    <para>
     Lorsque <varname>logging_collector</varname> est activé, ce paramètre
     détermine le répertoire dans lequel les fichiers de trace sont
     créés. Il peut s'agir d'un chemin absolu ou d'un chemin
     relatif au répertoire des données du cluster.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
     La valeur par défaut est <literal>log</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-filename" xreflabel="log_filename">
   <term><varname>log_filename</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_filename</varname>
     </primary>
    </indexterm>
    <para>
     Lorsque <varname>logging_collector</varname> est activé, ce paramètre
     indique les noms des journaux applicatifs créés. La valeur est
     traitée comme un motif <function>strftime</function>. Ainsi
     les échappements <literal>%</literal> peuvent être utilisés pour
     indiquer des noms de fichiers horodatés.  (S'il y a des
     échappements <literal>%</literal> dépendant des fuseaux horaires, le
     calcul se fait dans le fuseau précisé par
     <xref linkend="guc-log-timezone"/>.) Les échappements
     <literal>%</literal> supportés sont similaires à ceux listés dans
     la spécification de <ulink
     url="https://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime</ulink>
     par l'Open Group.
     Notez que la fonction <function>strftime</function> du système n'est
     pas utilisée directement, ce qui entraîne que les extensions spécifiques
     à la plateforme (non-standard) ne fonctionneront pas.
    </para>
    <para>
     Si vous spécifiez un nom de fichier sans échappements, vous devriez
     prévoir d'utiliser un utilitaire de rotation des journaux pour éviter
     le risque de remplir le disque entier. Dans les versions précédentes à
     8.4, si aucun échappement <literal>%</literal> n'était présent,
     <productname>PostgreSQL</productname> aurait ajouté l'epoch de la date de
     création du nouveau journal applicatif mais ce n'est plus le cas.
    </para>
    <para>
     Si la sortie au format CSV est activée dans
     <varname>log_destination</varname>, <literal>.csv</literal> est
     automatiquement ajouté au nom du journal horodaté. (Si
     <varname>log_filename</varname> se termine en <literal>.log</literal>,
     le suffixe est simplement remplacé.)
    </para>
    <para>
     Ce paramètre ne peut être positionné que dans le fichier
     <filename>postgresql.conf</filename> ou en ligne de commande.
     La valeur par défaut est <literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-file-mode" xreflabel="log_file_mode">
   <term><varname>log_file_mode</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_file_mode</varname></primary>
    </indexterm>
    <para>
     Sur les systèmes Unix, ce paramètre configure les droits pour
     les journaux applicatifs quand
     <varname>logging_collector</varname> est activé. (Sur Microsoft
     Windows, ce paramètre est ignoré.) La valeur de ce paramètre
     doit être un mode numérique spécifié dans le format accepté par
     les appels systèmes <function>chmod</function> et
     <function>umask</function>. (Pour utiliser le format octal, ce
     nombre doit être précédé d'un zéro, <literal>0</literal>.)
    </para>
    <para>
     Les droits par défaut sont <literal>0600</literal>, signifiant
     que seul l'utilisateur qui a lancé le serveur peut lire ou
     écrire les journaux applicatifs. Un autre paramétrage habituel
     est <literal>0640</literal>, permettant aux membres du groupe
     propriétaire de lire les fichiers. Notez néanmoins que pour
     utiliser ce paramètre, vous devez modifier <xref
     linkend="guc-log-directory"/> pour enregistrer les fichiers en
     dehors du répertoire des données de l'instance. Dans ce cas, il
     est déconseillé de rendre les journaux applicatifs lisibles par
     tout le monde car ils pourraient contenir des données sensibles.
    </para>
    <para>
     Ce paramètre ne peut être positionné que dans le fichier
     <filename>postgresql.conf</filename> ou en ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
   <term><varname>log_rotation_age</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_rotation_age</varname>
     </primary>
    </indexterm>
    <para>
     Lorsque <varname>logging_collector</varname> est activé, ce paramètre
     détermine la durée maximale pour utiliser un fichier de trace individuel,
     après lequel un nouveau fichier de trace sera créé. Si cette valeur est
     indiquée sans unité, elle sera compris comme un nombre de minutes. La
     valeur par défaut est de 24 heures. Configurer à zéro désactive la
     création de nouveaux fichiers de trace en se basant sur la date et heure.
     Ce paramètre ne peut qu'être configuré dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
   <term><varname>log_rotation_size</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_rotation_size</varname></primary>
    </indexterm>
    <para>
     Lorsque <varname>logging_collector</varname> est activé, ce paramètre
     détermine la taille maximale (en kilooctets) d'un journal individuel.
     Après cette quantité de données a été émise dans un fichier de trace, un
     nouveau fichier de trace sera créé. Si cette valeur est spécifiée sans
     unité, elle est comprise comme un nombre de Ko. La valeur par défaut est
     de 10 Mo. Configurer à zéro désactive la création de nouveaux fichiers de
     trace en se basant sur la taille. Ce paramètre ne peut être configuré que
     dans le fichier <filename>postgresql.conf</filename> ou indiqué sur la
     ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
   <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_truncate_on_rotation</varname></primary>
    </indexterm>
    <para>
     Lorsque <varname>logging_collector</varname> est activé, ce paramètre
     impose à <productname>PostgreSQL</productname> de vider
     (écraser), plutôt qu'ajouter à, tout fichier journal dont le
     nom existe déjà.
     Toutefois, cet écrasement ne survient qu'à partir du moment où
     un nouveau fichier doit être ouvert du fait d'une rotation par
     temps compté, et non pas à la suite du démarrage du serveur ou d'une
     rotation par taille comptée. Si ce paramètre est désactivé (off),
     les traces sont, dans tous les cas, ajoutées aux fichiers qui
     existent déjà.
    </para>
    <para>
     Par exemple, si ce paramètres est utilisé en combinaison avec un
     <varname>log_filename</varname> tel que
     <literal>postgresql-%H.log</literal>, il en résulte la génération
     de 24 journaux (un par heure) écrasés de façon cyclique.
    </para>
    <para>
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
    <para>
     Exemple&nbsp;: pour conserver sept jours de traces, un fichier par
     jour nommé <literal>server_log.Mon</literal>,
     <literal>server_log.Tue</literal>, etc. et écraser automatiquement
     les traces de la semaine précédente avec celles de la semaine
     courante, on positionne <varname>log_filename</varname> à
     <literal>server_log.%a</literal>,
     <varname>log_truncate_on_rotation</varname> à <literal>on</literal>
     et <varname>log_rotation_age</varname> à <literal>1440</literal>.
    </para>
    <para>
     Exemple&nbsp;: pour conserver 24 heures de traces, un journal par
     heure, toute en effectuant la rotation plus tôt si le journal dépasse
     1&nbsp;Go, on positionne
     <varname>log_filename</varname> à <literal>server_log.%H%M</literal>,
     <varname>log_truncate_on_rotation</varname> à <literal>on</literal>,
     <varname>log_rotation_age</varname> à <literal>60</literal> et
     <varname>log_rotation_size</varname> à <literal>1000000</literal>.
     Inclure <literal>%M</literal> dans
     <varname>log_filename</varname> permet à toute rotation par taille
     comptée qui survient d'utiliser un nom de fichier distinct du nom
     initial horodaté.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
   <term><varname>syslog_facility</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>syslog_facility</varname></primary>
    </indexterm>
    <para>
     Lorsque les traces <application>syslog</application> sont activées, ce
     paramètre fixe le niveau (<quote>facility</quote>) utilisé par
     <application>syslog</application>. Les différentes possibilités
     sont <literal>LOCAL0</literal>, <literal>LOCAL1</literal>,
     <literal>LOCAL2</literal>, <literal>LOCAL3</literal>,
     <literal>LOCAL4</literal>, <literal>LOCAL5</literal>,
     <literal>LOCAL6</literal>, <literal>LOCAL7</literal>&nbsp;;
     <literal>LOCAL0</literal> étant la valeur par défaut. Voir aussi la
     documentation du démon <application>syslog</application> du
     serveur. Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
   <term><varname>syslog_ident</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>syslog_ident</varname></primary>
    </indexterm>
    <para>
     Si <application>syslog</application> est activé, ce paramètre fixe le nom
     du programme utilisé pour identifier les messages
     <productname>PostgreSQL</productname> dans les traces de
     <application>syslog</application>. La valeur par défaut est
     <literal>postgres</literal>.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-syslog-sequence-numbers" xreflabel="syslog_sequence_numbers">
   <term><varname>syslog_sequence_numbers</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>syslog_sequence_numbers</varname></primary>
    </indexterm>
   </term>

   <listitem>
    <para>
     Lorsque les traces ont pour destination <application>syslog</application>
     et que ce paramètre vaut on (c'est la valeur par défaut), alors chaque
     message est préfixé par un numéro de séquence en constante augmentation
     (par exemple <literal>[2]</literal>).  Ceci permet d'éviter la suppression
     du type <quote>--- last message repeated N times ---</quote> qu'un grand
     nombre d'implémentations de syslog réalisent par défaut. Dans les
     implémentations plus modernes de syslog, la suppression des messages
     répétés peut être configurée (par exemple,
     <literal>$RepeatedMsgReduction</literal> dans
     <productname>rsyslog</productname>), ce paramètre pourrait ne plus être
     nécessaire. De plus, vous pouvez désactiver cette fonction si vous voulez
     vraiment supprimer des messages répétés
    </para>

    <para>
     Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-syslog-split-messages" xreflabel="syslog_split_messages">
   <term><varname>syslog_split_messages</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>syslog_split_messages</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Lorsque les traces ont pour destination <application>syslog</application>,
     ce paramètre détermine comment les messages sont délivrées à syslog. Si ce
     paramètre vaut on (ce qui correspond à la valeur par défaut), les messages
     sont divisés en ligne, et les longues lignes sont divisées pour qu'elles
     tiennent sur 1024 octets, qui est la limite typique en taille pour les
     implémentations syslog traditionnelles. Si ce paramètre est à off, les
     messages du serveur PostgreSQL sont délivrés au service syslog tel quel,
     et c'est au service syslog de se débrouiller avec les messages
     potentiellement gros.
    </para>

    <para>
     Si syslog enregistre au final les messages dans un fichier texte, alors
     l'effet sera le même de toute façon et il est préférable de laisser ce
     paramètre à la valeur on car la plupart des implémentations syslog ne
     peuvent pas gérer de grands messages ou auraient besoin d'être configurés
     spécialement pour les gérer. Si syslog écrit au final dans un autre média,
     il pourrait être nécessaire ou utile de conserver les messages dans un
     ensemble logique.
    </para>

    <para>
     Ce paramètre peut seulement être configuré dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande du
     serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-event-source" xreflabel="event_source">
   <term><varname>event_source</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>event_source</varname></primary>
    </indexterm>
    <para>
     Si la journalisation applicative se fait au travers du journal des
     événements (<application>event log</application>), ce paramètre
     détermine le nom du programme utilisé pour identifier les messages de
     <productname>PostgreSQL</productname> dans la trace. La valeur par
     défaut est <literal>PostgreSQL</literal>.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-logging-when">
 <title>Quand tracer</title>

 <variablelist>

  <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
   <term><varname>log_min_messages</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_min_messages</varname></primary>
    </indexterm>
    <para>
     Contrôle les <link linkend="runtime-config-severity-levels">niveaux de
      message</link> écrits dans les traces du serveur.
     Les valeurs valides sont <literal>DEBUG5</literal>, <literal>DEBUG4</literal>,
     <literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
     <literal>INFO</literal>, <literal>NOTICE</literal>, <literal>WARNING</literal>,
     <literal>ERROR</literal>, <literal>LOG</literal>, <literal>FATAL</literal> et
     <literal>PANIC</literal>. Chaque niveau inclut tous les niveaux qui le
     suivent. Plus on progresse dans la liste, plus le nombre de messages
     envoyés est faible. <literal>WARNING</literal> est la valeur par
     défaut. <literal>LOG</literal> a ici une portée différente de celle
     de <xref linkend="guc-client-min-messages"/>. Seuls les superutilisateurs peuvent
     modifier la valeur de ce paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
   <term><varname>log_min_error_statement</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_min_error_statement</varname></primary>
    </indexterm>
    <para>
     Contrôle si l'instruction SQL à l'origine d'une erreur doit être
     enregistrée dans les traces du serveur. L'instruction SQL en cours est
     incluse dans les traces pour tout message de <link
     linkend="runtime-config-severity-levels">sévérité</link> indiquée ou
     supérieure. Les valeurs valides sont <literal>DEBUG5</literal>,
     <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
     <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
     <literal>INFO</literal>, <literal>NOTICE</literal>,
     <literal>WARNING</literal>, <literal>ERROR</literal>,
     <literal>LOG</literal>, <literal>FATAL</literal> et <literal>PANIC</literal>.
     <literal>ERROR</literal> est la valeur par défaut, ce qui signifie que
     les instructions à l'origine d'erreurs, de messages applicatifs,
     d'erreurs fatales ou de
     paniques sont tracées. Pour réellement désactiver le traçage des
     instructions échouées, ce paramètre doit être positionné à
     <literal>PANIC</literal>. Seuls les superutilisateurs peuvent
     modifier la valeur de ce paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
   <term><varname>log_min_duration_statement</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_min_duration_statement</varname></primary>
    </indexterm>
    <para>
     Trace la durée de toute instruction terminée dont le temps d'exécution
     égale ou dépasse cette durée. Par exemple, si le paramètre est positionné
     à <literal>250ms</literal>, alors toutes les instructions SQL dont la
     durée est supérieure ou égale à 250&nbsp;ms sont tracées. Il est utile
     d'activer ce paramètre pour tracer les requêtes non optimisées des
     applications. Si cette valeur est indiquée sans unité, elle est considérée
     comme un nombre de millisecondes. La configurer à zéro affiche la durée de
     toutes les requêtes. <literal>-1</literal> (valeur par défaut) désactive
     la trace de la durée des requêtes. Seuls les superutilisateurs peuvent
     modifier cette configuration.
    </para>

    <para>
     Ceci surcharge <xref linkend="guc-log-min-duration-sample"/>, ceci
     signifiant que les requêtes dont la durée dépasse cette configuration ne
     sont pas sujet à l'échantillonage et sont toujours tracées.
    </para>

    <para>
     Pour les clients utilisant le protocole de requêtage étendu, les durées
     des étapes Parse (analyse), Bind (lien) et Execute (exécution) sont
     tracées indépendamment.
    </para>

    <note>
     <para>
      Lorsque cette option est utilisée avec
      <xref linkend="guc-log-statement"/>, le texte des instructions tracées
      du fait de <varname>log_statement</varname> n'est pas répété dans le
      message de trace de la durée. Si <application>syslog</application>
      n'est pas utilisé, il est recommandé de tracer le PID
      ou l'ID de session à l'aide de <xref linkend="guc-log-line-prefix"/>
      de façon à pouvoir lier le message de l'instruction au message de
      durée par cet identifiant.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-min-duration-sample" xreflabel="log_min_duration_sample">
   <term><varname>log_min_duration_sample</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>log_min_duration_sample</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Permet l'échantillonage de la durée des requêtes traitées pour celles
     qui durent au moins la durée indiquée. Ceci produit le même type de
     traces que <xref linkend="guc-log-min-duration-statement"/>, mais
     seulement pour un sous-ensemble des requêtes exécutées, avec un taux
     d'échantillonnage contrôlé avec le paramètre <xref
     linkend="guc-log-statement-sample-rate"/>. Par exemple, si vous voulez le
     configurer à <literal>100ms</literal>, alors toutes les requêtes SQL qui
     durent 100 millisecondes ou plus seront considérées pour
     l'échantillonnage. Activer ce paramètre peut être utile quand le trafic
     est trop important pour tracer toutes les requêtes. Si cette valeur est
     indiquée sans unité, elle est considérée comme un nombre de
     milltisecondes. Le configurer à zéro échantillonne toutes les durées de
     requêtes. La valeur <literal>-1</literal> (valeur par défaut) désactive
     l'échantillonnage des durées des requêtes. Seuls les superutilisateurs
     peuvent modifier ce paramètre.
    </para>

    <para>
     Ce paramètre a une priorité plus basse que
     <varname>log_min_duration_statement</varname>, signifiant que les
     requêtes dont la durée dépasse
     <varname>log_min_duration_statement</varname> ne sont pas sujets à
     l'échantillonnage et seront toujours tracées.
    </para>

    <para>
     D'autres notes pour <varname>log_min_duration_statement</varname>
     s'appliquent aussi à ce paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-statement-sample-rate" xreflabel="log_statement_sample_rate">
   <term><varname>log_statement_sample_rate</varname> (<type>floating point</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>log_statement_sample_rate</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Détermine la fraction de requêtes dont la durée dépasse <xref
     linkend="guc-log-min-duration-sample"/> et qui seront tracées.
     L'échantillonnage est stochastique, par exemple <literal>0.5</literal>
     signifie qu'il y a une chance sur qu'une requête soit tracée. La valeur
     par défaut est <literal>1.0</literal>, signifiant toutes les requêtes. Le
     configurer à zéro désactive la trace des durées des requêtes, tout comme
     configurer le paramètre <varname>log_min_duration_sample</varname> à
     <literal>-1</literal>. Seuls les superutilisateurs peuvent modifier ce
     paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-transaction-sample-rate" xreflabel="log_transaction_sample_rate">
   <term><varname>log_transaction_sample_rate</varname> (<type>floating point</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>log_transaction_sample_rate</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Initialise la fraction de transactions dont les requêtes seront toutes
     tracées en plus des requêtes tracées pour d'autres raisons. Cela
     s'applique à toute nouvelle transaction, quelque soit les durées des
     requêtes.
     Sampling is stochastic, for example <literal>0.1</literal> means
     there is statistically one chance in ten that any given transaction
     will be logged.
     <varname>log_transaction_sample_rate</varname> can be helpful to
     construct a sample of transactions.
     The default is <literal>0</literal>, meaning not to log
     statements from any additional transactions.  Setting this
     to <literal>1</literal> logs all statements of all transactions.
     Seuls les superutilisateurs peuvent changer ce paramètre.
    </para>
    <note>
     <para>
      Comme toutes les options sur les traces des requêtes, cette option peut
      ajouter une surcharge importante.
     </para>
    </note>
   </listitem>
  </varlistentry>

 </variablelist>

 <para>
  <xref linkend="runtime-config-severity-levels"/> explique les niveaux de
  sévérité des messages utilisés par <productname>PostgreSQL</productname>.
  Si la journalisation est envoyée à<systemitem>syslog</systemitem> ou à
  l'<systemitem>eventlog</systemitem> de Windows, les niveaux de sévérité
  sont traduits comme indiqué ci-dessous.
 </para>

 <table id="runtime-config-severity-levels">
  <title>Niveaux de sévérité des messages</title>
  <tgroup cols="4">
   <colspec colname="col1" colwidth="1*"/>
   <colspec colname="col2" colwidth="2*"/>
   <colspec colname="col3" colwidth="1*"/>
   <colspec colname="col4" colwidth="1*"/>
   <thead>
    <row>
     <entry>Sévérité</entry>
     <entry>Usage</entry>
     <entry><systemitem>syslog</systemitem></entry>
     <entry><systemitem>eventlog</systemitem></entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry><literal>DEBUG1 .. DEBUG5</literal></entry>
     <entry>Fournit des informations successivement plus détaillées
      à destination des développeurs.</entry>
     <entry><literal>DEBUG</literal></entry>
     <entry><literal>INFORMATION</literal></entry>
    </row>

    <row>
     <entry><literal>INFO</literal></entry>
     <entry>Fournit des informations implicitement demandées par
      l'utilisateur, par exemple la sortie de <command>VACUUM
       VERBOSE</command>.</entry>
     <entry><literal>INFO</literal></entry>
     <entry><literal>INFORMATION</literal></entry>
    </row>

    <row>
     <entry><literal>NOTICE</literal></entry>
     <entry>Fournit des informations éventuellement utiles aux
      utilisateurs, par exemple la troncature des identifiants longs.</entry>
     <entry><literal>NOTICE</literal></entry>
     <entry><literal>INFORMATION</literal></entry>
    </row>

    <row>
     <entry><literal>WARNING</literal></entry>
     <entry>Fournit des messages d'avertissement sur d'éventuels problèmes.
      Par exemple, un <command>COMMIT</command> en dehors d'un bloc de
      transaction.</entry>
     <entry><literal>NOTICE</literal></entry>
     <entry><literal>WARNING</literal></entry>
    </row>

    <row>
     <entry><literal>ERROR</literal></entry>
     <entry>Rapporte l'erreur qui a causé l'annulation de la commande en
      cours.</entry>
     <entry><literal>WARNING</literal></entry>
     <entry><literal>ERROR</literal></entry>
    </row>

    <row>
     <entry><literal>LOG</literal></entry>
     <entry>Rapporte des informations à destination des administrateurs.
      Par exemple, l'activité des points de vérification.</entry>
     <entry><literal>INFO</literal></entry>
     <entry><literal>INFORMATION</literal></entry>
    </row>

    <row>
     <entry><literal>FATAL</literal></entry>
     <entry>Rapporte l'erreur qui a causé la fin de la session en
      cours.</entry>
     <entry><literal>ERR</literal></entry>
     <entry><literal>ERROR</literal></entry>
    </row>

    <row>
     <entry><literal>PANIC</literal></entry>
     <entry>Rapporte l'erreur qui a causé la fin de toutes les
      sessions.</entry>
     <entry><literal>CRIT</literal></entry>
     <entry><literal>ERROR</literal></entry>
    </row>
   </tbody>
  </tgroup>
 </table>

</sect2>
<sect2 id="runtime-config-logging-what">
 <title>Que tracer</title>

 <variablelist>

  <varlistentry id="guc-application-name" xreflabel="application_name">
   <term><varname>application_name</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>application_name</varname></primary>
    </indexterm>
    <para>
     Le paramètre <varname>application_name</varname> peut être n'importe
     quelle chaîne de caractères inférieure à <symbol>NAMEDATALEN</symbol>
     caractères (64 caractères
     après une compilation standard). Il est typiquement configuré lors
     de la connexion d'une application au serveur. Le nom sera affiché
     dans la vue <structname>pg_stat_activity</structname> et inclus dans
     les traces du journal au format CSV. Il peut aussi être inclus dans
     les autres formats de traces en configurant le paramètre <xref
     linkend="guc-log-line-prefix"/>. Tout caractère ASCII affichable peut
     être utilisé. Les autres caractères seront remplacés par des points
     d'interrogation (<literal>?</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><varname>debug_print_parse</varname> (<type>boolean</type>)</term>
   <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)</term>
   <term><varname>debug_print_plan</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>debug_print_parse</varname></primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>debug_print_rewritten</varname></primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>debug_print_plan</varname></primary>
    </indexterm>
    <para>
     Ces paramètres activent plusieurs sorties de débogage.
     Quand positionnés, il affichent l'arbre d'interprétation résultant,
     la sortie de la réécriture de requête, ou le plan d'exécution pour chaque
     requête exécutée.
     Ces messages sont émis au niveau de trace <literal>LOG</literal> , par
     conséquent ils apparaîtront dans le journal applicatif du serveur, mais
     ne seront pas envoyés au client. Vous pouvez changer cela en ajustant
     <xref linkend="guc-client-min-messages"/> et/ou
     <xref linkend="guc-log-min-messages"/>.
     Ces paramètres sont désactivés par défaut.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term><varname>debug_pretty_print</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>debug_pretty_print</varname></primary>
    </indexterm>
    <para>
     Quand positionné, <varname>debug_pretty_print</varname> indente les
     messages produits par <varname>debug_print_parse</varname>,
     <varname>debug_print_rewritten</varname>, ou
     <varname>debug_print_plan</varname>. Le résultat est une sortie plus
     lisible mais plus verbeuse que le format <quote>compact</quote> utilisé
     quand ce paramètre est à off. La valeur par défaut est 'on'.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-checkpoints" xreflabel="log_checkpoints">
   <term><varname>log_checkpoints</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_checkpoints</varname></primary>
    </indexterm>
    <para>
     Trace les points de vérification and restartpoints dans les journaux applicatifs.
     Diverses statistiques sont incluses dans les
     journaux applicatifs, dont le nombre de tampons écrits et le
     temps passé à les écrire. Désactivé par défaut,
     ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-connections" xreflabel="log_connections">
   <term><varname>log_connections</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_connections</varname></primary>
    </indexterm>
    <para>
     Trace chaque tentative de connexion sur le serveur, ainsi que la réussite
     de l'authentification du client.
     Seuls les superutilisateurs peuvent modifier ce paramètre au
     démarrage d'une session, et il ne peut pas être changé du
     tout à l'intérieur d'une session. La valeur par défaut est
     <literal>off</literal>.
    </para>

    <note>
     <para>
      Quelques programmes clients, comme <application>psql</application>,
      tentent de se connecter deux fois pour déterminer si un mot de passe
      est nécessaire, des messages <quote>connection received</quote>
      dupliqués n'indiquent donc pas forcément un problème.
     </para>
    </note>
   </listitem>
  </varlistentry>


  <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
   <term><varname>log_disconnections</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_disconnections</varname></primary>
    </indexterm>
    <para>
     Entraîne l'enregistrement dans les traces du serveur de la fin
     des sessions. Les sorties des traces fournissent une information
     similaire à <varname>log_connections</varname>, plus la durée
     de la session.  Seuls les superutilisateurs peuvent modifier ce
     paramètre au démarrage d'une session, et il ne peut pas être
     changé du tout à l'intérieur d'une session. La valeur par défaut
     est <literal>off</literal>.
    </para>
   </listitem>
  </varlistentry>


  <varlistentry id="guc-log-duration" xreflabel="log_duration">
   <term><varname>log_duration</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_duration</varname></primary>
    </indexterm>
    <para>
     Trace la durée de toute instruction exécutée. Désactivé par défaut
     (<literal>off</literal>), seuls les superutilisateurs peuvent
     modifier ce paramètre.
    </para>

    <para>
     Pour les clients utilisant le protocole de requêtage étendu, les durées
     des étapes Parse (analyse), Bind (lien) et Execute (exécution) sont
     tracées indépendamment.
    </para>

    <note>
     <para>
      À la différence de <xref linkend="guc-log-min-duration-statement"/>,
      <varname>log_duration</varname> ne force pas le traçage du texte des
      requêtes. De ce fait, si <varname>log_duration</varname> est activé
      (<literal>on</literal>) et que
      <varname>log_min_duration_statement</varname> a une valeur positive,
      toutes les durées sont tracées mais le texte de la requête n'est inclus
      que pour les instructions qui dépassent la limite. Ce comportement peut
      être utile pour récupérer des statistiques sur les installations à forte
      charge.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
   <term><varname>log_error_verbosity</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_error_verbosity</varname></primary>
    </indexterm>
    <para>
     Contrôle la quantité de détails écrit dans les traces pour chaque
     message tracé. Les valeurs valides sont <literal>TERSE</literal>,
     <literal>DEFAULT</literal> et <literal>VERBOSE</literal>, chacun
     ajoutant plus de champs aux messages affichés. <literal>TERSE</literal>
     exclut des traces les informations de niveau <literal>DETAIL</literal>,
     <literal>HINT</literal>, <literal>QUERY</literal> et
     <literal>CONTEXT</literal>. La sortie <literal>VERBOSE</literal> inclut
     le code d'erreur <symbol>SQLSTATE</symbol> (voir aussi <xref
     linkend="errcodes-appendix"/>), le
     nom du code source, le nom de la fonction et le numéro de la ligne qui
     a généré l'erreur. Seuls les superutilisateurs peuvent modifier ce
     paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
   <term><varname>log_hostname</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_hostname</varname></primary>
    </indexterm>
    <para>
     Par défaut, les traces de connexion n'affichent que l'adresse IP
     de l'hôte se connectant. Activer ce paramètre permet de tracer aussi
     le nom de l'hôte. En fonction de la configuration de la résolution
     de nom d'hôte, les performances peuvent être pénalisées.
     Ce paramètre ne peut être configuré que dans le fichier
     <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
   <term><varname>log_line_prefix</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_line_prefix</varname></primary>
    </indexterm>
    <para>
     Il s'agit d'une chaîne de style <function>printf</function>
     affichée au début de chaque ligne de trace. Les caractères
     <literal>%</literal> débutent des <quote>séquences d'échappement</quote>
     qui sont remplacées avec l'information de statut décrite ci-dessous.
     Les échappement non reconnus sont ignorés. Les autres caractères sont
     copiés directement dans la trace. Certains échappements ne sont
     reconnus que par les processus de session et seront traités comme vide
     par les processus en tâche de fond tels que le processus principal du
     serveur. L'information de statut pourrait être alignée soit à gauche
     soit à droite en indiquant un nombre après le signe pourcent et avant
     l'option. Une valeur négative implique un alignement à droite par
     ajout d'espaces alors qu'une valeur positive est pour un alignement à
     gauche. L'alignement peut être utile pour aider à la lecture des
     fichiers de trace.
    </para>

    <para>
     Ce paramètre ne peut être configuré que dans le
     fichier <filename>postgresql.conf</filename> ou indiqué sur la ligne
     de commande. La valeur par défaut est <literal>'%m [%p] '</literal>
     ce qui affiche dans les trace l'heure courante ainsi que l'identifiant de
     processus.
    </para>

    <informaltable>
     <tgroup cols="3">
      <colspec colnum="1" colwidth="0.5*"/>
      <colspec colnum="2" colwidth="2*"/>
      <colspec colnum="3" colwidth="0.5*"/>
      <thead>
       <row>
        <entry>Échappement</entry>
        <entry>Produit</entry>
        <entry>Session seule</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>%a</literal></entry>
        <entry>Nom de l'application</entry>
        <entry>yes</entry>
       </row>
       <row>
        <entry><literal>%u</literal></entry>
        <entry>Nom de l'utilisateur</entry>
        <entry>oui</entry>
       </row>
       <row>
        <entry><literal>%d</literal></entry>
        <entry>Nom de la base de données</entry>
        <entry>oui</entry>
       </row>
       <row>
        <entry><literal>%r</literal></entry>
        <entry>Nom ou adresse IP de l'hôte distant et port distant</entry>
        <entry>oui</entry>
       </row>
       <row>
        <entry><literal>%h</literal></entry>
        <entry>Nom d'hôte distant ou adresse IP</entry>
        <entry>oui</entry>
       </row>
       <row>
        <entry><literal>%b</literal></entry>
        <entry>Type de processus serveur</entry>
        <entry>no</entry>
       </row>
       <row>
        <entry><literal>%p</literal></entry>
        <entry>ID du processus</entry>
        <entry>non</entry>
       </row>
       <row>
        <entry><literal>%t</literal></entry>
        <entry>Estampille temporelle sans millisecondes</entry>
        <entry>non</entry>
       </row>
       <row>
        <entry><literal>%m</literal></entry>
        <entry>Estampille temporelle avec millisecondes</entry>
        <entry>non</entry>
       </row>
       <row>
        <entry><literal>%n</literal></entry>
        <entry>Estampille temporelle avec millisecondes (sous la forme d'un epoch Unix)</entry>
        <entry>non</entry>
       </row>
       <row>
        <entry><literal>%i</literal></entry>
        <entry>Balise de commande&nbsp;: type de commande</entry>
        <entry>oui</entry>
       </row>
       <row>
        <entry><literal>%e</literal></entry>
        <entry>code d'erreur correspondant à l'état SQL</entry>
        <entry>no</entry>
       </row>
       <row>
        <entry><literal>%c</literal></entry>
        <entry>ID de session&nbsp;: voir ci-dessous</entry>
        <entry>non</entry>
       </row>
       <row>
        <entry><literal>%l</literal></entry>
        <entry>Numéro de la ligne de trace de chaque session ou processus,
         commençant à 1</entry>
        <entry>non</entry>
       </row>
       <row>
        <entry><literal>%s</literal></entry>
        <entry>Estampille temporelle du lancement du processus</entry>
        <entry>oui</entry>
       </row>
       <row>
        <entry><literal>%v</literal></entry>
        <entry>Identifiant virtuel de transaction (backendID/localXID)</entry>
        <entry>no</entry>
       </row>
       <row>
        <entry><literal>%x</literal></entry>
        <entry>ID de la transaction (0 si aucune affectée)</entry>
        <entry>non</entry>
       </row>
       <row>
        <entry><literal>%q</literal></entry>
        <entry>Ne produit aucune sortie, mais indique aux autres processus
         de stopper à cet endroit de la chaîne. Ignoré par les processus
         de session.</entry>
        <entry>non</entry>
       </row>
       <row>
        <entry><literal>%%</literal></entry>
        <entry><literal>%</literal></entry>
        <entry>non</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

    <para>
     Le type de processus serveur correspond à la colonne
     <structfield>backend_type</structfield> dans la vue <link
     linkend="monitoring-pg-stat-activity-view">
      <structname>pg_stat_activity</structname></link>, mais des types
     supplémentaires, non visibles dans cette vue, peuvent apparaître dans les
     traces.
    </para>

    <para>
     L'échappement <literal>%c</literal> affiche un identifiant de session
     quasi-unique constitué de deux nombres hexadécimaux sur quatre octets
     (sans les zéros initiaux) et séparés par un point. Les nombres
     représentent l'heure de lancement du processus et l'identifiant du
     processus, <literal>%c</literal> peut donc aussi être utilisé
     comme une manière de raccourcir l'affichage de ces éléments.
     Par exemple, pour générer l'identifiant de session à partir de
     <literal>pg_stat_activity</literal>, utilisez cette requête&nbsp;:
     <programlisting>
SELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' ||
       to_hex(pid)
FROM pg_stat_activity;
     </programlisting>
    </para>

    <tip>
     <para>
      Si <varname>log_line_prefix</varname> est différent d'une chaîne vide,
      il est intéressant d'ajouter une espace en fin de chaîne pour créer
      une séparation visuelle avec le reste de la ligne. Un caractère de
      ponctuation peut aussi être utilisé.
     </para>
    </tip>

    <tip>
     <para>
      <application>syslog</application> produit ses propres informations
      d'horodatage et d'identifiant du processus. Ces
      échappements n'ont donc que peu d'intérêt avec
      <application>syslog</application>.
     </para>
    </tip>

    <tip>
     <para>
      L'échappement <literal>%q</literal> est utile quand des informations
      qui ne sont disponibles que dans le contexte d'une session (processus
      client) est utilisé, comme le nom de l'utilisateur ou de la base.  Par
      exemple :
      <programlisting>
log_line_prefix = '%m [%p] %q%u@%d/%a '
      </programlisting>
     </para>
    </tip>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-lock-waits" xreflabel="log_lock_waits">
   <term><varname>log_lock_waits</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_lock_waits</varname></primary>
    </indexterm>
    <para>
     Contrôle si une trace applicative est écrite quand une session attend
     plus longtemps que <xref linkend="guc-deadlock-timeout"/> pour acquérir
     un verrou.  Ceci est utile pour déterminer si les attentes de verrous
     sont la cause des pertes de performance. Désactivé
     (<literal>off</literal>) par défaut. Seuls les superutilisateurs peuvent
     modifier ce paramétrage.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-parameter-max-length" xreflabel="log_parameter_max_length">
   <term><varname>log_parameter_max_length</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>log_parameter_max_length</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Si supérieur à zéro, chaque valeur de paramètre lié tracée avec un message
     qui n'est pas dû à une erreur est raccourcie à ce nombre d'octets. Zéro
     désactive la trace des paramètres liés pour les traces de requêtes sans
     erreur. <literal>-1</literal> (valeur par défaut) autorise la trace
     complète des paramètres liés. Si cette valeur est indiquée sans unité,
     elle est prise pour un nombre d'octets. Seuls les superutilisateurs
     peuvent modifier ce paramètre.
    </para>

    <para>
     Ce paramètre affecte seulement les messages affichés en résultat de la
     configuration de <xref linkend="guc-log-statement"/>, <xref
     linkend="guc-log-duration"/>, et d'autres paramètres liés. Une valeur
     différente de zéro pour ce paramètre ajoute une surcharge,
     particulièrement si les paramètres sont envoyés en forme binaire, parce
     qu'une conversion en texte est requise.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-parameter-max-length-on-error" xreflabel="log_parameter_max_length_on_error">
   <term><varname>log_parameter_max_length_on_error</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>log_parameter_max_length_on_error</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Si supérieur à zéro, chaque valeur de paramètre lié dans une trace
     d'erreur est raccourcie à ce nombre d'octets. Zéro (valeur par défaut)
     désactive la trace des paramètres liés pour les traces de requêtes en
     erreur. <literal>-1</literal> autorise la trace complète des paramètres
     liés. Si cette valeur est indiquée sans unité, elle est prise pour un
     nombre d'octets.
    </para>

    <para>
     Une configuration de ce paramètre à une valeur différente de zéro ajoute
     une surcharge car <productname>PostgreSQL</productname> aura besoin de
     stocker les représentations textuelles des valeurs de paramètres en
     mémoire au début de chaque requête, qu'une erreur survienne ou pas. La
     surcharge est supérieure quand les paramètres liés sont envoyés au format
     binaire que quand ils sont envoyés au format car le premier cas nécessite
     la conversion des données alors que le dernier cas nécessite seulement la
     copie de la chaîne.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-statement" xreflabel="log_statement">
   <term><varname>log_statement</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_statement</varname></primary>
    </indexterm>
    <para>
     Contrôle les instructions SQL à tracer. Les valeurs valides sont
     <literal>none</literal> (off), <literal>ddl</literal>, <literal>mod</literal>
     et <literal>all</literal> (toutes les instructions).
     <literal>ddl</literal> trace toutes les
     commandes de définition comme <command>CREATE</command>,
     <command>ALTER</command> et <command>DROP</command>.
     <literal>mod</literal> trace toutes les instructions
     <literal>ddl</literal> ainsi que les instructions de modification
     de données <command>INSERT</command>, <command>UPDATE</command>,
     <command>DELETE</command>, <command>TRUNCATE</command> et
     <command>COPY FROM</command>. Les instructions <command>PREPARE</command>,
     <command>EXECUTE</command> et <command>EXPLAIN ANALYZE</command> sont
     aussi tracées si la commande qui les contient est d'un type approprié.
     Pour les clients utilisant le protocole de requêtage étendu, la trace
     survient quand un message Execute est reçu et les valeurs des paramètres
     de Bind sont incluses (avec doublement de tout guillemet simple embarqué).
    </para>

    <para>
     La valeur par défaut est <literal>none</literal>. Seuls les superutilisateurs
     peuvent changer ce paramétrage.
    </para>

    <note>
     <para>
      Les instructions qui contiennent de simples erreurs de syntaxe ne sont pas
      tracées même si <varname>log_statement</varname> est positionné à
      <literal>all</literal> car la trace n'est émise qu'après qu'une analyse
      basique soit réalisée pour déterminer le type
      d'instruction. Dans le cas du protocole de requêtage étendu, ce paramètre
      ne trace pas les instructions qui échouent avant la phase Execute
      (c'est-à-dire pendant l'analyse et la planification).
      <varname>log_min_error_statement</varname> doit être positionné à
      <literal>ERROR</literal> pour tracer ce type d'instructions.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-replication-commands" xreflabel="log_replication_commands">
   <term><varname>log_replication_commands</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>log_replication_commands</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     A pour effet d'enregistrer dans le fichier des traces du serveur chaque
     commande de réplication. Voir <xref linkend="protocol-replication"/>
     pour plus d'informations à propos des commandes de réplication. La
     valeur par défaut est <literal>off</literal>. Seuls les
     superutilisateurs peuvent modifier ce paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-temp-files" xreflabel="log_temp_files">
   <term><varname>log_temp_files</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_temp_files</varname></primary>
    </indexterm>
    <para>
     Contrôle l'écriture de traces sur l'utilisation des fichiers temporaires
     (noms et tailles). Les fichiers temporaires peuvent être créés pour des
     tris, des hachages et des résultats temporaires de requête. Si activé, une
     entrée de journal est générée pour chaque fichier temporaire au moment où
     il est effacé. Zéro implique une trace des informations sur tous les
     fichiers temporaires alors qu'une valeur positive ne trace que les
     fichiers dont la taille est supérieure ou égale au nombre indiqué (en
     kilo-octets). Si cette valeur est indiquée sans unité, elle est comprise
     comme un nombre de Ko. La valeur par défaut est -1, ce qui a pour effet de
     désactiver les traces. Seuls les superutilisateurs peuvent modifier ce
     paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-log-timezone" xreflabel="log_timezone">
   <term><varname>log_timezone</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_timezone</varname></primary>
    </indexterm>
    <para>
     Configure le fuseau horaire utilisé par l'horodatage des traces.
     Contrairement à <xref linkend="guc-timezone"/>, cette valeur est
     valable pour le cluster complet, de façon à ce que toutes les
     sessions utilisent le même.
     La valeur par défaut est <literal>GMT</literal>, mais elle est généralement surchargée
     dans le fichier <filename>postgresql.conf</filename>&nbsp;; <application>initdb</application>
     installera une configuration correspondant à l'environnement système.
     Voir <xref linkend="datatype-timezones"/> pour plus d'informations.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>
<sect2 id="runtime-config-logging-csvlog">
 <title>Utiliser les journaux au format CSV</title>

 <para>
  L'ajout de <literal>csvlog</literal> dans la liste
  <varname>log_destination</varname> est une manière simple d'importer
  des journaux dans une table de base de données. Cette option permet de
  créer des journaux au format <acronym>CSV</acronym> avec les
  colonnes&nbsp;: l'horodatage en millisecondes, le nom de l'utilisateur,
  le nom de la base de données, le PID du processus serveur, l'hôte et
  le numéro de port du client, l'identifiant de la session, le numéro
  de ligne dans la session, le tag de la commande, l'horodatage de début
  de la session, l'identifiant de transaction virtuelle, l'identifiant
  de transaction standard, la sévérité de l'erreur, le code SQLSTATE,
  le message d'erreur, les détails du message d'erreur, une astuce, la
  requête interne qui a amené l'erreur (si elle existe), le nombre de
  caractères pour arriver à la position de l'erreur, le contexte de
  l'erreur, la requête utilisateur qui a amené l'erreur (si elle existe
  et si <varname>log_min_error_statement</varname> est activé), le nombre
  de caractères pour arriver à la position de l'erreur, l'emplacement de
  l'erreur dans le code source de PostgreSQL (si
  <varname>log_error_verbosity</varname> est configuré à
  <literal>verbose</literal>), le nom de l'application et le type du processus
  serveur.
 </para>

 <para>
  Exemple de définition d'une table de stockage de journaux au format
  CSV&nbsp;:
 </para>

 <programlisting>
CREATE TABLE postgres_log
(
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  backend_type text,
  PRIMARY KEY (session_id, session_line_num)
);
 </programlisting>

 <para>
  Pour importer un journal dans cette table, on utilise la commande
  <command>COPY FROM</command>&nbsp;:

  <programlisting>
COPY postgres_log FROM '/chemin/complet/vers/le/logfile.csv' WITH csv;
  </programlisting>
  Il est aussi possible d'accéder au fichier via une table externe en
  utilisant le module <xref linkend="file-fdw"/>.
 </para>

 <para>
  Quelques conseils pour simplifier et automatiser l'import
  des journaux CVS&nbsp;:

  <orderedlist>
   <listitem>
    <para>
     configurer <varname>log_filename</varname> et
     <varname>log_rotation_age</varname> pour fournir un schéma de
     nommage cohérent et prévisible des journaux. Cela permet de
     prédire le nom du fichier et le moment où il sera complet
     (et donc prêt à être importé)&nbsp;;
    </para>
   </listitem>

   <listitem>
    <para>
     initialiser <varname>log_rotation_size</varname> à 0 pour désactiver
     la rotation par taille comptée, car elle rend plus difficile la
     prévision du nom du journal&nbsp;;
    </para>
   </listitem>

   <listitem>
    <para>
     positionner <varname>log_truncate_on_rotation</varname>
     à <literal>on</literal> pour que les données anciennes ne soient pas
     mélangées aux nouvelles dans le même fichier&nbsp;;
    </para>
   </listitem>

   <listitem>
    <para>
     la définition de la table ci-dessus inclut une clé primaire. C'est
     utile pour se protéger de l'import accidentel de la même
     information à plusieurs reprises. La commande
     <command>COPY</command> valide toutes les
     données qu'elle importe en une fois. Toute erreur annule donc
     l'import complet. Si un journal incomplet est importé et qu'il est
     de nouveau importé lorsque le fichier est complet, la violation de la
     clé primaire cause un échec de l'import. Il faut attendre que le
     journal soit complet et fermé avant de l'importer. Cette procédure
     protége aussi de l'import accidentel d'une ligne partiellement
     écrite, qui causerait aussi un échec de <command>COPY</command>.
    </para>
   </listitem>
  </orderedlist>
 </para>

</sect2>

<sect2>
 <title>Titre des processus</title>

 <para>
  Ces paramètres contrôlent comment les titres de processus des processus
  serveurs sont modifiés. Les titres de processus sont affichées
  typiquement en utilisant des programmes comme
  <application>ps</application> ou, sur Windows, <application>Process
   Explorer</application>. Voir <xref linkend="monitoring-ps"/> pour plus de
  détails.
 </para>

 <variablelist>
  <varlistentry id="guc-cluster-name" xreflabel="cluster_name">
   <term><varname>cluster_name</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>cluster_name</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Configure un nom qui identifie cette instance pour différentes
     raisons. Le nom de l'instance apparaît dans le titre de tous les
     processus de l'instance. De plus, c'est le nom d'application par
     défaut pour une connexion standby (voir <xref
     linkend="guc-synchronous-standby-names"/>.)
    </para>

    <para>
     Le nom peut être
     n'importe quelle chaîne de caractères de longueur inférieure à
     <symbol>NAMEDATALEN</symbol> (64 caractères dans une compilation
     standard du serveur). Seuls les caractères ASCII imprimables
     peuvent être utilisés dans <varname>cluster_name</varname>. Les
     autres caractères seront remplacés par des points
     d'interrogation (<literal>?</literal>). Aucun nom n'est
     affiché si ce paramètre est positionné sur la chaîne vide
     <literal>''</literal> (ce qui est la valeur par défaut). Ce
     paramètre ne peut être positionné qu'au démarrage du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
   <term><varname>update_process_title</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>update_process_title</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Active la mise à jour du titre du processus chaque fois qu'une
     nouvelle commande SQL est reçue par le serveur. Ce paramètre est à
     <literal>on</literal> par défaut sur la plupart des plateformes mais
     il est à <literal>off</literal> sur Windows car cette plateforme
     souffre de lenteurs plus importantes pour la mise à jour du titre du
     processus. Seuls les superutilisateurs peuvent modifier ce paramètre.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</sect2>
</sect1>

<sect1 id="runtime-config-statistics">
<title>Statistiques d'exécution</title>

<sect2 id="runtime-config-statistics-collector">
 <title>Collecteur de statistiques sur les requêtes et les index</title>

 <para>
  Ces paramètres contrôlent la collecte de statistiques de niveau serveur.
  Lorsque celle-ci est activée, les données produites peuvent être
  visualisées à travers la
  famille de vues systèmes <structname>pg_stat</structname> et
  <structname>pg_statio</structname>. On peut se reporter à
  <xref linkend="monitoring"/> pour plus d'informations.
 </para>

 <variablelist>

  <varlistentry id="guc-track-activities" xreflabel="track_activities">
   <term><varname>track_activities</varname> (<type>boolean</type>)</term>
   <listitem>

    <indexterm>
     <primary>paramètre de configuration <varname>track_activities</varname></primary>
    </indexterm>
    <para>
     Active la collecte d'informations sur la commande en cours d'exécution
     dans chaque session, avec l'heure de démarrage de la commande. Ce paramètre
     est activé par défaut. Même si le paramètre est activé, cette information
     n'est pas visible par tous les utilisateurs, mais uniquement par les
     superutilisateurs et l'utilisateur possédant la session
     traitée&nbsp;; de ce fait, cela ne représente pas une faille de
     sécurité. Seuls les superutilisateurs peuvent modifier ce paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-track-activity-query-size" xreflabel="track_activity_query_size">
   <term><varname>track_activity_query_size</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>track_activity_query_size</varname></primary>
    </indexterm>
    <para>
     Indique la quantité de mémoire réservée pour enregistrer le texte de la
     commande en cours d'exécution pour chaque session active, pour le champ
     <structname>pg_stat_activity</structname>.<structfield>query</structfield>.
     Si cette valeur est spécifiée sans unité, elle est comprise comme un
     nombre d'octets. La valeur par défaut est 1024 octets. Ce paramètre peut
     seulement être configuré au démarrage du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-track-counts" xreflabel="track_counts">
   <term><varname>track_counts</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>track_counts</varname></primary>
    </indexterm>
    <para>
     Active la récupération de statistiques sur l'activité de la base
     de données. Ce paramètre est activé par défaut car le processus
     autovacuum utilise les informations ainsi récupérées. Seuls les
     super-utilisateurs peuvent modifier ce paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-track-io-timing" xreflabel="track_io_timing">
   <term><varname>track_io_timing</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>track_io_timing</varname></primary>
    </indexterm>
    <para>
     Active le chronométrage des appels d'entrées/sorties de la base de
     données. Ce paramètre est désactivé par défaut car il demandera sans
     cesse l'heure courante au système d'exploitation, ce qui peut causer
     une surcharge significative sur certaines plateformes. Vous pouvez
     utiliser l'outil <xref linkend="pgtesttiming"/> pour mesurer la surcharge
     causée par le chronométrage sur votre système. Les informations de
     chronométrage des entrées/sorties sont affichées dans
     <link linkend="monitoring-pg-stat-database-view">
      <structname>pg_stat_database</structname></link>, dans la sortie de
     <xref linkend="sql-explain"/> quand l'option <literal>BUFFERS</literal>
     est utilisée, et par <xref linkend="pgstatstatements"/>. Seuls les
     superutilisateurs peuvent modifier ce paramètre.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-track-functions" xreflabel="track_functions">
   <term><varname>track_functions</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>track_functions</varname></primary>
    </indexterm>
    <para>
     Active le suivi du nombre et de la durée des appels aux fonctions.
     Précisez <literal>pl</literal> pour ne tracer que les fonctions
     de langages procéduraux, ou <literal>all</literal> pour suivre aussi
     les fonctions SQL et C. La valeur par défaut est <literal>none</literal>,
     qui désactive le suivi des statistiques de fonctions.
     Seuls les superutilisateurs peuvent modifier ce paramètre.
    </para>

    <note>
     <para>
      Les fonctions en langage SQL qui sont assez simples pour être
      <quote>inlined</quote>, c'est à dire substituées dans le code de la
      requête appelante, ne seront pas suivies, quelle que soit la valeur de
      ce paramètre.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-stats-temp-directory" xreflabel="stats_temp_directory">
   <term><varname>stats_temp_directory</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>stats_temp_directory</varname></primary>
    </indexterm>
    <para>
     Précise le répertoire dans lequel stocker les données temporaires
     de statistiques. Cela peut être un chemin relatif au répertoire de
     données ou un chemin absolu. La valeur par défaut est
     <filename>pg_stat_tmp</filename>. Faire pointer ceci vers un système
     de fichiers mémoire diminuera les entrées/sorties physiques et peut
     améliorer les performances.
     Ce paramètre ne peut être positionné que dans le fichier
     <filename>postgresql.conf</filename> ou sur la ligne de commande.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-statistics-monitor">
 <title>Surveillance et statistiques</title>
 <variablelist>

  <varlistentry>
   <term><varname>log_statement_stats</varname> (<type>boolean</type>)</term>
   <term><varname>log_parser_stats</varname> (<type>boolean</type>)</term>
   <term><varname>log_planner_stats</varname> (<type>boolean</type>)</term>
   <term><varname>log_executor_stats</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>log_statement_stats</varname></primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>log_parser_stats</varname></primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>log_planner_stats</varname></primary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>log_executor_stats</varname></primary>
    </indexterm>
    <para>
     Écrivent, pour chaque requête, les statistiques de performance du
     module respectif dans les traces du serveur. C'est un outil de
     profilage très simpliste, similaire aux possibilités de l'appel
     <function>getrusage()</function> du système d'exploitation Unix.
     <varname>log_statement_stats</varname> rapporte les statistiques
     d'instructions globales, tandis que les autres fournissent un rapport
     par module. <varname>log_statement_stats</varname> ne peut pas être
     activé conjointement à une option de module. Par défaut, toutes ces
     options sont désactivées. Seuls les superutilisateurs peuvent modifier
     ces paramètres.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>

</sect2>
</sect1>

<sect1 id="runtime-config-autovacuum">
<title>Nettoyage (<command>vacuum</command>) automatique</title>

<indexterm>
 <primary>autovacuum</primary>
 <secondary>paramètres de configuration</secondary>
</indexterm>

<para>
 Ces paramètres contrôlent le comportement de la fonctionnalité appelée
 <firstterm>autovacuum</firstterm>. Se référer à la
 <xref linkend="autovacuum"/> pour plus de détails.
 Notez que beaucoup de ces paramètres peuvent être surchargés au niveau
 de chaque table&nbsp;; voir <xref linkend="sql-createtable-storage-parameters"/>.
</para>

<variablelist>

 <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
  <term><varname>autovacuum</varname> (<type>boolean</type>)</term>
  <listitem>
   <indexterm>
    <primary>paramètre de configuration <varname>autovacuum</varname></primary>
   </indexterm>
   <para>
    Contrôle si le serveur doit démarrer le démon d'autovacuum.
    Celui-ci est activé par défaut. <xref linkend="guc-track-counts"/>
    doit aussi être activé pour que ce
    démon soit démarré. Ce paramètre ne peut être configuré que dans le fichier
    <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande;
    cependant, le processus d'autovacuum peut être désactivé au niveau
    de chaque table en modifiant les paramètres de stockage de la table.
   </para>
   <para>
    Même si ce paramètre est désactivé, le système lance
    les processus autovacuum nécessaires pour empêcher le bouclage
    des identifiants de transaction. Voir <xref
    linkend="vacuum-for-wraparound"/> pour plus d'informations.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-log-autovacuum-min-duration" xreflabel="log_autovacuum_min_duration">
  <term><varname>log_autovacuum_min_duration</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>log_autovacuum_min_duration</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Trace chaque action réalisée par l'autovacuum si elle dure chacune plus que
    cette durée. Le configurer à zéro trace toutes les actions de l'autovacuum.
    La valeur par défaut, <literal>-1</literal> désactive les traces des
    actions de l'autovacuum. Si cette valeur est indiquée sans unité, elle est
    comprise comme un nombre de millisecondes.
    Par exemple, s'il est configuré à <literal>250ms</literal>,
    toutes les opérations VACUUM et ANALYZE qui durent plus de 250
    ms sont tracées. De plus, quand ce paramètre est configurée à
    une valeur autre que <literal>-1</literal>, un message sera
    tracé si l'action de l'autovacuum est abandonnée à cause de
    l'existence d'un verrou en conflit. Activer ce paramètre peut
    être utile pour tracer l'activité de l'autovacuum. Ce paramètre
    ne peut être configuré que dans le fichier
    <filename>postgresql.conf</filename> ou indiqué sur la ligne de
    commande;
    mais le paramètre peut être surchargé au niveau de chaque table
    en modifiant les paramètres de stockage de la table.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-max-workers" xreflabel="autovacuum_max_workers">
  <term><varname>autovacuum_max_workers</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_max_workers</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique le nombre maximum de processus autovacuum (autre que le lanceur
    d'autovacuum) qui peuvent être exécutés simultanément. La valeur par défaut
    est 3. Ce paramètre ne peut être configuré qu'au lancement du serveur.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
  <term><varname>autovacuum_naptime</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_naptime</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique le délai minimum entre les tours d'activité du démon autovacuum sur
    une base. À chaque tour, le démon examine une base de données et lance les
    commandes <command>VACUUM</command> et <command>ANALYZE</command>
    nécessaires aux tables de cette base. Si cette valeur est indiquée sans
    unité, elle est comprise comme un nombre de secondes. Il vaut, par défaut,
    une minute (<literal>1min</literal>). Ce paramètre ne peut être configuré
    que dans le fichier <filename>postgresql.conf</filename> ou indiqué sur la
    ligne de commande.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
  <term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_vacuum_threshold</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique le nombre minimum de lignes mises à jour ou supprimées
    nécessaire pour déclencher un <command>VACUUM</command> sur une table.
    La valeur par défaut est de 50 lignes.
    Ce paramètre ne peut être configuré que dans le fichier
    <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande
    mais il est possible de surcharger ce paramètre pour toute table en
    modifiant les paramètres de stockage de la table.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-insert-threshold" xreflabel="autovacuum_vacuum_insert_threshold">
  <term><varname>autovacuum_vacuum_insert_threshold</varname> (<type>integer</type>)
   <indexterm>
    <primary><varname>autovacuum_vacuum_insert_threshold</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
  </term>
  <listitem>
   <para>
    Indique le nombre de lignes enregistrées avant de déclencher un
    <command>VACUUM</command> sur une table. La valeur par défaut est 1000
    lignes. Si -1 est indiqué, autovacuum ne déclenchera pas d'opération
    <command>VACUUM</command> sur une table en se basant sur le nombre
    d'insertions. Ce paramètre peut seulement être configuré dans le fichier
    <filename>postgresql.conf</filename> et sur la ligne de commande du
    serveur&nbsp;; mais la configuration peut être surchargée par des tables
    individuelles en modifiant leur paramètres de stockage.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
  <term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_analyze_threshold</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique le nombre minimum de lignes insérées, mises à jour ou supprimées
    nécessaire pour déclencher un <command>ANALYZE</command> sur une table. La valeur
    par défaut est de 50 lignes.
    Ce paramètre ne peut être configuré que dans le fichier
    <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande
    mais il est possible de surcharger ce paramètre pour toute table en
    modifiant les paramètres de stockage de la table.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-insert-scale-factor" xreflabel="autovacuum_vacuum_insert_scale_factor">
  <term><varname>autovacuum_vacuum_insert_scale_factor</varname> (<type>floating point</type>)
   <indexterm>
    <primary><varname>autovacuum_vacuum_insert_scale_factor</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
  </term>
  <listitem>
   <para>
    Indique une fraction de la taille de la table à ajouter à
    <varname>autovacuum_vacuum_insert_threshold</varname> avant de décider de
    déclencher un <command>VACUUM</command> sur une table. La valeur par défaut
    est 0,2 (soit 20% de la table). Ce paramètre peut seulement être configuré
    dans le fichier <filename>postgresql.conf</filename> et sur la ligne de
    commande du serveur&nbsp;; mais la configuration peut être surchargée par
    des tables individuelles en modifiant leur paramètres de stockage.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
  <term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_vacuum_scale_factor</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique la fraction de taille de la table à ajouter à
    <varname>autovacuum_vacuum_threshold</varname> pour décider du moment
    auquel déclencher un <command>VACUUM</command>. La valeur par défaut
    est 0.2 (20&nbsp;% de la taille de la table).
    Ce paramètre ne peut être configuré que dans le fichier
    <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande
    mais il est possible de surcharger ce paramètre pour toute table en
    modifiant les paramètres de stockage de la table.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
  <term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_analyze_scale_factor</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique la fraction de taille de la table à ajouter à
    <varname>autovacuum_analyze_threshold</varname> pour décider du
    moment auquel déclencher une commande <command>ANALYZE</command>.
    La valeur par défaut est 0.1 (10&nbsp;% de la taille de la table).
    Ce paramètre ne peut être configuré que dans le fichier
    <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande
    mais il est possible de surcharger ce paramètre pour toute table en
    modifiant les paramètres de stockage de la table.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
  <term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_freeze_max_age</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique l'âge maximum (en transactions) que le champ
    <structname>pg_class</structname>.<structfield>relfrozenxid</structfield>
    d'une table peut atteindre avant qu'une opération
    <command>VACUUM</command> ne soit forcée pour empêcher la réinitialisation
    de l'ID de transaction sur cette table. Le système lance les
    processus autovacuum pour éviter ce bouclage même si l'autovacuum est désactivé.
   </para>

   <para>
    L'opération VACUUM supprime aussi les anciens fichiers du
    sous-répertoire <filename>pg_xact</filename>, ce qui explique pourquoi
    la valeur par défaut est relativement basse (200 millions de transactions).
    Ce paramètre
    n'est lu qu'au démarrage du serveur, mais il peut être diminué pour
    toute table en modifiant les paramètres de stockage de la table. Pour plus
    d'informations, voir <xref linkend="vacuum-for-wraparound"/>.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-multixact-freeze-max-age" xreflabel="autovacuum_multixact_freeze_max_age">
  <term><varname>autovacuum_multixact_freeze_max_age</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_multixact_freeze_max_age</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique l'âge maximum (en multixacts) que le champ
    <structname>pg_class</structname>.<structfield>relminmxid</structfield>
    d'une table peut atteindre avant qu'une opération
    <command>VACUUM</command> ne soit forcé pour empêcher une réutilisation
    des identifiants multixact dans la table. Notez que le système lancera
    les processus autovacuum pour empêcher la réutilisation même si
    l'autovacuum est normalement désactivé.
   </para>

   <para>
    Un VACUUM des multixacts s'occupe aussi de la suppression des anciens
    fichiers à partir des sous-répertoires <filename>pg_multixact/members</filename>
    et <filename>pg_multixact/offsets</filename>, ce qui explique pourquoi
    la valeur par défaut est relativement basse (400 million de multixacts).
    Ce paramètre est seulement configurable au démarrage du serveur mais sa
    valeur peut être réduite pour des tables individuelles en modifiant les
    paramètres de stockage de la table. Pour plus d'informations, voir <xref
    linkend="vacuum-for-multixact-wraparound"/>.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
  <term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_vacuum_cost_delay</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique la valeur du coût de délai utilisée dans les opérations de
    <command>VACUUM</command>. Si -1 est indiqué,
    la valeur habituelle de <xref linkend="guc-vacuum-cost-delay"/> est
    utilisée. Si cette valeur est spécifiée sans unité, elle est comprise
    comme un nombre de millisecondes. La valeur par défaut est 2 millisecondes.
    Ce paramètre ne peut être configuré que dans le fichier
    <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande
    mais il est possible de le surcharger pour toute table en
    modifiant les paramètres de stockage de la table.
   </para>
  </listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
  <term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)</term>
  <listitem>
   <indexterm>
    <primary><varname>autovacuum_vacuum_cost_limit</varname></primary>
    <secondary>paramètre de configuration</secondary>
   </indexterm>
   <para>
    Indique la valeur de coût limite utilisée dans les opérations de
    <command>VACUUM</command> automatiques. Si -1 est
    indiqué (valeur par défaut), la valeur courante de
    <xref linkend="guc-vacuum-cost-limit"/> est utilisée. La
    valeur est distribuée proportionnellement entre les processus
    autovacuum en cours d'exécution, s'il y en a plus d'un, de sorte que la
    somme des limites de chaque processus ne dépasse jamis la limite de
    cette variable.
    Ce paramètre ne peut être configuré que dans le fichier
    <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande
    mais il est possible de le surcharger pour toute table en modifiant les
    paramètres de stockage.
   </para>
  </listitem>
 </varlistentry>

</variablelist>
</sect1>

<sect1 id="runtime-config-client">
<title>Valeurs par défaut des connexions client</title>

<sect2 id="runtime-config-client-statement">
 <title>Comportement des instructions</title>
 <variablelist>

  <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
   <term><varname>client_min_messages</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>client_min_messages</varname></primary>
    </indexterm>
    <para>
     Contrôle les <link linkend="runtime-config-severity-levels">niveaux de
      message</link> envoyés au client. Les valeurs valides sont
     <literal>DEBUG5</literal>, <literal>DEBUG4</literal>,
     <literal>DEBUG3</literal>, <literal>DEBUG2</literal>,
     <literal>DEBUG1</literal>, <literal>LOG</literal>,
     <literal>NOTICE</literal>, <literal>WARNING</literal> et
     <literal>ERROR</literal>. Chaque niveau inclut tous les
     niveaux qui le suivent. Plus on progresse dans la liste,
     plus le nombre de messages envoyés est faible. <literal>NOTICE</literal>
     est la valeur par défaut. <literal>LOG</literal> a ici une portée
     différente de celle de <varname>log_min_messages</varname>.
    </para>
    <para>
     Les messages de niveau <literal>INFO</literal> sont toujours envoyés au
     client.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-search-path" xreflabel="search_path">
   <term><varname>search_path</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>search_path</varname></primary>
    </indexterm>
    <indexterm><primary>path</primary><secondary>pour schémas</secondary></indexterm>
    <para>
     Cette variable précise l'ordre dans lequel les schémas sont parcourus
     lorsqu'un objet (table, type de données, fonction, etc.) est référencé
     par un simple nom sans précision du schéma. Lorsque des objets de
     noms identiques existent dans plusieurs schémas, c'est le premier trouvé
     dans le chemin de recherche qui est utilisé. Il ne peut être fait
     référence à un objet qui ne fait partie d'aucun des schémas indiqués
     dans le chemin de recherche qu'en précisant son schéma conteneur
     avec un nom qualifié (avec un point).
    </para>

    <para>
     <varname>search_path</varname> doit contenir une liste de noms
     de schémas séparés par des virgules. Tout nom qui ne correspond pas à un
     schéma existant ou qui correspond à un schéma pour lequel l'utilisateur
     n'a pas le droit <literal>USAGE</literal>, est ignoré silencieusement.
    </para>

    <para>
     Si un des éléments de la liste est le nom spécial <literal>$user</literal>,
     alors le schéma dont le nom correspond à la valeur retournée par
     <function>CURRENT_USER</function> est substitué, s'il existe et que
     l'utilisateur ait le droit <literal>USAGE</literal> sur ce schéma
     (sinon <literal>$user</literal> est ignoré).
    </para>

    <para>
     Le schéma du catalogue système, <literal>pg_catalog</literal>, est toujours
     parcouru, qu'il soit ou non mentionné dans le chemin. Mentionné, il
     est alors parcouru dans l'ordre indiqué. Dans le cas contraire, il
     est parcouru <emphasis>avant</emphasis> tout autre élément du chemin.
    </para>

    <!-- To further split hairs, funcname('foo') does not use the temporary
        schema, even when it considers typname='funcname'.  This paragraph
        refers to function names in a loose sense, "pg_proc.proname or
        func_name grammar production". -->
    <para>
     De même, le schéma des tables temporaires,
     <literal>pg_temp_<replaceable>nnn</replaceable></literal>, s'il existe,
     est toujours parcouru. Il peut être explicitement ajouté au chemin
     à l'aide de l'alias <literal>pg_temp</literal><indexterm><primary>pg_temp</primary></indexterm>.
     S'il n'en fait pas
     partie, la recherche commence par lui (avant même
     <literal>pg_catalog</literal>). Néanmoins, seuls les noms de relation
     (table, vue, séquence, etc.) et de type de données sont recherchés dans
     le schéma temporaire. Aucune fonction et aucun opérateur n'y est
     jamais recherché.
    </para>

    <para>
     Lorsque des objets sont créés sans précision de schéma cible
     particulier, ils sont placés dans le premier schéma valide listé dans le chemin
     de recherche. Une erreur est rapportée si le chemin de recherche est
     vide.
    </para>

    <para>
     La valeur par défaut de ce paramètre est
     <literal>"$user", public</literal>. Elle permet l'utilisation
     partagée d'une base de données (dans laquelle aucun utilisateur n'a de schéma
     privé et tous partagent l'utilisation de <literal>public</literal>),
     les schémas privés d'utilisateur ainsi qu'une combinaison de ces
     deux modes. D'autres effets peuvent être obtenus en modifiant le chemin de
     recherche par défaut, globalement ou par utilisateur.
    </para>

    <para>
     La valeur courante réelle du chemin de recherche peut être examinée via
     la fonction <acronym>SQL</acronym> <function>current_schemas()</function>
     (voir <xref linkend="functions-info"/>). Elle n'est pas identique
     à la valeur de <varname>search_path</varname>
     car <function>current_schemas</function> affiche la façon dont les
     requêtes apparaissant dans <varname>search_path</varname> sont
     résolues.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-row-security" xreflabel="row_security">
   <term><varname>row_security</varname> (<type>boolean</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>row_security</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Cette variable indique s'il convient de lever une erreur
     au lieu d'appliquer la politique de sécurité au niveau
     ligne. Lorsque positionnée à <literal>on</literal>, les
     politiques s'appliquent normalement. Lorsque positionnée
     à <literal>off</literal>, les requêtes qui remplissent les
     conditions d'au moins une politique de sécurité échouent. La
     valeur par défaut est <literal>on</literal>. Positionnez la
     valeur sur <literal>off</literal> dans le cas où une visibilité
     limitée des lignes pourrait causer des résultats incorrects&nbsp;; par
     exemple, <application>pg_dump</application> effectue ce changement
     par défaut. Cette variable n'a aucun effet sur les rôles qui
     outrepassent toutes les politiques de sécurité niveau ligne, à
     savoir, les superutilisateurs et les rôles qui possèdent l'attribut
     <literal>BYPASSRLS</literal>.
    </para>

    <para>
     Pour plus d'informations sur les politiques de sécurité niveau
     ligne, voir <xref linkend="sql-createpolicy"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-default-table-access-method" xreflabel="default_table_access_method">
   <term><varname>default_table_access_method</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>default_table_access_method</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Ce paramètre spécifie la méthode d'accès par défaut aux tables. Ce
     paramètre est utilisé lors de la création des tables ou des vues
     matérialisées si la commande <command>CREATE</command> n'indique pas
     spécifiquement de méthode d'accès ou quand <command>SELECT ...
      INTO</command> est utilisé, ce qui ne permet pas de spécifier une méthode
     d'accès à la table. La valeur par défaut est <literal>heap</literal>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
   <term><varname>default_tablespace</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>default_tablespace</varname></primary>
    </indexterm>
    <indexterm><primary>tablespace</primary><secondary>par défaut</secondary></indexterm>
    <para>
     Cette variable indique le <foreignphrase>tablespace</foreignphrase> par
     défaut dans lequel sont créés les objets (tables et index) quand une
     commande <command>CREATE</command> ne l'explicite pas. Elle détermine
     aussi le tablespace qu'une relation partitionnée utilisera pour les
     prochaines partitions.
    </para>

    <para>
     La valeur est soit le nom d'un
     <foreignphrase>tablespace</foreignphrase> soit une chaîne vide pour
     indiquer l'utilisation du
     <foreignphrase>tablespace</foreignphrase> par défaut de la base de
     données courante. Si la valeur ne correspond pas au nom d'un tablespace
     existant, <productname>PostgreSQL</productname> utilise automatiquement
     le tablespace par défaut de la base de données courante. Si un
     <foreignphrase>tablespace</foreignphrase> différent de celui par défaut
     est indiqué, l'utilisateur doit avoir le droit <literal>CREATE</literal>.
     Dans le cas contraire, la tentative de création échouera.
    </para>

    <para>
     Cette variable n'est pas utilisée pour les tables temporaires&nbsp;;
     pour elles, <xref linkend="guc-temp-tablespaces"/> est consulté à la
     place.
    </para>

    <para>
     Cette variable n'est pas utilisée non plus lors de la création
     de bases de données. Par défaut, une nouvelle base de données
     hérite sa configuration de tablespace de la base de données
     modèle qui sert de copie.
    </para>

    <para>
     Pour plus d'informations sur les tablespaces, voir <xref
     linkend="manage-ag-tablespaces"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-temp-tablespaces" xreflabel="temp_tablespaces">
   <term><varname>temp_tablespaces</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>temp_tablespaces</varname></primary>
    </indexterm>
    <indexterm><primary>tablespace</primary><secondary>temporary</secondary></indexterm>
    <para>
     Cette variable indique le (ou les)
     <foreignphrase>tablespace</foreignphrase>(s) dans le(s)quel(s) créer
     les objets temporaires (tables temporaires et index sur des tables
     temporaires) quand une commande <command>CREATE</command> n'en explicite
     pas. Les fichiers temporaires créés par les tris de gros
     ensembles de données sont aussi créés dans ce
     <foreignphrase>tablespace</foreignphrase>.
    </para>

    <para>
     Cette valeur est une liste de noms de
     <foreignphrase>tablespace</foreignphrase>s. Quand cette liste
     contient plus d'un nom, <productname>PostgreSQL</productname> choisit
     un membre de la liste au hasard à chaque fois qu'un objet temporaire doit
     être créé. En revanche, dans une transaction, les objets temporaires
     créés successivement sont placés dans les
     <foreignphrase>tablespace</foreignphrase>s successifs de la
     liste. Si l'élément sélectionné de la liste est une chaîne vide,
     <productname>PostgreSQL</productname> utilise automatiquement le
     <foreignphrase>tablespace</foreignphrase> par défaut de la base en cours.
    </para>

    <para>
     Si <varname>temp_tablespaces</varname> est configuré interactivement,
     l'indication d'un <foreignphrase>tablespace</foreignphrase> inexistant
     est une erreur. Il en est de même si l'utilisateur n'a pas le droit
     <literal>CREATE</literal> sur le
     <foreignphrase>tablespace</foreignphrase> indiqué. Néanmoins,
     lors de l'utilisation d'une valeur précédemment configurée, les
     <foreignphrase>tablespace</foreignphrase>s qui n'existent pas sont ignorés
     comme le sont les <foreignphrase>tablespace</foreignphrase>s pour lesquels
     l'utilisateur n'a pas le droit <literal>CREATE</literal>. Cette règle
     s'applique, en particulier, lors de l'utilisation d'une valeur configurée dans le fichier
     <filename>postgresql.conf</filename>.
    </para>

    <para>
     La valeur par défaut est une chaîne vide. De ce fait,
     tous les objets temporaires sont créés dans le
     <foreignphrase>tablespace</foreignphrase> par défaut de la base de
     données courante.
    </para>

    <para>
     Voir aussi <xref linkend="guc-default-tablespace"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
   <term><varname>check_function_bodies</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>check_function_bodies</varname></primary>
    </indexterm>
    <para>
     Ce paramètre est habituellement positionné à <literal>on</literal>.
     Positionné à <literal>off</literal>, il désactive la validation du
     corps de la fonction lors de <xref linkend="sql-createfunction"/>.
     Désactiver la validation évite
     les effets de bord du processus de validation et évite les faux
     positifs dûs aux problèmes, par exemple les références. Configurer
     ce paramètre à <literal>off</literal> avant de charger les fonctions
     à la place des autres utilisateurs&nbsp;;
     <application>pg_dump</application> le fait automatiquement.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
   <term><varname>default_transaction_isolation</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>niveau d'isolation de la transaction</primary>
     <secondary>valeur par défaut</secondary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>default_transaction_isolation</varname></primary>
    </indexterm>
    <para>
     Chaque transaction SQL a un niveau d'isolation. Celui-ci peut être
     <quote>read uncommitted</quote>, <quote>read committed</quote>,
     <quote>repeatable read</quote> ou <quote>serializable</quote>.
     Ce paramètre contrôle le niveau d'isolation par défaut de chaque
     nouvelle transaction. La valeur par défaut est <quote>read committed</quote>.
    </para>

    <para>
     Consulter le <xref linkend="mvcc"/> et
     <xref linkend="sql-set-transaction"/>
     pour plus d'informations.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
   <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>transaction en lecture seule</primary>
     <secondary>valeur par défaut</secondary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>default_transaction_read_only</varname></primary>
    </indexterm>

    <para>
     Une transaction SQL en lecture seule ne peut pas modifier les
     tables permanentes. Ce paramètre contrôle le statut de lecture seule
     par défaut de chaque nouvelle transaction. La valeur par défaut est
     <literal>off</literal> (lecture/écriture).
    </para>

    <para>
     Consulter
     <xref linkend="sql-set-transaction"/>
     pour plus d'informations.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-default-transaction-deferrable" xreflabel="default_transaction_deferrable">
   <term><varname>default_transaction_deferrable</varname> (<type>boolean</type>)</term>
   <listitem>
    <indexterm>
     <primary>transaction différable</primary>
     <secondary>valeur par défaut</secondary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>default_transaction_deferrable</varname></primary>
    </indexterm>

    <para>
     Lors du fonctionnement avec le niveau d'isolation
     <literal>serializable</literal>, une transaction SQL en lecture
     seule et différable peut subir un certain délai avant d'être
     autorisée à continuer. Néanmoins, une fois qu'elle a commencé
     son exécution, elle n'encourt aucun des frais habituels
     nécessaires pour assurer sa sériabilité. Donc le code de
     sérialisation n'a aucune raison de forcer son annulation à cause
     de mises à jour concurrentes, ce qui rend cette option très
     intéressante pour les longues transactions en lecture seule.
    </para>

    <para>
     Ce paramètre contrôle le statut différable par défaut de chaque
     nouvelle transaction. Il n'a actuellement aucun effet sur les
     transactions en lecture/écriture ou celles opérant à des niveaux
     d'isolation inférieurs à <literal>serializable</literal>. La
     valeur par défaut est <literal>off</literal>.
    </para>

    <para>
     Consultez <xref linkend="sql-set-transaction"/> pour plus
     d'informations.
    </para>
   </listitem>
  </varlistentry>


  <varlistentry id="guc-session-replication-role" xreflabel="session_replication_role">
   <term><varname>session_replication_role</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>session_replication_role</varname></primary>
    </indexterm>
    <para>
     Contrôle l'exécution des triggers et règles relatifs à la réplication
     pour la session en cours. Seul un superutilisateur peut configurer
     cette variable. Sa modification résulte en l'annulation de tout plan de requête
     précédemment mis en cache. Les valeurs possibles sont
     <literal>origin</literal> (la valeur par défaut),
     <literal>replica</literal> et <literal>local</literal>.
    </para>

    <para>
     L'utilisation prévue de ce paramètre est que les systèmes de réplication
     logique le passent à <literal>replica</literal> quand ils répliquent des
     changements. L'effet sera que les triggers et les règles (quand on n'a
     pas modifié la configuration par défaut) ne se déclencheront pas sur
     la réplique. Voir les clauses <xref linkend="sql-altertable"/>
     <literal>ENABLE TRIGGER</literal> et <literal>ENABLE RULE</literal>
     pour plus d'informations.
    </para>

    <para>
     En interne, PostgreSQL traite de la même manière les paramètres
     <literal>origin</literal> et <literal>local</literal>. Les systèmes de
     réplication tiers peuvent utiliser ces deux valeurs pour leurs besoins
     internes, par exemple en utilisant <literal>local</literal> pour
     désigner la session dont les changements ne seront pas répliqués.
    </para>

    <para>
     Puisque les clés étrangères sont implémentées comme des triggers,
     passer ce paramètre à <literal>replica</literal> désactive aussi toutes
     les vérifications de clés étrangères, ce qui peut laisser les données
     dans un état incohérent en cas d'utilisation inappropriée.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
   <term><varname>statement_timeout</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>statement_timeout</varname></primary>
    </indexterm>
    <para>
     Interrompt toute instruction qui dure plus longtemps que cette durée. Si
     <varname>log_min_error_statement</varname> est configuré à
     <literal>ERROR</literal>, ou plus bas, l'instruction en cause est tracée.
     Si cette valeur est indiquée sans unité, elle est comprise comme un nombre
     de millisecondes. La valeur zéro (par défaut) désactive le décompte.
    </para>

    <para>
     Le délai est mesuré à partir du moment où une commande arrive au serveur
     jusqu'à sa fin par le serveur. Si plusieurs requêtes SQL apparaissent dans
     un seul message simple-Query, le délai est appliqué à chaque requête
     séparément. (Les versions de <productname>PostgreSQL</productname>
     antérieures à la 13 traitaient le délai pour la chaîne complète de
     requêtes.) Dans le protocole de requête étendue, le délai commence lors du
     début de l'exécution de tout message relatif à la requête (Parse, Bind,
     Execute, Describe) et elle est annulée à la fin du message Execute ou
     Sync.
    </para>

    <para>
     Il n'est pas recommandé de configurer <varname>statement_timeout</varname>
     dans <filename>postgresql.conf</filename> car cela affecte toutes les
     sessions.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-lock-timeout" xreflabel="lock_timeout">
   <term><varname>lock_timeout</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>lock_timeout</varname></primary>
    </indexterm>
    <para>
     Annule toute requête qui attend plus longtemps que la durée indiquée par
     ce paramètre lors de la tentative d'acquisition d'un verrou sur une table,
     un index, une ligne ou tout autre objet d'une base de données. La limite
     de temps s'applique séparément pour chaque tentative d'acquisition d'un
     verrou. La limite s'applique pour les demandes de verrous explicites
     (comme <command>LOCK TABLE</command>, ou <command>SELECT FOR
      UPDATE</command> sans <literal>NOWAIT</literal>) et pour ceux acquis
     implicitement. Si cette valeur est indiquée sans unité, elle est comprise
     comme un nombre de millisecondes. Une valeur de zéro (valeur par défaut)
     désactive ce comportement.
    </para>

    <para>
     Contrairement à <varname>statement_timeout</varname>, ce délai peut
     seulement intervenir lors de l'attente de verrous. Notez que si
     <varname>statement_timeout</varname> est différent de zéro, il est plutôt
     inutile de configurer <varname>lock_timeout</varname> à la même valeur ou
     à une valeur plus importante puisque le délai sur la requête se
     déclenchera toujours avant. Si <varname>log_min_error_statement</varname>
     est configuré à <literal>ERROR</literal> ou plus bas, l'instruction qui
     dépasse ce délai sera tracé.
    </para>

    <para>
     Configurer <varname>lock_timeout</varname> dans
     <filename>postgresql.conf</filename> n'est pas recommandé car cela
     affecterait toutes les sessions.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-idle-in-transaction-session-timeout" xreflabel="idle_in_transaction_session_timeout">
   <term><varname>idle_in_transaction_session_timeout</varname> (<type>integer</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>idle_in_transaction_session_timeout</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Termine toute session ayant une transaction ouverte ne faisant rien depuis
     plus longtemps que la durée indiquée par ce paramètre.
     Cela permet de relâcher les verrous posés par cette transaction et de
     réutiliser le slot de connexion ainsi libérée. Cela permet aussi aux
     lignes visibles par cette seule transaction d'être nettoyées. Voir <xref
     linkend="routine-vacuuming"/> pour plus de détails sur ce point.
    </para>
    <para>
     Si cette valeur est indiquée sans unité, elle est comprise comme un nombre
     de millisecondes. La valeur par défaut de 0 désactive cette
     fonctionnalité.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-freeze-table-age" xreflabel="vacuum_freeze_table_age">
   <term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_freeze_table_age</varname></primary>
    </indexterm>
    <para>
     <command>VACUUM</command> effectuera un parcours agressif de la table si
     le champ <structname>pg_class</structname>.<structfield>relfrozenxid</structfield>
     de la table a atteint l'âge spécifié par ce paramètre. Un parcours agressif diffère
     d'un <command>VACUUM</command> standard dans le sens où il visite chaque bloc qui
     pourrait contenir des XID ou MXID non gelés, pas seulement ceux qui pourraient
     contenir des lignes mortes. La valeur par
     défaut est 150 millions de transactions. Même si les utilisateurs peuvent
     positionner cette valeur à n'importe quelle valeur comprise entre zéro et
     2 milliards, <command>VACUUM</command> limitera silencieusement la valeur
     effective à 95% de <xref linkend="guc-autovacuum-freeze-max-age"/>, afin
     qu'un vacuum périodique manuel ait une chance de s'exécuter avant un
     autovacuum anti-bouclage ne soit lancé pour la table. Pour plus d'informations
     voir <xref linkend="vacuum-for-wraparound"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
   <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_freeze_min_age</varname></primary>
    </indexterm>
    <para>
     Indique l'âge limite (en transactions) que <command>VACUUM</command>
     doit utiliser pour décider de geler les versions de ligne lors du
     parcours d'une table. La valeur par défaut est 50 millions. Bien que les
     utilisateurs puissent configurer une valeur quelconque comprise entre
     zéro et 1 milliard, <command>VACUUM</command> limite silencieusement la
     valeur réelle à la moitié de la valeur de <xref
     linkend="guc-autovacuum-freeze-max-age"/> afin que la valeur entre deux
     autovacuums forcés ne soit pas déraisonnablement courte. Pour plus
     d'informations, voir <xref linkend="vacuum-for-wraparound"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-multixact-freeze-table-age" xreflabel="vacuum_multixact_freeze_table_age">
   <term><varname>vacuum_multixact_freeze_table_age</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_multixact_freeze_table_age</varname></primary>
    </indexterm>
    <para>
     <command>VACUUM</command> réalise un parcours agressif de la table si le
     champ <structname>pg_class</structname>.<structfield>relminmxid</structfield>
     de la table a atteint l'âge indiqué par ce paramètre. Un parcours agressif diffère
     d'un <command>VACUUM</command> standard dans le sens où il visite chaque bloc qui
     pourrait contenir des XID ou MXID non gelés, pas seulement ceux qui pourraient
     contenir des lignes mortes. La valeur par
     défaut est de 150 millions de multixacts. Bien que les utilisateurs
     peuvent configurer cette valeur entre zéro et deux milliards,
     <command>VACUUM</command> limitera silencieusement la valeur réelle à
     95% de <xref linkend="guc-autovacuum-multixact-freeze-max-age"/>, pour
     qu'un <command>VACUUM</command> manuel périodique ait une chance d'être
     exécuté avant qu'une opération anti-réutilisation d'identifiants ne soit
     exécutée sur la table. Pour plus d'informations, voir <xref
     linkend="vacuum-for-multixact-wraparound"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-multixact-freeze-min-age" xreflabel="vacuum_multixact_freeze_min_age">
   <term><varname>vacuum_multixact_freeze_min_age</varname> (<type>integer</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>vacuum_multixact_freeze_min_age</varname></primary>
    </indexterm>
    <para>
     Précise l'âge limite (en multixacts) que <command>VACUUM</command> doit
     utiliser pour décider s'il doit remplacer les identifiants multixact
     avec un nouvel identifiant de transaction ou de multixact lors de son
     parcours de la table. La valeur par défaut est de 5 millions de
     multixacts. Bien que les utilisateurs peuvent configurer cette valeur
     entre zéro et un milliard, <command>VACUUM</command> limitera
     silencieusement la valeur réelle à la moitié de la valeur de
     <xref linkend="guc-autovacuum-multixact-freeze-max-age"/>, pour qu'il y
     ait un délai raisonnable entre deux autovacuums forcés. Pour plus
     d'informations, voir <xref linkend="vacuum-for-multixact-wraparound"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-vacuum-cleanup-index-scale-factor" xreflabel="vacuum_cleanup_index_scale_factor">
   <term><varname>vacuum_cleanup_index_scale_factor</varname> (<type>floating point</type>)
    <indexterm>
     <primary><varname>vacuum_cleanup_index_scale_factor</varname></primary>
     <secondary>paramètre de configuration</secondary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Spécifie la fraction du nombre total d'enregistrements de la table,
     comptés lors la collecte de statistiques précédente, qui peut être
     insérée sans déclencher un parcours d'index lors de la phase de
     nettoyage du <command>VACUUM</command>. Ce paramètre ne s'applique
     actuellement qu'aux index B-tree.
    </para>

    <para>
     Si aucun tuple n'a été effacé de la table, les index B-tree sont quand
     même parcourus lors de la partie nettoyage du <command>VACUUM</command>
     quand au moins une des conditions suivantes est rencontrée&nbsp;: les
     statistiques des index sont périmés, ou l'index contient des pages
     effacées qui peuvent être recyclées lors du nettoyage. Les
     statistiques sont considérées périmées si le nombre d'enregistrements
     nouvellement insérés dépasse la fraction
     <varname>vacuum_cleanup_index_scale_factor</varname>
     du nombre total d'enregistrements dans la table détecté par la
     collecte de statistiques précédente. Le nombre total d'enregistrements
     dans la table est stocké dans les méta-pages de l'index. Notez que la
     méta-page n'inclue pas ces données avant que <command>VACUUM</command>
     ne trouve plus aucune ligne morte, donc le parcours d'un index
     B-tree lors de la phase de nettoyage ne peut être évité que si les
     cycles de <command>VACUUM</command> suivants ne détecte aucun
     enregistrement mort.
    </para>

    <para>
     L'éventail de valeurs va de <literal>0</literal> à
     <literal>10000000000</literal>. Quand
     <varname>vacuum_cleanup_index_scale_factor</varname> est à
     <literal>0</literal>, les scans d'index ne sont jamais sautés durant le
     nettoyage du <command>VACUUM</command>.
     La valeur par défaut est <literal>0.1</literal>.
    </para>

   </listitem>
  </varlistentry>

  <varlistentry id="guc-bytea-output" xreflabel="bytea_output">
   <term><varname>bytea_output</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>bytea_output</varname></primary>
    </indexterm>
    <para>
     Configure le format de sortie pour les valeurs de type
     <type>bytea</type>. Les valeurs valides sont <literal>hex</literal>
     (la valeur par défaut) et <literal>escape</literal> (le format
     traditionnel de PostgreSQL). Voir <xref linkend="datatype-binary"/>
     pour plus d'informations. Le type <type>bytea</type> accepte toujours
     les deux formats en entrée, quelque soit la valeur de cette
     configuration.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-xmlbinary" xreflabel="xmlbinary">
   <term><varname>xmlbinary</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>xmlbinary</varname></primary>
    </indexterm>
    <para>
     Définit la manière de coder les valeurs binaires en XML.
     Ceci s'applique, par exemple, quand les valeurs <type>bytea</type> sont
     converties en XML par les fonctions <function>xmlelement</function>
     et <function>xmlforest</function>. Les valeurs possibles sont
     <literal>base64</literal> et <literal>hex</literal>, qui sont toutes
     les deux définies dans le standard XML Schema. La valeur par défaut
     est <literal>base64</literal>. Pour plus d'informations sur les
     fonctions relatives à XML, voir <xref linkend="functions-xml"/>.
    </para>

    <para>
     Le choix effectif de cette valeur est une affaire de sensibilité, la
     seule restriction provenant des applications clientes.
     Les deux méthodes supportent toutes les
     valeurs possibles, et ce bien que le codage hexadécimal soit un peu
     plus grand que le codage en base64.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-xmloption" xreflabel="xmloption">
   <term><varname>xmloption</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>xmloption</varname></primary>
    </indexterm>
    <indexterm>
     <primary><varname>SET XML OPTION</varname></primary>
    </indexterm>
    <indexterm>
     <primary>option XML</primary>
    </indexterm>
    <para>
     Définit si <literal>DOCUMENT</literal> ou
     <literal>CONTENT</literal> est implicite lors de la conversion entre
     XML et valeurs chaînes de caractères. Voir <xref
     linkend="datatype-xml"/> pour la description. Les valeurs
     valides sont <literal>DOCUMENT</literal> et
     <literal>CONTENT</literal>. La valeur par défaut est
     <literal>CONTENT</literal>.
    </para>

    <para>
     D'après le standard SQL, la commande pour configurer cette option
     est&nbsp;:
     <synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
     </synopsis>
     Cette syntaxe est aussi disponible dans PostgreSQL.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-client-preload">
 <title>Préchargement de bibliothèques partagées</title>

 <para>
  Plusieurs paramètres sont disponibles pour le préchargement de
  bibliothèques partagées sur le serveur. Ces bibliothèques peuvent servir
  à ajouter des fonctionnalités supplémentaires ou à améliorer les
  performances. Par exemple, une configuration à
  <literal>'$libdir/mabibliotheque'</literal> force le chargement de la
  bibliothèque <literal>mabibliotheque.so</literal> (ou sur certaines
  plateformes de <literal>mabibliotheque.sl</literal>) à partir du répertoire
  standard d'installation. Les différences entre les paramètres concernent
  la prise d'effet et les droits requis pour les modifier.
 </para>

 <para>
  Les bibliothèques de procédures stockées pour <productname>PostgreSQL</productname>
  peuvent être préchargées de cette façon, habituellement en utilisant la syntaxe
  <literal>'$libdir/plXXX'</literal> où <literal>XXX</literal> est
  <literal>pgsql</literal>, <literal>perl</literal>,
  <literal>tcl</literal> ou <literal>python</literal>.
 </para>

 <para>
  Seules les bibliothèques partagées spécifiquement codées pour PostgreSQL
  peuvent être chargées de cette façon. Chaque bibliothèque supportée par
  PostgreSQL a un <quote>bloc magique</quote> qui est vérifié pour garantir
  sa comptabilité. De ce fait, les bibliothèques non compatibles avec
  PostgreSQL ne peuvent pas être gérées ainsi. Vous devriez pouvoir utiliser
  les capacités du système pour cela, tel que la variable d'environnement
  <envar>LD_PRELOAD</envar>.
 </para>

 <para>
  En général, il est préférable de se référer à la documentation d'un module
  spécifique pour trouver le bon moyen permettant de charger le module.
 </para>

 <variablelist>
  <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
   <term><varname>local_preload_libraries</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>local_preload_libraries</varname></primary>
    </indexterm>
    <indexterm>
     <primary><filename>$libdir/plugins</filename></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Cette variable indique une ou plusieurs bibliothèques partagées chargées
     au début de la connexion. Elle contient une liste de noms de
     bibliothèques, séparés par des virgules, où chaque nom est interprété
     comme par la commande <xref linkend="sql-load"/>. Les espaces blancs entre
     les entrées sont ignorés. Placer le nom d'une bibliothèque entre
     guillemets doubles si vous avez besoin d'inclure des espaces blancs ou des
     virgules dans le nom. La valeur de ce paramètre n'est pris en compte qu'au
     début de la connexion. Les modifications ultérieures n'ont pas d'effet sur
     les connexions déjà établies. Si une bibliothèque indiquée est
     introuvable, la tentative de connexion échouera. Seuls les
     superutilisateurs peuvent modifier cette configuration.
    </para>

    <para>
     Cette option est configurable par tout utilisateur. De ce fait, les
     bibliothèques pouvant être chargées sont restreintes à celles
     disponibles dans le sous-répertoire <filename>plugins</filename> du
     répertoire des bibliothèques de l'installation. C'est de la responsabilité
     de l'administrateur de s'assurer que seules des bibliothèques
     <quote>sûres</quote> y soient installées.) Les éléments de
     <varname>local_preload_libraries</varname> peuvent indiquer ce répertoire
     explicitement, par exemple
     <literal>$libdir/plugins/mabibliotheque</literal>, ou indiquer seulement
     le nom de la bibliothèque &mdash; <literal>mabibliotheque</literal>, ce
     qui aurait le même effet que <literal>$libdir/plugins/mabibliotheque</literal>.
    </para>

    <para>
     Le but de cette fonctionnalité est de permettre aux utilisateurs
     non privilégiés de charger des bibliothèques de débuggage ou de
     mesures de performances dans des sessions explicites sans avoir à
     exécuter manuellement une commande <command>LOAD</command>. À cette
     fin, une configuration classique de ce paramètre serait d'utiliser
     la variable d'environnement <envar>PGOPTIONS</envar> sur le client
     ou d'utiliser la commande <command>ALTER ROLE SET</command>.
    </para>

    <para>
     Néanmoins, sauf si un module est conçu spécifiquement pour être utilisé de cette
     façon par des utilisateurs non administrateurs, ceci n'est pas le bon
     paramétrage pour vous. Regardez plutôt <xref
     linkend="guc-session-preload-libraries"/>.
    </para>
   </listitem>
  </varlistentry>


  <varlistentry id="guc-session-preload-libraries" xreflabel="session_preload_libraries">
   <term><varname>session_preload_libraries</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>session_preload_libraries</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Cette variable indique une ou plusieurs bibliothèques partagées chargées
     au début de la connexion. Elle contient une liste de noms de
     bibliothèques, séparés par des virgules, où chaque nom est interprété
     comme par la commande <xref linkend="sql-load"/>. Les espaces blancs entre
     les entrées sont ignorés. Placer le nom d'une bibliothèque entre
     guillemets doubles si vous avez besoin d'inclure des espaces blancs ou des
     virgules dans le nom. La valeur de ce paramètre n'est pris en compte qu'au
     début de la connexion. Les modifications ultérieures n'ont pas d'effet sur
     les connexions déjà établies. Si une bibliothèque indiquée est
     introuvable, la tentative de connexion échouera. Seuls les
     superutilisateurs peuvent modifier cette configuration.
    </para>

    <para>
     Le but de cette fonctionnalité est de permettre le chargement de
     bibliothèques de débuggage ou de mesure de performances dans des
     sessions explicites sans avoir à exécuter manuellement une commande
     <command>LOAD</command>. Par exemple, <xref linkend="auto-explain"/>
     pourrait être activé pour toutes les sessions si un certain utilisateur
     se connecte, en configurant son compte avec la commande <command>ALTER
      ROLE SET</command>. De plus, ce paramètre peut être modifié sans avoir
     à redémarrer le serveur (les changements ne prennent effet que pour les
     connexions suivantes), donc il est plus facile d'ajouter de nouveaux
     modules de cette façon, même s'ils s'appliquent à toutes les sessions.
    </para>

    <para>
     Contrairement à <xref linkend="guc-shared-preload-libraries"/>, il
     n'y a pas vraiment un gros avantage en terme de performances à charger
     une bibliothèque en début de session plutôt qu'à sa première utilisation.
     Néanmoins, ceci n'est plus vrai si un système de pooling de connexions
     est mis en place.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
   <term><varname>shared_preload_libraries</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>shared_preload_libraries</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Cette variable indique une ou plusieurs bibliothèques partagées chargées
     au démarrage du serveur. Elle contient une liste de noms de bibliothèques,
     séparés par des virgules, où chaque nom est interprété comme par la
     commande <xref linkend="sql-load"/>. Les espaces blancs entre les entrées
     sont ignorés. Placer le nom d'une bibliothèque entre guillemets doubles si
     vous avez besoin d'inclure des espaces blancs ou des virgules dans le nom.
     La valeur de ce paramètre n'est pris en compte qu'au démarrage du serveur.
     Si une bibliothèque indiquée est introuvable, la tentative de démarrage
     échouera. Seuls les superutilisateurs peuvent modifier cette
     configuration.
    </para>

    <para>
     Certaines bibliothèques ont besoin de réaliser certaines opérations qui
     ne peuvent se faire qu'au démarrage du processus postmaster, comme allouer
     de la mémoire partagée, réserver des verrous à faible poids, ou démarrer
     des background workers. Ces bibliothèques doivent être chargées au
     démarrage du serveur via ce paramètre. Voir la documentation de chaque
     bibliothèque pour les détails.
    </para>

    <para>
     Les autres bibliothèques peuvent aussi être préchargées. En préchargeant
     une bibliothèque partagée, le temps de démarrage de la bibliothèque est
     évité lorsque la bibliothèque est utilisée pour la première fois.
     Néanmoins, le temps de démarrer chaque nouveau processus serveur pourrait
     augmenter légèrement, même si le processus n'utilise jamais cette
     bibliothèque. Donc ce paramètre est seulement recommandé pour les
     bibliothèques qui seront utilisées par la majorité des sessions. De plus,
     changer ce paramètre requiert un redémarrage du serveur, donc ce n'est
     pas le bon paramètre pour les tâches de débuggage par exemple. Utilisez
     <xref linkend="guc-session-preload-libraries"/> pour cela.
    </para>

    <note>
     <para>
      Sur les hôtes Windows, précharger une bibliothèque au démarrage du serveur
      ne réduira pas le temps nécessaire pour démarrer un nouveau processus
      serveur. Chaque processus serveur rechargera toutes les bibliothèques
      préchargées. Néanmoins, <varname>shared_preload_libraries</varname>
      est toujous utile sur les hôtes Windows pour les bibliothèques qui ont
      besoin de réaliser des opérations au démarrage du postmaster.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-jit-provider" xreflabel="jit_provider">
   <term><varname>jit_provider</varname> (<type>string</type>)
    <indexterm>
     <primary>paramètre de configuration <varname>jit_provider</varname></primary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Cette variable contient le nom de la bibliothèque du fournisseur JIT à
     utiliser (voir <xref linkend="jit-pluggable"/>). La valeur par défaut
     est <literal>llvmjit</literal>. Ce paramètre n'est configurable qu'au
     démarrage du serveur.
    </para>

    <para>
     Si ce paramètre pointe vers une bibliothèque inexistante,
     <acronym>JIT</acronym> ne sera pas disponible, mais aucune erreur ne
     sera levée. Cela permet à l'infrastructure de JIT d'être installée
     séparément de l'installation <productname>PostgreSQL</productname>
     principale.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-gin-pending-list-limit" xreflabel="gin_pending_list_limit">
   <term><varname>gin_pending_list_limit</varname> (<type>integer</type>)
    <indexterm>
     <primary><varname>gin_pending_list_limit</varname></primary>
     <secondary>paramètre de configuration</secondary>
    </indexterm>
   </term>
   <listitem>
    <para>
     Positionne la taille maximale de la liste d'attente GIN qui est
     utilisée lorsque <literal>fastupdate</literal> est activé. Si
     la liste dépasse cette taille maximale, elle est allégée en
     déplaçant des entrées en masse vers la structure de données
     principale GIN. Si cette valeur est indiquée sans unité, elle est
     comprise comme un nombre de Ko. La valeur par défaut est quatre mégaoctets
     (<literal>4MB</literal>). Ce paramètre peut être surchargé pour
     chaque index GIN en modifiant les paramètres de stockage de l'index.
     Voir <xref linkend="gin-fast-update"/> et <xref linkend="gin-tips"/>
     pour plus d'informations.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</sect2>

<sect2 id="runtime-config-client-format">
 <title>Locale et formatage</title>

 <variablelist>

  <varlistentry id="guc-datestyle" xreflabel="datestyle">
   <term><varname>datestyle</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>datestyle</varname></primary>
    </indexterm>
    <para>
     Configure le format d'affichage des valeurs de type date et
     heure, ainsi que les règles d'interprétation des valeurs ambiguës
     de dates saisies. Pour des raisons historiques, cette variable
     contient deux composantes indépendantes&nbsp;: la spécification du
     format en sortie (<literal>ISO</literal>, <literal>Postgres</literal>,
     <literal>SQL</literal> ou <literal>German</literal>) et la spécification en
     entrée/sortie de l'ordre année/mois/jour (<literal>DMY</literal>,
     <literal>MDY</literal> ou <literal>YMD</literal>). Elles peuvent être
     configurées séparément ou ensemble. Les mots clés <literal>Euro</literal>
     et <literal>European</literal> sont des synonymes de
     <literal>DMY</literal>&nbsp;; les mots clés <literal>US</literal>,
     <literal>NonEuro</literal> et <literal>NonEuropean</literal> sont des synonymes
     de <literal>MDY</literal>. Voir la <xref linkend="datatype-datetime"/> pour
     plus d'informations. La valeur par défaut est <literal>ISO, MDY</literal>,
     mais <application>initdb</application> initialise le fichier de
     configuration avec une valeur qui correspond au comportement de la locale
     <varname>lc_time</varname> choisie.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-intervalstyle" xreflabel="IntervalStyle">
   <term><varname>IntervalStyle</varname> (<type>enum</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>IntervalStyle</varname></primary>
    </indexterm>
    <para>
     Positionne le format d'affichage pour les valeurs de type intervalle.
     La valeur <literal>sql_standard</literal> produira une sortie correspondant
     aux litéraux d'intervalles du standard <acronym>SQL</acronym>.
     La valeur <literal>postgres</literal> (qui est la valeur par défaut)
     produira une sortie correspondant à celle des versions de <productname>PostgreSQL</productname>
     antérieures à la 8.4 quand le paramètre <xref linkend="guc-datestyle"/>
     était positionné à <literal>ISO</literal>.
     La valeur <literal>postgres_verbose</literal> produira une sortie correspondant
     à celle des versions de <productname>PostgreSQL</productname>
     antérieures à la 8.4 quand le paramètre <varname>DateStyle</varname>
     était positionné à une valeur autre que <literal>ISO</literal>
     La valeur <literal>iso_8601</literal> produira une sortie correspondant
     au <quote>format avec designateurs</quote> d'intervalle de temps défini
     dans le paragraphe 4.4.3.2 de l'ISO 8601.
    </para>
    <para>
     Le paramètre <varname>IntervalStyle</varname> affecte aussi l'interprétation
     des entrées ambigües d'intervalles. Voir <xref linkend="datatype-interval-input"/>
     pour plus d'informations.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-timezone" xreflabel="TimeZone">
   <term><varname>TimeZone</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>TimeZone</varname></primary>
    </indexterm>
    <indexterm><primary>fuseau horaire</primary></indexterm>
    <para>
     Configure le fuseau horaire pour l'affichage et l'interprétation
     de la date et de l'heure.
     La valeur par défaut est <literal>GMT</literal>, mais elle est généralement surchargée
     dans le fichier <filename>postgresql.conf</filename>&nbsp;; <application>initdb</application>
     installera une configuration correspondant à l'environnement système.
     Voir <xref linkend="datatype-timezones"/> pour plus d'informations.

    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
   <term><varname>timezone_abbreviations</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>timezone_abbreviations</varname></primary>
    </indexterm>
    <indexterm><primary>time zone names</primary></indexterm>
    <para>
     <!-- collection ? -->
     Configure la liste des abréviations de fuseaux horaires
     acceptés par le serveur pour la saisie de données de type
     datetime. La valeur par défaut est <literal>'Default'</literal>,
     qui est une liste qui fonctionne presque dans le monde
     entier&nbsp;; il y a aussi <literal>'Australia'</literal> et
     <literal>'India'</literal>. D'autres listes peuvent être
     définies pour une installation particulière. Voir <xref
     linkend="datetime-config-files"/> pour plus d'informations.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
   <term><varname>extra_float_digits</varname> (<type>integer</type>)</term>

   <listitem>
    <indexterm>
     <primary>chiffres significatifs</primary>
    </indexterm>
    <indexterm>
     <primary>nombre à virgule flottante</primary>
     <secondary>affichage</secondary>
    </indexterm>
    <indexterm>
     <primary>paramètre de configuration <varname>extra_float_digits</varname></primary>
    </indexterm>
    <para>
     Ce paramètre ajuste le nombre de chiffres utilisés par l'affichage textuel par les valeurs à
     virgule flottante, ce qui inclut <type>float4</type>, <type>float8</type> et les
     types de données géométriques.
    </para>
    <para>
     Si la valeur est 1 (valeur par défaut) ou au-dessus, les valeurs à virgule
     flottante sont renvoyées dans le format le plus court et le plus
     précis&nbsp;; voir <xref linkend="datatype-float"/>. Le nombre réel de
     chiffres générés dépends seulement de la valeur en sortie, et non pas de
     la valeur de ce paramètre. Au plus 17 chiffres sont requis pour les
     valeurs <type>float8</type> et 9 pour les valeurs <type>float4</type>. Ce
     format est à la fois rapide et précis, préservant exactement la valeur
     flottante binaire originale lorsqu'elle est correctement lue. Pour la
     compabilité historique, des valeurs jusqu'à 3 sont autorisées.
    </para>
    <para>
     Si la valeur est zéro ou négative, alors la sortie est arrondie avec une
     précision décimale donnée. La précision utilisée est le nombre standard de
     chiffres pour le type (<literal>FLT_DIG</literal> ou
     <literal>DBL_DIG</literal> comme approprié) réduit suivant la valeur de ce
     paramètre. (Par exemple, indiquer -1 fera que les valeurs
     <literal>float4</literal> soient arrondies en sortie à 5 chiffres
     significatifs et les valeurs <literal>float8</literal> à 14 chiffres.) Ce
     format est plus lent et ne préserve pas tous les buts de la valeur
     flottante binaire, mais pourrait être plus facile à lire.
    </para>
    <note>
     <para>
      La signification de ce paramètre, et de sa valeur par défaut, a changé avec
      <productname>PostgreSQL</productname> 12&nbsp;;
      voir <xref linkend="datatype-float"/> pour plus de discussions.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
   <term><varname>client_encoding</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>client_encoding</varname></primary>
    </indexterm>
    <indexterm><primary>character set</primary></indexterm>
    <para>
     Initialise l'encodage client (jeu de caractères). Par défaut,
     il s'agit de celui de la base de données.
     Les ensembles de caractères supportés par <productname>PostgreSQL</productname>
     sont décrits dans <xref linkend="multibyte-charset-supported"/>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
   <term><varname>lc_messages</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>lc_messages</varname></primary>
    </indexterm>
    <para>
     Initialise la langue d'affichage des messages. Les
     valeurs acceptables dépendent du système&nbsp;; voir
     <xref linkend="locale"/> pour plus d'informations. Si cette variable est
     initialisée à une chaîne vide (valeur par défaut),
     alors la valeur est héritée de l'environnement d'exécution du serveur.
    </para>

    <para>
     Avec certains systèmes, cette catégorie de locale n'existe pas.
     Initialiser cette variable fonctionne toujours mais n'a aucun
     effet. De même, il est possible qu'il n'existe pas de traduction des
     messages dans la langue sélectionnée. Dans ce cas, les messages sont
     affichés en anglais.
    </para>

    <para>
     Seuls les superutilisateurs peuvent modifier ce paramètre car il
     affecte aussi bien les messages envoyés dans les traces du serveur
     que ceux envoyés au client.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
   <term><varname>lc_monetary</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>lc_monetary</varname></primary>
    </indexterm>
    <para>
     Initialise la locale à utiliser pour le formatage des montants monétaires (pour la
     famille de fonctions <function>to_char</function>, par exemple).
     Les valeurs acceptables dépendent du système&nbsp;; voir la
     <xref linkend="locale"/> pour plus d'informations. Si cette variable
     est initialisée à une chaîne vide (valeur par défaut), alors la valeur
     est héritée de l'environnement d'exécution du serveur, et une valeur
     incorrecte pourrait dégrader la lisibilité des traces du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
   <term><varname>lc_numeric</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>lc_numeric</varname></primary>
    </indexterm>
    <para>
     Initialise la locale à utiliser pour le formatage des nombres (pour la famille de
     fonctions <function>to_char</function>, par exemple). Les valeurs
     acceptables dépendent du système&nbsp;; voir la <xref linkend="locale"/>
     pour plus d'informations. Si cette variable est initialisée à une chaîne
     vide (valeur par défaut), alors la valeur est héritée de l'environnement
     d'exécution du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-lc-time" xreflabel="lc_time">
   <term><varname>lc_time</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>lc_time</varname></primary>
    </indexterm>
    <para>
     Initialise la locale à utiliser pour le formatage des valeurs de date et
     d'heure, par exemple avec la famille de fonctions
     <function>to_char</function>. Les valeurs acceptables dépendent du
     système&nbsp;; voir
     la <xref linkend="locale"/> pour plus d'informations. Si cette variable est
     initialisée à une chaîne vide (valeur par défaut), alors la valeur est héritée de
     l'environnement d'exécution du serveur.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="guc-default-text-search-config" xreflabel="default_text_search_config">
   <term><varname>default_text_search_config</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>default_text_search_config</varname></primary>
    </indexterm>
    <para>
     Sélectionne la configuration de recherche plein texte utilisée
     par les variantes des fonctions de recherche plein texte qui n'ont pas
     d'argument explicite pour préciser la configuration.
     Voir <xref linkend="textsearch"/> pour plus d'informations.
     La valeur par défaut est <literal>pg_catalog.simple</literal> mais
     <application>initdb</application> initialise le fichier de
     configuration avec une valeur qui correspond à la locale choisie pour
     <varname>lc_ctype</varname> s'il est possible d'identifier une configuration
     correspondant à la locale.
    </para>
   </listitem>
  </varlistentry>

 </variablelist>

</sect2>
<sect2 id="runtime-config-client-other">
 <title>Autres valeurs par défaut</title>

 <variablelist>

  <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
   <term><varname>dynamic_library_path</varname> (<type>string</type>)</term>
   <listitem>
    <indexterm>
     <primary>paramètre de configuration <varname>dynamic_library_path</varname></primary>
    </indexterm>
    <indexterm><primary>chargement dynamique</primary></indexterm>
    <para>
     Chemin de recherche utilisé lorsqu'un module chargeable
     dynamiquement doit être ouvert et
     que le nom de fichier indiqué dans la commande
     <command>CREATE FUNCTION</command> ou <command>LOAD</command>
     ne contient pas d'indication de répertoire (c'est-à-dire que
     le nom ne contient pas de slash).
    </para>

    <para>
     La valeur de <varname>dynamic_library_path</varname> doit être
     une liste de chemins absolus séparés par des virgules (ou des
     points virgules sous Windows).  Si un élément de la liste débute
     par la chaîne spéciale <literal>$libdir</literal>, le répertoire
     des bibliothèques internes du paquetage
     <productname>PostgreSQL</productname> est substitué à
     <literal>$libdir</literal>. C'est l'emplacement où sont installés
     les modules fournis par la distribution
     <productname>PostgreSQL</productname> standard. (La commande
     <literal>pg_config --pkglibdir</literal> permet de connaître le nom de
     ce répertoire.) Par exemple&nbsp;:
     <programlisting>dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'</programlisting>
           ou dans un environnement Windows&nbsp;:
<programlisting>dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'</programlisting>
         </para>

       <para>
        Pour plus d'informations sur la gestion des schémas, voir <xref
        linkend="ddl-schemas"/>. En particulier, la configuration par défaut
        est seulement convenable quand la base de données a un seul
        utilisateur ou quelques utilisateurs qui se font confiance
        mutuellement.
       </para>

       <para>
        La valeur par défaut de ce paramètre est <literal>'$libdir'</literal>.
        Si la valeur est une chaîne vide, la recherche automatique du chemin est
        désactivée.
       </para>

       <para>
        Ce paramètre peut être modifié à l'exécution par les
	superutilisateurs, mais un tel paramétrage ne persiste que pour la
        durée de la connexion du client. Il est donc préférable de ne
	réserver cette méthode qu'à des fins de développement. Il est
	recommandé d'initialiser ce paramètre dans le fichier de configuration
        <filename>postgresql.conf</filename>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)</term>
      <listitem>
       <indexterm>
        <primary>paramètre de configuration <varname>gin_fuzzy_search_limit</varname></primary>
       </indexterm>
       <para>
        Limite souple haute de la taille de l'ensemble renvoyé par un index GIN.
        Pour plus d'informations, voir <xref linkend="gin-tips"/>.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-locks">
    <title>Gestion des verrous</title>

     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
      <term><varname>deadlock_timeout</varname> (<type>integer</type>)</term>

      <listitem>
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>deadlock_timeout</varname></primary>
      </indexterm>

       <para>
        Durée totale d'attente d'un verrou avant de tester une condition de
        verrou mort (<foreignphrase>deadlock</foreignphrase>). Le test de
        verrou mort est très coûteux, le serveur ne l'effectue donc pas à
        chaque fois qu'il attend un verrou. Les développeurs supposent (de
        façon optimiste&nbsp;?) que les verrous morts sont rares dans les
        applications en production et attendent simplement un verrou pendant
        un certain temps avant de lancer une recherche de blocage. Augmenter
        cette valeur réduit le temps perdu en recherches inutiles de verrous
        morts mais retarde la détection de vraies erreurs de verrous morts. Si
        cette valeur est indiquée sans unité, elle est comprise comme un
        nombre de millisecondes. La valeur par défaut est une seconde
        (<literal>1s</literal>), ce qui est probablement la plus petite valeur
        pratique. Sur un serveur en pleine charge, elle peut être augmentée.
        Idéalement, ce paramétrage doit dépasser le temps typique d'une
        transaction de façon à augmenter la probabilité qu'un verrou soit
        relâché avant que le processus en attente ne décide de lancer une
        recherche de verrous morts. Seuls les superutilisateurs peuvent
        modifier cette configuration.
       </para>

       <para>
        Quand <xref linkend="guc-log-lock-waits"/> est configuré, ce paramètre
        détermine aussi la durée d'attente avant qu'un message ne soit
        enregistré dans les journaux concernant cette attente. Pour comprendre
        ces délais de verrouillage, il peut être utile de configurer
        <varname>deadlock_timeout</varname> à une valeur extraordinairement
        basse.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_locks_per_transaction</varname></primary>
      </indexterm>
       <para>
        La table des verrous partagés trace les verrous sur
	<varname>max_locks_per_transaction</varname> *
	(<xref linkend="guc-max-connections"/> +
        <xref linkend="guc-max-prepared-transactions"/>) objets (c'est-à-dire
	des tables)&nbsp;; de ce fait, au maximum ce nombre d'objets distincts
	peuvent être verrouillés simultanément. Ce paramètre contrôle le nombre moyen
	de verrous d'objets alloués pour chaque transaction&nbsp;; des
	transactions individuelles peuvent verrouiller plus d'objets tant
	que l'ensemble des verrous de toutes les transactions tient dans la table
	des verrous. Il <emphasis>ne</emphasis> s'agit <emphasis>pas</emphasis>
	du nombre de lignes qui peuvent être verrouillées&nbsp;; cette valeur
	n'a pas de limite. La valeur par défaut,
	64, s'est toujours avérée suffisante par le passé, mais il est
	possible de l'augmenter si des clients accèdent à de nombreuses
	tables différentes au sein d'une unique transaction, par exemple une requête
  sur une table parent ayant de nombreux enfants.
	Ce paramètre ne peut être initialisé qu'au lancement du serveur.
       </para>

       <para>
        Lors de l'exécution d'un serveur en attente, vous devez configurer ce
        paramètre à la même valeur ou à une valeur plus importante que sur le
        serveur maître. Sinon, des requêtes pourraient ne pas être autorisées
        sur le serveur en attente.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-transaction" xreflabel="max_pred_locks_per_transaction">
      <term><varname>max_pred_locks_per_transaction</varname> (<type>integer</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_pred_locks_per_transaction</varname></primary>
      </indexterm>
       <para>
        La table de verrous de prédicat partagée garde une trace des
        verrous sur
        <varname>max_pred_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"/> + <xref
        linkend="guc-max-prepared-transactions"/>) objets (autrement dit
        tables). Du coup, pas plus que ce nombre d'objets distincts
        peut être verrouillé à un instant. Ce paramètre contrôle le
        nombre moyen de verrous d'objet alloués pour chaque
        transaction&nbsp;; les transactions individuelles peuvent
        verrouillées plus d'objets à condition que les verrous de toutes
        les transactions tiennent dans la table des verrous. Ce n'est
        <emphasis>pas</emphasis> le nombre de lignes qui peuvent être
        verrouillées, cette valeur étant illimitée. La valeur par défaut,
        64, a été généralement suffisante dans les tests mais vous
        pouvez avoir besoin d'augmenter cette valeur si vous avez des
        clients qui touchent beaucoup de tables différentes dans une
        seule transaction sérialisable. Ce paramètre n'est configurable
        qu'au lancement du serveur.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-relation" xreflabel="max_pred_locks_per_relation">
      <term><varname>max_pred_locks_per_relation</varname> (<type>integer</type>)
      <indexterm>
       <primary>Paramètre de configuration <varname>max_pred_locks_per_relation</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Cela contrôle le nombre de pages ou de lignes d'une unique relation
        peut verrouiller au niveau du prédicat avant que le verrou soit promis
        pour couvrir l'intégralité de la relation.  Des valeurs supérieures ou
        égales à zéro signifient une limite absolue, alors que des valeur
        négatives signifient <xref
        linkend="guc-max-pred-locks-per-transaction"/> par la valeur absolue de
        ce paramètre.  La valeur par défaut est -2, ce qui permet de conserver
        le comportement des anciennes version de
        <productname>PostgreSQL</productname>.
        Ce paramètre peut uniquement être modifié dans le fichier
        <filename>postgresql.conf</filename> ou indiqué sur la ligne de
        commande.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-page" xreflabel="max_pred_locks_per_page">
      <term><varname>max_pred_locks_per_page</varname> (<type>integer</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>max_pred_locks_per_page</varname></primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Ceci contrôle combien de lignes sur une seule page peuvent être
        verrouillées avec prédicat avant que le verrou ne soit promu pour
        couvrir la page complète. La valeur par défaut est 2. Ce paramètre
        peut seulement être configuré dans le fichier
        <filename>postgresql.conf</filename> ou sur la ligne de commande du
        serveur.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-compatible">
    <title>Compatibilité de version et de plateforme</title>

    <sect2 id="runtime-config-compatible-version">
     <title>Versions précédentes de PostgreSQL</title>
     <variablelist>

     <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
      <term><varname>array_nulls</varname> (<type>boolean</type>)</term>

      <listitem>
        <indexterm>
         <primary>paramètre de configuration <varname>array_nulls</varname></primary>
        </indexterm>
       <para>
        Contrôle si l'analyseur de saisie de tableau reconnaît
	<literal>NULL</literal> non-encadré par des guillemets comme élément de tableaux
	NULL. Activé par défaut (<literal>on</literal>), il autorise la saisie
	de valeurs NULL dans un tableau. Néanmoins, les versions de
	<productname>PostgreSQL</productname> antérieures à la 8.2 ne
	supportent pas les valeurs NULL dans les tableaux. De ce fait, ces versions
	traitent <literal>NULL</literal> comme une
	chaîne dont le contenu est <quote>NULL</quote>. Pour une compatibilité
	ascendante avec les applications nécessitant l'ancien comportement, ce
	paramètre peut être désactivé (<literal>off</literal>).
       </para>

       <para>
        Il est possible de créer des valeurs de tableau contenant des
	valeurs NULL même quand cette variable est à <literal>off</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
      <term><varname>backslash_quote</varname> (<type>enum</type>)</term>
      <listitem>
      <indexterm><primary>strings</primary><secondary>backslash quotes</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>backslash_quote</varname></primary>
      </indexterm>
       <para>
        Contrôle si un guillemet simple peut être représenté par un
	<literal>\'</literal> dans une chaîne. Il est préférable, et conforme au standard
	SQL, de représenter un guillemet simple en le doublant (<literal>''</literal>) mais,
	historiquement, <productname>PostgreSQL</productname> a aussi
	accepté <literal>\'</literal>. Néanmoins, l'utilisation de
	<literal>\'</literal> présente des problèmes de sécurité car
	certains encodages client contiennent des caractères multi-octets
	dans lesquels le dernier octet est l'équivalent ASCII numérique d'un
	<literal>\</literal>. Si le code côté
	client ne fait pas un échappement correct, alors une attaque par injection
	SQL est possible. Ce risque peut être évité en s'assurant que le
	serveur rejette les requêtes dans lesquelles apparaît un guillemet
	échappé avec un antislash. Les valeurs autorisées de
	<varname>backslash_quote</varname> sont
        <literal>on</literal> (autorise <literal>\'</literal> en permanence),
	<literal>off</literal> (le rejette en permanence) et
	<literal>safe_encoding</literal> (ne l'autorise que si l'encodage client
	n'autorise pas l'ASCII <literal>\</literal> dans un caractère multioctet).
	<literal>safe_encoding</literal> est le paramétrage par défaut.
       </para>

       <para>
        Dans une chaîne littérale conforme au standard,
	<literal>\</literal> ne signifie que <literal>\</literal>. Ce paramètre
	affecte seulement la gestion des chaînes non conformes, incluant la syntaxe de chaînes
	d'échappement (<literal>E'...'</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm><primary>strings</primary><secondary>escape warning</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>escape_string_warning</varname></primary>
      </indexterm>
       <para>
        S'il est activé (<literal>on</literal>), un message d'avertissement est
	affiché lorsqu'un antislash (<literal>\</literal>) apparaît dans une
	chaîne littérale ordinaire (syntaxe
	<literal>'...'</literal>) et que <varname>standard_conforming_strings</varname>
	est désactivé. Il est activé par défaut (<literal>on</literal>).
       </para>
       <para>
        Les applications qui souhaitent utiliser l'antislash comme
        échappement doivent être modifiées pour utiliser la syntaxe de
        chaîne d'échappement (<literal>E'...'</literal>) car le
        comportement par défaut des chaînes ordinaires est maintenant de
        traiter les antislashs comme un caractère ordinaire, d'après le
        standard SQL. Cette variable peut être activée pour aider à
        localiser le code qui doit être changé
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-regex-flavor" xreflabel="regex_flavor">
      <term><varname>regex_flavor</varname> (<type>enum</type>)</term>
      <listitem>
      <indexterm><primary>regular expressions</primary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>regex_flavor</varname></primary>
      </indexterm>
       <para>
        La <quote>flaveur</quote> des expressions rationnelles peut être configurée à
	<literal>advanced</literal> (avancée), <literal>extended</literal>
	(étendue) ou <literal>basic</literal> (basique). La valeur par défaut est
	<literal>advanced</literal>. La configuration <literal>extended</literal>
	peut être utile pour une compatibilité ascendante avec les versions
	antérieures à <productname>PostgreSQL</productname> 7.4.
	Voir <xref linkend="posix-syntax-details"/> pour plus de détails.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lo-compat-privileges" xreflabel="lo_compat_privileges">
      <term><varname>lo_compat_privileges</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>
        paramètre de configuration <varname>lo_compat_privileges</varname>
       </primary>
      </indexterm>
       <para>
        Dans les versions antérieures à la 9.0, les «&nbsp;Large Objects&nbsp;»
        n'avaient pas de droits d'accès et étaient, en réalité, toujours
        lisibles et modifiables par tous les utilisateurs. L'activation de cette variable
        désactive les nouvelles vérifications sur les droits, pour améliorer
        la compatibilité avec les versions précédentes. Désactivé par
        défaut. Seuls les superutilisateurs peuvent modifier ce paramètre.
       </para>
       <para>
        Configurer cette variable ne désactive pas toutes les vérifications de
        sécurité pour les «&nbsp;Large Objects&nbsp;» &mdash; seulement ceux
        dont le comportement par défaut a changé avec
        <productname>PostgreSQL</productname> 9.0.
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-operator-precedence-warning" xreflabel="operator_precedence_warning">
     <term><varname>operator_precedence_warning</varname> (<type>boolean</type>)
     <indexterm>
      <primary>paramètre de configuration<varname>operator_precedence_warning</varname></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Lorsque activé, l'analyseur émettra un avertissement
       pour toutes les constructions qui pourraient avoir changé
       de signification depuis <productname>PostgreSQL</productname>
       9.4 comme conséquence de changements dans la précédence
       des opérateurs. Cela est utile dans l'audit d'applications pour
       voir si des changements de précédence ont cassé quelque chose&nbsp;;
       mais il n'est pas destiné à être maintenu actif en production,
       dans la mesure où il lancera des avertissements sur du code
       SQL standard parfaitement valide. La valeur par défaut est
       <literal>off</literal>.
      </para>

      <para>
       Voir <xref linkend="sql-precedence"/> pour plus d'informations.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-quote-all-identifiers" xreflabel="quote-all-identifiers">
      <term><varname>quote_all_identifiers</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>quote_all_identifiers</varname></primary>
      </indexterm>
       <para>
        Quand la base de données génère du SQL, ce paramètre force
        tous les identifiants à être entre guillemets, même s'ils ne sont
        pas (actuellement) des mots-clés. Ceci affectera la sortie de
        la commande <command>EXPLAIN</command> ainsi que le résultat
        des fonctions comme <function>pg_get_viewdef</function>. Voir
        aussi l'option <option>--quote-all-identifiers</option> de
        <xref linkend="app-pgdump"/> et <xref linkend="app-pg-dumpall"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)</term>
      <listitem>
      <indexterm><primary>strings</primary><secondary>standard conforming</secondary></indexterm>
      <indexterm>
       <primary>paramètre de configuration <varname>standard_conforming_strings</varname></primary>
      </indexterm>
       <para>
        Contrôle si les chaînes ordinaires (<literal>'...'</literal>)
        traitent les antislashs littéralement, comme cela est indiqué
        dans le standard SQL. À partir de
        <productname>PostgreSQL</productname> 9.1, ce paramètre est
        activé par défaut, donc à <literal>on</literal> (les versions
        précédentes avaient <literal>off</literal> par défaut). Les
	applications peuvent vérifier ce paramètre pour déterminer la façon dont
	elles doivent traiter les chaînes littérales. La présence de ce
	paramètre indique aussi que la syntaxe de chaîne d'échappement
	(<literal>E'...'</literal>) est supportée. La syntaxe de chaîne d'échappement
	 (<xref linkend="sql-syntax-strings-escape"/>)
	doit être utilisée pour les applications traitant les
	antislashs comme des caractères d'échappement.
       </para>
      </listitem>
     </varlistentry>

<!-- Paragraphe déplacé, en regard de la VO -->
     <varlistentry id="guc-synchronize-seqscans" xreflabel="synchronize_seqscans">
      <term><varname>synchronize_seqscans</varname> (<type>boolean</type>)</term>
      <listitem>
       <indexterm><primary>paramètre de configuration <varname>synchronize_seqscans</varname></primary>
       </indexterm>
       <para>
        Cette variable permet la synchronisation des parcours séquentiels de
        grosses tables pour que les parcours concurrents lisent le même bloc
        à peu près au même moment, et donc partagent la charge
        d'entrées/sorties. Quand ce paramètre est activé, un parcours peut
        commencer au milieu de la table, aller jusqu'à la fin, puis
        <quote>revenir au début</quote> pour
        récupérer toutes les lignes, ce qui permet de le synchroniser avec
        l'activité de parcours déjà entamés. Il peut en résulter des
        modifications non prévisibles dans l'ordre des lignes renvoyées par
        les requêtes qui n'ont pas de clause <literal>ORDER BY</literal>.
        Désactiver ce paramètre assure un comportement identique aux versions
        précédant la 8.3 pour lesquelles un parcours séquentiel commence
        toujours au début de la table. Activé par défaut
        (<literal>on</literal>).
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

   <sect2 id="runtime-config-compatible-clients">
    <title>Compatibilité entre la plateforme et le client</title>
    <variablelist>

     <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
      <term><varname>transform_null_equals</varname> (<type>boolean</type>)</term>
      <listitem>
       <indexterm><primary>IS NULL</primary></indexterm>
       <indexterm>
        <primary>paramètre de configuration <varname>transform_null_equals</varname></primary>
       </indexterm>
       <para>
        Lorsque ce paramètre est activé (<literal>on</literal>), les expressions de la forme
        <literal><replaceable>expr</replaceable> = NULL</literal>
        (ou <literal>NULL = <replaceable>expr</replaceable></literal>) sont traitées comme
        <literal><replaceable>expr</replaceable> IS NULL</literal>, c'est-à-dire qu'elles
        renvoient vrai si <replaceable>expr</replaceable> s'évalue à la valeur NULL, et
        faux sinon. Le bon comportement, compatible avec le standard SQL, de
        <literal><replaceable>expr</replaceable> = NULL</literal> est de toujours renvoyer
        NULL (inconnu). De ce fait, ce paramètre est désactivé par défaut.
       </para>

       <para>
        Toutefois, les formulaires filtrés dans <productname>Microsoft
         Access</productname> engendrent des requêtes qui utilisent
        <literal><replaceable>expr</replaceable> = NULL</literal> pour tester les valeurs
        NULL. Il peut donc être souhaitable, lorsque cette intarface est
        utilisée pour accéder à une base de données, d'activer ce paramètre. Comme les
        expressions de la forme <literal><replaceable>expr</replaceable> = NULL</literal>
        renvoient toujours la valeur NULL (en utilisant l'interprétation du
        standard SQL), elles ne sont pas très utiles et n'apparaissent pas
        souvent dans les applications normales. De ce fait, ce paramètre a peu
        d'utilité en pratique. Mais la sémantique des expressions impliquant
        des valeurs NULL est souvent source de confusion pour les nouveaux
        utilisateurs. C'est pourquoi ce paramètre n'est pas activé par défaut.
       </para>

       <para>
        Ce paramètre n'affecte que la forme exacte
        <literal>= NULL</literal>, pas les autres opérateurs de comparaison ou
        expressions équivalentes en terme de calcul à des expressions
        qui impliquent l'opérateur égal (tels que <literal>IN</literal>). De
        ce fait, ce paramètre ne doit pas être considéré comme un correctif général
        à une mauvaise programmation.
       </para>

       <para>
        De plus amples informations sont disponibles dans la
        <xref linkend="functions-comparison"/>.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>
  </sect1>

  <sect1 id="runtime-config-error-handling">
   <title>Gestion des erreurs</title>

   <variablelist>

    <varlistentry id="guc-exit-on-error" xreflabel="exit_on_error">
     <term><varname>exit_on_error</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>exit_on_error</varname></primary>
      </indexterm>
      <para>
       Si positionné à on, toute erreur terminera la session courante.
       Par défaut, ce paramètre est à off, pour que seules des erreurs
       de niveau FATAL puissent terminer la session.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-restart-after-crash" xreflabel="restart_after_crash">
     <term><varname>restart_after_crash</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>restart_after_crash</varname></primary>
      </indexterm>
      <para>
       Quand ce paramètre est configuré à on, ce qui est sa valeur
       par défaut, <productname>PostgreSQL</productname> redémarrera
       automatiquement après un arrêt brutal d'un processus serveur.
       Il est généralement préférable de laisser cette valeur à on
       car cela maximise la disponibilité de la base de données.
       Néanmoins, dans certaines circonstances, comme le fait que
       <productname>PostgreSQL</productname> soit lancé par un outil
       de clustering, il pourrait être utile de désactiver le
       redémarrage pour que l'outil puisse avoir le contrôle et
       prendre toute action qui lui semble approprié.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-data-sync-retry" xreflabel="data_sync_retry">
     <term><varname>data_sync_retry</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>data_sync_retry</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Lorsqu'il est configuré à off, ce qui est la valeur par défaut,
       <productname>PostgreSQL</productname> lèvera une erreur de niveau PANIC
       en cas d'échec de synchronisation des fichiers de données modifiés sur
       le système de fichiers. Ceci causera le crash du serveur de bases de
       données. Ce paramètre peut seulement être configuré au lancement du
       serveur.
      </para>
      <para>
       Sur certains systèmes d'exploitation, le statut des données dans le
       cache disque du noyau n'est pas connu après un échec de synrhconisation.
       Dans certains cas, ce statut peut être entièrement oublié, rendant
       risquée toute nouvelle tentative. La deuxième tentative pourrait être
       rapportée comme réussi alors qu'en fait la donnée a été perdue. Dans ces
       circonstances, la seule façon d'éviter une perte de données est de
       rejouer les journaux de transactions après chaque statut d'échec, de
       préférence après une investigation sur la cause originale de l'échec et
       de remplacer tout matériel défectueux.
      </para>
      <para>
       S'il est configuré à on, <productname>PostgreSQL</productname>
       renverra une erreur mais continuera à s'exécuter pour que l'opération de
       synchronisation sur disque soit tentée de nouveau au prochain checkpoint.
       Il faut le configurer à on après avoir investigué sur le traitement
       par le système d'exploitation des données en cache dans le cas d'un
       échec de synchronisation.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

  </sect1>

  <sect1 id="runtime-config-preset">
   <title>Options préconfigurées</title>

   <para>
    Les <quote>paramètres</quote> qui suivent sont en lecture seule. Ils sont
    déterminés à la compilation ou à l'installation de
    <productname>PostgreSQL</productname>. De ce fait, ils sont exclus du
    fichier <filename>postgresql.conf</filename> d'exemple. Ces
    paramètres décrivent différents aspects du comportement de
    <productname>PostgreSQL</productname> qui peuvent s'avérer
    intéressants pour certaines applications, en
    particulier pour les interfaces d'administration.
   </para>

   <variablelist>

    <varlistentry id="guc-block-size" xreflabel="block_size">
     <term><varname>block_size</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>block_size</varname></primary>
      </indexterm>
      <para>
       Informe sur la taille d'un bloc disque. Celle-ci est déterminée par la valeur
       de <literal>BLCKSZ</literal> à la construction du serveur. La valeur par
       défaut est de 8192&nbsp;octets. La signification de diverses variables
       de configuration (<xref linkend="guc-shared-buffers"/>, par
       exemple) est influencée par <varname>block_size</varname>. Voir la
       <xref linkend="runtime-config-resource"/> pour plus d'informations.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-data-checksums" xreflabel="data_checksums">
     <term><varname>data_checksums</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>data_checksums</varname></primary>
      </indexterm>
      <para>
       Informe sur l'activation des sommes de contrôle sur cette instance.
       Voir <xref linkend="app-initdb-data-checksums"/> pour plus d'informations.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-data-directory-mode" xreflabel="data_directory_mode">
     <term><varname>data_directory_mode</varname> (<type>integer</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>data_directory_mode</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Sur les systèmes Unix, ce paramètre rapporte les droits sur
       le répertoire des données défini par <xref linkend="guc-data-directory"/>
       au démarrage. (Sur Microsoft Windows, ce paramètre sera toujours
       <literal>0700</literal>). Voir
       <xref linkend="app-initdb-allow-group-access"/> pour plus d'information.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
     <term><varname>debug_assertions</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>debug_assertions</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Indique si <productname>PostgreSQL</productname> a été
       compilé avec les assertions activées. C'est le cas si la
       macro <symbol>USER_ASSERT_CHECKING</symbol> est définie lorsque
       <productname>PostgreSQL</productname> est compilé (réalisé
       par exemple par l'option <option>--enable-cassert</option> de
       <command>configure</command>). Par défaut,
       <productname>PostgreSQL</productname> est compilé sans les
       assertions.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
     <term><varname>integer_datetimes</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>integer_datetimes</varname></primary>
      </indexterm>
      <para>
       Affiche si <productname>PostgreSQL</productname> a été compilé avec le
       support des date et heures en tant qu'entiers sur 64 bits.  Depuis
       <productname>PostgreSQL</productname> 10,
       la valeur est toujours à <literal>on</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
     <term><varname>lc_collate</varname> (<type>string</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_collate</varname></primary>
      </indexterm>
      <para>
       Affiche la locale utilisée pour le tri des données de type texte.
       Voir la <xref linkend="locale"/> pour plus d'informations. La valeur est
       déterminée lors de la création d'une base de données.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
     <term><varname>lc_ctype</varname> (<type>string</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>lc_ctype</varname></primary>
      </indexterm>
      <para>
       Affiche la locale qui détermine les classifications de caractères.
       Voir la <xref linkend="locale"/> pour plus d'informations. La valeur
       est déterminée lors de la création d'une base de données. Elle est
       habituellement identique à
       <varname>lc_collate</varname>. Elle peut, toutefois, pour des
       applications particulières, être configurée différemment.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
     <term><varname>max_function_args</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_function_args</varname></primary>
      </indexterm>
      <para>
       Affiche le nombre maximum d'arguments des fonctions. Ce nombre est
       déterminé par la valeur de <literal>FUNC_MAX_ARGS</literal> lors de la
       construction du serveur. La valeur par défaut est de 100 arguments.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
     <term><varname>max_identifier_length</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_identifier_length</varname></primary>
      </indexterm>
      <para>
       Affiche la longueur maximale d'un identifiant. Elle est déterminée à
       <literal>NAMEDATALEN</literal> - 1 lors de la construction du
       serveur. La valeur par défaut de <literal>NAMEDATALEN</literal> est 64&nbsp;;
       la valeur par défaut de <varname>max_identifier_length</varname>
       est, de ce fait, de 63 octets mais peut être moins de 63 caractères
       lorsque des encodages multi-octets sont utilisés.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
     <term><varname>max_index_keys</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>max_index_keys</varname></primary>
      </indexterm>
      <para>
       Affiche le nombre maximum de clés d'index. Ce nombre est déterminé
       par la valeur de <literal>INDEX_MAX_KEYS</literal> lors de la construction
       du serveur. La valeur par défaut est de 32 clés.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-segment-size" xreflabel="segment_size">
     <term><varname>segment_size</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>segment_size</varname></primary>
      </indexterm>
      <para>
       Indique la taille des segments de journaux de transactions. La valeur par
       défaut est 16 Mo. Voir <xref linkend="wal-configuration"/> pour plus
       d'informations.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
     <term><varname>server_encoding</varname> (<type>string</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>server_encoding</varname></primary>
      </indexterm>
      <indexterm><primary>jeu de caractères</primary></indexterm>
      <indexterm><primary>encodage</primary></indexterm>
      <para>
       Affiche l'encodage de la base de données (jeu de caractères).
       Celui-ci est déterminé lors de la création de la base de données.
       Les clients ne sont généralement concernés que par la valeur
       de <xref linkend="guc-client-encoding"/>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-server-version" xreflabel="server_version">
     <term><varname>server_version</varname> (<type>string</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>server_version</varname></primary>
      </indexterm>
      <para>
       Affiche le numéro de version du serveur. Celui-ci est déterminé par la
       valeur de <literal>PG_VERSION</literal> lors de la construction du serveur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
     <term><varname>server_version_num</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>server_version_num</varname></primary>
      </indexterm>
      <para>
       Affiche le numéro de version du serveur sous la forme d'un entier.
       Celui-ci est déterminé par la valeur de
       <literal>PG_VERSION_NUM</literal> lors de la construction du serveur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-ssl-library" xreflabel="ssl_library">
     <term><varname>ssl_library</varname> (<type>string</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>ssl_library</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Rapporte le nom de la bibliothèque SSL qui a été utilisée pour
       construire ce serveur <productname>PostgreSQL</productname> (même si SSL
       n'est pas actuellement configuré ou utilisé sur cette instance), par
       exemple <literal>OpenSSL</literal> ou une chaîne vide si aucune.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-wal-block-size" xreflabel="wal_block_size">
     <term><varname>wal_block_size</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>wal_block_size</varname></primary>
      </indexterm>
      <para>
       Retourne la taille d'un bloc disque de WAL. C'est déterminé par la valeur
       <literal>XLOG_BLCKSZ</literal> à la compilation du serveur. La valeur
       par défaut est 8192 octets.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-wal-segment-size" xreflabel="wal_segment_size">
     <term><varname>wal_segment_size</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>wal_segment_size</varname></primary>
      </indexterm>
      <para>
       Retourne le nombre de blocs (pages) dans un fichier de segment WAL.
       La taille totale d'un fichier de segment WAL en octets est égale à
       <varname>wal_segment_size</varname> multiplié par
       <varname>wal_block_size</varname>&nbsp;; Par défaut, c'est 16&nbsp;Mo.
       Voir <xref linkend="wal-configuration"/> pour plus d'informations.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </sect1>

  <sect1 id="runtime-config-custom">
   <title>Options personnalisées</title>

   <para>
    Cette fonctionnalité a été conçue pour permettre l'ajout de paramètres
    habituellement inconnus de <productname>PostgreSQL</productname>
    par des modules complémentaires (comme les langages procéduraux).
    Cela permet de configurer ces extensions de façon standard.
   </para>

   <para>
    Les options personnalisées ont des noms en deux parties&nbsp;: un nom
    d'extension, suivi d'un point, suivi du nom du paramètre, tout comme les
    noms qualifiés en SQL. Voici un exemple&nbsp;:
    <literal>plpgsql.variable_conflict</literal>.
   </para>

   <para>
    Comme les options personnalisées peuvent avoir besoin d'être configurées
    par des processus qui n'ont pas chargé le module d'extension associé,
    <productname>PostgreSQL</productname> acceptera une configuration pour
    tout paramètre ayant un nom en deux parties. Ces variables sont traitées
    comme des espaces réservés et n'ont pas de fonction tant que le module qui
    les définit n'est pas chargé. Quand un module d'extension est chargé, il
    ajoute ses définitions de variables, convertit les valeurs déjà initialisées
    suivant leur définition, et envoie des avertissements pour toute variable
    non reconnue dont le nom commence par son nom d'extension.
   </para>
  </sect1>

  <sect1 id="runtime-config-developer">
   <title>Options pour les développeurs</title>

   <para>
    Les paramètres qui suivent permettent de travailler sur les sources de
    <productname>PostgreSQL</productname> et, dans certains cas,
    fournissent une aide à la récupération de bases de données sévèrement
    endommagées. Il n'y a aucune raison de les utiliser en configuration de
    production. En tant que tel, ils sont exclus du fichier d'exemple de
    <filename>postgresql.conf</filename>. Un certain nombre d'entre eux
    requièrent des options de compilation spéciales pour fonctionner.
   </para>

   <variablelist>
    <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
     <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>allow_system_table_mods</varname></primary>
      </indexterm>
      <para>
       Permet les modifications de la structure de tables systèmes ainsi que
       certaines autres actions risquées sur les tables systèmes. Ceci n'est
       autrement pas autorisé, y compris pour les superutilisateurs. Une
       mauvaise utilisation de ce paramètre peut causer des pertes de données
       irrécupérables ou une corruption sérieuse du système de bases de
       données. Seuls les superutilisateurs peuvent modifier ce paramètre.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-backtrace-functions" xreflabel="backtrace_functions">
     <term><varname>backtrace_functions</varname> (<type>string</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>backtrace_functions</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Ce paramètre contient une liste de noms de fonctions C séparés par des
       virgules. Si une erreur est levée et que le nom d'une fonction C où une
       erreur survient correspond à une valeur de la liste, alors la pile
       d'appel est écrite dans les traces du serveur avec le message d'erreur.
       Ceci peut être utilisé pour déboguer des aires spécifiques du code
       source.
      </para>

      <para>
       Cette fonctionnalité n'est pas disponibles sur toutes les plateformes et
       la qualité des traces dépend des options de compilation.
      </para>

      <para>
       Ce paramètre peut seulement être configuré par les superutilisateurs.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
     <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>ignore_system_indexes</varname></primary>
      </indexterm>
      <para>
       Ignore les index système lors de la lecture des tables système (mais
       continue de les mettre à jour lors de modifications des tables).
       Cela s'avère utile lors de la récupération d'index système endommagés. Ce
       paramètre ne peut pas être modifié après le démarrage de la session.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
     <term><varname>post_auth_delay</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>post_auth_delay</varname></primary>
      </indexterm>
      <para>
       Durée d'attente, après l'étape d'authentification, lorsqu'un nouveau
       processus serveur est lancé. Ceci a pour but de donner l'opportunité aux
       développeurs d'attacher un débogueur au processus serveur. Si cette
       valeur est indiquée sans unité, elle est comprise pour un nombre de
       secondes. La valeur par défaut, 0, désactive ce délai. Ce paramètre ne
       peut pas être modifié après le démarrage de la session.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
     <term><varname>pre_auth_delay</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>pre_auth_delay</varname></primary>
      </indexterm>
      <para>
       Durée d'attente, juste après la création d'un nouveau processus, avant
       le processus d'authentification. Ceci a pour but de donner une
       opportunité aux développeurs d'attacher un débogueur au processus
       serveur pour tracer les mauvais comportements pendant
       l'authentification. Si cette valeur est indiquée sans unité, elle est
       comprise pour un nombre de secondes. La valeur par défaut, 0, désactive
       ce délai. Ce paramètre ne peut être configuré que dans le fichier
       <filename>postgresql.conf</filename> ou indiqué sur la ligne de
       commande.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
     <term><varname>trace_notify</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_notify</varname></primary>
      </indexterm>
      <para>
       Produit un grand nombre de sorties de débogage pour les commandes
       <command>LISTEN</command> et <command>NOTIFY</command>.
       <xref linkend="guc-client-min-messages"/> ou
       <xref linkend="guc-log-min-messages"/> doivent être positionnées à
       <literal>DEBUG1</literal> ou plus bas pour envoyer cette sortie sur les
       traces client ou serveur, respectivement.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-trace-recovery-messages" xreflabel="trace_recovery_messages">
     <term><varname>trace_recovery_messages</varname> (<type>enum</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_recovery_messages</varname></primary>
      </indexterm>
      <para>
       Contrôle les niveaux des traces écrites dans le journal applicatif
       pour les modules nécessaires lors du traitement de la restauration.
       Cela permet à l'utilisateur de surcharger la configuration normale
       de <xref linkend="guc-log-min-messages"/>, mais seulement pour des
       messages spécifiques. Ça a été ajouté principalement pour débugger Hot
       Standby. Les valeurs valides sont <literal>DEBUG5</literal>,
       <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
       <literal>DEBUG2</literal>, <literal>DEBUG1</literal> et
       <literal>LOG</literal>. La valeur par défaut, <literal>LOG</literal>,
       n'affecte pas les décisions de trace. Les autres valeurs causent
       l'apparition de messages de débogage relatifs à la restauration pour
       tous les messages de ce niveau et des niveaux supérieurs. Elles utilisent
       malgré tout le niveau <literal>LOG</literal>&nbsp;; pour les
       configurations habituelles de <varname>log_min_messages</varname>, cela
       résulte en un envoi sans condition dans les traces du serveur.
       Ce paramètre ne peut être configuré que dans le fichier
       <filename>postgresql.conf</filename> ou indiqué sur la ligne de commande.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
     <term><varname>trace_sort</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_sort</varname></primary>
      </indexterm>
      <para>
       Si ce paramètre est actif, des informations concernant l'utilisation
       des ressources lors des opérations de tri sont émises. Ce paramètre
       n'est disponible que si la
       macro <symbol>TRACE_SORT</symbol> a été définie lors de la
       compilation de <productname>PostgreSQL</productname> (néanmoins,
       <symbol>TRACE_SORT</symbol> est actuellement définie par défaut).
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>trace_locks</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_locks</varname></primary>
      </indexterm>
      <para>
       Si activé, émet des informations à propos de l'utilisation des verrous.
       L'information fournie inclut le type d'opération de verrouillage,
       le type de verrou et l'identifiant unique de l'objet verrouillé ou
       déverrouillé. Sont aussi inclus les masques de bits pour les types de
       verrous déjà accordés pour cet objet, ainsi que pour les types de verrous
       attendus sur cet objet. Pour chaque type de verrou un décompte du nombre
       de verrous accordés et en attente est aussi retourné, ainsi que les totaux.
       Un exemple de sortie dans le journal applicatif est montré ici&nbsp;:
      </para>
      <screen>
LOG:  LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
      wait(0) type(AccessShareLock)
LOG:  UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(INVALID)
      </screen>
      <para>
       Les détails de la structure retournée peuvent être trouvés dans
       <filename>src/include/storage/lock.h</filename>.
      </para>
      <para>
       Ce paramètre n'est disponible que si la macro <symbol>LOCK_DEBUG</symbol>
       a été définie quand <productname>PostgreSQL</productname> a été
       compilé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>trace_lwlocks</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_lwlocks</varname></primary>
      </indexterm>
      <para>
       Si à on, génère des informations à propos de l'utilisation de verrous
       légers (lightweight lock). Les verrous légers servent principalement
       à fournir une exclusion mutuelle d'accès aux structures de données en
       mémoire partagée.
      </para>
      <para>
       Ce paramètre n'est disponible que si la macro <symbol>LOCK_DEBUG</symbol>
       a été définie quand <productname>PostgreSQL</productname> a été
       compilé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>trace_userlocks</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_userlocks</varname></primary>
      </indexterm>
      <para>
       Si activé, génère des informations à propos de l'utilisation de verrous
       utilisateurs. La sortie est la même que pour <symbol>trace_locks</symbol>,
       mais restreinte aux verrous informatifs.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>trace_lock_oidmin</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_lock_oidmin</varname></primary>
      </indexterm>
      <para>
       Si positionné, ne trace pas les verrouillages pour des tables en dessous
       de cet OID. (à utiliser pour ne pas avoir de sortie pour les tables
       systèmes)
      </para>
      <para>
       Ce paramètre n'est disponible que si la macro <symbol>LOCK_DEBUG</symbol>
       a été définie quand <productname>PostgreSQL</productname> a été
       compilé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>trace_lock_table</varname> (<type>integer</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>trace_lock_table</varname></primary>
      </indexterm>
      <para>
       Tracer les verrouillages sur cette table de façon inconditionnelle.
      </para>
      <para>
       Ce paramètre n'est disponible que si la macro <symbol>LOCK_DEBUG</symbol>
       a été définie quand <productname>PostgreSQL</productname> a été
       compilé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>debug_deadlocks</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>debug_deadlocks</varname></primary>
      </indexterm>
      <para>
       Si positionné, génère des informations à propos de tous les verrous en cours
       quand l'expiration de temps d'attente d'un verrou mortel se produit.
      </para>
      <para>
       Ce paramètre n'est disponible que si la macro <symbol>LOCK_DEBUG</symbol>
       a été définie quand <productname>PostgreSQL</productname> a été
       compilé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>log_btree_build_stats</varname></primary>
      </indexterm>
      <para>
       Si positionné, trace des statistiques d'utilisation de ressource système
       (mémoire et processeur) sur différentes opérations B-tree.
      </para>
      <para>
       Ce paramètre n'est disponible que si la macro <symbol>BTREE_BUILD_STATS</symbol>
       a été définie quand <productname>PostgreSQL</productname> a été
       compilé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-wal-consistency-checking" xreflabel="wal_consistency_checking">
     <term><varname>wal_consistency_checking</varname> (<type>string</type>)
      <indexterm>
       <primary>Paramètre de configuration <varname>wal_consistency_checking</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Ce paramètre est destiné à être utiliser pour vérifier la présence de
       bugs dans les routines d'application de WAL.  Une fois activé, des images
       de l'intégralité des pages sont ajoutés aux enregistrements.  Si
       l'enregistrement est ensuite rejoué, le système appliquera d'abord chaque
       enregistrement et testera ensuite si les tampons modifiés par
       l'enregistrement correspond aux images stockées.  Dans certains cas
       (comme les hint bits), des variations mineures sont acceptables, et
       seront ignorées.  Toute différence inattendue provoquera une erreur
       fatale, ce qui arrêtera la restauration.
      </para>

      <para>
       La valeur par défaut pour ce paramètre est une chaîne cide, ce qui désactive la fonctionnalité.
       Le paramètre peut être positionné à <literal>all</literal> pour vérifier tous les enregistrements,
       ou une liste séparée par des virgules de gestionnaires de sources afin de
       vérifier uniquement les enregistrements en fonction de ces gestionnaires
       de ressource.  Actuellement, les gestionnaires de ressource supportés
       sont <literal>heap</literal>, <literal>heap2</literal>,
       <literal>btree</literal>, <literal>hash</literal>,
       <literal>gin</literal>, <literal>gist</literal>,
       <literal>sequence</literal>, <literal>spgist</literal>,
       <literal>brin</literal>, et <literal>generic</literal>. Seuls les
       superutilisateurs peuvent modifier ce paramètre.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
     <term><varname>wal_debug</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>wal_debug</varname></primary>
      </indexterm>
      <para>
       Si ce paramètre est positionné à <literal>on</literal>, une sortie
       de débogage relative aux WAL est émise.
       Ce paramètre n'est disponible que si la macro <symbol>WAL_DEBUG</symbol>
       a été définie au moment de la compilation de <productname>PostgreSQL</productname>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-ignore-checksum-failure" xreflabel="ignore_checksum_failure">
     <term><varname>ignore_checksum_failure</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>ignore_checksum_failure</varname></primary>
      </indexterm>
      <para>
       Ne fonctionne que si <xref linkend="app-initdb-data-checksums"/> est activé.
      </para>
      <para>
       La détection d'un échec des sommes de vérification lors d'une lecture
       cause habituellement la levée d'une erreur par
       <productname>PostgreSQL</productname>, ce qui annule la transaction en
       cours. Activer <varname>ignore_checksum_failure</varname> fait que le
       système ignore l'échec (mais rapporte toujours un message d'avertissement)
       et continue le traitement. Ce comportement pourrait être la
       <emphasis>cause d'arrêts brutaux, de propagation ou de dissimulation de
        corruption, ou d'autres problème sérieux</emphasis>. Néanmoins, il peut
       vous permettre de dépasser l'erreur et de récupérer les lignes endommagées
       qui pourraient toujours être présentes dans la table si l'en-tête du bloc
       est sain. Si l'en-tête est corrompu, une erreur sera rapportée même si cette
       option est activée. La configuration par défaut est <literal>off</literal>,
       et elle ne peut être modifiée que par un superutilisateur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
     <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)</term>
     <listitem>
      <indexterm>
       <primary>paramètre de configuration <varname>zero_damaged_pages</varname></primary>
      </indexterm>
      <para>
       La détection d'un en_tête de page endommagé cause normalement le
       renvoi d'une erreur par <productname>PostgreSQL</productname>,
       annulant du même coup la transaction en cours. Activer
       <varname>zero_damaged_pages</varname> fait que le système
       renvoie un message d'avertissement, efface la page endommagée en
       mémoire et continue son traitement. Ce comportement
       <emphasis>détruit des données</emphasis>, très exactement toutes
       les lignes comprises dans la page endommagée. Néanmoins, il vous
       permet de passer l'erreur et de récupérer les lignes des pages
       non endommagées qui pourraient être présentes dans la table.
       C'est intéressant pour récupérer des données si une corruption
       est survenue à cause d'une erreur logicielle ou matérielle. Vous
       ne devriez pas activer cette option sauf si vous avez perdu tout
       espoir de récupérer les données des pages endommagées d'une table.
       L'effacement des pages n'est pas vidée sur disque donc il est
       recommandé de recréer la table ou l'index avant de désactiver
       de nouveau ce paramètre. La configuration par défaut est
       <literal>off</literal>, et peut seulement être modifiée par un
       superutilisateur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-ignore-invalid-pages" xreflabel="ignore_invalid_pages">
     <term><varname>ignore_invalid_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>ignore_invalid_pages</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Si configuré à <literal>off</literal> (la valeur par défaut), la
       détection d'enregistrements de journaux de transactions ayant des
       références à des pages invalides lors de la restauration fait que
       <productname>PostgreSQL</productname> lève une erreur de niveau PANIC,
       annulant la restauration. Configurer
       <varname>ignore_invalid_pages</varname> à <literal>on</literal> fait que
       le système ignore les références invalides de page dans les
       enregistrements des journaux de transactions (tout en renvoyant malgré
       tout un message d'avertissement) et continue la restauration. Ce
       comportement peut <emphasis>causer des crashs, des pertes de données,
        propager ou cacher la corruption, ainsi que différents autres problèmes
        sérieux</emphasis>. Néanmoins, il peut vous permettre de passer l'erreur
       de niveau PANIC pour finir la restauration, et permettre ainsi au
       serveur de démarrer. Ce paramètre peut seulement être configuré au
       démarrage du serveur. Il a seulement un effet lors de la restauration et
       dans le mode standby.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-jit-debugging-support" xreflabel="jit_debugging_support">
     <term><varname>jit_debugging_support</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>jit_debugging_support</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Si LLVM en est capable, enregistre les fonctions générées auprès de
       <productname>GDB</productname>. Cela facilite le débogage.
       Le paramètrage par défaut est <literal>off</literal>.
       Ce paramètre peut seulement être configuré au démarrage du serveur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-jit-dump-bitcode" xreflabel="jit_dump_bitcode">
     <term><varname>jit_dump_bitcode</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>jit_dump_bitcode</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Écrit l'IR (<foreignphrase>intermediate representation</foreignphrase>)
       de <productname>LLVM</productname> dans le système de fichiers, dans
       <xref linkend="guc-data-directory"/>. Ce n'est utile que pour travailler
       sur le fonctionnement interne de l'implémentation JIT.
       Le défaut est <literal>off</literal>.
       Ce paramètre peut seulement être configuré au démarrage du serveur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-jit-expressions" xreflabel="jit_expressions">
     <term><varname>jit_expressions</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>jit_expressions</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Détermine si les expressions sont compilées par JIT quand la
       compilation JIT est activée (voir <xref linkend="jit-decision"/>). La
       valeur par défaut est <literal>on</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-jit-profiling-support" xreflabel="jit_profiling_support">
     <term><varname>jit_profiling_support</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>jit_profiling_support</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Si LLVM le peut, pour que <productname>perf</productname> puisse
       profiler les fonctions générées par le JIT, écrit les données
       nécessaires dans des fichiers dans <filename>$HOME/.debug/jit/
       </filename>&nbsp;; l'utilisateur est responsable du nettoyage en temps
       voulu.
       Le paramétrage par défaut est <literal>off</literal>,.
       Il ne peut être mis en place qu'au démarrage du serveur.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="guc-jit-tuple-deforming" xreflabel="jit_tuple_deforming">
     <term><varname>jit_tuple_deforming</varname> (<type>boolean</type>)
      <indexterm>
       <primary>paramètre de configuration <varname>jit_tuple_deforming</varname></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Détermine si le décodage d'enregistrement est compilé par le JIT,
       quand la compilation JIT est activée (voir <xref
       linkend="jit-decision"/>). Le défaut est <literal>on</literal>.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </sect1>

  <sect1 id="runtime-config-short">
   <title>Options courtes</title>

   <para>
    Pour des raisons pratiques, il existe également des commutateurs en
    ligne de commandes sur une seule lettre pour certains paramètres.
    Ceux-ci sont décrits dans
    le <xref linkend="runtime-config-short-table"/>. Certaines des options existent
    pour des raisons historiques et leur présence en tant qu'option courte
    ne doit pas être vue comme une incitation à son utilisation massive.
   </para>

   <table id="runtime-config-short-table">
    <title>Clé d'option courte</title>
    <tgroup cols="2">
     <colspec colname="col1" colwidth="1*"/>
     <colspec colname="col2" colwidth="2*"/>
     <thead>
      <row>
       <entry>Option courte</entry>
       <entry>Équivalent</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry><option>-B <replaceable>x</replaceable></option></entry>
       <entry><literal>shared_buffers = <replaceable>x</replaceable></literal></entry>
      </row>
      <row>
       <entry><option>-d <replaceable>x</replaceable></option></entry>
       <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></literal></entry>
      </row>
      <row>
       <entry><option>-e</option></entry>
       <entry><literal>datestyle = euro</literal></entry>
      </row>
      <row>
       <entry>
        <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
        <option>-fm</option>, <option>-fn</option>, <option>-fo</option>,
        <option>-fs</option>, <option>-ft</option>
       </entry>
       <entry>
        <literal>enable_bitmapscan = off</literal>,
        <literal>enable_hashjoin = off</literal>,
        <literal>enable_indexscan = off</literal>,
        <literal>enable_mergejoin = off</literal>,
        <literal>enable_nestloop = off</literal>,
        <literal>enable_indexonlyscan = off</literal>,
        <literal>enable_seqscan = off</literal>,
        <literal>enable_tidscan = off</literal>
       </entry>
      </row>
      <row>
       <entry><option>-F</option></entry>
       <entry><literal>fsync = off</literal></entry>
      </row>
      <row>
       <entry><option>-h <replaceable>x</replaceable></option></entry>
       <entry><literal>listen_addresses = <replaceable>x</replaceable></literal></entry>
      </row>
      <row>
       <entry><option>-i</option></entry>
       <entry><literal>listen_addresses = '*'</literal></entry>
      </row>
      <row>
       <entry><option>-k <replaceable>x</replaceable></option></entry>
       <entry><literal>unix_socket_directories = <replaceable>x</replaceable></literal></entry>
      </row>
      <row>
       <entry><option>-l</option></entry>
       <entry><literal>ssl = on</literal></entry>
      </row>
      <row>
       <entry><option>-N <replaceable>x</replaceable></option></entry>
       <entry><literal>max_connections = <replaceable>x</replaceable></literal></entry>
      </row>
      <row>
       <entry><option>-O</option></entry>
       <entry><literal>allow_system_table_mods = on</literal></entry>
      </row>
      <row>
       <entry><option>-p <replaceable>x</replaceable></option></entry>
       <entry><literal>port = <replaceable>x</replaceable></literal></entry>
      </row>
      <row>
       <entry><option>-P</option></entry>
       <entry><literal>ignore_system_indexes = on</literal></entry>
      </row>
      <row>
       <entry><option>-s</option></entry>
       <entry><literal>log_statement_stats = on</literal></entry>
      </row>
      <row>
       <entry><option>-S <replaceable>x</replaceable></option></entry>
       <entry><literal>work_mem = <replaceable>x</replaceable></literal></entry>
      </row>
      <row>
       <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
       <entry><literal>log_parser_stats = on</literal>,
        <literal>log_planner_stats = on</literal>,
        <literal>log_executor_stats = on</literal></entry>
      </row>
      <row>
       <entry><option>-W <replaceable>x</replaceable></option></entry>
       <entry><literal>post_auth_delay = <replaceable>x</replaceable></literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect1>
 </chapter>
