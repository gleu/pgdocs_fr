<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="rangetypes">
 <title>Types intervalle de valeurs</title>

 <indexterm>
  <primary>type range</primary>
 </indexterm>
 <indexterm>
  <primary>type intervalle de valeurs</primary>
 </indexterm>

 <para>
  Les types intervalle de valeurs sont des types de données représentant un
  intervalle de valeurs d'un certain type d'élément (appelé
  <firstterm>sous-type</firstterm> de l'intervalle). Par exemple, des
  intervalles de <type>timestamp</type> pourraient être utilisés pour
  représenter les intervalles de temps durant lesquels une salle de réunion
  est réservée. Dans ce cas, le type de données est <type>tsrange</type>
  (la version abrégée de <quote>timestamp range</quote>), et
  <type>timestamp</type> est le sous-type. Le sous-type doit avoir un tri
  complet pour que les valeurs d'élément incluses soient bien définies, avant
  ou après l'intervalle de valeurs.
 </para>

 <para>
  Les types intervalle de valeurs sont utiles parce qu'ils représentent de nombreuses
  valeurs d'élément en une seule valeur d'intervalle, et que des concepts
  comme le chevauchement d'intervalles peuvent être exprimés clairement.
  L'utilisation d'intervalle de temps et de date pour des besoins de
  planification est l'exemple le plus parlant&nbsp;; mais les intervalles de
  prix, intervalles de mesure pour un instrument et ainsi de suite
  peuvent également être utiles.
 </para>

 <sect2 id="rangetypes-builtin">
  <title>Types internes d'intervalle de valeurs</title>

  <para>
   PostgreSQL fournit nativement les types intervalle de valeurs suivants&nbsp;:
   <itemizedlist>
    <listitem>
     <para>
      <type>INT4RANGE</type> &mdash; Intervalle d'<type>integer</type>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>INT8RANGE</type> &mdash; Intervalle de <type>bigint</type>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>NUMRANGE</type> &mdash; Intervalle de <type>numeric</type>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>TSRANGE</type> &mdash; Intervalle de <type>timestamp without time zone</type>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>TSTZRANGE</type> &mdash; Intervalle de <type>timestamp with time zone</type>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>DATERANGE</type> &mdash; Intervalle de <type>date</type>
     </para>
    </listitem>
   </itemizedlist>
   Vous pouvez en plus définir vos propres types intervalle de valeurs&nbsp;;
   voir <xref linkend="sql-createtype"/> pour plus d'informations.
  </para>
 </sect2>

 <sect2 id="rangetypes-examples">
  <title>Exemples</title>

  <para>
   <programlisting>
CREATE TABLE reservation (room int, during tsrange);
INSERT INTO reservation VALUES
  ( 1108, '[2010-01-01 14:30, 2010-01-01 15:30)' );

-- Inclusion
SELECT int4range(10, 20) @&gt; 3;

-- Chevauchement
SELECT numrange(11.1, 22.2) &amp;&amp; numrange(20.0, 30.0);

-- Extraire la borne inférieure
SELECT upper(int8range(15, 25));

-- Calculer l'intersection
SELECT int4range(10, 20) * int4range(15, 25);

-- Est-ce que l'intervalle est vide ?
SELECT isempty(numrange(1, 5));
   </programlisting>

   Voir <xref linkend="range-operators-table"/>
   et <xref linkend="range-functions-table"/> pour la liste complète des
   opérateurs et fonctions sur les types intervalle de valeurs.
  </para>
 </sect2>

 <sect2 id="rangetypes-inclusivity">
  <title>Bornes inclusives et exclusives</title>

  <para>
   Chaque intervalle de valeurs non vide a deux bornes, la borne inférieure et
   la borne supérieure. Tous les points entre ces valeurs sont inclus dans
   l'intervalle.
   Une borne inclusive signifie que le point limite lui-même est également
   inclus dans l'intervalle, alors qu'une borne exclusive signifie que ce point
   limite n'est pas inclus dans l'intervalle.
  </para>

  <para>
   Dans un intervalle affiché sous la forme de texte, une borne inclusive
   inférieure est représentée par <quote><literal>[</literal></quote> tandis
   qu'une borne exclusive inférieure est représentée par
   <quote><literal>(</literal></quote>. De la même façon, une borne inclusive
   supérieure est représentée par <quote><literal>]</literal></quote> tandis
   qu'une borne exclusive supérieure est représentée par
   <quote><literal>)</literal></quote>.
   (Voir <xref linkend="rangetypes-io"/> pour plus de détails.)
  </para>

  <para>
   Les fonctions <literal>lower_inc</literal> et
   <literal>upper_inc</literal> testent respectivement si les bornes
   inférieures et supérieures d'une valeur d'intervalle sont inclusives.
  </para>
 </sect2>

 <sect2 id="rangetypes-infinite">
  <title>Intervalles de valeurs infinis (sans borne)</title>

  <para>
   La borne inférieure d'un intervalle de valeurs peut être omise, signifiant
   que tous les points valant moins que la borne supérieure sont inclus dans
   l'intervalle.
   De la même façon, si la borne supérieure est omise, alors tous les points
   valant plus que la borne inférieure sont inclus dans l'intervalle. Si à
   la fois les bornes inférieures et supérieures sont omises, toutes les
   valeurs du type d'élément sont considérées comme étant dans l'intervalle.
  </para>

  <para>
   Cela équivaut à considérer respectivement que la borne inférieure vaut
   <quote>moins l'infini</quote>, ou que la borne supérieure vaut
   <quote>plus l'infini</quote>. Mais notez que ces valeurs infinies ne
   sont jamais des valeurs du type d'élément de l'intervalle, et ne peuvent
   jamais faire partie de l'intervalle (il n'y a donc pas de borne infinie
   inclusive &mdash; si vous essayez d'en écrire une, elle sera automatiquement
   convertie en une borne exclusive).
  </para>

  <para>
   Par ailleurs, des types d'éléments ont une notion d'<quote>infini</quote>,
   mais ce n'est qu'une valeur comme une autre, telle qu'elle est
   représentée dans le mécanisme de type intervalle de valeurs. Par exemple,
   dans des intervalles de timestamp, <literal>[today,]</literal> a la même
   signification que <literal>[today,)</literal>. Mais
   <literal>[today,infinity]</literal> a une signification différente de
   <literal>[today,infinity)</literal> &mdash;
   le second exclut la valeur spéciale de <type>timestamp</type>&nbsp;
   <literal>infinity</literal>.
  </para>

  <para>
   Les fonctions <literal>lower_inf</literal>
   et <literal>upper_inf</literal> testent respectivement si
   les bornes inférieure et supérieure sont infinies.
  </para>
 </sect2>

 <sect2 id="rangetypes-io">
  <title>Saisie/affichage d'intervalle de valeurs</title>

  <para>
   La saisie d'un intervalle de valeurs doit suivre un des modèles suivants:
   <synopsis>
(<replaceable>borne-inférieure</replaceable>,<replaceable>borne-supérieure</replaceable>)
(<replaceable>borne-inférieure</replaceable>,<replaceable>borne-supérieure</replaceable>]
[<replaceable>borne-inférieure</replaceable>,<replaceable>borne-supérieure</replaceable>)
[<replaceable>borne-inférieure</replaceable>,<replaceable>borne-supérieure</replaceable>]
vide
   </synopsis>
   Les parenthèses ou crochets indiquent si les bornes inférieure et supérieure
   sont exclusives ou inclusives, comme décrit précédemment.
   Notez que le modèle final est <literal>vide</literal>, ce qui représente un
   intervalle de valeurs vide (un intervalle qui ne contient aucun point).
  </para>

  <para>
   La <replaceable>borne-inférieure</replaceable> peut être une chaîne
   de caractères valide pour la saisie du sous-type, ou vide pour indiquer
   qu'il n'y a pas de borne inférieure. De la même façon, la
   <replaceable>borne-supérieure</replaceable> peut être une chaîne de caractères
   valide pour la saisie du sous-type, ou vide pour indiquer qu'il n'y a pas de
   borne supérieure.
  </para>

  <para>
   Chaque borne peut être protégée en entourant la valeur de guillemet double
   (<literal>"</literal>). C'est nécessaire si la valeur de borne contient des
   parenthèses, crochets, virgules, guillemets doubles, antislash, puisque, sans
   cela, ces caractères seraient considérés comme faisant partie de la
   syntaxe de l'intervalle de valeurs. Pour mettre un guillemet double ou un antislash
   dans une valeur de borne protégée, faites-le précéder d'un antislash.
   (Une paire de guillemets doubles dans une borne protégée est également
   valable pour représenter un caractère guillemet double, de la même manière
   que la règle pour les guillemets simples dans les chaînes SQL littérales.)
   Vous pouvez éviter l'emploi des guillemets doubles en échappant avec un
   antislash tous les caractères qui, sans cela, seraient pris comme une syntaxe
   d'intervalle de valeurs. De plus, pour écrire une valeur de borne qui est une chaîne
   vide, écrivez <literal>""</literal>, puisque ne rien écrire signifie
   une borne infinie.
  </para>

  <para>
   Des espaces sont autorisés avant et après la valeur de borne, mais
   chaque espace entre les parenthèses ou les crochets fera partie de la
   valeur de limite inférieure ou supérieure. (Selon le type d'élément, cela
   peut être ou ne pas être significatif.)
  </para>

  <note>
   <para>
    Ces règles sont très proches de celles de l'écriture de valeurs de
    champs pour les types composites. Voir <xref linkend="rowtypes-io-syntax"/>
    pour des commentaires supplémentaires.
   </para>
  </note>

  <para>
   Exemples&nbsp;:
   <programlisting>
-- inclut 3, n'inclut pas 7, et inclut tous les points entre
SELECT '[3,7)'::int4range;

-- n'inclut ni 3 ni 7, mais inclut tous les points entre
SELECT '(3,7)'::int4range;

-- n'inclut que l'unique point 4
SELECT '[4,4]'::int4range;

-- n'inclut aucun point (et sera normalisé à 'vide')
SELECT '[4,4)'::int4range;
   </programlisting>
  </para>
 </sect2>

 <sect2 id="rangetypes-construct">
  <title>Construire des intervalles de valeurs</title>

  <para>
   Chaque type intervalle de valeurs a une fonction constructeur du même nom que
   le type intervalle. Utiliser le constructeur est souvent plus pratique
   que d'écrire une constante d'intervalle littérale puisque cela évite
   d'avoir à ajouter des guillemets doubles sur les valeurs de borne. Le
   constructeur accepte deux ou trois arguments. La forme à deux arguments
   construit un intervalle dans sa forme standard (borne inférieure inclusive,
   borne supérieure exclusive), alors que la version à trois arguments construit
   un intervalle avec des bornes de la forme spécifiée par le troisième argument.
   Le troisième argument doit être la chaîne
   <quote><literal>()</literal></quote>,
   <quote><literal>(]</literal></quote>,
   <quote><literal>[)</literal></quote> ou
   <quote><literal>[]</literal></quote>.
   Par exemple&nbsp;:

   <programlisting>
-- La forme complète est : borne inférieure, borne supérieure et argument texte indiquant
-- inclusivité/exclusivité des bornes.
SELECT numrange(1.0, 14.0, '(]');

-- Si le troisième argument est omis, '[)' est supposé.
SELECT numrange(1.0, 14.0);

-- Bien que  '(]' soit ici spécifié, à l'affichage la valeur sera convertie en sa forme
-- canonique puisque int8range est un type intervalle discret (voir ci-dessous).
SELECT int8range(1, 14, '(]');

-- Utiliser NULL pour n'importe laquelle des bornes a pour effet de ne pas avoir de borne de ce côté.
SELECT numrange(NULL, 2.2);
   </programlisting>
  </para>
 </sect2>

 <sect2 id="rangetypes-discrete">
  <title>Types intervalle de valeurs discrètes</title>

  <para>
   Un type d'intervalle de valeurs discrètes est un intervalle dont le type
   d'élément a un <quote>pas</quote> bien défini, comme <type>integer</type> ou
   <type>date</type>. Pour ces types, deux éléments peuvent être dits
   comme étant adjacents, quand il n'y a pas de valeur valide entre eux.
   Cela contraste avec des intervalles continus, où il y a toujours (ou
   presque toujours) des valeurs d'autres éléments possibles à identifier
   entre deux valeurs données. Par exemple, un intervalle de type
   <type>numeric</type> est continu, comme l'est un intervalle de type
   <type>timestamp</type>. (Même si <type>timestamp</type> a une limite
   de précision, et pourrait théoriquement être traité comme discret, il
   est préférable de le considérer comme continu puisque la taille du pas
   n'a normalement pas d'intérêt.)
  </para>

  <para>
   Une autre façon d'imaginer un type d'intervalle de valeurs discrètes est qu'il
   est possible de déterminer clairement une valeur <quote>suivante</quote> ou
   <quote>précédente</quote> pour chaque valeur d'élément. En sachant cela,
   il est possible de convertir des représentations inclusives et exclusives
   d'une borne d'intervalle, en choisissant la valeur d'élément suivante
   ou précédente à la place de celle d'origine.
   Par exemple, dans un type d'intervalle entier, <literal>[4,8]</literal>
   et <literal>(3,9)</literal> représentent le même ensemble de valeurs,
   mais cela ne serait pas le cas pour un intervalle de numeric.
  </para>

  <para>
   Un type d'intervalle discret devrait avoir une fonction de
   <firstterm>mise en forme canonique</firstterm> consciente de la taille
   du pas désiré pour le type d'élément. La fonction de mise en forme canonique
   est chargée de convertir des valeurs équivalentes du type d'intervalle
   pour avoir des représentations identiques, surtout aux voisinages de bornes
   inclusives ou exclusives.
   Si une fonction de mise en forme canonique n'est pas spécifiée, alors les
   intervalles de notations différentes seront toujours traités comme étant
   différents, même s'ils peuvent en réalité représenter le même ensemble
   de valeurs.
  </para>

  <para>
   Les types d'intervalle prédéfinis <type>int4range</type>, <type>int8range</type>,
   et <type>daterange</type> utilisent tous une forme canonique qui inclut
   les bornes inférieures et exclut les bornes supérieures&nbsp;; c'est-à-dire
   <literal>[)</literal>. Les types intervalles définis par l'utilisateur
   peuvent cependant utiliser d'autres conventions.
  </para>
 </sect2>

 <sect2 id="rangetypes-defining">
  <title>Définir de nouveaux types intervalle de valeurs</title>

  <para>
   Les utilisateurs peuvent définir leurs propres types intervalle de valeurs.
   La raison la plus commune de le faire est d'utiliser des intervalles de
   sous-types non prédéfinis.
   Par exemple, pour définir un nouveau type d'intervalle de valeurs du
   sous-type <type>float8</type>&nbsp;:

   <programlisting>
CREATE TYPE floatrange AS RANGE (
  subtype = float8,
  subtype_diff = float8mi
);

SELECT '[1.234, 5.678]'::floatrange;
   </programlisting>

   Puisque <type>float8</type> n'a pas de <quote>pas</quote> significatif,
   nous ne définissons pas de fonction de mise en forme canonique dans
   cet exemple.
  </para>

  <para>
   Définir votre propre type intervalle vous permet aussi de spécifier une
   classe différente d'opérateur ou un collationnement différent, à utiliser,
   pour modifier l'ordre de tri qui détermine les valeurs tombant dans un
   intervalle donné.
  </para>

  <para>
   Si l'on considère que le sous-type est discret plutôt que continu, la
   commande <command>CREATE TYPE</command> devrait spécifier une fonction
   <literal>canonique</literal>.
   La fonction de mise en forme canonique prend une valeur d'intervalle en
   entrée, et doit retourner une valeur d'intervalle équivalente qui peut avoir
   des bornes et une représentation différente.
   Les sorties canoniques  de deux intervalles qui représentent le même ensemble
   de valeurs, par exemple les intervalles d'entier <literal>[1, 7]</literal>&nbsp;
   et <literal>[1,8)</literal> doivent être identiques.  La représentation choisie
   n'a pas d'importance, du moment que deux valeurs équivalentes avec des
   représentations différentes sont toujours liées à la même valeur avec la
   même représentation. En plus d'ajuster le format des bornes inclusives
   et exclusives, une fonction de mise en forme canonique peut arrondir une
   valeur de borne, dans le cas où la taille de pas désirée est plus grande
   que ce que le sous-type est capable de stocker. Par exemple, un intervalle
   de <type>timestamp</type> pourrait être défini pour avoir une taille de pas
   d'une heure, et dans ce cas la fonction de mise en forme canonique nécessiterait
   d'arrondir les bornes qui ne sont pas multiples d'une heure, ou peut-être
   déclencher une erreur à la place.
  </para>

  <para>
   De plus, tout type intervalle devant être utilisé avec des index GiST ou
   SP-GiST doit définir une différence de sous-type ou une fonction
   <literal>subtype_diff</literal>. (L'index fonctionnera toujours sans
   fonction <literal>subtype_diff</literal>, mais il y a de fortes chances
   qu'il soit considérablement moins efficace qu'avec une fonction de
   différence.) La fonction de différence du sous-type prend deux valeurs en
   entrée et renvoie leur différence (par exemple,
   <replaceable>X</replaceable> moins <replaceable>Y</replaceable>)
   représentée sous la forme d'une valeur de type <type>float8</type>. Dans
   notre exemple ci-dessus, la fonction <function>float8mi</function> qui
   soutient l'opérateur moins du type <type>float8</type> peut être
   utilisée&nbsp;; mais pour tout autre sous-type, une conversion de type
   serait nécessaire. Un peu de créativité peut se révéler nécessaire pour
   représenter la différence sous une forme numérique. Dans la mesure du
   possible, la fonction <literal>subtype_diff</literal> devrait être en
   accord avec l'ordre de tri impliqué par la classe d'opérateur et le
   collationnement sélectionnés&nbsp;; autrement dit, son résultat doit être
   positif quand le premier argument est supérieur au second d'après l'ordre
   de tri.
  </para>

  <para>
   Voici un exemple moins simplifié d'une fonction
   <literal>subtype_diff</literal>&nbsp;:
  </para>

<programlisting>
CREATE FUNCTION time_subtype_diff(x time, y time) RETURNS float8 AS
'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE;

CREATE TYPE timerange AS RANGE (
    subtype = time,
    subtype_diff = time_subtype_diff
);

SELECT '[11:10, 23:00]'::timerange;
</programlisting>

  <para>
   Voir <xref linkend="sql-createtype"/> pour plus d'informations sur la façon
   de créer des types intervalle de valeurs.
  </para>
 </sect2>

 <sect2 id="rangetypes-indexing">
  <title>Indexation</title>

  <indexterm>
   <primary>type intervalle de valeurs</primary>
   <secondary>index sur</secondary>
  </indexterm>

  <para>
   Des index GiST et SP-GiST peuvent être créés pour des colonnes de table de type
   intervalle de valeurs. Par exemple, pour créer un index GiST&nbsp;:
   <programlisting>
CREATE INDEX reservation_idx ON reservation USING GIST (during);
   </programlisting>
   Un index GiST ou SP-GiST peut accélérer les requêtes impliquant ces opérateurs
   d'intervalle de valeurs&nbsp;:
   <literal>=</literal>,
   <literal>&amp;&amp;</literal>,
   <literal>&lt;@</literal>,
   <literal>@&gt;</literal>,
   <literal>&lt;&lt;</literal>,
   <literal>&gt;&gt;</literal>,
   <literal>-|-</literal>,
   <literal>&amp;&lt;</literal> et
   <literal>&amp;&gt;</literal>
   (voir <xref linkend="range-operators-table"/> pour plus d'informations).
  </para>

  <para>
   De plus, les index B-tree et hash peuvent être créés pour des colonnes d'une table
   de type intervalle de  valeurs. Pour ces types d'index, la seule opération d'intervalle
   véritablement utile est l'égalité. Il y a un ordre de tri pour les index B-tree définis
   pour les valeurs d'intervalle, correspondant aux opérateurs <literal>&lt;</literal>
   et <literal>&gt;</literal>, mais le tri est plutôt arbitraire et généralement inutile
   dans la réalité. Le support de B-tree et hash pour les types intervalle de valeurs
   est à la base destiné à permettre le tri et le hachage de façon interne dans les
   requêtes, plutôt que pour la création d'un vrai index.
  </para>
 </sect2>

 <sect2 id="rangetypes-constraint">
  <title>Contraintes sur les intervalles de valeurs</title>

  <indexterm>
   <primary>type intervalle de valeur</primary>
   <secondary>exclusion</secondary>
  </indexterm>

  <para>
   Bien que <literal>UNIQUE</literal> soit une contrainte naturelle pour
   des valeurs scalaires, c'est en générale inutilisable pour des types
   intervalle de valeurs. À la place, une contrainte d'exclusion est
   souvent plus appropriée
   (voir <link linkend="sql-createtable-exclude">CREATE TABLE
    ... CONSTRAINT ... EXCLUDE</link>).  Les contraintes d'exclusion
   permettent la spécification de contraintes telles que le
   <quote>non chevauchement</quote> sur un type intervalle de valeurs.
   Par exemple&nbsp;:

   <programlisting>
CREATE TABLE reservation (
    during tsrange,
    EXCLUDE USING GIST (during WITH &amp;&amp;)
);
   </programlisting>

   Cette contrainte empêchera toute valeur chevauchant une autre présente
   dans la table à la même heure&nbsp;:

   <programlisting>
INSERT INTO reservation VALUES
   ('[2010-01-01 11:30, 2010-01-01 15:00)');
INSERT 0 1

INSERT INTO reservation VALUES
   ('[2010-01-01 14:45, 2010-01-01 15:45)');
ERROR:  conflicting key value violates exclusion constraint "reservation_during_excl"
DETAIL:  Key (during)=(["2010-01-01 14:45:00","2010-01-01 15:45:00")) conflicts
with existing key (during)=(["2010-01-01 11:30:00","2010-01-01 15:00:00")).
   </programlisting>
  </para>

  <para>
   Vous pouvez utiliser l'extension <link
   linkend="btree-gist"><literal>btree_gist</literal></link> pour définir une
   contrainte d'exclusion sur des types de données scalaires, qui peuvent alors
   être combinés avec des exclusions d'intervalle de valeurs pour un maximum de
   flexibilité. Par exemple, une fois que <literal>btree_gist</literal> est
   installé, la contrainte suivante ne rejettera les intervalles de valeurs se
   chevauchant que si le numéro de la salle de conférence est identique&nbsp;:

   <programlisting>
CREATE EXTENSION btree_gist;
CREATE TABLE room_reservation
(
  room TEXT,
  during TSRANGE,
  EXCLUDE USING GIST (room WITH =, during WITH &amp;&amp;)
);

INSERT INTO room_reservation VALUES
  ( '123A', '[2010-01-01 14:00, 2010-01-01 15:00)' );
INSERT 0 1

INSERT INTO room_reservation VALUES
  ( '123A', '[2010-01-01 14:30, 2010-01-01 15:30)' );
ERROR:  conflicting key value violates exclusion constraint "room_reservation_room_during_excl"
DETAIL:  Key (room, during)=(123A, ["2010-01-01 14:30:00","2010-01-01 15:30:00")) conflicts
with existing key (room, during)=(123A, ["2010-01-01 14:00:00","2010-01-01 15:00:00")).

INSERT INTO room_reservation VALUES
  ( '123B', '[2010-01-01 14:30, 2010-01-01 15:30)' );
INSERT 0 1
   </programlisting>
  </para>
 </sect2>
</sect1>
