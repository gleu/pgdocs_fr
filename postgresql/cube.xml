<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="cube" xreflabel="cube">
 <title>cube</title>

 <indexterm zone="cube">
  <primary>cube (extension)</primary>
 </indexterm>

 <para>
  Ce module code le type de données <type>cube</type> pour
  représenter des cubes à plusieurs dimensions.
 </para>

 <para>
  Ce module est considéré comme <quote>trusted</quote>, ce qui signifie qu'il
  peut être installé par des utilisateurs simples (sans attribut
  <literal>SUPERUSER</literal>) et qui ont l'attribut <literal>CREATE</literal>
  sur la base de données courante.
 </para>

 <sect2>
  <title>Syntaxe</title>

  <para>
   <xref linkend="cube-repr-table"/> affiche les représentations externes
   valides pour le type <type>cube</type>. <replaceable>x</replaceable>,
   <replaceable>y</replaceable>, etc. dénotent des nombres flottants.
  </para>

  <table id="cube-repr-table">
   <title>Représentations externes d'un cube</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Syntaxe externe</entry>
      <entry>Signification</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal><replaceable>x</replaceable></literal></entry>
      <entry>point uni-dimensionnel (ou interval unidimensionnel de longueur
       nulle)
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</replaceable>)</literal></entry>
      <entry>Identique à ci-dessus</entry>
     </row>
     <row>
      <entry><literal><replaceable>x1</replaceable>,<replaceable>x2</replaceable>,...,<replaceable>xn</replaceable></literal></entry>
      <entry>Un point dans un espace à n dimensions, représenté en interne
       comme un cube de volume nul
      </entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</replaceable>,<replaceable>x2</replaceable>,...,<replaceable>xn</replaceable>)</literal></entry>
      <entry>Identique à ci-dessus</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x</replaceable>),(<replaceable>y</replaceable>)</literal></entry>
      <entry>Interval uni-dimensionnel débutant à
       <replaceable>x</replaceable> et finissant à
       <replaceable>y</replaceable> ou vice-versa&nbsp;; l'ordre n'importe pas
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x</replaceable>),(<replaceable>y</replaceable>)]</literal></entry>
      <entry>Identique à ci-dessus</entry>
     </row>
     <row>
      <entry><literal>(<replaceable>x1</replaceable>,...,<replaceable>xn</replaceable>),(<replaceable>y1</replaceable>,...,<replaceable>yn</replaceable>)</literal></entry>
      <entry>Cube à n dimensions représenté par paires de coins diagonalement opposés
      </entry>
     </row>
     <row>
      <entry><literal>[(<replaceable>x1</replaceable>,...,<replaceable>xn</replaceable>),(<replaceable>y1</replaceable>,...,<replaceable>yn</replaceable>)]</literal></entry>
      <entry>Identique à ci-dessus</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   L'ordre de saisie des coins opposés d'un cube n'a aucune importance. Les
   fonctions <type>cube</type> s'occupent de la bascule nécessaire à
   l'obtention d'une représentation uniforme <quote>bas gauche, haut
    droit</quote>. Quand les coins coincident, le type <type>cube</type>
   enregistre un coin ainsi que le drapeau <quote>is point</quote> pour éviter
   de perdre de l'espace.
  </para>

  <para>
   Les espaces sont ignorées,
   <literal>[(<replaceable>x</replaceable>),(<replaceable>y</replaceable>)]</literal>
   est donc identique à
   <literal>[ ( <replaceable>x</replaceable> ), ( <replaceable>y</replaceable> ) ]</literal>.
  </para>
 </sect2>

 <sect2>
  <title>Précision</title>

  <para>
   Les valeurs sont enregistrées en interne sous la forme de nombres en
   virgule flottante. Cela signifie que les nombres avec plus de 16 chiffres
   significatifs sont tronqués.
  </para>
 </sect2>

 <sect2>
  <title>Utilisation</title>

  <para>
   <xref linkend="cube-operators-table"/> affiche les opérateurs spécialisés
   fournis par le type <type>cube</type>.
  </para>

  <table id="cube-operators-table">
   <title>Opérateurs pour cube</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        Opérateur
       </para>
       <para>
        Description
       </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>cube</type> <literal>&amp;&amp;</literal> <type>cube</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que les cubes se superposent&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>cube</type> <literal>@&gt;</literal> <type>cube</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le premier cube contient le second&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>cube</type> <literal>&lt;@</literal> <type>cube</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Est-ce que le premier cube est contenu dans le second&nbsp;?
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>cube</type> <literal>-&gt;</literal> <type>integer</type>
        <returnvalue>float8</returnvalue>
       </para>
       <para>
        Extrait les <parameter>n</parameter>-ième coordonnées du cube
        (à partir de 1)
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>cube</type> <literal>~&gt;</literal> <type>integer</type>
        <returnvalue>float8</returnvalue>
       </para>
       <para>
        Extrait les <parameter>n</parameter>-ième coordonnées du cube,
        en comptant ainsi&nbsp;:  <parameter>n</parameter> = 2
        * <parameter>k</parameter> - 1 indique la limite inférieure de la
        <parameter>k</parameter>-ième dimension, <parameter>n</parameter> = 2
        * <parameter>k</parameter> indique la limite supérieure de la
        <parameter>k</parameter>-ième dimension. Un paramètre négatif
        <parameter>n</parameter> désigne la valeur inverse de la coordonnée
        positive correspondante. Cette opérateur est conçu pour le support
        KNN-GiST.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>cube</type> <literal>&lt;-&gt;</literal> <type>cube</type>
        <returnvalue>float8</returnvalue>
       </para>
       <para>
        Calcule la distance Euclidienne entre deux cubes.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>cube</type> <literal>&lt;#&gt;</literal> <type>cube</type>
        <returnvalue>float8</returnvalue>
       </para>
       <para>
        Calcule la distance taxicab (métrique L-1) entre deux cubes.
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <type>cube</type> <literal>&lt;=&gt;</literal> <type>cube</type>
        <returnvalue>float8</returnvalue>
       </para>
       <para>
        Calcule la distance Chebyshev (métrique L-inf) entre deux cubes.
       </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   (Avant PostgreSQL 8.2, les opérateurs de contenance <literal>@&gt;</literal>
   et <literal>&lt;@</literal> étaient appelés respectivement
   <literal>@</literal> et <literal>~</literal>. Ces noms sont toujours
   disponibles mais sont déclarés obsolètes et seront supprimés un jour. Les
   anciens noms sont inversés par rapport à la convention suivie par les types
   de données géométriques&nbsp;!)
  </para>

  <para>
   En plus des opérateurs ci-dessus, les opérateurs de comparaison usuels
   indiqués dans <xref linkend="functions-comparison-op-table"/> sont disponibles
   pour le type <type>cube</type>. Ces opérateurs comparent tout d'abord les
   premiers coordonnées et, si ces derniers sont égaux, comparent les
   deuxièmes coordonnées. Ils existent principalement pour supporter la classe
   d'opérateur d'index b-tree pour <type>cube</type>, qui peut seulement être
   utile par exemple si vous souhaitez une contrainte UNIQUE sur une colonne
   <type>cube</type>.
   Autrement, l'ordonnancement n'a pas d'usage concret.
  </para>

  <para>
   Le module <filename>cube</filename> fournit aussi une classe d'opérateur
   pour index GiST pour les valeurs <type>cube</type>. Un index GiST peut être
   utilisé sur le type <type>cube</type> pour chercher des valeurs en
   utilisant les opérateurs <literal>=</literal>,
   <literal>&amp;&amp;</literal>, <literal>@&gt;</literal> et
   <literal>&lt;@</literal> dans les clauses <literal>WHERE</literal>.
  </para>

  <para>
   De plus, un index GiST <type>cube</type> peut être utilisé pour trouver
   les plus proches voisins en utilisant les opérateurs de métriques
   <literal>&lt;-&gt;</literal>, <literal>&lt;#&gt;</literal> et
   <literal>&lt;=&gt;</literal> dans les clauses <literal>ORDER BY</literal>.
   Par exemple, le plus proche voisin du point 3-D (0.5, 0.5, 0.5) peut
   être trouvé de façon efficace avec&nbsp;:
   <programlisting>
SELECT c FROM test ORDER BY c &lt;-&gt; cube(array[0.5,0.5,0.5]) LIMIT 1;
   </programlisting>
  </para>

  <para>
   L'opérateur <literal>~&gt;</literal> peut aussi être utilisé de cette façon
   pour récupérer efficacement les premières valeurs triées par une coordonnée
   sélectionnée. Par exemple, pour obtenir les quelques premiers cubes triés
   par la première coordonnée (coin bas gauche) ascendante, il est possible
   d'utiliser la requête suivante&nbsp;:
   <programlisting>
SELECT c FROM test ORDER BY c ~&gt; 1 LIMIT 5;
   </programlisting>
   Et pour obtenir des cubes 2-D triés par la première coordonnée du coin
   haut droit descendant&nbsp;:
   <programlisting>
SELECT c FROM test ORDER BY c ~&gt; 3 DESC LIMIT 5;
   </programlisting>
  </para>

  <para>
   <xref linkend="cube-functions-table"/> indique les fonctions disponibles.
  </para>

  <table id="cube-functions-table">
   <title>Fonctions cube</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        Fonction
       </para>
       <para>
        Description
       </para>
       <para>
        Exemple(s)
       </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube</function> ( <type>float8</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Crée un cube uni-dimensionnel de coordonnées identiques.
       </para>
       <para>
        <literal>cube(1)</literal>
        <returnvalue>(1)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube</function> ( <type>float8</type>, <type>float8</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Crée un cube uni-dimensionnel.
       </para>
       <para>
        <literal>cube(1,2)</literal>
        <returnvalue>(1),(2)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube</function> ( <type>float8[]</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Crée un cube de volume nul en utilisant les coordonnées
        définies par le tableau.
       </para>
       <para>
        <literal>cube(ARRAY[1,2,3])</literal>
        <returnvalue>(1, 2, 3)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube</function> ( <type>float8[]</type>, <type>float8[]</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Crée un cube avec les coordonnées haut droit et
        bas gauche définies par deux tableaux de flottants, obligatoirement
        de même taille.
       </para>
       <para>
        <literal>cube(ARRAY[1,2], ARRAY[3,4])</literal>
        <returnvalue>(1, 2),(3, 4)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube</function> ( <type>cube</type>, <type>float8</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Crée un nouveau cube en ajoutant une dimension à un cube
        existant, avec les mêmes valeurs pour les deux points finaux de la
        nouvelle coordonnée. Ceci est utile pour construire des cubes pièce par
        pièce à partir de valeurs calculées.
       </para>
       <para>
        <literal>cube('(1,2),(3,4)'::cube, 5)</literal>
        <returnvalue>(1, 2, 5),(3, 4, 5)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube</function> ( <type>cube</type>, <type>float8</type>, <type>float8</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Crée un nouveau cube en ajoutant une dimension à un cube existant.
        Ceci est utile pour construire des cubes pièce par pièce à partir de
        valeurs calculées.
       </para>
       <para>
        <literal>cube('(1,2),(3,4)'::cube, 5, 6)</literal>
        <returnvalue>(1, 2, 5),(3, 4, 6)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_dim</function> ( <type>cube</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Renvoie le nombe de dimensions du cube.
       </para>
       <para>
        <literal>cube_dim('(1,2),(3,4)')</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_ll_coord</function> ( <type>cube</type>, <type>integer</type> )
        <returnvalue>float8</returnvalue>
       </para>
       <para>
        Renvoie la <replaceable>n</replaceable>-ième valeur de coordonnée pour
        le coin bas gauche du cube.
       </para>
       <para>
        <literal>cube_ll_coord('(1,2),(3,4)', 2)</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_ur_coord</function> ( <type>cube</type>, <type>integer</type> )
        <returnvalue>float8</returnvalue>
       </para>
       <para>
        Renvoie la <replaceable>n</replaceable>-ième valeur de coordonnée pour
        le coin haut droite du cube.
       </para>
       <para>
        <literal>cube_ur_coord('(1,2),(3,4)', 2)</literal>
        <returnvalue>4</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_is_point</function> ( <type>cube</type> )
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Renvoie true si le cube est un point, autrement dit si
        les deux coins de définition sont identiques.
       </para>
       <para>
        <literal>cube_is_point(cube(1,1))</literal>
        <returnvalue>t</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_distance</function> ( <type>cube</type>, <type>cube</type> )
        <returnvalue>float8</returnvalue>
       </para>
       <para>
        Renvoie la distance entre deux cubes. Si les deux cubes sont des
        points, il s'agit de la fonction de distance habituelle.
       </para>
       <para>
        <literal>cube_distance('(1,2)', '(3,4)')</literal>
        <returnvalue>2.8284271247461903</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_subset</function> ( <type>cube</type>, <type>integer[]</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Crée un nouveau cube à partir d'un cube existant, en utilisant
        une liste d'index de dimension à partir d'un tableau. Peut être utilisé
        pour extraire les points finaux d'une seule dimension ou pour supprimer
        les dimensions, ou pour les réordonner comme souhaité.
       </para>
       <para>
        <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[2])</literal>
        <returnvalue>(3),(7)</returnvalue>
       </para>
       <para>
        <literal>cube_subset(cube('(1,3,5),(6,7,8)'), ARRAY[3,2,1,1])</literal>
        <returnvalue>(5, 3, 1, 1),(8, 7, 6, 6)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_union</function> ( <type>cube</type>, <type>cube</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Produit l'union de deux cubes.
       </para>
       <para>
        <literal>cube_union('(1,2)', '(3,4)')</literal>
        <returnvalue>(1, 2),(3, 4)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_inter</function> ( <type>cube</type>, <type>cube</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Produit l'intersection de deux cubes.
       </para>
       <para>
        <literal>cube_inter('(1,2)', '(3,4)')</literal>
        <returnvalue>(3, 4),(1, 2)</returnvalue>
       </para></entry>
     </row>

     <row>
      <entry role="func_table_entry"><para role="func_signature">
        <function>cube_enlarge</function> ( <parameter>c</parameter> <type>cube</type>, <parameter>r</parameter> <type>double</type>, <parameter>n</parameter> <type>integer</type> )
        <returnvalue>cube</returnvalue>
       </para>
       <para>
        Augmente la taille du cube suivant le radius
        <replaceable>r</replaceable> spécifié sur au moins
        <replaceable>n</replaceable> dimensions. Si le radius est négatif, le
        cube est réduit. Toutes les dimensions définies sont modifiées par le
        radius <replaceable>r</replaceable>. Les coordonnées bas-gauche sont
        réduites de <replaceable>r</replaceable> et les coordonnées haut-droite
        sont augmentées de <replaceable>r</replaceable>. Si une coordonnée bas-
        gauche est augmentée suffisamment pour être plus importante que la
        coordonnée haute-droite (ceci peut seulement survenir quand
        <replaceable>r</replaceable> &lt; 0), alors les deux coordonnées sont
        configurées avec leur moyenne. Si <replaceable>n</replaceable> est
        supérieur au nombre de dimensions définies et que le cube est grossi
        (<replaceable>r</replaceable> &gt; 0), alors les dimensions
        supplémentaires sont ajoutées pour tout
        <replaceable>n</replaceable>&nbsp;; 0 est utilisé comme valeur initiale
        pour les coordonnées supplémentaires. Cette fonction est utile pour
        créer les <quote>bounding boxes</quote> autour d'un point permettant de
        chercher les points les plus proches.
       </para>
       <para>
        <literal>cube_enlarge('(1,2),(3,4)', 0.5, 3)</literal>
        <returnvalue>(0.5, 1.5, -0.5),(3.5, 4.5, 0.5)</returnvalue>
       </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Par défaut</title>

  <para>
   Le développeur pense que l'union&nbsp;:
  </para>
  <programlisting>
select cube_union('(0,5,2),(2,3,1)', '0');
cube_union
-------------------
(0, 0, 0),(2, 5, 2)
(1 row)
  </programlisting>

  <para>
   n'est pas en contradiction avec le bon sens. Pas plus que l'intersection
  </para>

  <programlisting>
select cube_inter('(0,-1),(1,1)', '(-2),(2)');
cube_inter
-------------
(0, 0),(1, 0)
(1 row)
  </programlisting>

  <para>
   Dans toutes les opérations binaires sur des boîtes de tailles différentes,
   l'auteur suppose que la plus petite est une projection cartésienne,
   c'est-à-dire qu'il y a des zéros à la place des coordonnées omises dans la représentation
   sous forme de chaîne. Les exemples ci-dessus sont équivalents à&nbsp;:
  </para>

  <programlisting>
cube_union('(0,5,2),(2,3,1)','(0,0,0),(0,0,0)');
cube_inter('(0,-1),(1,1)','(-2,0),(2,0)');
  </programlisting>

  <para>
   Le prédicat de contenance suivant utilise la syntaxe en points alors qu'en
   fait, le second argument est représenté en interne par une boîte. Cette
   syntaxe rend inutile la définition du type point et des fonctions
   pour les prédicats (boîte,point).
  </para>

  <programlisting>
select cube_contains('(0,0),(1,1)', '0.5,0.5');
cube_contains
--------------
t
(1 row)
  </programlisting>
 </sect2>

 <sect2>
  <title>Notes</title>

  <para>
   Pour des exemples d'utilisation, voir les tests de régression
   <filename>sql/cube.sql</filename>.
  </para>

  <para>
   Pour éviter toute mauvaise utilisation, le nombre de dimensions des cubes
   est limité à 100. Cela se configure dans <filename>cubedata.h</filename>.
  </para>
 </sect2>

 <sect2>
  <title>Crédits</title>

  <para>
   Auteur d'origine&nbsp;: Gene Selkov, Jr. <email>selkovjr@mcs.anl.gov</email>,
   Mathematics and Computer Science Division, Argonne National Laboratory.
  </para>
 </sect2>

 <sect2>
  <title>Note de l'auteur</title>
  <para>
   Mes remerciements vont tout particulièrement au professeur Joe Hellerstein
   (<ulink url="https://dsf.berkeley.edu/jmh/"></ulink>) qui a su extraire
   l'idée centrale de GiST (<ulink
   url="http://gist.cs.berkeley.edu/"></ulink>), et à son étudiant précédant,
   Andy Dong pour son
   exemple rédigé dans Illustra. Mes remerciements vont également aux
   développeurs de PostgreSQL qui m'ont permis de créer mon propre monde
   et de pouvoir y vivre sans être dérangé. Toute ma gratitude aussi à
   Argonne Lab et au département américain de l'énergie pour les années de
   support dans mes recherches sur les bases de données.
  </para>

  <para>
   Des modifications mineures ont été effectuées sur ce module par Bruno Wolff
   III <email>bruno@wolff.to</email> en août/septembre 2002. Elles incluent
   la modification de la précision (de simple à double) et l'ajout de
   quelques nouvelles fonctions.
  </para>

  <para>
   Des mises à jour supplémentaires ont été réalisées par Joshua Reich
   <email>josh@root.net</email> en juillet 2006. Elles concernent
   l'ajout de <literal>cube(float8[], float8[])</literal> et le nettoyage du code pour
   utiliser le protocole d'appel V1 à la place de la forme V0 maintenant
   obsolète.
  </para>
 </sect2>

</sect1>
