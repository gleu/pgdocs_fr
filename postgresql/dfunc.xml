<?xml version="1.0" encoding="UTF-8"?>
<sect2 id="dfunc">
 <title>Compiler et lier des fonctions chargées dynamiquement</title>

 <para>
  Avant de pouvoir être utilisées dans <productname>PostgreSQL</productname>,
  les fonctions d'extension écrites en C doivent être compilées et liées
  d'une certaine façon, ceci afin de produire un fichier
  dynamiquement chargeable par le serveur. Pour être plus précis, une
  <firstterm>bibliothèque partagée</firstterm> doit être créée.
  <indexterm><primary>bibliothèque partagée</primary></indexterm>
 </para>

 <para>
  Pour obtenir plus d'informations que celles contenues dans cette section,
  il faut se référer à la documentation du système d'exploitation, en
  particulier les pages traitant du compilateur C, de <command>cc</command> et
  de l'éditeur de lien, <command>ld</command>. Par ailleurs, le code
  source de <productname>PostgreSQL</productname> contient de nombreux exemples
  fonctionnels dans le répertoire <filename>contrib</filename>.
  Néanmoins, ces exemples entraînent la création de modules
  qui dépendent de la disponibilité du code source de
  <productname>PostgreSQL</productname>.
 </para>

 <para>
  La création de bibliothèques partagées est un
  processus analogue à celui utilisé pour lier des exécutables&nbsp;:
  les fichiers sources sont d'abord compilés en fichiers objets puis sont liées ensemble.
  Les fichiers objets doivent être compilés sous la forme de <firstterm>code
   indépendant de sa position</firstterm> (<acronym>PIC</acronym>, acronyme de
  <foreignphrase>position-independent code</foreignphrase>)
  <indexterm><primary>PIC</primary></indexterm>.
  Conceptuellement, cela signifie qu'ils peuvent être placés dans
  une position arbitraire de la mémoire lorsqu'ils sont chargés par
  l'exécutable. (Les fichiers objets destinés aux exécutables ne sont
  généralement pas compilés de cette manière.) La commande qui permet de lier
  des bibliothèques partagées nécessite des options spéciales qui la
  distinguent de celle permettant de lier un exécutable. En théorie, tout du
  moins. La réalité est, sur certains systèmes, beaucoup plus complexe.
 </para>

 <para>
  Les exemples suivants considèrent que le code source est un
  fichier <filename>foo.c</filename> et qu'une bibliothèque partagée
  <filename>foo.so</filename> doit être créée. Sans précision, le fichier objet
  intermédiaire est appelé <filename>foo.o</filename>. Une bibliothèque
  partagée peut contenir plusieurs fichiers objet. Cela dit, un seul est
  utilisé ici.
 </para>

 <!--
  Note: Reading GNU Libtool sources is generally a good way of
  figuring out this information.  The methods used within PostgreSQL
  source code are not necessarily ideal.
-->

 <variablelist>
  <varlistentry>
   <term>
    <systemitem class="osname">FreeBSD</systemitem>
    <indexterm><primary>FreeBSD</primary><secondary>bibliothèque partagée</secondary></indexterm>
   </term>
   <listitem>
    <para>
     L'option du compilateur pour créer des <acronym>PIC</acronym> est
     <option>-fPIC</option>.  L'option de l'éditeur de liens pour créer des
     bibliothèques partagées est <option>-shared</option>.
     <programlisting>gcc -fPIC -c foo.c
gcc -shared -o foo.so foo.o
     </programlisting>
     Ceci est applicable à partir de la version 3.0 de
     <systemitem class="osname">FreeBSD</systemitem>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <systemitem class="osname">HP-UX</systemitem>
    <indexterm><primary>HP-UX</primary><secondary>bibliothèque partagée</secondary></indexterm>
   </term>
   <listitem>
    <para>
     L'option du compilateur du système pour créer des <acronym>PIC</acronym>
     est <option>+z</option>. Avec <application>GCC</application>, l'option
     est <option>-fPIC</option>. Le
     commutateur de l'éditeur de liens pour les bibliothèques partagées est
     <option>-b</option>.
     Ainsi&nbsp;:
     <programlisting>cc +z -c foo.c
     </programlisting>
     ou&nbsp;:
     <programlisting>gcc -fPIC -c foo.c
     </programlisting>
     puis&nbsp;:
     <programlisting>ld -b -o foo.sl foo.o
     </programlisting>
     <systemitem class="osname">HP-UX</systemitem> utilise l'extension
     <filename>.sl</filename> pour les bibliothèques partagées, à la différence
     de la plupart des autres systèmes.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <systemitem class="osname">Linux</systemitem>
    <indexterm><primary>Linux</primary><secondary>bibliothèque partagée</secondary></indexterm>
   </term>
   <listitem>
    <para>
     L'option du compilateur pour créer des <acronym>PIC</acronym> est
     <option>-fPIC</option>. L'option de compilation pour créer des
     bibliothèques partagées est <option>-shared</option>. Un exemple complet
     ressemble à&nbsp;:
     <programlisting>cc -fPIC -c foo.c
cc -shared -o foo.so foo.o
     </programlisting>
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <systemitem class="osname">macOS</systemitem>
    <indexterm><primary>macOS</primary><secondary>bibliothèque partagée</secondary></indexterm>
   </term>
   <listitem>
    <para>
     L'exemple suivant suppose que les outils de développement sont installés.
     <programlisting>cc -c foo.c
cc -bundle -flat_namespace -undefined suppress -o foo.so foo.o
     </programlisting>
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <systemitem class="osname">NetBSD</systemitem>
    <indexterm><primary>NetBSD</primary><secondary>bibliothèque partagée</secondary></indexterm>
   </term>
   <listitem>
    <para>
     L'option du compilateur pour créer des <acronym>PIC</acronym> est
     <option>-fPIC</option>. Pour les systèmes <acronym>ELF</acronym>,
     l'option de compilation pour lier les bibliothèques partagées
     est <option>-shared</option>. Sur les systèmes plus anciens et non-ELF,
     on utilise <literal>ld -Bshareable</literal>.
     <programlisting>gcc -fPIC -c foo.c
gcc -shared -o foo.so foo.o
     </programlisting>
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <systemitem class="osname">OpenBSD</systemitem>
    <indexterm><primary>OpenBSD</primary><secondary>bibliothèque partagée</secondary></indexterm>
   </term>
   <listitem>
    <para>
     L'option du compilateur pour créer des <acronym>PIC</acronym> est
     <option>-fPIC</option>. Les bibliothèques partagées peuvent être créées avec
     <literal>ld -Bshareable</literal>.
     <programlisting>gcc -fPIC -c foo.c
ld -Bshareable -o foo.so foo.o
     </programlisting>
    </para>
   </listitem>
  </varlistentry>

  <varlistentry>
   <term>
    <systemitem class="osname">Solaris</systemitem>
    <indexterm><primary>Solaris</primary><secondary>bibliothèque partagée</secondary></indexterm>
   </term>
   <listitem>
    <para>
     L'option du compilateur pour créer des <acronym>PIC</acronym> est
     <option>-KPIC</option> avec le compilateur de Sun et <option>-fPIC</option>
     avec <application>GCC</application>. Pour lier les bibliothèques
     partagées, l'option de compilation est respectivement <option>-G</option>
     ou <option>-shared</option>.
     <programlisting>cc -KPIC -c foo.c
cc -G -o foo.so foo.o
     </programlisting>
     ou
     <programlisting>gcc -fPIC -c foo.c
gcc -G -o foo.so foo.o
     </programlisting>
    </para>
   </listitem>
  </varlistentry>

 </variablelist>

 <tip>
  <para>
   Si cela s'avère trop compliqué,
   <ulink url="https://www.gnu.org/software/libtool/"><productname>GNU Libtool</productname></ulink>
   peut être utilisé. Cet outil permet de s'affranchir des
   différences entre les nombreux systèmes au travers d'une interface
   uniformisée.
  </para>
 </tip>

 <para>
  La bibliothèque partagée résultante peut être chargée dans
  <productname>PostgreSQL</productname>. Lorsque l'on précise le nom du fichier
  dans la commande <command>CREATE FUNCTION</command>, il faut indiquer le nom
  de la bibliothèque partagée et non celui du fichier objet intermédiaire.
  L'extension standard pour les bibliothèques partagées (en général
  <literal>.so</literal> ou <literal>.sl</literal>) peut être omise dans la commande
  <command>CREATE FUNCTION</command>, et doit l'être pour une meilleure
  portabilité.
 </para>

 <para>
  La <xref linkend="xfunc-c-dynload"/> indique l'endroit où
  le serveur s'attend à trouver les fichiers de bibliothèques partagées.
 </para>

 <!--
Under AIX, object files are compiled normally but building the shared
library requires a couple of steps.  First, create the object file:
.nf
cc <other flags> -c foo.c
.fi
You must then create a symbol \*(lqexports\*(rq file for the object
file:
.nf
mkldexport foo.o `pwd` &gt; foo.exp
.fi
Finally, you can create the shared library:
.nf
ld <other flags> -H512 -T512 -o foo.so -e _nostart \e
   -bI:.../lib/postgres.exp -bE:foo.exp foo.o \e
   -lm -lc 2>/dev/null
.fi
  -->

</sect2>
