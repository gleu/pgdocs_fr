<?xml version="1.0" encoding="UTF-8"?>
<chapter id="tableam">
 <title>Définition de l'interface des méthodes d'accès aux tables</title>

 <indexterm>
  <primary>Méthode d'accès aux tables</primary>
 </indexterm>
 <indexterm>
  <primary>tableam</primary>
  <secondary>Méthode d'accès aux tables</secondary>
 </indexterm>

 <para>
  Ce chapitre explique l'interface entre le système
  <productname>PostgreSQL</productname> et les <firstterm>méthodes d'accès aux
   tables</firstterm>, qui gèrent le stockage des tables. Le cœur du système
  connaît très peu de choses sur ces méthodes d'accès en dehors de ce qui est
  spécifié ici, donc il est possible de développer de nouvelles méthodes
  d'accès en écrivant un code supplémentaire.
 </para>

 <para>
  Chaque méthode d'accès aux tables est décrite par une ligne dans le
  catalogue système <link
  linkend="catalog-pg-am"><structname>pg_am</structname></link>.
  L'enregistrement dans <structname>pg_am</structname> précise un nom et une
  <firstterm>fonction de gestion</firstterm> pour la méthode d'accès à la
  table. Ces enregistrements peuvent être créés et supprimés en utilisant les
  commandes SQL <xref linkend="sql-create-access-method"/> et <xref
  linkend="sql-drop-access-method"/>.
 </para>

 <para>
  Une fonction de gestion de la méthode d'accès aux tables doit être déclarée
  comme acceptant un seul argument de type <type>internal</type> et doit
  renvoyer le pseudo-type <type>table_am_handler</type>. L'argument est une
  valeur bateau qui sert simplement à empêcher l'appel de fonctions de gestion
  à partir de simples commandes SQL.

  Le résultat de la fonction doit être un pointeur vers une structure de type
  <structname>TableAmRoutine</structname>, qui contient tout ce que le cœur du
  moteur a besoin de savoir pour utiliser la méthode d'accès aux tables. La
  valeur de retour doit avoir une durée de vie valable pour toute la durée
  d'exécution du serveur, ce qui se fait habituellement en la définissant
  comme une variable de type <literal>static const</literal> de façon globale.
  La structure <structname>TableAmRoutine</structname>, aussi appelée
  <firstterm>structure API</firstterm> de la méthode d'accès, définit le
  comportement de la méthode d'accès en utilisant des callbacks. Ces callbacks
  sont des pointeurs vers des fonctions C et ne sont pas visibles ou
  appelables au niveau du langage SQL. Tous les callbacks et leurs
  comportements sont définis dans la structure
  <structname>TableAmRoutine</structname> (avec des commentaires dans le
  structure définissant les prérequis des callbacks). La plupart des callbacks
  ont des fonctions wrapper, documentées du point de vue de l'utilisateur
  (plutôt que de l'implémenteur) de la méthode d'accès aux tables. Pour les
  détails, voir le fichier <ulink
  url="https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/include/access/tableam.h;hb=head">
   <filename>src/include/access/tableam.h</filename></ulink>.
 </para>

 <para>
  Pour implémenter une méthode d'accès, un implémenteur aura habituellement
  besoin d'implémenter un type spécifique AM de ligne (voir <ulink
  url="https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/include/executor/tuptable.h;hb=head">
   <filename>src/include/executor/tuptable.h</filename></ulink>), qui permet à
  du code en dehors de la méthode d'accès de détenir des références sur les
  lignes de l'AM, et d'accéder aux colonnes de la ligne.
 </para>

 <para>
  Actuellement, la façon dont un AM enregisrre les données est très peu
  contrainte. Par exemple, il est possible, mais non requis, d'utiliser le
  cache disque de PostgreSQL. Au cas où il est utilisé, il est sensé
  d'utiliser la disposition standard d'une page de
  <productname>PostgreSQL</productname> comme décrit dans <xref
  linkend="storage-page-layout"/>.
 </para>

 <para>
  Une importante contrainte de l'API de méthode d'accès aux tables est
  qu'actuellement, si l'AM veut accepter les modifications et/ou les index, il
  est nécessaire que chaque ligne ait un identifiant de ligne
  (<acronym>TID</acronym>) consistant en un numéro de bloc et un numéro
  d'enregistrement (voir aussi <xref linkend="storage-page-layout"/>). IL
  n'est pas strictement nécessaire que les sous-parties des
  <acronym>TIDs</acronym> aient cette même signification, avoir un
  <literal>heap</literal>, mais si le support de parcours de bitmap est
  souhaité (c'est optionnel), le numéro de bloc doit fournir une localisation.
 </para>

 <para>
  Pour la sécurité des données, un AM doit utiliser les <link
  linkend="wal"><acronym>WAL</acronym></link> de PostgreSQL ou une
  implémentation personnalisée. Si les <acronym>WAL</acronym> sont choisis,
  des <link linkend="generic-wal">enregistrements génériques des WAL</link>
  peuvent être utilisés. Vous pouvez aussi implémenter un nouveau type
  d'enregistrements <acronym>WAL</acronym>. Les enregistrements génériques
  sont plus simples, mais impliquent un volume WAL plus important.
  L'implémentation d'un nouveau type d'enregistrement WAL nécessite
  actuellement des modifications du moteur (spécifiquement,
  <filename>src/include/access/rmgrlist.h</filename>).
 </para>

 <para>
  Pour implémenter le support transactionnel d'une façon qui permet à
  différentes méthodes d'accès aux tables d'être accédées dans une seule
  transaction, il est généralement nécessaire d'intégrer ce qui se trouve dans
  <filename>src/backend/access/transam/xlog.c</filename>.
 </para>

 <para>
  Tout développeur d'une nouvelle <literal>méthode d'accès aux
   tables</literal> peut se référer à l'implémentation existante de
  <literal>heap</literal> dans
  <filename>src/backend/access/heap/heapam_handler.c</filename> pour les
  détails de son implémentation.
 </para>

</chapter>
