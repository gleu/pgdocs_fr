<?xml version="1.0" encoding="UTF-8"?>
<chapter id="gin">
 <title>Index GIN</title>

 <indexterm>
  <primary>index</primary>
  <secondary>GIN</secondary>
 </indexterm>

 <sect1 id="gin-intro">
  <title>Introduction</title>

  <!-- posting list ?
     liste postée me semble malheureux. Je mets "liste" en attendant mieux -->
  <para>
   <acronym>GIN</acronym> est l'acronyme de <foreignphrase>Generalized
    Inverted Index</foreignphrase> (ou index générique inverse).
   <acronym>GIN</acronym> est prévu pour traiter les cas où les
   items à indexer sont des valeurs composites, et où les requêtes
   devant être accélérées par l'index doivent rechercher des valeurs
   d'éléments apparaissant dans ces items composites.  Par exemple, les
   items pourraient être des documents, et les requêtes pourraient être
   des recherches de documents contenant des mots spécifiques.  </para>

  <para>
   Nous utilisons le mot <firstterm>item</firstterm> pour
   désigner une valeur composite qui doit être indexée, et
   le mot <firstterm>clé</firstterm> pour désigner une valeur
   d'élément. <acronym>GIN</acronym> stocke et recherche toujours des
   clés, jamais des items eux même.
  </para>

  <para>
   Un index <acronym>GIN</acronym> stocke un jeu de paires de (clé,
   posting list), où <firstterm>posting list</firstterm> est un jeu
   d'adresse d'enregistrement (row ID) où la clé existe. Le même row
   ID peut apparaître dans plusieurs posting lists, puisqu'un item peut
   contenir plus d'une clé. Chaque clé est stockée une seule fois,
   ce qui fait qu'un index <acronym>GIN</acronym> est très compact dans
   le cas où une clé apparaît de nombreuses fois.
  </para>

  <para>
   <acronym>GIN</acronym> est généralisé dans le sens où
   la méthode d'accès <acronym>GIN</acronym> n'a pas besoin de
   connaître l'opération spécifique qu'elle accélère. À la place,
   elle utilise les stratégies spécifiques définies pour les types de
   données. La stratégie définit comment extraire les clés des items
   à indexer et des conditions des requêtes, et comment déterminer
   si un enregistrement qui contient des valeurs de clés d'une requête
   répond réellement à la requête.
  </para>

  <para>
   Un des avantages de <acronym>GIN</acronym> est la possibilité qu'il offre que
   des types de données personnalisés et les méthodes d'accès appropriées soient
   développés par un expert du domaine du type de données, plutôt que par un
   expert en bases de données. L'utilisation de <acronym>GiST</acronym> offre le
   même avantage.
  </para>

  <para>
   L'implantation de <acronym>GIN</acronym> dans
   <productname>PostgreSQL</productname> est principalement l'oeuvre de
   Teodor Sigaev et Oleg Bartunov. Plus d'informations sur <acronym>GIN</acronym>
   sont disponibles sur leur <ulink
   url="http://www.sai.msu.su/~megera/wiki/Gin">site web</ulink>.
  </para>
 </sect1>

 <sect1 id="gin-builtin-opclasses">
  <title>Classes d'opérateur internes</title>

  <para>
   La distribution <productname>PostgreSQL</productname> inclut les classes
   d'opérateur <acronym>GIN</acronym> affichées dans <xref
   linkend="gin-builtin-opclasses-table"/>. (Certains des modules optionnels
   décrits dans <xref linkend="contrib"/> fournissent des classes d'opérateurs
   <acronym>GIN</acronym> supplémentaires.)
  </para>

  <table id="gin-builtin-opclasses-table">
   <title>Classes d'opérateur <acronym>GIN</acronym> internes</title>
   <tgroup cols="3">
    <tbody>
     <row>
      <entry><literal>array_ops</literal></entry>
      <entry><type>anyarray</type></entry>
      <entry>
       <literal>&amp;&amp;</literal>
       <literal>&lt;@</literal>
       <literal>=</literal>
       <literal>@&gt;</literal>
       <literal>@?</literal>
       <literal>@@</literal>
      </entry>
     </row>
     <row>
      <entry><literal>jsonb_ops</literal></entry>
      <entry><type>jsonb</type></entry>
      <entry>
       <literal>?</literal>
       <literal>?&amp;</literal>
       <literal>?|</literal>
       <literal>@&gt;</literal>
       <literal>@?</literal>
       <literal>@@</literal>
      </entry>
     </row>
     <row>
      <entry><literal>jsonb_path_ops</literal></entry>
      <entry><type>jsonb</type></entry>
      <entry>
       <literal>@&gt;</literal>
      </entry>
     </row>
     <row>
      <entry><literal>tsvector_ops</literal></entry>
      <entry><type>tsvector</type></entry>
      <entry>
       <literal>@@</literal>
       <literal>@@@</literal>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Des deux classes d'opérateur pour le type <type>jsonb</type>,
   <literal>jsonb_ops</literal> est l'opérateur par défaut.
   <literal>jsonb_path_ops</literal> supporte moins d'opérateurs mais offre de
   meilleures performances pour ces opérateurs. Voir <xref
   linkend="json-indexing"/> pour plus de détails.
  </para>

 </sect1>

 <sect1 id="gin-extensibility">
  <title>Extensibilité</title>

  <para>
   L'interface <acronym>GIN</acronym> a un haut niveau d'abstraction. De ce
   fait, la personne qui code la méthode d'accès n'a besoin d'implanter que les
   sémantiques du type de données accédé. La couche
   <acronym>GIN</acronym> prend en charge la gestion de la concurrence, des traces
   et des recherches dans la structure de l'arbre.
  </para>

  <para>
   Pour obtenir une méthode d'accès <acronym>GIN</acronym>
   fonctionnelle, il suffit d'implanter quelques méthodes utilisateur. Celles-ci
   définissent le comportement des clés dans l'arbre
   et les relations entre clés, valeurs indexées et requêtes
   indexables. En résumé, <acronym>GIN</acronym> combine extensibilité,
   généralisation, ré-utilisation du code à une interface
   claire.
  </para>

  <para>
   Voici les deux méthodes qu'une classe d'opérateur
   <acronym>GIN</acronym> doit fournir sont&nbsp;:
  </para>

  <variablelist>
   <varlistentry>
    <term><function>Datum *extractValue(Datum inputValue, int32 *nkeys,
      bool **nullFlags)</function></term>
    <listitem>
     <para>
      Retourne un tableau de clés alloué par palloc en fonction
      d'un item à indexer. Le nombre de clés retournées doit
      être stocké dans <literal>*nkeys</literal>. Si une des clés
      peut être nulle, allouez aussi par palloc un tableau de
      <literal>*nkeys</literal> champs de type <type>bool</type>,
      stockez son adresse dans
      <literal>*nullFlags</literal>, et positionnez les drapeaux null où
      ils doivent l'être. <literal>*nullFlags</literal> peut être laissé
      à <symbol>NULL</symbol> (sa valeur initiale) si toutes les clés sont non-nulles.
      La valeur retournée peut être <symbol>NULL</symbol> si l'élément ne contient aucune clé.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>Datum *extractQuery(Datum query, int32 *nkeys,
      StrategyNumber n, bool **pmatch, Pointer **extra_data,
      bool **nullFlags, int32 *searchMode)</function></term>
    <listitem>
     <para>
      Renvoie un tableau de clés en fonction de la valeur à requêter&nbsp;; c'est-à-dire
      que <literal>query</literal> est la valeur du côté droit d'un opérateur
      indexable dont le côté gauche est la colonne indexée.
      <literal>n</literal> est le numéro de stratégie de l'opérateur dans la
      classe d'opérateur (voir <xref linkend="xindex-strategies"/>). Souvent,
      <function>extractQuery</function> doit consulter
      <literal>n</literal> pour déterminer le type de données de
      <literal>query</literal> et la méthode à utiliser pour extraire les valeurs des clés.
      Le nombre de clés renvoyées doit être stocké dans
      <literal>*nkeys</literal>.
      Si une des clés peut être nulle, allouez aussi par palloc un tableau de
      <literal>*nkeys</literal> champs de type <type>bool</type>, stockez son address à
      <literal>*nullFlags</literal>, et positionnez les drapeaux <symbol>NULL</symbol> où_ils doivent l'être.
      <literal>*nullFlags</literal> peut être laissé à NULL (sa valeur initiale)
      si toutes les clés sont non-nulles.
      La valeur de retour peut être <symbol>NULL</symbol> si <literal>query</literal> ne contient aucune clé.
     </para>

     <para>
      <literal>searchMode</literal> est un argument de sortie qui permet à
      <function>extractQuery</function> de spécifier des détails sur comment la
      recherche sera effectuée.
      Si <literal>*searchMode</literal> est positionné à
      <literal>GIN_SEARCH_MODE_DEFAULT</literal> (qui est la valeur à laquelle il
      est initialisé avant l'appel), seuls les items qui correspondent à au moins une des
      clés retournées sont considérées comme des candidats à correspondance.
      Si <literal>*searchMode</literal> est positionné à
      <literal>GIN_SEARCH_MODE_INCLUDE_EMPTY</literal>, alors en plus des items qui
      contiennent au moins une clé correspondant, les items qui ne contiennent aucune clé
      sont aussi considérées comme des candidats à correspondance. (Ce mode est utile pour implémenter
      un opérateur «est sous-ensemble de», par exemple.)
      Si <literal>*searchMode</literal> est positionné à <literal>GIN_SEARCH_MODE_ALL</literal>,
      alors tous les items non nuls de l'index sont candidats à correspondance, qu'ils aient
      une clé qui corresponde à celles retournées ou non. (Ce mode est beaucoup
      plus lent que les deux autres, mais il peut être nécessaire pour implémenter des cas exceptionnels
      correctement. Un opérateur qui a besoin de ce mode dans la plupart des cas n'est
      probablement pas un bon candidat pour une classe d'opérateur GIN.)
      Les symboles à utiliser pour positionner ce mode sont définis dans
      <filename>access/gin.h</filename>.
     </para>

     <para>
      <literal>pmatch</literal> est un paramètre de sortie à utiliser quand une correspondance
      partielle est permise. Pour l'utiliser, <function>extractQuery</function> doit allouer
      un tableau de booléens <literal>*nkeys</literal> et stocker son adresse dans
      <literal>*pmatch</literal>. Chaque élément du tableau devrait être positionné
      à TRUE si la clé correspondante a besoin d'une correspondance partielle, FALSE sinon.
      Si <literal>*pmatch</literal> est positionné à <symbol>NULL</symbol> alors GIN suppose qu'une
      mise en correspondance partielle n'est pas nécessaire. La variable est
      initialisée à <symbol>NULL</symbol> avant l'appel, et peut donc être simplement ignorée
      par les classes d'opérateurs qui ne supportent pas les correspondances
      partielles.
     </para>

     <para>
      <literal>extra_data</literal> est un paramètre de sortie qui autorise
      <function>extractQuery</function> à passer des données supplémentaires aux
      méthodes <function>consistent</function> et <function>comparePartial</function>.
      Pour l'utiliser, <function>extractQuery</function> doit allouer un tableau
      de pointeurs <literal>*nkeys</literal> et stocker son adresse à
      <literal>*extra_data</literal>, puis stocker ce qu'il souhaite dans les
      pointeurs individuels. La variable est initialisée à <symbol>NULL</symbol> avant l'appel,
      afin que ce paramètre soit simplement ignoré par une classe d'opérateurs
      qui n'a pas besoin de données supplémentaires. Si <literal>*extra_data</literal>
      est positionné, le tableau dans son ensemble est passé à la méthode
      <function>consistent</function>, et l'élément approprié à la méthode
      <function>comparePartial</function>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Une classe d'opérateur doit aussi fournir une fonction pour vérifier si un
   élément indexé correspond à la requête. Elle vient en deux versions, une
   fonction booléenne <function>consistent</function> et une fonction ternaire
   <function>triConsistent</function>. Cette dernière couvre les fonctionnalités
   des deux, donc fournir uniquement <function>triConsistent</function> est suffisant. Cependant, si
   la variante booléenne est bien moins coûteuse à calculer, il peut être
   avantageux de fournir les deux. Si seule la variante booléenne est fournie,
   certaines optimisations dépendant de la réfutation d'éléments d'index avant
   de récupérer toutes les clés sont désactivées.
  </para>

  <variablelist>

   <varlistentry>
    <term><function>bool consistent(bool check[], StrategyNumber n, Datum query,
      int32 nkeys, Pointer extra_data[], bool *recheck,
      Datum queryKeys[], bool nullFlags[])</function></term>
    <listitem>
     <para>
      Retourne TRUE si un item indexé répond à l'opérateur de requête possédant
      le numéro de stratégie <literal>n</literal> (ou pourrait le satisfaire, si
      l'indication recheck est retournée). Cette fonction n'a pas d'accès direct aux valeurs
      des items indexés. Au lieu de cela, ce qui est disponible, c'est la connaissance
      de quelles valeurs de clés extraites de la requête apparaissent dans un item indexé donné.
      Le tableau <literal>check</literal> a une longueur de <literal>nkeys</literal>, qui
      est la même que le nombre de clés retourné précédemment par <function>extractQuery</function>
      pour ce datum <literal>query</literal>.
      Chaque élément du tableau <literal>check</literal> est TRUE si l'item indexé contient
      la clé de requête correspondante, c'est à dire, si (check[i] == TRUE) la i-ème clé du
      tableau résultat de <function>extractQuery</function> est présente dans l'item indexé.
      Le datum <literal>query</literal> original est passé au cas où la méthode <function>contains</function>
      aurait besoin de le consulter, de même que les tableaux <literal>queryKeys[]</literal> et
      <literal>nullFlags[]</literal> retournée précédemment par <function>extractQuery</function>, ou
      <symbol>NULL</symbol> si aucun.
     </para>

     <para>
      Quand <function>extractQuery</function> retourne une clé nulle dans
      <literal>queryKeys[]</literal>, l'élément correspondant de <literal>check[]</literal>
      est TRUE si l'item indexé contient une clé nulle; c'est à dire que la sémantique de
      <literal>check[]</literal> est comme celle de <literal>IS NOT DISTINCT FROM</literal>.
      La fonction <function>consistent</function> peut examiner l'élément correspondant de
      <literal>nullFlags[]</literal> si elle a besoin de faire la différence entre une
      correspondance de valeur «normale» et une correspondance nulle.
     </para>

     <para>
      En cas de réussite, <literal>*recheck</literal> devrait être positionné à TRUE
      si les enregistrements de la table doivent être revérifiées par rapport à l'opérateur de
      la requête, ou FALSE si le test d'index est exact. Autrement dit, une valeur de retour à FALSE
      garantit que l'enregistrement de la table ne correspond pas; une valeur de retour à TRUE avec
      <literal>*recheck</literal> à FALSE garantit que l'enregistrement de la table correspond à
      la requête; et une valeur de retour à TRUE avec <literal>*recheck</literal> à TRUE signifie
      que l'enregistrement de la table pourrait correspondre à la requête, et qu'il doit être récupéré
      et re-vérifié en évaluant l'opérateur de la requête directement sur l'item initialement indexé.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>GinTernaryValue triConsistent(GinTernaryValue check[], StrategyNumber n, Datum query,
      int32 nkeys, Pointer extra_data[],
      Datum queryKeys[], bool nullFlags[])</function></term>
    <listitem>
     <para>
      <function>triConsistent</function> est similaire à
      <function>consistent</function>, mais en lieu dde booléens dans le vecteur
      <literal>check[]</literal>, il existe trois valeurs possibles à chaque
      clé&nbsp;: <literal>GIN_TRUE</literal>, <literal>GIN_FALSE</literal> et
      <literal>GIN_MAYBE</literal>. <literal>GIN_FALSE</literal> et
      <literal>GIN_TRUE</literal> ont la même signification que des valeurs
      booléennes standards alors que <literal>GIN_MAYBE</literal> signifie que la
      présence de cette clé est inconnue. Quand des valeurs
      <literal>GIN_MAYBE</literal> sont présentes, la fonction devrait seulement
      renvoyer <literal>GIN_TRUE</literal> si l'élément correspond que l'élément de l'index
      contient ou non les clés de la requête correspondante. De la même façon,
      la fonction doit renvoyer <literal>GIN_FALSE</literal> seulement si l'élément ne correspond
      pas, qu'il contienne ou non des clés <literal>GIN_MAYBE</literal>. Si le résultat dépend des
      entrées <literal>GIN_MAYBE</literal>, autrement dit si la correspondance ne peut pas être
      confirmée ou réfutée d'après les clés connues de requête, la fonction doit
      renvoyer <literal>GIN_MAYBE</literal>.
     </para>

     <para>
      Quand il n'y a pas de valeurs <literal>GIN_MAYBE</literal> dans le vecteur
      <literal>check</literal>, la valeur de retour <literal>GIN_MAYBE</literal>
      est équivalent à configurer le drapeau <literal>recheck</literal> dans
      la fonction booléenne <function>consistent</function>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   De plus, GIN doit avoir un moyen de trier les valeurs des clés stockées dans
   l'index.  La classe d'opérateur peut définir l'ordre de tri en spécifiant une
   méthode de comparaison :

   <variablelist>
    <varlistentry>
     <term><function>int compare(Datum a, Datum b)</function></term>
     <listitem>
      <para>
       Compare deux clés (pas des items indexés !) et retourne un entier
       inférieur à zéro, zéro ou supérieur à zéro, indiquant si la première clé
       est inférieure à, égale à ou supérieure à la seconde.  Les clés NULL ne
       sont jamais fournit en argument à cette fonction.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   Sinon, si la classe d'opérateur ne fournit pas de méthode
   <function>compare</function>, GIN cherchera la classe d'opérateur par défaut
   pour le type de donnée de la clé d'index, et utilisera sa fonction de
   comparaison.  Il est recommandé de spécifier la fonction de comparaison dans
   une classe d'opérateur GIN destinée à un seul type de donnée, car rechercher
   la classe d'opérateur btree coûte quelques cycles.  Cependant, les classes
   d'opérateur GIN polymorphiques (telle que <literal>array_ops</literal>) ne
   peuvent typiquement pas spécifier une seule fonction de comparaison.
  </para>

  <para>
   Une classe d'opérateurs pour <acronym>GIN</acronym> peut fournir en option
   les méthodes suivantes&nbsp;:
  </para>

  <variablelist>

   <varlistentry>
    <term><function>int comparePartial(Datum partial_key, Datum key, StrategyNumber n,
      Pointer extra_data)</function></term>
    <listitem>
     <para>
      Compare une requête de correspondance partielle à une clé d'index. Renvoie
      un entier dont le signe indique le résultat&nbsp;: inférieur à zéro
      signifie que la clé d'index ne correspond pas à la requête mais que le
      parcours d'index va continuer&nbsp;; zéro signifie que la clé d'index
      ne correspond pas à la requête&nbsp;; supérieur à zéro indique que le
      parcours d'index doit s'arrêter car il n'existe pas d'autres
      correspondances. Le numéro de stratégie <literal>n</literal> de l'opérateur
      qui a généré la requête de correspondance partielle est fourni au cas où
      sa sémantique est nécessaire pour déterminer la fin du parcours. De plus,
      <literal>extra_data</literal> est l'élément correspondant du tableau
      extra-data fait par <function>extractQuery</function>, ou <symbol>NULL</symbol> sinon.
      Les clés NULL ne sont jamais passées à cette fonction.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>void options(local_relopts *relopts)</function></term>
    <listitem>
     <para>
      Définit un ensemble de paramètres visibles aux utilisateurs qui
      contrôlent le comportement d'une classe d'opérateur.
     </para>

     <para>
      La fonction <function>options</function> se voit donné un pointeur
      vers une structure <replaceable>local_relopts</replaceable> qui doit
      être remplie avec un ensemble d'options spécifiques à la classe
      d'opérateur. Les options peuvent être accédées à partir des autres
      fonctions de support en utilisant les macros
      <literal>PG_HAS_OPCLASS_OPTIONS()</literal> et
      <literal>PG_GET_OPCLASS_OPTIONS()</literal>.
     </para>

     <para>
      Étant donné que l'extraction des clés des valeurs indexées et la
      représentation de la clé dans <acronym>GIN</acronym> sont flexibles,
      elles peuvent dépendre de paramètres spécifiés par l'utilisateur.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Pour supporter des requêtes à <quote>correspondance partielle</quote>,
   une classe d'opérateur doit fournir la méthode <function>comparePartial</function>,
   et sa méthode <function>extractQuery</function> doit positionner le
   paramètre <literal>pmatch</literal> quand une requête à correspondance
   partielle est rencontrée. Voir <xref linkend="gin-partial-match"/> pour les détails.
  </para>

  <para>
   Le type de données réel des différentes valeurs <literal>Datum</literal>
   mentionnées ci-dessus varient en fonction de la classe d'opérateurs. Les
   valeurs d'élément passée à <function>extractValue</function> sont toujours
   du type d'entrée de la classe d'opérateur, et toutes les valeurs clé doivent
   être du type de <literal>STORAGE</literal> de la classe. Le type de
   l'argument <literal>query</literal> passé à <function>extractQuery</function>,
   <function>consistent</function> et <function>triConsistent</function> est le
   type de l'argument côté droit de l'opérateur du membre de la classe identifié
   par le numéro de stratégie. Ce n'est pas nécessairement le même que l'élément
   indexé, tant que des valeurs de clés d'un type correct peuvent en être
   extraites. Néanmoins, il est recommandé que les déclarations SQL de ces trois
   fonctions de support utilisent le type de données indexé de la classe
   d'opérateur pour l'argument <literal>query</literal>, même si le type réel
   pourrait être différent suivant l'opérateur.
  </para>

 </sect1>

 <sect1 id="gin-implementation">
  <title>Implantation</title>

  <para>
   En interne, un index <acronym>GIN</acronym> contient un index B-tree construit
   sur des clés, chaque clé est un élément d'un ou plusieurs items indexé (un membre d'un
   tableau, par exemple) et où chaque enregistrement d'une page feuille contient
   soit un pointeur vers un B-tree de pointeurs vers la table (un <quote>posting tree</quote>),
   ou une liste simple de pointeurs vers enregistrement (un <quote>posting list </quote>)
   quand la liste est suffisamment courte pour tenir dans un seul enregistrement d'index
   avec la valeur de la clé. <xref linkend="gin-internals-figure"/> illustre ces
   composants d'un index GIN.
  </para>

  <para>
   À partir de <productname>PostgreSQL</productname> 9.1, des valeurs de clé NULL peuvent
   être incluses dans l'index. Par ailleurs, des NULLs fictifs sont inclus dans l'index pour des
   objets indexés qui sont NULL ou ne contiennent aucune clé d'après <function>extractValue</function>.
   Cela permet des recherches retournant des éléments vides.
  </para>

  <para>
   Les index multi-colonnes <acronym>GIN</acronym> sont implémentés en construisant
   un seul B-tree sur des valeurs composites (numéro de colonne, valeur de clé).
   Les valeurs de clés pour les différentes colonnes peuvent être de types différents.
  </para>

  <figure id="gin-internals-figure">
   <title>Cœur de GIN</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="images/gin.svg" format="SVG" width="100%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <sect2 id="gin-fast-update">
   <title>Technique GIN de mise à jour rapide</title>

   <para>
    Mettre à jour un index <acronym>GIN</acronym> a tendance à être lent en raison
    de la nature intrinsèque des index inversés&nbsp;: insérer ou mettre à jour
    un enregistrement de la table peut causer de nombreuses insertions dans l'index
    (une pour chaque clé extraite de l'élément indexé). À partir de
    <productname>PostgreSQL</productname> 8.4, <acronym>GIN</acronym> est capable
    de reporter à plus tard la plupart de ce travail en insérant les nouveaux
    enregistrements dans une liste temporaire et non triée des entrées en attente.
    Quand un vacuum ou autoanalyze est déclenché sur la table, ou quand la
    fonction <function>gin_clean_pending_list</function> est appelée, ou si la
    liste en attente devient
    plus importante que <xref linkend="guc-gin-pending-list-limit"/>, les entrées
    sont déplacées vers la structure de données <acronym>GIN</acronym> principale
    en utilisant la même technique d'insertion de masse que durant la création
    de l'index. Ceci améliore grandement la vitesse de mise à jour de l'index
    <acronym>GIN</acronym>, même en prenant en compte le surcoût engendré au
    niveau du vacuum. De plus, ce travail supplémentaire peut être attribué à un processus
    d'arrière-plan plutôt qu'à la requête en avant-plan.
   </para>

   <para>
    Le principal défaut de cette approche est que les recherches doivent
    parcourir la liste d'entrées en attente en plus de l'index habituel, et
    que par conséquent une grande liste d'entrées en attente ralentira les
    recherches de façon significative. Un autre défaut est que, bien que la majorité
    des mises à jour seront rapides, une mise à jour qui rend la liste d'attente
    <quote>trop grande</quote> déclenchera un cycle de nettoyage immédiat et sera
    donc bien plus lente que les autres mises à jour. Une utilisation appropriée
    d'autovacuum peut minimiser ces deux problèmes.
   </para>

   <para>
    Si la cohérence des temps de réponse est plus importante que la vitesse de
    mise à jour, l'utilisation de liste d'entrées en attente peut être désactivée
    en désactivant le paramètre de stockage <literal>fastupdate</literal> pour
    un index GIN. Voir <xref linkend="sql-createindex"/> pour plus de détails.
   </para>
  </sect2>

  <sect2 id="gin-partial-match">
   <title>Algorithme de mise en correspondance partielle</title>

   <para>
    GIN peut supporter des requêtes de <quote>correspondances partielles</quote>,
    dans lesquelles la requête ne détermine pas une correspondance parfaite
    pour une ou plusieurs clés, mais que la correspondance tombe à une distance
    suffisamment faible des valeurs de clé (dans l'ordre de tri des clés déterminé
    par la méthode de support <function>compare</function>).
    La méthode <function>extractQuery</function>, au lieu de retourner une valeur
    de clé à mettre en correspondance de façon exacte, retourne une valeur de clé
    qui est la limite inférieure de la plage à rechercher, et retourne l'indicateur
    <literal>pmatch</literal> positionné à true. La plage de clé est alors parcourue
    en utilisant la méthode <function>comparePartial</function>.
    <function>comparePartial</function> doit retourner 0 pour une clé d'index correspondante,
    une valeur négative pour une non-correspondance qui est toujours dans la plage
    de recherche, et une valeur positive si la clé d'index est sortie de la plage
    qui pourrait correspondre.
   </para>
  </sect2>

 </sect1>

 <sect1 id="gin-tips">
  <title>Conseils et astuces GIN</title>

  <variablelist>
   <varlistentry>
    <term>Création vs insertion</term>
    <listitem>
     <para>
      L'insertion dans un index <acronym>GIN</acronym> peut être
      lente du fait de la probabilité d'insertion de nombreuses clés pour
      chaque élément. C'est pourquoi, pour les chargements massifs dans une table, il
      est conseillé de supprimer l'index GIN et de le re-créer après
      le chargement.
     </para>

     <para>
      À partir de <productname>PostgreSQL</productname> 8.4, ce conseil est moins
      important puisqu'une technique de mise à jour retardée est utilisée (voir
      <xref linkend="gin-fast-update"/> pour plus de détails). Mais pour les
      très grosses mises à jour, il peut toujours être plus efficace de détruire
      et recréer l'index.
     </para>
    </listitem>
   </varlistentry>

   <!-- to skimp ? -->
   <varlistentry>
    <term><xref linkend="guc-maintenance-work-mem"/></term>
    <listitem>
     <para>
      Le temps de construction d'un index <acronym>GIN</acronym> dépend
      grandement du paramètre <varname>maintenance_work_mem</varname>&nbsp;;
      il est contre-productif de limiter la mémoire de travail lors de la création d'un index.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><xref linkend="guc-gin-pending-list-limit"/></term>
    <listitem>
     <para>
      Durant une série d'insertions dans un index <acronym>GIN</acronym> existant
      qui a <literal>fastupdate</literal> activé, le système nettoiera la liste
      d'entrées en attente dès qu'elle deviendra plus grosse que
      <varname>gin_pending_list_limit</varname>. Afin d'éviter des fluctuations mesurables
      de temps de réponse, il est souhaitable d'avoir un nettoyage de la liste
      d'attente en arrière-plan (c'est-à-dire via autovacuum). Les opérations
      de nettoyage en avant-plan peuvent être évitées en augmentant
      <varname>gin_pending_list_limit</varname> ou en rendant autovacuum plus aggressif.
      Toutefois, augmenter la limite de l'opération de nettoyage implique que si un nettoyage
      en avant-plan se produit, il prendra encore plus longtemps.
     </para>
     <para>
      <varname>gin_pending_list_limit</varname> peut être surchargé sur
      certains index en modifiant les paramètres de stockage, ce qui permet à
      chaque index d'avoir sa propre limite de nettoyage. Par exemple, il est
      possible d'augmenter la limite uniquement pour un index GIN fortement
      mis à jour ou de la diminuer dans le cas contraire.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><xref linkend="guc-gin-fuzzy-search-limit"/></term>
    <listitem>
     <para>
      La raison principale qui a poussé le développement des index
      <acronym>GIN</acronym> a été la volonté de supporter les recherches
      plein texte dans <productname>PostgreSQL</productname> et il arrive
      fréquemment qu'une recherche renvoie un ensemble volumineux de résultats.
      Cela arrive d'autant plus fréquemment que la requête contient des mots très
      fréquents, auquel cas l'ensemble de résultats n'est même pas
      utile. Puisque la lecture des lignes sur disque et leur tri prend beaucoup de temps,
      cette situation est inacceptable en production. (La
      recherche dans l'index est, elle, très rapide.)
     </para>
     <para>
      Pour faciliter l'exécution contrôlée de telles requêtes,
      <acronym>GIN</acronym> dispose d'une limite supérieure souple
      configurable du nombre de lignes renvoyées, le paramètre de configuration
      <varname>gin_fuzzy_search_limit</varname>. Par défaut, il est
      positionné à 0 (c'est-à-dire sans limite). Si une limite différente de
      0 est choisie, alors l'ensemble renvoyé est un sous-ensemble du résultat complet, choisi
      aléatoirement.
     </para>
     <para>
      <quote>Souple</quote> signifie
      que le nombre réel de résultats renvoyés peut différer légèrement
      de la limite indiquée, en fonction de la requête et de la qualité du
      générateur de nombres aléatoires du système.
     </para>
     <para>
      D'expérience, des valeurs de l'ordre de quelques milliers ( 5000 &mdash; 20000)
      fonctionnent bien.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

 </sect1>

 <sect1 id="gin-limit">
  <title>Limitations</title>

  <para>
   <acronym>GIN</acronym> part de l'hypothèse que les opérateurs indexables sont stricts.
   Cela signifie que <function>extractValue</function> ne sera pas appelé du tout sur une
   valeur d'item NULL (à la place, une entrée d'enregistrement factice sera créée automatiquement),
   et <function>extractQuery</function> ne sera pas appelé non plus pour une valeur de query
   NULL (à la place, la requête est considérée comme impossible à satisfaire). Notez
   toutefois qu'une valeur de clé NULL contenue dans un item composite ou une valeur de requête
   sont supportées.
  </para>
 </sect1>

 <sect1 id="gin-examples">
  <title>Exemples</title>

  <para>
   Le noyau de la distribution <productname>PostgreSQL</productname> inclue la
   classe d'opérateur <acronym>GIN</acronym> précédemment montrée dans
   <xref linkend="gin-builtin-opclasses-table"/>.
   Les modules <filename>contrib</filename> suivants
   contiennent aussi des classes d'opérateurs <acronym>GIN</acronym>&nbsp;:
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>btree-gin</filename></term>
    <listitem>
     <para>Fonctionnalité équivalente à B-tree pour plusieurs types de données</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>hstore</filename></term>
    <listitem>
     <para>Module pour le stockage des paires (clé, valeur)</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>intarray</term>
    <listitem>
     <para>Support amélioré pour le type <type>int[]</type></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>pg_trgm</filename></term>
    <listitem>
     <para>Similarité de texte par correspondance de trigramme</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

</chapter>
