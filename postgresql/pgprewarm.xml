<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="pgprewarm" xreflabel="pg_prewarm">
 <title>pg_prewarm</title>

 <indexterm zone="pgprewarm">
  <primary>pg_prewarm</primary>
 </indexterm>

 <para>
  Le module <filename>pg_prewarm</filename> fournit un moyen pratique
  de charger des données des relations dans le cache de données du système
  d'exploitation ou dans le cache de données de
  <productname>PostgreSQL</productname>. Ce préchargement
  peut être lancé manuellement avec la fonction <filename>pg_prewarm</filename>,
  ou automatiquement en incluant <literal>pg_prewarm</literal> dans
  <xref linkend="guc-shared-preload-libraries"/>.
  Dans ce dernier cas, le système exécutera un processus d'arrière-plan
  (<foreignphrase>background worker</foreignphrase>)
  qui enregistrera périodiquement le contenu des shared buffers
  dans un fichier nommé <filename>autoprewarm.blocks</filename> puis,
  après un redémarrage rechargera ces blocs en utilisant deux
  <foreignphrase>background workers</foreignphrase>.
 </para>

 <sect2>
  <title>Fonctions</title>

  <synopsis>
pg_prewarm(regclass, mode text default 'buffer', fork text default 'main',
           first_block int8 default null,
           last_block int8 default null) RETURNS int8
  </synopsis>

  <para>
   Le premier argument est la relation qui doit être préchargée. Le
   second est la méthode de préchargement à utiliser,
   comme décrit plus bas. Le troisième argument correspond au type de
   fichier à précharger (généralement <literal>main</literal>). Le quatrième
   argument est le numéro du premier bloc à précharger
   (<literal>NULL</literal> est accepté comme synonyme de zéro). Le cinquième
   argument correspond au dernier numéro de bloc à précharger
   (<literal>NULL</literal> signifie que l'on précharge jusqu'au dernier bloc
   dans la relation). La valeur retournée correspond au nombre de blocs
   préchargés.
  </para>

  <para>
   Il y a trois méthodes de préchargement disponibles.
   <literal>prefetch</literal> envoie une requête de prélecture asynchrone au
   système d'exploitation si celui-ci le supporte ou sinon renvoie une erreur.
   <literal>read</literal> lit l'intervalle de blocs demandé. Contrairement à
   <literal>prefetch</literal>, toutes les plateformes et options de compilation
   le supportent, mais cette méthode peut être plus lente.
   <literal>buffer</literal> lit l'intervalle de blocs demandé pour le charger
   dans le cache de données de la base.
  </para>

  <para>
   Il est à noter qu'avec n'importe laquelle de ces méthodes, tenter de
   précharger plus de blocs qu'il n'est possible de mettre en cache &mdash; par
   le système d'exploitation en utilisant <literal>prefetch</literal> ou
   <literal>read</literal>, ou par <productname>PostgreSQL</productname> en
   utilisant <literal>buffer</literal> &mdash; aura probablement pour effet
   d'expulser du cache les blocs des numéros inférieurs au fur et à mesure que
   les blocs des numéros supérieurs seront lus. De plus, les données
   préchargées ne bénéficient d'aucune protection spécifique contre l'éviction
   du cache. Il est donc possible que d'autres activités du
   système d'exploitation puissent évincer du cache les données fraîchement
   préchargées peu après leur lecture. Pour toutes ces
   raisons, le préchargement est typiquement plus utile au démarrage, quand
   les caches sont majoritairement vides.
  </para>

  <synopsis>
autoprewarm_start_worker() RETURNS void
  </synopsis>

  <para>
   Lance autoprewarm, le worker principal. Normalement cela est automatique,
   mais ce peut être utile si le préchauffage automatique n'était pas configuré au
   démarrage du serveur et que vous voulez démarrer le worker plus tard.
  </para>

  <synopsis>
autoprewarm_dump_now() RETURNS int8
  </synopsis>

  <para>
   Met à jour <filename>autoprewarm.blocks</filename> immédiatement. Ce peut
   être utile si le worker autoprewarm worker ne fonctionne pas mais que vous
   prévoyez de le lancer après le prochain redémarrage.
   La valeur retournée est le nombre d'enregistrements écrits dans
   <filename>autoprewarm.blocks</filename>.
  </para>
 </sect2>

 <sect2>
  <title>Paramètres de configuration</title>

  <variablelist>
   <varlistentry>
    <term>
     <varname>pg_prewarm.autoprewarm</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm</varname> configuration parameter</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      Contrôle si le serveur doit lancer le worker autoprewarm.
      La valeur par défaut est « on ». Ce paramètre ne peut être positionné
      qu'au démarrage du serveur.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
    <term>
     <varname>pg_prewarm.autoprewarm_interval</varname> (<type>int</type>)
     <indexterm>
      <primary><varname>pg_prewarm.autoprewarm_interval</varname> configuration parameter</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      Il s'agit de l'intervalle entre les mises à jour de
      <literal>autoprewarm.blocks</literal>.
      La valeur par défaut est de 300 secondes. Si la valeur est 0, le fichier
      ne sera pas écrit à intervalles réguliers, mais seulement à l'extinction
      du serveur.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

 </sect2>

 <sect2>
  <title>Auteur</title>

  <para>
   Robert Haas <email>rhaas@postgresql.org</email>
  </para>
 </sect2>

</sect1>
