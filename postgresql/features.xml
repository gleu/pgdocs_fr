<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<appendix id="features">
 <title>Conformité SQL</title>

 <para>
  Cette section explique dans quelle mesure <productname>PostgreSQL</productname>
  se conforme à la norme SQL en vigueur. Les informations qui suivent ne représentent pas
  une liste exhaustive de conformance, mais présentent les thèmes principaux
  utilement et raisonnablement détaillés.
 </para>

 <para>
  Le nom complet du standard SQL est ISO/IEC 9075 <quote>Database Language
   SQL</quote>. Le standard est modifié de temps en temps. La mise à jour
  la plus récente est apparue en 2016. La version 2016 version a la référence
  ISO/IEC 9075:2016, ou plus simplement SQL:2016. Les versions antérieures sont
  SQL:2011, SQL:2008, SQL:2006, SQL:2003, SQL:1999 et SQL-92.
  Chaque version remplace la précédente. Il n'y a donc aucun mérite à revendiquer
  une compatibilité avec une version antérieure du standard.
 </para>

 <para>
  Le développement de <productname>PostgreSQL</productname> respecte le
  standard en vigueur, tant que celui-ci ne s'oppose pas aux fonctionnalités
  traditionnelles ou au bon sens. Un grand nombre des fonctionnalités
  requises par le standard SQL sont
  déjà supportées. Parfois avec une syntaxe ou un fonctionnement légèrement
  différents. Une meilleure compatibilité est attendue pour les prochaines
  versions.
 </para>

 <para>
  <acronym>SQL-92</acronym> définit trois niveaux de conformité&nbsp;:
  basique (<foreignphrase>Entry</foreignphrase>), intermédiaire
  (<foreignphrase>Intermediate</foreignphrase>) et complète
  (<foreignphrase>Full</foreignphrase>).
  La majorité des systèmes de gestion de bases
  de données se prétendaient compatibles au standard <acronym>SQL</acronym>
  dès lors qu'ils se conformaient au niveau Entry&nbsp;; l'ensemble
  des fonctionnalités des niveaux Intermediate et Full étaient, soit trop
  volumineux, soit en conflit avec les fonctionnalités implantées.
 </para>

 <para>
  À partir de <acronym>SQL99</acronym>, le standard SQL définit un
  vaste ensemble de fonctionnalités individuelles à la place des trois niveaux
  de fonctionnalités définis dans <acronym>SQL-92</acronym>. Une
  grande partie représente les fonctionnalités <quote>centrales</quote> que
  chaque implantation conforme de SQL doit fournir. Les fonctionnalités
  restantes sont purement optionnelles. Certaines sont regroupées au sein de
  <quote>paquetages</quote> auxquels une implantation peut se déclarer conforme.
  On parle alors de conformité à un groupe de fonctionnalités.
 </para>

 <para>
  Les versions standards commençant avec <acronym>SQL:2003</acronym> sont
  également divisé en parties.
  Chacune est connue par un pseudonyme. Leur numérotation n'est pas
  consécutive&nbsp;:

  <itemizedlist>
   <listitem><para>ISO/IEC 9075-1 Framework (SQL/Framework)</para><indexterm><primary>SQL/Framework</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-2 Foundation (SQL/Foundation)</para><indexterm><primary>SQL/Foundation</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-3 Call Level Interface (SQL/CLI)</para><indexterm><primary>SQL/CLI</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-4 Persistent Stored Modules (SQL/PSM)</para><indexterm><primary>SQL/PSM</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-9 Management of External Data (SQL/MED)</para><indexterm><primary>SQL/MED</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-10 Object Language Bindings (SQL/OLB)</para><indexterm><primary>SQL/OLB</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-11 Information and Definition Schemas (SQL/Schemata)</para><indexterm><primary>SQL/Schemata</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-13 Routines and Types using the Java Language (SQL/JRT)</para><indexterm><primary>SQL/JRT</primary></indexterm></listitem>
   <listitem><para>ISO/IEC 9075-14 XML-related specifications (SQL/XML)</para><indexterm><primary>SQL/XML</primary></indexterm></listitem>
  </itemizedlist>
 </para>

 <para>
  <productname>PostgreSQL</productname> couvre les parties 1, 2, 9, 11 et 14.
  La partie 3 est couverte par l'interface ODBC, et la partie 13 est couverte
  par le plugin PL/Java, mais une conformance exacte n'est pas actuellement
  vérifiée par ses composants. Il n'y a pas actuellement d'implantations des
  parties 4 et 10 pour <productname>PostgreSQL</productname>.
 </para>

 <para>
  PostgreSQL supporte la plupart des fonctionnalités majeures de SQL:2016. Sur
  les 179 fonctionnalités requises pour une conformité
  &laquo;&nbsp;centrale&nbsp;&raquo; complète (<foreignphrase>full Core
   conformance</foreignphrase>), PostgreSQL se conforme à plus de
  160. De plus, il existe une longue liste de
  fonctionnalités optionelles supportées. À la date de rédaction de ce
  document, aucune version de quelque système de gestion de bases de
  données que ce soit n'affiche une totale conformité au cœur de SQL:2016.
 </para>

 <para>
  Les deux sections qui suivent présentent la liste des
  fonctionnalités supportées par <productname>PostgreSQL</productname> et
  celle des fonctionnalités définies dans <acronym>SQL:2016</acronym> qui
  ne sont pas encore prises en compte. Ces deux listes sont
  approximatives&nbsp;: certains détails d'une fonctionnalité présentée comme
  supportée peuvent ne pas être conformes, alors que de grandes parties d'une
  fonctionnalité non supportée peuvent être implantées.
  La documentation principale fournit les informations précises sur ce qui est,
  ou non, supporté.
 </para>

 <note>
  <para>
   Les codes de fonctionnalité contenant un tiret sont des sous-fonctionnalités.
   Si une sous-fonctionnalité n'est pas supportée, la fonctionnalité
   elle-même sera déclarée non supportée, alors même que d'autres
   de ses sous-fonctionnalités le sont.
  </para>
 </note>

 <sect1 id="features-sql-standard">
  <title>Fonctionnalités supportées</title>

  <para>
   <informaltable>
    <tgroup cols="4">
     <colspec colnum="1" colwidth="0.6*"/>
     <colspec colnum="2" colwidth="0.6*"/>
     <colspec colnum="3" colwidth="1.8*"/>
     <colspec colnum="4" colwidth="1.0*"/>
     <thead>
      <row>
       <entry>Identifiant</entry>
       <entry>Paquetage</entry>
       <entry>Description</entry>
       <entry>Commentaire</entry>
      </row>
     </thead>

     &features-supported;

    </tgroup>
   </informaltable>
  </para>
 </sect1>

 <sect1 id="unsupported-features-sql-standard">
  <title>Fonctionnalités non supportées</title>

  <para>
   Les fonctionnalités suivantes définies dans <acronym>SQL:2011</acronym> ne
   sont pas implantées dans cette version de
   <productname>PostgreSQL</productname>. Dans certains cas, des fonctionnalités
   similaires sont disponibles.
   <informaltable>
    <tgroup cols="4">
     <colspec colnum="1" colwidth="0.6*"/>
     <colspec colnum="2" colwidth="0.6*"/>
     <colspec colnum="3" colwidth="1.8*"/>
     <colspec colnum="4" colwidth="1.0*"/>
     <thead>
      <row>

       <entry>Identifiant</entry>
       <entry>Paquetage</entry>
       <entry>Description</entry>
       <entry>Commentaire</entry>
      </row>
     </thead>

     &features-unsupported;

    </tgroup>
   </informaltable>
  </para>
 </sect1>

  <sect1 id="xml-limits-conformance">
      <title>Limitations XML et conformité à SQL/XML</title>

   <indexterm>
    <primary>SQL/XML</primary>
    <secondary>limitations et conformité</secondary>
   </indexterm>

   <para>
    Des révisions significatives aux spécifications liées à XML dans ISO/IEC
    9075-14 (SQL/XML) ont été introduites par SQL:2006.
    L'implémentation <productname>PostgreSQL</productname>du type de données
    XML et des fonctions associées suivent en grande partie l'édition
    précédente de 2003, avec quelques emprunts dans les éditions suivantes. En
    particulier :
    <itemizedlist>
     <listitem>
      <para>
       Où le standard actuel fournit une famille de types de données XML pour
       contenir un <quote>document</quote> ou <quote>content</quote> dans des
       variantes non typées ou typées par schéma XML, et un type
       <type>XML(SEQUENCE)</type> pour contenir des parties arbitraires de
       contenu XML, <productname>PostgreSQL</productname> fournir le seul type
       <type>xml</type>, qui peut contenir un <quote>document</quote> ou
       <quote>content</quote>. Il n'y a aucun équivalent au type
       <quote>sequence</quote>standard.
      </para>
     </listitem>

     <listitem>
      <para>
       <productname>PostgreSQL</productname> fournit deux fonctions introduites
       par SQL:2006, mais dans des variantes qui utilisent le langage XPath
       1.0, plutôt que XML Query comme spécifié pour elles dans le standard.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    Cette section présente certaines des différences de résultat que vous
    pourriez rencontrer.
   </para>

   <sect2 id="functions-xml-limits-xpath1">
    <title>Les requêtes sont limitées à XPath 1.0</title>

    <para>
     Les fonctions spécifiques à <productname>PostgreSQL</productname>
     <function>xpath()</function> et <function>xpath_exists()</function>
     requêtent des documents XML en utilisant le langage XPath.
     <productname>PostgreSQL</productname> fournit également des variantes pour
     XPath uniquement des fonctions du standard <function>XMLEXISTS</function>
     et <function>XMLTABLE</function>, qui officiellement utilisent le langage
     XQuery. Pour toutes ces fonctions, <productname>PostgreSQL</productname>
     se repose sur la bibliothèque <application>libxml2</application>,
     qui ne fournit que XPath 1.0.
    </para>

    <para>
     Il y a une forte connexion entre le langage XQuery et XPath version 2.0 et
     supérieure : toute expression qui est syntaxiquement valide et s'exécute
     avec succès avec les deux produisent le même résultat (avec une exception
     mineure pour les expressions contenant des références de caractères
     numériques ou des références d'entités prédéfinies, que XQuery remplace
     par le caractère correspondant alors que XPath n'y touche pas). Mais il
     n'y a pas une telle connexion entre ces langages et XPath 1.0; c'était un
     précédent langage qui diffèrent sur de nombreux aspects.
    </para>

    <para>
     Il y a deux catégories de limitations à garder à l'esprit : la restriction
     de XQuery à XPath pour les fonctions spécifiées dans le standard SQL ainsi
     que la restriction de XPath pour la version 1.0 à la fois pour le standard
     et pour les fonctions
     <productname>PostgreSQL</productname> spécifiques.
    </para>

    <sect3>
     <title>Restriction de XQuery à XPath</title>

     <para>
      Les fonctionnalités de XQuery allant au délà de XPath incluent :

      <itemizedlist>
       <listitem>
        <para>
         Les expressions XQuery peuvent construire et retourner de nouveaux
         nœuds XML, en plus de toutes les valeurs XPath possibles. XPath peut
         créer et retourner des valeurs des types atomiques (nombres, chaînes
         et ainsi de suite), mais peuvent uniquement retourner des nœuds XML
         qui étaient déjà présents dans les documents fournis en entrées de
         l'expressions.
        </para>
       </listitem>

       <listitem>
        <para>
         XQuery dipose de concepts pour l'itération, tri et regroupement.
        </para>
       </listitem>

       <listitem>
        <para>
         XQuery permet la déclaration et l'utilisation de fonctions locales.
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <para>
      Les versions récentes de XPath commencent à offrir des possibilités qui
      se chevauchent avec celle-ci (comme un <function>for-each</function> de
      style fonctionnel, des fonctions anonyms et
      <function>parse-xml</function> pour créer un nœud depuis une chaîne),
      mais ces fonctionnalités ne sont pas disponibles avant XPath 3.0.
     </para>
    </sect3>

    <sect3 id="xml-xpath-1-specifics">
     <title>Restriction de XPath pour la version 1.0</title>

     <para>
      Pour les développeurs familiers avec XQuery et XPath 2.0 ou plus, XPath
      1.0 présente un certain nombres de différences :

      <itemizedlist>
       <listitem>
        <para>
         Le type fondamental d'une expression XQuery/XPath, la
         <type>sequence</type>, qui peut contenir des nœuds XML, des valeurs
         atomiques ou les deux, n'existe pas dans XPath 1.0. Une expression 1.0
         peut uniquement produire des nœud-ensemble (contenant zéro ou plus
         nœeuds XML), ou une seule valeur atomique.
        </para>
       </listitem>

       <listitem>
        <para>
          Contrairement à une séquence XQuery/XPath, qui peut contenir
          n'importe quel élément voulu dans n'importe quel ordre voulu, un
          nœud-ensemble XPath 1.0 n'a aucune garantie sur l'ordre et, comme
          n'importe quel ensemble, n'autorise pas de multiples occurences d'un
          même élément.
         <note>
          <para>
           La bilbiothèque <application>libxml2</application> semble toujours
           retourner des nœud-ensembles à <productname>PostgreSQL</productname>
           avec leurs membres dans le même ordre relative qu'ils avaient dans
           le document en entrée. Sa documentation ne valide pas ce
           comportement, et une expression XPath 1.0 ne peut pas le contrôler.
          </para>
         </note>
        </para>
       </listitem>

       <listitem>
        <para>
         Bien que XQuery/XPath fournisse tous les types définis dans XML Schema
         et de nombreux opérateurs et fonctions au dessus de ces types, XPath
         1.0 n'a que le nœeud-ensemble et les trois types atomiques
         <type>boolean</type>, <type>double</type>, et <type>string</type>.
        </para>
       </listitem>

       <listitem>
        <para>
         XPath 1.0 n'a pas d'opérateur conditionnel. Une expression
         XQuery/XPath telle que <literal>if ( hat ) then hat/@size else "no hat"</literal>
         n'a pas d'équivalent avec XPath 1.0.
        </para>
       </listitem>

       <listitem>
        <para>
         XPath 1.0 n'a pas d'opérateur de comapraison de tri pour les chaînes
         de caractère. has no ordering comparison operator for strings.
         <literal>"cat" &lt; "dog"</literal> et
         <literal>"cat" &gt; "dog"</literal> sont tous les deux faux, car
         chacun est une comparaison numérique de deux <literal>NaN</literal>s.
         En comparaison, <literal>=</literal> et <literal>!=</literal>
         comparent les chaînes en tant que chaînes.
        </para>
       </listitem>

       <listitem>
        <para>
         XPath 1.0 brouille la distinction entre
         <firstterm>value comparisons</firstterm> et
         <firstterm>general comparisons</firstterm> tels que XQuery/XPath les
         définis. <literal>sale/@hatsize = 7</literal> et
         <literal>sale/@customer = "alice"</literal> sont tous les deux
         existentiellement des comparaisons quantifiées, vraies s'il y a au
         moins un <literal>sale</literal> avec la valeur donnée pour
         l'attribute, mais <literal>sale/@taxable = false()</literal> est
         comparaison de valeur de la <firstterm>valeur booléenne
         effective</firstterm> d'un nœeud-ensemble entier.
         C'est uniquement vrai si aucun <literal>sale</literal> n'a un attribut
         <literal>taxable</literal>.
        </para>
       </listitem>

       <listitem>
        <para>
         Dans le modèle de données XQuery/XPath, un <firstterm>nœud
         document</firstterm> peut avoir soit une forme de document
         (c'est-à-dire exactement un élément de premier niveau, avec
         uniquement des commentaires et des instructions de traitement en
         dehors de celui-ci) ou une forme de contenu (avec ces contraintes
         relachées). Son équivalent dans XPath 1.0, le
         <firstterm>nœud racine</firstterm>, ne peut être que dans une forme de
         document. C'est en partie la raison pour laquelle une valeur
         <type>xml</type> passée comme object de contexte à n'importe laquelle
         des fonnctions <productname>PostgreSQL</productname> basée sur XPath
         doit être dans une forme de document.
        </para>
       </listitem>
      </itemizedlist>
     </para>

     <para>
      Les différences mises en évidences ici ne représentent pas l'intégralité
      des différences. Avec XQuery et les versions 2.0 et supérieures de
      XPath, il y a un mode de compatibilité XPath 1.0, et les listes W3C de
      <ulink url='https://www.w3.org/TR/2010/REC-xpath-functions-20101214/#xpath1-compatibility'>changement de bilbiothèques de fonction</ulink>
      et
      <ulink url='https://www.w3.org/TR/xpath20/#id-backwards-compatibility'>changements du langage</ulink>
      appliqués dans ce mode offrent un compte rendu plus complet (mais
      toujours pas exhaustif) des différences. Le mode de compatibilité ne peut
      pas rendre les langages supérieures exactement équivalents à XPath 1.0.
     </para>
    </sect3>

    <sect3 id="functions-xml-limits-casts">
     <title>Correspondances entre types de données et valeurs SQL et XML</title>

     <para>
      Avec SQL:2006 et ultérieur, les deux sens de conversion entre les types
      de données standard SQL et les types XML Schema sont précisément
      spécifiés. Cependant, les règles sont exprimées en utilisant les types et
      sémantiques de XQuery/XPath, et n'ont pas d'application directe pour les
      différents modèles de XPath 1.0.
     </para>

     <para>
      Quand <productname>PostgreSQL</productname> fait correspondre des valeurs
      de données SQL vers XML (par exemple avec
      <function>xmlelement</function>), ou XML vers SQL (par exemple comme les
      colonnes en sortie de <function>xmltable</function>), à l'exception de
      quelques cas traités spécifiquement,
      <productname>PostgreSQL</productname> part simplement du principe que
      le type de données XML chaîne de caractère XPath 1.0 sera valide en tant
      que forme d'entrée texte du type de données SQL, et réciproquement.
      Cette règle à l'avantage d'être simple tout en produisant, pour de
      nombreux types de données, des résultats similaires aux correspondances
      spécifiées dans le standard.
     </para>

     <para>
      Quand l'interopérabilité avec les autres systèmes est une préoccupation,
      pour certains types de données, il peut ne pas être nécessaire d'utiliser
      explicitement des fonctions de formatage de type de données (telles que
      celles dans <xref linkend="functions-formatting"/>) pour produire les
      correspondances standard.
     </para>
    </sect3>
   </sect2>

   <sect2 id="functions-xml-limits-postgresql">
    <title
     Limites accidentelles de l'implémentation
    </title>

    <para>
     Cette section concerne les limites qui ne sont pas inhérentes à la
     bibliothèque
     <application>libxml2</application> library, mais qui s'appliquent à
     l'implémentation actuelle dans <productname>PostgreSQL</productname>.
    </para>

    <sect3>
     <title>Seul le mécanisme de passage <literal>BY VALUE</literal> est
      supporté</title>

     <para>
      Le standard SQL définit deux <firstterm>mécanismes de passage</firstterm>
      qui s'appliquent quand un argument XML est passé de SQL à une fonction
      XML ou en recevant un résultat : <literal>BY REF</literal>, pour lequel
      une valeur XML particulière retient son identité de nœud, et
      literal>BY VALUE</literal>, pour lequel le contenu du XML est passé mais
      l'identité du nœud n'est pas préservée. Un mécanisme peut être spécifié
      avant une liste de paramètres, comme le mécanisme par défaut pour tous
      ceux-ci, ou après n'importe lequel des paramètres, pour surcharger le
      mécanisme par défaut.
     </para>

     <para>
      Pour illustrer la différence, si
      <replaceable>x</replaceable> est une valeur XML, ces deux requêtes dans
      un environnement SQL:2006 produireaient respectivement vrai et faux :

<programlisting>
SELECT XMLQUERY('$a is $b' PASSING BY REF <replaceable>x</replaceable> AS a, <replaceable>x</replaceable> AS b NULL ON EMPTY);
SELECT XMLQUERY('$a is $b' PASSING BY VALUE <replaceable>x</replaceable> AS a, <replaceable>x</replaceable> AS b NULL ON EMPTY);
</programlisting>
     </para>

     <para>
      <productname>PostgreSQL</productname> acceptera
      <literal>BY VALUE</literal> ou <literal>BY REF</literal> dans un
      construct <function>XMLEXISTS</function> ou
      <function>XMLTABLE</function>, mais les ignorera. Le type de données
      <type>xml</type> a une représentation sérialisée en chaine de caractères,
      il n'y a donc pas d'identité de nœud à préserver, et le passage est dans
      les fait toujours <literal>BY VALUE</literal>.
     </para>
    </sect3>

    <sect3>
     <title>Impossibilité de passer des paramètres nommés aux requêtes</title>

     <para>
      Le support des fonctions basées sur XPath supportent de passer un
      paramètre afin d'être utilisé comme l'item du contexte de l'expression
      XPath, mais ne supporte pas de passer des valeurs supplémentaires pour
      être disponibles dans l'expression comme paramètre nommés.
     </para>
    </sect3>

    <sect3>
     <title>Pas de type <type>XML(SEQUENCE)</type></title>

     <para>
      Le type de données<productname>PostgreSQL</productname> <type>xml</type>
      ne peut contenir qu'une valeur dans une forme <literal>DOCUMENT</literal>
      ou <literal>CONTENT</literal>. Un item de contexte d'expression
      XQuery/XPath expression doit être un unique nœud XML ou une valeur
      atomique, mais XPath 1.0 le restreint en plus à n'être qu'un nœud XML, et
      n'a aucun type de nœud autorisant <literal>CONTENT</literal>. Le résultat
      est qu'un <literal>DOCUMENT</literal> formé comme il faut est la seule
      forme de valeur XML que <productname>PostgreSQL</productname> peut
      fournir à un item de contexte XPath.
     </para>
    </sect3>
   </sect2>
  </sect1>

</appendix>
