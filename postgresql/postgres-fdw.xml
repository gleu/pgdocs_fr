<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="postgres-fdw" xreflabel="postgres_fdw">
 <title>postgres_fdw</title>

 <indexterm zone="postgres-fdw">
  <primary>postgres_fdw</primary>
 </indexterm>

 <para>
  Le module <filename>postgres_fdw</filename> fournit le wrapper de données
  distantes <literal>postgres_fdw</literal>, dont le but est de données accès
  à des données enregistrées dans des serveurs
  <productname>PostgreSQL</productname> externes.
 </para>

 <para>
  Les fonctionnalités proposées par ce module sont à peu près les mêmes que
  celles proposées par le module <xref linkend="dblink"/>. Mais
  <filename>postgres_fdw</filename> fournit une syntaxe plus transparente et
  respectant les standards pour l'accès à des tables distantes. Elle peut
  aussi donner de meilleures performances dans beaucoup de cas.
 </para>

 <para>
  Pour préparer un accès distant en utilisant <filename>postgres_fdw</filename>&nbsp;:
  <orderedlist spacing="compact">
   <listitem>
    <para>
     Installez l'extension  <filename>postgres_fdw</filename> en utilisant
     <xref linkend="sql-createextension"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     Créez un objet serveur distant en utilisant <xref linkend="sql-createserver"/>,
     pour représenter chaque base distante à laquelle vous souhaitez vous
     connecter. Indiquez les informations de connexions, sauf
     <literal>user</literal> et <literal>password</literal>, comme options de
     l'objet serveur.
    </para>
   </listitem>
   <listitem>
    <para>
     Créez une correspondance d'utilisateur avec <xref
     linkend="sql-createusermapping"/> pour chaque utilisateur de la base que
     vous voulez autoriser à accéder à un serveur distant. Indiquez le nom
     et le mot de passe de l'utilisateur distant avec les options
     <literal>user</literal> et <literal>password</literal> de la correspondance
     d'utilisateur.
    </para>
   </listitem>
   <listitem>
    <para>
     Créez une table distante avec <xref linkend="sql-createforeigntable"/>
     pour chaque table distante que vous voulez utilisé. Les colonnes de la
     table distante doit correspondre aux colonnes de la table sur le serveur
     distant. Néanmoins, vous pouvez utiliser un nom de table et des noms de
     colonne différents de ceux de la table sur le serveur distant si vous
     indiquez les bons noms de colonne en options de la table distante.
    </para>
   </listitem>
  </orderedlist>
 </para>

 <para>
  Maintenant, vous avez seulement besoin de <command>SELECT</command> sur la
  table distante pour accéder aux données de la table du serveur distant. Vous
  pouvez aussi modifier la table sur le serveur distant en utilisant les
  commandes <command>INSERT</command>, <command>UPDATE</command> et
  <command>DELETE</command>. (Bien sûr, l'utilisateur utilisé pour la connexion
  au serveur distant doit avoir le droits de faire tout cela.)
 </para>

 <para>
  Il est généralement recommandé que les colonnes d'une table distante soient
  déclarées avec exactement les mêmes types de données et le même collationnement
  que celles utilisées pour les colonnes référencées dans le table du serveur
  distant. Bien que <filename>postgres_fdw</filename> est actuellement assez
  lâche sur les conversions de type de données, des anomalies sémantiques
  surprenantes peuvent survenir quand les types ou les collationnements ne
  correspondent pas dans le cas où le serveur distant interprète légèrement
  différemment les clauses <literal>WHERE</literal>.
 </para>

 <para>
  Notez qu'une table distante peut être déclarée avec moins de colonnes ou avec
  les colonnes dans un ordre différent. La correspondance des colonnes sur
  la table du serveur distant se fait par nom, et non pas par position.
 </para>

 <sect2>
  <title>Options FDW de postgres_fdw</title>

  <sect3>
   <title>Options de connexions</title>

   <para>
    Un serveur distant utilisant le wrapper de données distantes
    <filename>postgres_fdw</filename> peut avoir les mêmes options que celles
    acceptées par <application>libpq</application> dans les chaînes de connexion
    comme décrit dans <xref linkend="libpq-paramkeywords"/>. Cependant, ces
    options ne sont pas autorisées&nbsp;:

    <itemizedlist spacing="compact">
     <listitem>
      <para>
       <literal>user</literal> et <literal>password</literal> (spécifiez-les au
       niveau de la correspondance d'utilisateur)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>client_encoding</literal> (ceci est configuré automatiquement à
       partir de l'encodage du serveur local)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>fallback_application_name</literal> (toujours configuré à
       <literal>postgres_fdw</literal>)
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    Seuls les superutilisateurs peuvent se connecter à un serveur distant sans
    authentification par mot de passe. Donc spécifiez toujours l'option
    <literal>password</literal> pour les correspondances d'utilisateur
    appartenant aux utilisateurs simples.
   </para>
  </sect3>

  <sect3>
   <title>Options pour le nom de l'objet</title>

   <para>
    Ces options peuvent être utilisées pour contrôler les noms utilisés dans
    les requêtes SQL envoyées au serveur <productname>PostgreSQL</productname>
    distant. Ces options sont nécessaires lorsqu'une table distante est créée
    avec des noms différents de ceux de la table du serveur distant.
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>schema_name</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour une table distante, donne le
       nom du schéma à utiliser pour la table du serveur distant. Si cette
       option est omise, le nom du schéma de la table distante est utilisé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>table_name</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour une table distante, donne le
       nom de la table à utiliser pour la table du serveur distant. Si cette
       option est omise, le nom de la table distante est utilisé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>column_name</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour une colonne d'une table distante,
       donne le nom de la colonne à utiliser pour la colonne de la table du serveur
       distant. Si cette option est omise, le nom de la colonne de la table
       distante est utilisé.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

  </sect3>

  <sect3>
   <title>Options d'estimation du coût</title>

   <para>
    <filename>postgres_fdw</filename> récupère des données distantes en exécutant
    des requêtes sur des serveurs distants. Idéalement, le coût estimé du parcours
    d'une table distante devrait être celui occasionné par le parcours de la
    table sur le serveur distant, et un supplément causé par la communication entre
    le serveur local et le serveur distant. Le moyen le plus fiable d'obtenir
    une telle estimation est de demander au serveur distant, puis d'ajouter
    quelque chose pour le supplément. Pour des requêtes simples, cela ne vaut
    pas le coût d'une requête supplémentaire vers le serveur distant. Donc
    <filename>postgres_fdw</filename> propose les options suivantes pour
    contrôler la façon dont l'estimation de coût est faite&nbsp;:
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>use_remote_estimate</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour une table distante ou pour
       un serveur distant, contrôle si <filename>postgres_fdw</filename>
       exécute des commandes <command>EXPLAIN</command> distantes pour obtenir
       les estimations de coût. Une configuration sur la table distante surcharge
       celle sur le serveur, mais seulement pour cette table. La valeur par
       défaut est <literal>false</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_startup_cost</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour un serveur distant, est une
       valeur numérique qui est ajoutée au coût de démarrage estimé de tout
       parcours de table distante sur ce serveur. Cela représente le coût
       supplémentaire causé par l'établissement d'une connexion, l'analyse et
       la planification de la requête du côté du serveur distant, etc. La valeur
       par défaut est <literal>100</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_tuple_cost</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour un serveur distant, est une
       valeur numérique qui est utilisée comme coût supplémentaire par ligne
       pour les parcours de la table distante sur ce serveur. Cela représente
       le coût supplémentaire associé au transfert de données entre les
       serveurs. Vous pouvez augmenter ou réduire ce nombre pour refléter
       les latences réseau vers le serveur distant. La valeur par défaut est
       <literal>0.01</literal>.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

   <para>
    Quand <literal>use_remote_estimate</literal> est vrai,
    <filename>postgres_fdw</filename> obtient le nombre de lignes et les
    estimations de coût à partir du serveur distant. Il ajoute
    <literal>fdw_startup_cost</literal> et <literal>fdw_tuple_cost</literal>
    aux estimations de coût. Quand <literal>use_remote_estimate</literal> est
    faux, <filename>postgres_fdw</filename> réalise le décompte local des lignes
    ainsi que l'estimation de coût, puis ajoute <literal>fdw_startup_cost</literal>
    et <literal>fdw_tuple_cost</literal> aux estimations de coût. Cette
    estimation locale a peu de chances d'être précise sauf si des copies locales
    des statistiques de la table distante sont disponibles. Exécuter
    <xref linkend="sql-analyze"/> sur la table distante permet de mettre à jour
    les statistiques locales&nbsp;; cela exécute un parcours sur la table
    distante, puis calcule et enregistre les statistiques comme si la table
    était locale. Garder des statistiques locales peut être utile pour réduire
    la surcharge de planification par requête pour une table distante mais, si
    la table distante est fréquemment mise à jour, les statistiques locales
    seront rapidement obsolètes.
   </para>

  </sect3>

  <sect3>
   <title>Options de mise à jour</title>

   <para>
    Par défaut, toutes les tables distantes utilisant <filename>postgres_fdw</filename>
    sont supposées comme étant modifiables. Cela peut se surcharger en utilisant
    l'option suivante&nbsp;:
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>updatable</literal></term>
     <listitem>
      <para>
       Cette option contrôle si <filename>postgres_fdw</filename> autorise les
       tables distantes à être modifiées en utilisant les commandes
       <command>INSERT</command>, <command>UPDATE</command> et
       <command>DELETE</command>. Cette option est utilisable sur une table
       distante ou sur un serveur distant. La configuration de cette option au
       niveau table surcharge celle au niveau serveur. La valeur par défaut
       est <literal>true</literal>.
      </para>

      <para>
       Bien sûr, si la table distante n'est pas modifiable, une erreur surviendra
       malgré tout. L'utilisation de cette option permet principalement que
       l'erreur soit renvoyée localement, sans avoir à tenter l'exécution sur
       le serveur distant. Notez néanmoins que les vues
       <literal>information_schema</literal> indiqueront que la table distante
       est modifiable ou pas, suivant la configuration de cette option, et donc
       sans vérification du serveur distant.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </sect3>
 </sect2>

 <sect2>
  <title>Gestion des connexions</title>

  <para>
   <filename>postgres_fdw</filename> établit une connexion au serveur distant
   lors de la première requête qui utilise une table distante associée avec
   le serveur distant. La connexion est conservée et réutilisée pour les
   requêtes suivants de la même session. Néanmoins, si plusieurs identités
   d'utilisateur (correspondances d'utilisateur) sont utilisées pour
   accéder au serveur distant, une connexion est établie pour chaque
   correspondance d'utilisateur.
  </para>
 </sect2>

 <sect2>
  <title>Gestion des transactions</title>

  <para>
   Lorsqu'une requête référence des tables sur un serveur distant,
   <filename>postgres_fdw</filename> ouvre une transaction sur le serveur
   distant si une transaction n'est pas déjà ouverte pour la transaction
   locale en cours. La transaction distante est validée ou annulée suivant
   que la transaction locale est validée ou annulée. Les points de
   sauvegardes sont gérés de la même façon en créant les points de
   sauvegarde correspondants.
  </para>

  <para>
   La transaction distante utilise le niveau d'isolation
   <literal>SERIALIZABLE</literal> quand la transaction locale a le niveau
   <literal>SERIALIZABLE</literal>. Dans les cas contraires, elle utilise le
   niveau <literal>REPEATABLE READ</literal>. Ce choix assure que, si une requête
   réalise plusieurs parcours de table sur le serveur distant, elle obtiendra
   des résultats cohérents pour tous les parcours. Une conséquence est que les
   requêtes successives à l'intérieur d'une seule transaction verront les mêmes
   données provenant du serveur distant, même si des mises à jour sont réalisées
   en même temps avec l'activité standard du serveur. Ce comportement serait
   attendue de toute façon si la transaction locale utilise le niveau d'isolation
   <literal>SERIALIZABLE</literal> ou <literal>REPEATABLE READ</literal> mais
   elle pourrait surprendre pour une transaction locale en niveau <literal>READ
   COMMITTED</literal>. Une prochaine version de
   <productname>PostgreSQL</productname> pourrait modifier ce comportement.
  </para>
 </sect2>

 <sect2>
  <title>Optimisation des requêtes distantes</title>

  <para>
   <filename>postgres_fdw</filename> tente d'optimiser les requêtes distantes
   pour réduire la quantité de données transférées depuis les serveurs distants.
   Cela se fait en envoyant les clauses <literal>WHERE</literal> au serveur
   distant pour exécution, et en ne récupérant que les colonnes nécessaires
   pour la requête courante. Pour réduire le risque de mauvaise exécution des
   requêtes, les clauses <literal>WHERE</literal> ne sont pas envoyées au serveur
   distant sauf si elles utilisent seulement des types de données, opérateurs
   et fonctions internes. Les opérateurs et les fonctions dans les clauses
   doivent en plus être <literal>IMMUTABLE</literal>.
  </para>

  <para>
   La requête envoyée au serveur distant pour exécution peut être examinée en
   utilisant <command>EXPLAIN VERBOSE</command>.
  </para>
 </sect2>

 <sect2>
  <title>Compatibilité entre versions</title>

  <para>
   <filename>postgres_fdw</filename> peut être utilisé avec les serveurs distants
   de version 8.3 et ultérieures. En lecture seule, il est possible d'aller aussi
   loin que la 8.1. Néanmoins, une limitation est que
   <filename>postgres_fdw</filename> assume généralement que les fonctions et
   opérateurs internes immutables sont sûrs pour être envoyés au serveur distant
   pour exécution s'ils apparaissent dans une clause <literal>WHERE</literal> de
   la table distante. Du coup, une fonction interne ajoutée depuis la sortie du
   serveur distant pourrait être envoyée pour exécution, résultant en un
   message d'erreur indiquant que la fonction n'existe pas (<quote>function does
   not exist</quote>) ou une erreur similaire. Ce type d'échec peut être
   contourné en réécrivant la requête, par exemple en embarquant la table
   distance dans un sous-<literal>SELECT</literal> avec <literal>OFFSET 0</literal>
   comme optimisation, et plaçant la fonction ou l'opérateur problématique
   en dehors du sous-<literal>SELECT</literal>.
  </para>
 </sect2>

 <sect2>
  <title>Exemples</title>

  <para>
   Voici un exemple de création d'une table distante avec
   <literal>postgres_fdw</literal>. Tout d'abord, il faut installer l'extension&nbsp;:
  </para>

<programlisting>
CREATE EXTENSION postgres_fdw;
</programlisting>

  <para>
   Ensuite, il faut créer un serveur distant avec <xref linkend="sql-createserver"/>.
   Dans cet exemple nous souhaitons nous connecter à un serveur
   <productname>PostgreSQL</productname> sur l'hôte <literal>192.83.123.89</literal>
   écoutant sur le port <literal>5432</literal>.  La base de données sur le
   serveur distant sur laquelle la connexion est faite s'appelle
   <literal>foreign_db</literal>&nbsp;:

<programlisting>
CREATE SERVER foreign_server
        FOREIGN DATA WRAPPER postgres_fdw
        OPTIONS (host '192.83.123.89', port '5432', dbname 'foreign_db');
</programlisting>
  </para>

  <para>
   Une correspondance d'utilisateur, définie avec <xref linkend="sql-createusermapping"/>,
   est égaleement nécessaire pour identifier le rôle qui sera utilisé sur le
   serveur distant&nbsp;:

<programlisting>
CREATE USER MAPPING FOR local_user
        SERVER foreign_server
        OPTIONS (user 'foreign_user', password 'password');
</programlisting>
  </para>

  <para>
   Il est maintenant possible de créer une table distante avec
   <xref linkend="sql-createforeigntable"/>.  Dans cette exemple nous
   souhaitons accéder à la table nommée <structname>some_schema.some_table</structname>
   sur le serveur distant.  Le nom local pour celle-ci sera
   <structname>foreign_table</structname>&nbsp;:

<programlisting>
CREATE FOREIGN TABLE foreign_table (
        id serial NOT NULL,
        data text
)
        SERVER foreign_server
        OPTIONS (schema_name 'some_schema', table_name 'some_table');
</programlisting>

   Il est essentiel que les types de données et autres propriétées des colonnes
   déclarée dans <command>CREATE FOREIGN TABLE</command> correspondent à la
   vraie table distante. Les noms des colonnes doivent également correspondre,
   à moins que des options <literal>column_name</literal> soient attachées aux
   colonnes individuelles pour montrer comment elles sont nommées sur la table
   distante.
  </para>
 </sect2>

 <sect2>
  <title>Auteur</title>
  <para>
   Shigeru Hanada <email>shigeru.hanada@gmail.com</email>
  </para>
 </sect2>

</sect1>
