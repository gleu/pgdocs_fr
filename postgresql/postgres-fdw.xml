<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="postgres-fdw" xreflabel="postgres_fdw">
 <title>postgres_fdw</title>

 <indexterm zone="postgres-fdw">
  <primary>postgres_fdw</primary>
 </indexterm>

 <para>
  Le module <filename>postgres_fdw</filename> fournit le wrapper de données
  distantes <literal>postgres_fdw</literal>, dont le but est de donner accès
  à des données enregistrées dans des serveurs
  <productname>PostgreSQL</productname> externes.
 </para>

 <para>
  Les fonctionnalités proposées par ce module sont à peu près les mêmes que
  celles proposées par le module <xref linkend="dblink"/>. Mais
  <filename>postgres_fdw</filename> fournit une syntaxe plus transparente et
  respectant les standards pour l'accès à des tables distantes. Elle peut
  aussi donner de meilleures performances dans beaucoup de cas.
 </para>

 <para>
  Pour préparer un accès distant en utilisant <filename>postgres_fdw</filename>&nbsp;:
  <orderedlist spacing="compact">
   <listitem>
    <para>
     Installez l'extension  <filename>postgres_fdw</filename> en utilisant
     <xref linkend="sql-createextension"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     Créez un objet serveur distant en utilisant <xref linkend="sql-createserver"/>,
     pour représenter chaque base distante à laquelle vous souhaitez vous
     connecter. Indiquez les informations de connexions, sauf
     <literal>user</literal> et <literal>password</literal>, comme options de
     l'objet serveur.
    </para>
   </listitem>
   <listitem>
    <para>
     Créez une correspondance d'utilisateur avec <xref
     linkend="sql-createusermapping"/> pour chaque utilisateur de la base que
     vous voulez autoriser à accéder à un serveur distant. Indiquez le nom
     et le mot de passe de l'utilisateur distant avec les options
     <literal>user</literal> et <literal>password</literal> de la correspondance
     d'utilisateur.
    </para>
   </listitem>
   <listitem>
    <para>
     Créez une table distante avec <xref linkend="sql-createforeigntable"/>
     ou <xref linkend="sql-importforeignschema"/>
     pour chaque table distante que vous voulez utilisé. Les colonnes de la
     table distante doit correspondre aux colonnes de la table sur le serveur
     distant. Néanmoins, vous pouvez utiliser un nom de table et des noms de
     colonne différents de ceux de la table sur le serveur distant si vous
     indiquez les bons noms de colonne en options de la table distante.
    </para>
   </listitem>
  </orderedlist>
 </para>

 <para>
  Maintenant, vous avez seulement besoin de <command>SELECT</command> sur la
  table distante pour accéder aux données de la table du serveur distant. Vous
  pouvez aussi modifier la table sur le serveur distant en utilisant les
  commandes <command>INSERT</command>, <command>UPDATE</command>,
  <command>DELETE</command> et <command>TRUNCATE</command>.
  (Bien sûr, l'utilisateur distant que vous avez spécifié dans vos
  correspondances d'utilisateur doit avoir les droits pour réaliser ces
  actions.)
 </para>

 <para>
  Notez que l'option <literal>ONLY</literal> spécifiée dans
  <command>SELECT</command>, <command>UPDATE</command>,
  <command>DELETE</command> ou <command>TRUNCATE</command> n'a pas d'effet
  lors des accès ou modifications d'une table distante.
 </para>

 <para>
  Notez que <filename>postgres_fdw</filename> n'a pour l'instant pas de
  support pour les instructions <command>INSERT</command> avec une clause
  <literal>ON CONFLICT DO UPDATE</literal>. Néanmoins, la clause <literal>ON
   CONFLICT DO NOTHING</literal> est supporté, si la spécification de l'index
  unique est omise. Notez aussi que <filename>postgres_fdw</filename> supporte
  le déplacement de ligne demandé par des instructions
  <command>UPDATE</command> exécutées sur des tables partitionnées, mais il ne
  gère pas le cas où une partition distante choisir pour insérer une ligne est
  aussi une partition cible d'<command>UPDATE</command> qui sera mise à jour
  ailleurs dans la même commande.
 </para>

 <para>
  Il est généralement recommandé que les colonnes d'une table distante soient
  déclarées avec exactement les mêmes types de données et le même collationnement
  que celles utilisées pour les colonnes référencées dans le table du serveur
  distant. Bien que <filename>postgres_fdw</filename> est actuellement assez
  lâche sur les conversions de type de données, des anomalies sémantiques
  surprenantes peuvent survenir quand les types ou les collationnements ne
  correspondent pas dans le cas où le serveur distant interprète légèrement
  différemment les conditions de la requête.
 </para>

 <para>
  Notez qu'une table distante peut être déclarée avec moins de colonnes ou avec
  les colonnes dans un ordre différent. La correspondance des colonnes sur
  la table du serveur distant se fait par nom, et non pas par position.
 </para>

 <sect2>
  <title>Options FDW de postgres_fdw</title>

  <sect3>
   <title>Options de connexions</title>

   <para>
    Un serveur distant utilisant le wrapper de données distantes
    <filename>postgres_fdw</filename> peut avoir les mêmes options que celles
    acceptées par <application>libpq</application> dans les chaînes de connexion
    comme décrit dans <xref linkend="libpq-paramkeywords"/>. Cependant, ces
    options ne sont pas autorisées ou sont gérées d'une façon spéciale&nbsp;:

    <itemizedlist spacing="compact">
     <listitem>
      <para>
       <literal>user</literal>, <literal>password</literal> et
       <literal>sslpassword</literal> (spécifiez-les au
       niveau de la correspondance d'utilisateur, ou utilisez un
       fichier service)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>client_encoding</literal> (ceci est configuré automatiquement à
       partir de l'encodage du serveur local)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>fallback_application_name</literal> (toujours configuré à
       <literal>postgres_fdw</literal>)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>sslkey</literal> et <literal>sslcert</literal> - ils peuvent
       apparaître soit dans une connexion, soit dans la correspondance
       d'utilisateur soit dans les deux. Si ce dernier cas est vrai, la
       configuration de la correspondance d'utilisateur surcharge la
       configuration de la connexion.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    Seuls les super-utilisateurs peuvent créer ou modifier des correspondances
    d'utilisateur avec les paramètres <literal>sslcert</literal> et
    <literal>sslkey</literal>.
   </para>

   <para>
    Seuls les super-utilisateurs peuvent se connecter à un serveur distant sans
    authentification par mot de passe. Donc spécifiez toujours l'option
    <literal>password</literal> pour les correspondances d'utilisateur
    appartenant aux utilisateurs simples.
   </para>

   <para>
    Un super-utilisateur peut dépasser cette vérification sur une base
    par-correspondance-utilisateur en configurant l'option
    <literal>password_required 'false'</literal>, par exemple&nbsp;:
    <programlisting>
ALTER USER MAPPING FOR some_non_superuser SERVER loopback_nopw
OPTIONS (ADD password_required 'false');
    </programlisting>
    Pour empêcher des utilisateurs sans droit d'exploiter les droits
    d'authentification de l'utilisateur unix utilisé par le serveur PostgreSQL
    pour escalader vers des droits super-utilisateur, seul le super-utilisateur
    peut configurer cette option sur une correspondance d'utilisateur.
   </para>

   <para>
    Une grande attention est nécessaire pour s'assurer que cela n'autorise pas
    l'utilisateur à se connecter comme un super-utilisateur sur la base de
    données distante d'après les CVE-2007-3278 et CVE-2007-6601. Ne configurez
    pas <literal>password_required=false</literal> sur le rôle
    <literal>public</literal>. Gardez en tête que l'utilisateur peut
    potentiellement utiliser tout certificat client, le fichier
    <filename>.pgpass</filename>, le fichier
    <filename>.pg_service.conf</filename>, et les autres fichiers se trouvant
    dans le répertoire personnel unix de l'utilisateur système qui exécute le
    serveur PostgreSQL. Ils peuvent aussi utiliser toute relation de confiance
    autorisée par les modes d'authentification comme <literal>peer</literal>
    et <literal>ident</literal>.
   </para>
  </sect3>

  <sect3>
   <title>Options pour le nom de l'objet</title>

   <para>
    Ces options peuvent être utilisées pour contrôler les noms utilisés dans
    les requêtes SQL envoyées au serveur <productname>PostgreSQL</productname>
    distant. Ces options sont nécessaires lorsqu'une table distante est créée
    avec des noms différents de ceux de la table du serveur distant.
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>schema_name</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour une table distante, donne le
       nom du schéma à utiliser pour la table du serveur distant. Si cette
       option est omise, le nom du schéma de la table distante est utilisé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>table_name</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour une table distante, donne le
       nom de la table à utiliser pour la table du serveur distant. Si cette
       option est omise, le nom de la table distante est utilisé.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>column_name</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour une colonne d'une table distante,
       donne le nom de la colonne à utiliser pour la colonne de la table du serveur
       distant. Si cette option est omise, le nom de la colonne de la table
       distante est utilisé.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

  </sect3>

  <sect3>
   <title>Options d'estimation du coût</title>

   <para>
    <filename>postgres_fdw</filename> récupère des données distantes en exécutant
    des requêtes sur des serveurs distants. Idéalement, le coût estimé du parcours
    d'une table distante devrait être celui occasionné par le parcours de la
    table sur le serveur distant, et un supplément causé par la communication entre
    le serveur local et le serveur distant. Le moyen le plus fiable d'obtenir
    une telle estimation est de demander au serveur distant, puis d'ajouter
    quelque chose pour le supplément. Pour des requêtes simples, cela ne vaut
    pas le coût d'une requête supplémentaire vers le serveur distant. Donc
    <filename>postgres_fdw</filename> propose les options suivantes pour
    contrôler la façon dont l'estimation de coût est faite&nbsp;:
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>use_remote_estimate</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour une table distante ou pour
       un serveur distant, contrôle si <filename>postgres_fdw</filename>
       exécute des commandes <command>EXPLAIN</command> distantes pour obtenir
       les estimations de coût. Une configuration sur la table distante surcharge
       celle sur le serveur, mais seulement pour cette table. La valeur par
       défaut est <literal>false</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_startup_cost</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour un serveur distant, est une
       valeur numérique qui est ajoutée au coût de démarrage estimé de tout
       parcours de table distante sur ce serveur. Cela représente le coût
       supplémentaire causé par l'établissement d'une connexion, l'analyse et
       la planification de la requête du côté du serveur distant, etc. La valeur
       par défaut est <literal>100</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_tuple_cost</literal></term>
     <listitem>
      <para>
       Cette option, qui peut être indiquée pour un serveur distant, est une
       valeur en virgule flottante qui est utilisée comme coût supplémentaire
       par ligne
       pour les parcours de la table distante sur ce serveur. Cela représente
       le coût supplémentaire associé au transfert de données entre les
       serveurs. Vous pouvez augmenter ou réduire ce nombre pour refléter
       les latences réseau vers le serveur distant. La valeur par défaut est
       <literal>0.01</literal>.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

   <para>
    Quand <literal>use_remote_estimate</literal> est vrai,
    <filename>postgres_fdw</filename> obtient le nombre de lignes et les
    estimations de coût à partir du serveur distant. Il ajoute
    <literal>fdw_startup_cost</literal> et <literal>fdw_tuple_cost</literal>
    aux estimations de coût. Quand <literal>use_remote_estimate</literal> est
    faux, <filename>postgres_fdw</filename> réalise le décompte local des lignes
    ainsi que l'estimation de coût, puis ajoute <literal>fdw_startup_cost</literal>
    et <literal>fdw_tuple_cost</literal> aux estimations de coût. Cette
    estimation locale a peu de chances d'être précise sauf si des copies locales
    des statistiques de la table distante sont disponibles. Exécuter
    <xref linkend="sql-analyze"/> sur la table distante permet de mettre à jour
    les statistiques locales&nbsp;; cela exécute un parcours sur la table
    distante, puis calcule et enregistre les statistiques comme si la table
    était locale. Garder des statistiques locales peut être utile pour réduire
    la surcharge de planification par requête pour une table distante mais, si
    la table distante est fréquemment mise à jour, les statistiques locales
    seront rapidement obsolètes.
   </para>

  </sect3>

  <sect3>
   <title>Options d'exécution à distance</title>

   <para>
    Par défaut, seules les clauses <literal>WHERE</literal> utilisant des
    opérateurs et des fonctions intégrés sont considérés pour une exécution
    sur le serveur distant. Les clauses impliquant des fonctions non intégrées
    sont vérifiées localement une fois les lignes récupérées. Si ces fonctions
    sont disponibles sur le serveur distant et peuvent produire les mêmes
    résultats que localement, les performances peuvent être améliorées en
    envoyant ces clauses <literal>WHERE</literal> pour une exécution distante.
    Ce comportement peut être contrôlé en utilisant l'option suivante&nbsp;:
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>extensions</literal></term>
     <listitem>
      <para>
       Cette option est une liste de noms d'extensions
       <productname>PostgreSQL</productname>, séparés par des
       virgules, installées dans des versions compatibles sur les serveurs
       local et distant. Les fonctions et opérateurs immutables et appartenant
       à une extension listée seront considérées pour une exécution sur le
       serveur distant. Cette option peut seulement être spécifiée sur les
       serveurs distants, et non pas par table.
      </para>

      <para>
       Lors de l'utilisation de l'option <literal>extensions</literal>,
       <emphasis>il est de la responsabilité de l'utilisateur</emphasis> que
       les extensions listées existent bien et se comportent de façon identique
       sur les serveurs local et distant. Dans le cas contraire, les requêtes
       pourraient échouer ou se comporter de façon inattendue.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fetch_size</literal></term>
     <listitem>
      <para>
       Cette option indique le nombre de lignes que
       <filename>postgres_fdw</filename> doit récupérer à chaque opération
       de lecture. Cette option est disponible au niveau serveur et table.
       Une configuration spécifiée sur une table surcharge celle du serveur.
       La valeur par défaut est <literal>100</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>batch_size</literal></term>
     <listitem>
      <para>
       Cette option spécifie le nombre de lignes que
       <filename>postgres_fdw</filename> doit insérer à chaque opération
       d'insertion. Elle est disponible au niveau serveur et/ou table
       distante. L'option spécifiée sur une table surcharge celle spécifiée
       sur le serveur. La valeur par défaut est <literal>1</literal>.
      </para>

      <para>
       Notez que le nombre réel de lignes qu'insère
       <filename>postgres_fdw</filename> en une fois dépend du nombre de
       colonnes et de la valeur fournie pour <literal>batch_size</literal>.
       Le batch est exécuté comme une seule requête, et le protocole libpq
       (qu'utilise <filename>postgres_fdw</filename> pour se connecter au
       serveur distant) limitent le nombre de paramètres dans une seule
       requête à 65535. Quand le nombre de colonne *
       <literal>batch_size</literal> dépasse la limite, le paramètre
       <literal>batch_size</literal> sera ajusté pour éviter une erreur.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>

  <sect3>
   <title>Options d'exécution asynchrone</title>

   <para>
    <filename>postgres_fdw</filename> supporte les exécutions asynchrones, qui
    exécutent plusieurs parties d'un nœud <structname>Append</structname> de
    manière concurrente plutôt qu'en série pour améliorer les performances.
    L'exécution peut être contrôlée en utilisant l'option suivante&nbsp;:
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>async_capable</literal></term>
     <listitem>
      <para>
       Cette option contrôle si <filename>postgres_fdw</filename> permet de
       parcourir de manière concurrente les tables distantes pour les
       exécutions asynchrones. Elle est configurable au niveau du serveur
       distant et/ou de la table distante. L'option spécifiée au niveau table
       surcharge l'option au niveau serveur. La valeur par défaut est
       <literal>false</literal>.
      </para>

      <para>
       Pour s'assurer que les données retournées depuis un serveur distant
       sont cohérentes, <filename>postgres_fdw</filename> n'ouvrira qu'une
       seule connexion pour un serveur distant et exécutera les requêtes sur
       ce serveur séquentiellement même si de nombreuses tables distantes
       sont impliquées, sauf si ces tables sont sujettes à différentes
       correspondances d'utilisateur. Dans ce cas, il peut être plus
       performant de désactiver cette option pour éliminer la surcharge
       associée à l'exécution asynchrone des requêtes.
      </para>

      <para>
       Une exécution asynchrone est réalisée quand un nœud
       <structname>Append</structname> contient aussi bien un ou des
       sous-plans exécutés de manière synchrone que un ou des sous-plans
       exécutés de manière asynchrone. Dans un tel cas, si les sous-plans
       asynchones sont ceux traités par <filename>postgres_fdw</filename>,
       les lignes des sous-plans asynchrones ne sont pas retournés avant
       qu'au moins un sous-plan synchrone retourne toutes ses lignes, car ce
       sous-plan est exécuté pendant que les sous-plans aynchrones attendent
       les résultats des requêtes asynchrones envoyées au serveur distant. Ce
       comportement pourrait changer dans une version future.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </sect3>

  <sect3>
   <title>Options de mise à jour</title>

   <para>
    Par défaut, toutes les tables distantes utilisant <filename>postgres_fdw</filename>
    sont supposées comme étant modifiables. Cela peut se surcharger en utilisant
    l'option suivante&nbsp;:
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>updatable</literal></term>
     <listitem>
      <para>
       Cette option contrôle si <filename>postgres_fdw</filename> autorise les
       tables distantes à être modifiées en utilisant les commandes
       <command>INSERT</command>, <command>UPDATE</command> et
       <command>DELETE</command>. Cette option est utilisable sur une table
       distante ou sur un serveur distant. La configuration de cette option au
       niveau table surcharge celle au niveau serveur. La valeur par défaut
       est <literal>true</literal>.
      </para>

      <para>
       Bien sûr, si la table distante n'est pas modifiable, une erreur surviendra
       malgré tout. L'utilisation de cette option permet principalement que
       l'erreur soit renvoyée localement, sans avoir à tenter l'exécution sur
       le serveur distant. Notez néanmoins que les vues
       <literal>information_schema</literal> indiqueront que la table distante
       est modifiable ou pas, suivant la configuration de cette option, et donc
       sans vérification du serveur distant.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </sect3>

  <sect3>
   <title>Options de troncabilité</title>

   <para>
    Par défaut, toutes les tables distantes utilisant
    <filename>postgres_fdw</filename> sont considérées comme troncable. Ceci
    peut être surchargé en utilisant l'option suivante&nbsp;:
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>truncatable</literal></term>
     <listitem>
      <para>
       Cette option contrôle si <filename>postgres_fdw</filename> permet aux
       tables distantes d'être tronquées en utilisant la commande
       <command>TRUNCATE</command>. Elle est disponible au niveau du server
       distant ainsi qu'à celui de la table distante. L'option au niveau
       table surcharge l'option au niveau serveur. La valeur par défaut est
       <literal>true</literal>.
      </para>

      <para>
       Bien sûr, si la table distante n'est en fait pas troncable, une erreur
       se produira de toute façon. L'utilisation principale de cette option
       permet que l'erreur soit déclenchée localement sans requêter le
       serveur distant.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>

  <sect3>
   <title>Options d'import</title>

   <para>
    <filename>postgres_fdw</filename> est capable d'importer les définitions
    des tables distantes en utilisant <xref
    linkend="sql-importforeignschema"/>. Cette commande crée les définitions
    des tables distantes sur le serveur local, correspondant aux tables et
    vues présentes sur le serveur distant. Si les tables distantes à importer
    ont des colonnes de type défini par des utilisateurs, le serveur local
    doit avoir des types compatibles de même nom.
   </para>

   <para>
    Le comportement de l'import est personnalisable avec les options suivantes
    (à fournir à la commande <command>IMPORT FOREIGN SCHEMA</command>)&nbsp;:
   </para>

   <variablelist>
    <varlistentry>
     <term><literal>import_collate</literal></term>
     <listitem>
      <para>
       Cette option contrôle si les options <literal>COLLATE</literal> d'une
       colonne sont inclus dans les définitions des tables distantes
       importées à partir d'un serveur distant. La valeur par défaut est
       <literal>true</literal>. Vous pourriez avoir besoin de la désactiver
       si le serveur distant possède un ensemble de noms de collation
       différent de celui du serveur local, ce qui risque d'être le cas s'il
       utilise un autre système d'exploitation. Néanmoins, si vous le faites,
       il existe un risque réel que les collations importées dans colonnes de
       la table ne correspondent pas aux données sous-jacentes, résultant en
       un comportement anormal des requêtes.
      </para>

      <para>
       Même quand ce paramètre est configuré à <literal>true</literal>,
       l'import des colonnes dont la collation est la valeur par défaut du
       serveur distant peut êre risqué. Elles seront importées avec
       <literal>COLLATE "default"</literal>, ce qui sélectionnera la
       collation par défaut du serveur local, qui pourrait être différent.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>import_default</literal></term>
     <listitem>
      <para>
       Cette option contrôle si les expressions <literal>DEFAULT</literal>
       d'une colonne sont incluses dans les définitions des tables distantes
       importées d'un serveur distant. La valeur par défaut est
       <literal>false</literal>. Si vous activez cette option, faites
       attention au fait que les valeurs par défaut pourraient être calculées
       différemment sur le serveur local et sur le serveur distant&nbsp;; par
       exemple, <function>nextval()</function> est une source habituelle de
       problèmes. La commande <command>IMPORT</command> échouera si une
       expression par défaut importée utilise une fonction ou un opérateur qui
       n'existe pas localement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>import_generated</literal></term>
     <listitem>
      <para>
       Cette option contrôle si les expressions <literal>GENERATED</literal>
       de colonnes sont incluses dans les définitions des tables distantes
       importées à partir d'un serveur distant. La valeur par défaut est
       <literal>true</literal>. La commande <command>IMPORT</command>
       échouera si une expression importée utilise une fonction ou un
       opérateur qui n'existe pas localement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>import_not_null</literal></term>
     <listitem>
      <para>
       Cette option contrôle si les contraintes <literal>NOT NULL</literal>
       des colonnes sont incluses dans les définitions des tables distantes
       importées à partir d'un serveur distant. La valeur par défaut est
       <literal>true</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    Notez que les contraintes autres que <literal>NOT NULL</literal> ne seront
    jamais importées des tables distantes. Bien que
    <productname>PostgreSQL</productname> supporte les contraintes
    <literal>CHECK</literal> sur les tables distantes, rien n'existe pour les
    importer automatiquement à cause du risque qu'une expression de contrainte
    puisse être évaluée différemment entre les serveurs local et distant.
    Toute incohérence du comportement d'une contrainte
    <literal>CHECK</literal> pourrait amener des erreurs difficile à détecter
    dans l'optimisation des requêtes. Donc, si vous souhaitez importer les
    contraintes <literal>CHECK</literal>, vous devez le faire manuellement et
    vous devez vérifier la sémantique de chaque contrainte avec attention.
    Pour plus de détails sur le traitement des contraintes
    <literal>CHECK</literal> sur les tables distantes, voir <xref
    linkend="sql-createforeigntable"/>.
   </para>

   <para>
    Les tables ou tables distantes qui sont des partitions d'autres tables sont
    imported only when they are explicitly specified in
    <literal>LIMIT TO</literal> clause.  Otherwise they are automatically
    excluded from <xref linkend="sql-importforeignschema"/>.
    Since all data can be accessed through the partitioned table
    which is the root of the partitioning hierarchy, importing only
    partitioned tables should allow access to all the data without
    creating extra objects.
   </para>

  </sect3>

  <sect3>
    <title>Options de gestion de connexions</title>

    <para>
     Par défaut, toutes les connexions que <filename>postgres_fdw</filename>
     établit au serveur distant sont conservées ouvertes en session locale
     pour une réutilisation.
    </para>

    <variablelist>

     <varlistentry>
      <term><literal>keep_connections</literal></term>
      <listitem>
       <para>
        Cette option contrôle si <filename>postgres_fdw</filename> conserve
        les connexions au serveur distant ouvertes, permettant aux requêtes
        ultérieures de les réutiliser. Elle n'est disponible qu'au niveau
        serveur distant. La valeur par défaut est <literal>on</literal>. Si
        elle est configurée à <literal>off</literal>, toutes les connexions à
        ce serveur distant seront supprimées à la fin de chaque transaction.
      </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect3>
 </sect2>

<sect2>
  <title>Fonctions</title>

  <variablelist>
   <varlistentry>
    <term><function>postgres_fdw_get_connections(OUT server_name text, OUT valid boolean) retourne un setof record</function></term>
    <listitem>
     <para>
      Cette fonction renvoie les noms des serveurs distants de toutes les
      connexions ouvertes que <filename>postgres_fdw</filename> a établies.
      Elle renvoie aussi la validité ou non de chaque connexion.
      <literal>false</literal> est retourné si la connexion au serveur
      distant est utilisé dans la transaction courante locale sauf si le
      serveur distant ou les correspondances d'utilisateur sont modifiées ou
      supprimées(notez que le nom de serveur d'une connexion invalide sera
      <literal>NULL</literal> si le serveur est supprimé), et ainsi de telles
      connexions invalides seront fermées à la fin de cette transaction.
      <literal>true</literal> est retournée dans les autres cas. S'il n'y a
      pas de connexions ouvertes, aucun enregistrement n'est retourné.
      Exemple d'utilisation de cette fonction&nbsp;:

      <screen>postgres=# SELECT * FROM postgres_fdw_get_connections() ORDER BY 1;

 server_name | valid
-------------+-------
 loopback1   | t
 loopback2   | f</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>postgres_fdw_disconnect(server_name text) retourne un boolean</function></term>
    <listitem>
     <para>
      Cette fonction supprime les connexions ouvertes qui sont établies par
      <filename>postgres_fdw</filename> depuis une session locale à un
      serveur distant avec un nom donné. Notez qu'il peut y avoir de
      multiples connexions au serveur distant donné en utilisant différentes
      correspondances d'utilisateur. Si les connexions sont utilisées dans la
      transaction courante locale, elles ne sont pas déconnectées et des
      messages d'alerte sont affichés. La fonction retourne
      <literal>true</literal> si elle déconnecte au moins une connexion,
      sinon <literal>false</literal>. Si aucun serveur distant avec un nom
      donné n'est trouvé, une erreur est affichée. Exemple d'utilisation de
      la fonction&nbsp;:

      <screen>postgres=# SELECT postgres_fdw_disconnect('loopback1');

 postgres_fdw_disconnect
-------------------------
 t
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><function>postgres_fdw_disconnect_all() retourne un boolean</function></term>
    <listitem>
     <para>
      La fonction supprime toutes les connexions ouvertes établies par
      <filename>postgres_fdw</filename> depuis la session locale au serveur
      distant. Si les connexions sont utilisées dans la transaction locale
      courante, elles ne sont pas déconnectées et des messages d'alerte sont
      affichés. La fonction retourne <literal>true</literal> si elle
      déconnecte au moins une connexion, sinon <literal>false</literal>.
      Exemple d'utilisation de la fonction&nbsp;:

      <screen>postgres=# SELECT postgres_fdw_disconnect_all();

 postgres_fdw_disconnect_all
-----------------------------
 t
</screen>
     </para>
    </listitem>
   </varlistentry>
   </variablelist>

</sect2>

 <sect2>
  <title>Gestion des connexions</title>

  <para>
   <filename>postgres_fdw</filename> établit une connexion au serveur distant
   lors de la première requête qui utilise une table distante associée avec
   le serveur distant. Par défaut cette connexion est conservée et
   ré-utilisée pour les requêtes suivantes dans la même session. Ce
   comportement peut être contrôlé en utilisant l'option
   <literal>keep_connections</literal> pour un serveur distant. Si plusieurs
   correspondances d'utilisateur sont utilisées pour accéder au serveur
   distant, une connexion est établie pour chaque correspondance
   d'utilisateur.
  </para>

  <para>
   Lors de changement de la définition ou suppression d'un serveur distant ou
   de correspondances d'utilisateur, les connexions associées sont fermées.
   Mais notez que si des connexions sont utilisées dans la transaction locale
   courante, elles sont conservées jusqu'à la fin de transaction. Les
   connexions fermées seront ré-établies quand cela sera nécessaire par les
   futures requêtes utilisant une table distante.
  </para>


  <para>
   Une fois qu'une connexion à un serveur distant a été établie, elle est par
   défaut conservée jusqu'à ce que la session locale ou distante
   correspondante termine. Pour déconnecter une connexion explicitement,
   l'option <literal>keep_connections</literal> pour un serveur distant peut
   être désactivée. Il est possible aussi d'utiliser les fonctions
   <function>postgres_fdw_disconnect</function> et
   <function>postgres_fdw_disconnect_all</function>. Par exemple, ces
   dernières sont utiles pour fermer les connexions qui ne sont plus
   nécessaires, libérant ainsi les connexions sur le serveur distant.
  </para>
 </sect2>

 <sect2>
  <title>Gestion des transactions</title>

  <para>
   Lorsqu'une requête référence des tables sur un serveur distant,
   <filename>postgres_fdw</filename> ouvre une transaction sur le serveur
   distant si une transaction n'est pas déjà ouverte pour la transaction
   locale en cours. La transaction distante est validée ou annulée suivant
   que la transaction locale est validée ou annulée. Les points de
   sauvegardes sont gérés de la même façon en créant les points de
   sauvegarde correspondants.
  </para>

  <para>
   La transaction distante utilise le niveau d'isolation
   <literal>SERIALIZABLE</literal> quand la transaction locale a le niveau
   <literal>SERIALIZABLE</literal>. Dans les cas contraires, elle utilise le
   niveau <literal>REPEATABLE READ</literal>. Ce choix assure que, si une requête
   réalise plusieurs parcours de table sur le serveur distant, elle obtiendra
   des résultats cohérents pour tous les parcours. Une conséquence est que les
   requêtes successives à l'intérieur d'une seule transaction verront les mêmes
   données provenant du serveur distant, même si des mises à jour sont réalisées
   en même temps avec l'activité standard du serveur. Ce comportement serait
   attendue de toute façon si la transaction locale utilise le niveau d'isolation
   <literal>SERIALIZABLE</literal> ou <literal>REPEATABLE READ</literal> mais
   elle pourrait surprendre pour une transaction locale en niveau <literal>READ
    COMMITTED</literal>. Une prochaine version de
   <productname>PostgreSQL</productname> pourrait modifier ce comportement.
  </para>

  <para>
   Notez que <filename>postgres_fdw</filename> ne supporte pas actuellement de
   préparer la transaction distante pour une validation en deux phases (2PC).
  </para>
 </sect2>

 <sect2>
  <title>Optimisation des requêtes distantes</title>

  <para>
   <filename>postgres_fdw</filename> tente d'optimiser les requêtes distantes
   pour réduire la quantité de données transférées depuis les serveurs distants.
   Cela se fait en envoyant les clauses <literal>WHERE</literal> au serveur
   distant pour exécution, et en ne récupérant que les colonnes nécessaires
   pour la requête courante. Pour réduire le risque de mauvaise exécution des
   requêtes, les clauses <literal>WHERE</literal> ne sont pas envoyées au serveur
   distant sauf si elles utilisent seulement des types de données, opérateurs
   et fonctions intégrées ou appartenant à une extension listée dans l'option
   <literal>extensions</literal> du serveur distant. Les opérateurs et fonctions
   dans ce type de clause doivent aussi être <literal>IMMUTABLE</literal>. Pour
   une requête <command>UPDATE</command> ou <command>DELETE</command>,
   <filename>postgres_fdw</filename> tente d'optimiser l'exécution de la requête
   en envoyant la requête complète au serveur distant s'il n'existe pas de
   clauses <literal>WHERE</literal> pouvant être envoyées au serveur distant, pas
   de jointures locales pour la requête, pas de triggers <literal>BEFORE</literal>
   ou <literal>AFTER</literal> au niveau ligne ou de colonnes calculées
   automatiquement sur la table cible, et pas de
   contraintes <literal>CHECK OPTION</literal> pour les vues parentes. Dans un
   <command>UPDATE</command>, les expressions à affecter aux colonnes cibles
   doivent seulement utiliser les types de données intégrées, les opérateurs ou les
   fonctions <literal>IMMUTABLE</literal> pour réduire le risque de mauvaise
   exécution de la requête.
  </para>

  <para>
   Quand <filename>postgres_fdw</filename> rencontre une jointure entre des
   tables externes sur le même serveur distant, il envoie la jointure entière
   au serveur distant, sauf s'il pense qu'il sera plus efficace de récupérer
   les lignes de chaque table individuellement ou si les références de table
   sont sujet à des correspondances d'utilisateur différentes. Lors de l'envoi
   des clauses <literal>JOIN</literal>, il prend les mêmes précautions que
   mentionnées ci-dessus pour les clauses <literal>WHERE</literal>.

  </para>

  <para>
   La requête envoyée au serveur distant pour exécution peut être examinée en
   utilisant <command>EXPLAIN VERBOSE</command>.
  </para>
 </sect2>

 <sect2>
  <title>Environnement d'exécution de requêtes distantes</title>

  <para>
   Dans les sessions distantes ouvertes par <filename>postgres_fdw</filename>,
   le paramètre <xref linkend="guc-search-path"/> est configuré à
   <literal>pg_catalog</literal>, pour que seuls les objets internes soient
   visibles, sauf utilisant d'un nom de schéma. Ceci n'est pas un problème
   pour les requêtes générées par <filename>postgres_fdw</filename> lui-même
   car il fournit toujours ce type de qualification. Néanmoins, cela peut se
   révéler problématique pour les fonctions exécutées sur le serveur distant
   via des triggers ou des règles sur les tables distantes. Par exemple, si
   une table distante est en fait une vue, toute fonction utilisée dans cette
   vue sera exécutée avec le chemin de recherche restreint. Il est recommandé
   de qualifier tous les noms dans ce type de fonctions ou de leur attacher
   une option <literal>SET search_path</literal> (voir <xref
   linkend="sql-createfunction"/>) pour établir le chemin de recherche
   attendu.
  </para>

  <para>
   De même, <filename>postgres_fdw</filename> établie une configuration des
   sessions distantes pour différents paramètres :
   <itemizedlist spacing="compact">
    <listitem>
     <para>
      <xref linkend="guc-timezone"/> est positionné à <literal>UTC</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="guc-datestyle"/> est positionné à <literal>ISO</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="guc-intervalstyle"/> est positionné à <literal>postgres</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="guc-extra-float-digits"/> est positionné à
      <literal>3</literal> pour les serveurs distants de version 9.0 et après et
      est positionné à <literal>2</literal> pour les versions plus anciennes
     </para>
    </listitem>
   </itemizedlist>
   Ces paramètres sont moins à même d'être problématique que
   <varname>search_path</varname>, mais ils peuvent être gérés avec les options
   de fonction <literal>SET</literal> si le besoin devait se faire sentir.
  </para>

  <para>
   Il n'est <emphasis>pas</emphasis> recommandé de surcharger ce comportement
   en modifiant la configuration de la session pour ces paramètres. Cela peut
   être la cause d'un mauvais fonctionnement de
   <filename>postgres_fdw</filename>.
  </para>
 </sect2>

 <sect2>
  <title>Compatibilité entre versions</title>

  <para>
   <filename>postgres_fdw</filename> peut être utilisé avec les serveurs distants
   de version 8.3 et ultérieures. En lecture seule, il est possible d'aller aussi
   loin que la 8.1. Néanmoins, une limitation est que
   <filename>postgres_fdw</filename> assume généralement que les fonctions et
   opérateurs internes immutables sont sûrs pour être envoyés au serveur distant
   pour exécution s'ils apparaissent dans une clause <literal>WHERE</literal> de
   la table distante. Du coup, une fonction interne ajoutée depuis la sortie du
   serveur distant pourrait être envoyée pour exécution, résultant en un
   message d'erreur indiquant que la fonction n'existe pas (<quote>function does
    not exist</quote>) ou une erreur similaire. Ce type d'échec peut être
   contourné en réécrivant la requête, par exemple en embarquant la table
   distance dans un sous-<literal>SELECT</literal> avec <literal>OFFSET 0</literal>
   comme optimisation, et plaçant la fonction ou l'opérateur problématique
   en dehors du sous-<literal>SELECT</literal>.
  </para>
 </sect2>

 <sect2>
  <title>Exemples</title>

  <para>
   Voici un exemple de création d'une table distante avec
   <literal>postgres_fdw</literal>. Tout d'abord, il faut installer l'extension&nbsp;:
  </para>

  <programlisting>
CREATE EXTENSION postgres_fdw;
  </programlisting>

  <para>
   Ensuite, il faut créer un serveur distant avec <xref linkend="sql-createserver"/>.
   Dans cet exemple, nous souhaitons nous connecter à un serveur
   <productname>PostgreSQL</productname> sur l'hôte <literal>192.83.123.89</literal>
   écoutant sur le port <literal>5432</literal>.  La base de données sur le
   serveur distant sur laquelle la connexion est faite s'appelle
   <literal>foreign_db</literal>&nbsp;:

   <programlisting>
CREATE SERVER foreign_server
        FOREIGN DATA WRAPPER postgres_fdw
        OPTIONS (host '192.83.123.89', port '5432', dbname 'foreign_db');
   </programlisting>
  </para>

  <para>
   Une correspondance d'utilisateur, définie avec <xref linkend="sql-createusermapping"/>,
   est également nécessaire pour identifier le rôle qui sera utilisé sur le
   serveur distant&nbsp;:

   <programlisting>
CREATE USER MAPPING FOR local_user
        SERVER foreign_server
        OPTIONS (user 'foreign_user', password 'password');
   </programlisting>
  </para>

  <para>
   Il est maintenant possible de créer une table distante avec <xref
   linkend="sql-createforeigntable"/>.  Dans cet exemple, nous souhaitons
   accéder à la table nommée <structname>some_schema.some_table</structname>
   sur le serveur distant. Le nom local pour celle-ci sera
   <structname>foreign_table</structname>&nbsp;:

   <programlisting>
CREATE FOREIGN TABLE foreign_table (
        id integer NOT NULL,
        data text
)
        SERVER foreign_server
        OPTIONS (schema_name 'some_schema', table_name 'some_table');
   </programlisting>

   Il est essentiel que les types de données et autres propriétés des colonnes
   déclarées dans <command>CREATE FOREIGN TABLE</command> correspondent à la
   vraie table distante. Les noms des colonnes doivent également correspondre,
   à moins que des options <literal>column_name</literal> soient attachées aux
   colonnes individuelles pour montrer comment elles sont nommées sur la table
   distante.
   Dans de nombreux cas, l'utilisation de <link
   linkend="sql-importforeignschema"><command>IMPORT FOREIGN SCHEMA</command></link>
   est préférable à la construction manuelle des tables distantes.
  </para>
 </sect2>

 <sect2>
  <title>Auteur</title>
  <para>
   Shigeru Hanada <email>shigeru.hanada@gmail.com</email>
  </para>
 </sect2>

</sect1>
