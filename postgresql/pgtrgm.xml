<?xml version="1.0" encoding="UTF-8"?>
<!-- Dernière modification
     le       $Date$
     par      $Author$
     révision $Revision$ -->

<sect1 id="pgtrgm" xreflabel="pg_trgm">
 <title>pg_trgm</title>

 <indexterm zone="pgtrgm">
  <primary>pg_trgm</primary>
 </indexterm>

 <para>
  Le module <filename>pg_trgm</filename> fournit des fonctions et
  opérateurs qui permettent de déterminer des similarités de textes
  alphanumériques en fonction de correspondances de trigrammes. Il
  fournit également des classes d'opérateur accélérant les recherches de
  chaînes similaires.
 </para>

 <sect2>
  <title>Concepts du trigramme (ou trigraphe)</title>

  <para>
   Un trigramme est un groupe de trois caractères consécutifs pris dans une
   chaîne. Nous pouvons mesurer la similarité de deux chaînes en comptant le
   nombre de trigrammes qu'elles partagent. Cette idée simple est
   très efficace pour mesurer la similarité des mots dans la plupart des
   langues.
  </para>

  <!-- SAS 20081203 : Cette présentation rend mal-aisée la compréhension de
  l'exemple du fait des espaces induites par les <quote> -->
  <note>
   <para>
    <filename>pg_trgm</filename> ignore les caractères qui ne forment pas
    de mots (donc non alphanumériques) lors de l'extraction des trigrammes
    d'une chaîne de caractères.
    Chaque mot est considérée avoir deux espaces en préfixe et une espace en
    suffixe lors de la détermination de l'ensemble de trigrammes contenu dans
    la chaîne. Par exemple, l'ensemble des trigrammes dans la chaîne
    <quote><literal>cat</literal></quote> est
    <quote><literal>  c</literal></quote> ('  c'),
    <quote><literal> ca</literal></quote> (' ca'),
    <quote><literal>cat</literal></quote> et
    <quote><literal>at </literal></quote> ('at ').
    L'ensemble de trigrammes dans la chaîne
    <quote><literal>foo|bar</literal></quote> est
    <quote><literal>  f</literal></quote>,
    <quote><literal> fo</literal></quote>,
    <quote><literal>foo</literal></quote>,
    <quote><literal>oo </literal></quote>,
    <quote><literal>  b</literal></quote>,
    <quote><literal> ba</literal></quote>,
    <quote><literal>bar</literal></quote> et
    <quote><literal>ar </literal></quote>.

   </para>
  </note>
 </sect2>

 <sect2>
  <title>Fonctions et opérateurs</title>

  <para>
   Les fonctions fournies par le module <filename>pg_trgm</filename>
   sont affichées dans <xref linkend="pgtrgm-func-table"/> alors que
   les opérateurs sont indiqués dans <xref linkend="pgtrgm-op-table"/>.
  </para>

  <table id="pgtrgm-func-table">
   <title>Fonctions de <filename>pg_trgm</filename></title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Fonction</entry>
      <entry>Retour</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>similarity(text, text)</function><indexterm><primary>similarity</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       Renvoie un nombre indiquant la similarité des deux arguments. L'échelle
       du résultat va de zéro (indiquant que les deux chaînes sont complètement
       différentes) à un (indiquant que les deux chaînes sont identiques).
      </entry>
     </row>
     <row>
      <entry><function>show_trgm(text)</function><indexterm><primary>show_trgm</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>
       Renvoie un tableau de tous les trigrammes d'une chaîne donnée. (En
       pratique, ceci est peu utile, sauf pour le débogage.)
      </entry>
     </row>
     <row>
      <entry>
       <function>word_similarity(text, text)</function>
       <indexterm><primary>word_similarity</primary></indexterm>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Renvoie un nombre qui indique la plus grande similarité entre
       l'ensemble de trigrammes dans la première chaîne et toute étendue
       continue d'un ensemble trié de trigrammes dans la deuxième chaîne. Pour
       les détails, voir l'explication ci-dessous.
      </entry>
     </row>
     <row>
      <entry>
       <function>strict_word_similarity(text, text)</function>
       <indexterm><primary>strict_word_similarity</primary></indexterm>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Similarité stricte&nbsp;:
       identique à <function>word_similarity(text, text)</function>, mais
       force à étendre les limites pour correspondre aux limites du mot. Comme
       nous n'avons pas de trigrammes sur plusieurs mots, cette fonction
       renvoie en fait la plus grande similarité entre la première chaîne et
       toute étendue continue de mots de la deuxième chaîne.
      </entry>
     </row>
     <row>
      <entry><function>show_limit()</function><indexterm><primary>show_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       Renvoie la limite de similarité utilisée par l'opérateur
       <literal>%</literal>. Ceci configure la similarité minimale entre deux
       mots pour qu'ils soient considérés suffisamment proches, par exemple
       (<emphasis>obsolète</emphasis>).
      </entry>
     </row>
     <row>
      <entry><function>set_limit(real)</function><indexterm><primary>set_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       Configure la limite de similarité actuelle utilisée par l'opérateur
       <literal>%</literal>. Le limite se positionne entre 0 et 1, elle vaut
       par défaut 0,3. Renvoie la valeur passée (<emphasis>obsolète</emphasis>).
      </entry>
     </row>
     <row>
      <entry><type>text</type> <literal>&lt;-&gt;</literal> <type>text</type></entry>
      <entry><type>real</type></entry>
      <entry>
       Renvoie la <quote>distance</quote> entre les arguments, qui vaut
       un moins la valeur de <function>similarity()</function>.
      </entry>
     </row>
     <row>
      <entry>
       <type>text</type> <literal>&lt;&lt;-&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Renvoie la <quote>distance</quote> entre les arguments, qui est
       équivalente 1 moins la valeur de <function>word_similarity()</function>.
      </entry>
     </row>
     <row>
      <entry>
       <type>text</type> <literal>&lt;-&gt;&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Commutateur de l'opérateur <literal>&lt;&lt;-&gt;</literal>.
      </entry>
     </row>
     <row>
      <entry>
       <type>text</type> <literal>&lt;&lt;&lt;-&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Renvoie la <quote>distance</quote> entre les arguments, autrement dit 1
       moins la valeur de <function>strict_word_similarity()</function>.
      </entry>
     </row>
     <row>
      <entry>
       <type>text</type> <literal>&lt;-&gt;&gt;&gt;</literal> <type>text</type>
      </entry>
      <entry><type>real</type></entry>
      <entry>
       Commutateur de l'opérateur <literal>&lt;-&gt;&gt;&gt;</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Prenons l'exemple suivant&nbsp;:

<programlisting>
# SELECT word_similarity('word', 'two words');
 word_similarity
-----------------
             0.8
(1 row)
</programlisting>

   Dans la première chaîne, l'ensemble de trigrammes est
   <literal>{"  w"," wo","ord","wor","rd "}</literal>. Dans la seconde chaîne,
   l'ensemble trié de trigrammes est
   <literal>{"  t"," tw","two","wo ","  w"," wo","wor","ord","rds","ds "}</literal>.
   L'étendue la plus similaire d'un ensemble trié de trigrammes dans la
   seconde chaîne est <literal>{"  w"," wo","wor","ord"}</literal>, et la
   similarité est <literal>0.8</literal>.
  </para>

  <para>
   Cette fonction renvoie une valeur qui peut être comprise approximativement
   comme la plus grande similarité entre la première chaîne et toute
   sous-chaîne de la deuxième chaîne. Néanmoins, cette fonction n'ajoute pas
   de remplissage aux limites de l'étendue. De ce fait, le nombre de
   caractères supplémentaires présents dans la deuxième chaîne n'est pas
   considéré, sauf pour les limites de mots sans correspondance.
  </para>

  <para>
   En même temps, <function>strict_word_similarity(text, text)</function>
   sélectionne une étendue de mots dans la deuxième chaîne. Dans l'exemple
   ci-dessus, <function>strict_word_similarity(text, text)</function>
   sélectionnerait l'étendue d'un mot seul <literal>'words'</literal>, dont
   l'ensemble de trigrammes est
   <literal>{"  w"," wo","wor","ord","rds","ds"}</literal>.

<programlisting>
# SELECT strict_word_similarity('word', 'two words'), similarity('word', 'words');
 strict_word_similarity | similarity
------------------------+------------
               0.571429 |   0.571429
(1 row)
</programlisting>
  </para>

  <para>
   De ce fait, la fonction <function>strict_word_similarity(text,
   text)</function> est utile pour trouver la similarité de mots entiers,
   alors que <function>word_similarity(text, text)</function> est plus
   intéressant pour trouver la similarité de parties de mots.
  </para>

  <table id="pgtrgm-op-table">
   <title>Opérateurs de <filename>pg_trgm</filename></title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Opérateur</entry>
      <entry>Retour</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>text</type> <literal>%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Renvoie <literal>true</literal> si les arguments ont une similarité
       supérieure à la limite configurée par
       <varname>pg_trgm.similarity_threshold</varname>.
      </entry>
     </row>
     <row>
      <entry><type>text</type> <literal>&lt;%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Renvoie <literal>true</literal> si la similarité entre l'ensemble de
       trigrammes du premier argument et une étendue continue d'un ensemble
       trie de trigrammes dans le second argument est plus grande que la
       limite de similarité actuelle, telle qu'elle est configurée avec le
       paramètre <varname>pg_trgm.word_similarity_threshold</varname>.
      </entry>
     </row>
     <row>
      <entry><type>text</type> <literal>%&gt;</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Commutateur de l'opérateur <literal>&lt;%</literal>.
      </entry>
     </row>
     <row>
      <entry><type>text</type> <literal>&lt;&lt;%</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Renvoie <literal>true</literal> si son deuxième argument a une étendue
       continue d'un ensemble trigramme ordonné qui correspond aux limites du
       mot et que sa similarité à l'ensemble de trigramme du premier argument
       est plus grand que la limite de similarité du mot strict courant, telle
       qu'elle est configurée par le paramètre
       <varname>pg_trgm.strict_word_similarity_threshold</varname>.
      </entry>
     </row>
     <row>
      <entry><type>text</type> <literal>%&gt;&gt;</literal> <type>text</type></entry>
      <entry><type>boolean</type></entry>
      <entry>
       Commutateur de l'opérateur <literal>&lt;&lt;%</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>Paramètres GUC</title>

  <variablelist>
   <varlistentry id="guc-pgtrgm-similarity-threshold" xreflabel="pg_trgm.similarity_threshold">
    <term>
     <varname>pg_trgm.similarity_threshold</varname> (<type>real</type>)
     <indexterm>
      <primary>paramètre de configuration <varname>pg_trgm.similarity_threshold</varname></primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      Configure la limite actuelle de similarité utilisée par l'opérateur
      <literal>%</literal>. La limite doit se situer entre 0 et 1 (la valeur
      par défaut est 0,3).
     </para>
    </listitem>
   </varlistentry>
    <varlistentry id="guc-pgtrgm-word-similarity-threshold" xreflabel="pg_trgm.word_similarity_threshold">
     <term>
      <varname>pg_trgm.word_similarity_threshold</varname> (<type>real</type>)
      <indexterm>
       <primary>
        paramètre de configuration <varname>pg_trgm.word_similarity_threshold</varname>
       </primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Configure la limite actuelle de similarité utilisée par les opérateurs
       <literal>&lt;%</literal> et <literal>%&gt;</literal>. La limite doit être
       comprise entre 0 et 1 (la valeur par défaut est 0,6).
      </para>
     </listitem>
    </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
  <title>Support des index</title>

  <para>
   Le module <filename>pg_trgm</filename> fournit des classes d'opérateurs
   pour les index GiST et GIN qui vous permettent de créer un index sur une
   colonne de type text dans le but d'accélérer les recherches de similarité.
   Ces types d'index supportent les opérateurs de similarité décrits ci-dessus
   et supportent de plus les recherches basées sur des trigrammes pour les
   requêtes <literal>LIKE</literal>, <literal>ILIKE</literal>, <literal>~</literal>
   et <literal>~*</literal>. (Ces index
   ne supportent pas les opérateurs d'égalité ou de comparaison simple, donc
   vous pouvez aussi avoir besoin d'un index B-tree).
  </para>

  <para>
   Exemple&nbsp;:

   <programlisting>
CREATE TABLE test_trgm (t text);
CREATE INDEX trgm_idx ON test_trgm USING GIST (t gist_trgm_ops);
   </programlisting>
   ou
   <programlisting>
CREATE INDEX trgm_idx ON test_trgm USING GIN (t gin_trgm_ops);
   </programlisting>
  </para>

  <para>
   À ce point, vous aurez un index sur la colonne <structfield>t</structfield>
   que vous pouvez utiliser pour une recherche de similarité. Une requête
   typique est&nbsp;:
  </para>
  <programlisting>
SELECT t, similarity(t, '<replaceable>word</replaceable>') AS sml
  FROM test_trgm
  WHERE t % '<replaceable>word</replaceable>'
  ORDER BY sml DESC, t;
  </programlisting>
  <para>
   Ceci renverra toutes les valeurs dans la colonne texte qui sont suffisamment
   similaire à <replaceable>word</replaceable>, triées de la meilleure
   correspondance à la pire. L'index sera utilisé pour accélérer l'opération
   même sur un grand ensemble de données.
  </para>

  <para>
   Une variante de la requête ci-dessus est
   <programlisting>
SELECT t, t &lt;-&gt; '<replaceable>word</replaceable>' AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
   </programlisting>
   Ceci peut être implémenté assez efficacement par des index GiST, mais pas
   par des index GIN. Cela battra généralement la première formulation quand
   seulement un petit nombre de correspondances proches est demandé.
  </para>

  <para>
   De plus, vous pouvez utiliser un index sur la colonne
   <structfield>t</structfield> pour la similarité (stricte ou pas) entre mots.
  Des requêtes typiques sont&nbsp;:
<programlisting>
SELECT t, strict_word_similarity('<replaceable>word</replaceable>', t) AS sml
  FROM test_trgm
  WHERE '<replaceable>word</replaceable>' &lt;&lt;% t
  ORDER BY sml DESC, t;
</programlisting>
   et
<programlisting>
SELECT t, word_similarity('<replaceable>word</replaceable>', t) AS sml
  FROM test_trgm
  WHERE '<replaceable>word</replaceable>' &lt;% t
  ORDER BY sml DESC, t;
</programlisting>
   Ceci renverra toutes les valeurs dans la colonne texte pour lesquelles il
   existe une étendue continue de l'ensemble ordonné de trigrammes qui est
   suffisamment similaire à l'ensemble de trigrammes de
   <replaceable>word</replaceable>, trié de la meilleure correspondance à la
   pire. L'index sera utilisé pour accélérer l'opération y compris sur des
   très gros ensembles de données.
  </para>

  <para>
   Les variations possibles des requêtes ci-dessus sont&nbsp;:
<programlisting>
SELECT t, '<replaceable>word</replaceable>' &lt;&lt;-&gt; t AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   et
<programlisting>
SELECT t, '<replaceable>word</replaceable>' &lt;&lt;&lt;-&gt; t AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   Ceci peut être implémenté assez efficacement par des index GiST, mais pas
   par des index GIN.
  </para>

  <para>
   À partir de <productname>PostgreSQL</productname> 9.1, ces types d'index
   supportent aussi les recherches d'index pour <literal>LIKE</literal> et
   <literal>ILIKE</literal>, par exemple
   <programlisting>
SELECT * FROM test_trgm WHERE t LIKE '%foo%bar';
   </programlisting>
   La recherche par index fonctionne par extraction des trigrammes à partir
   de la chaîne recherchée puis en les recherchant dans l'index. Plus le
   nombre de trigrammes dans la recherche est important, plus efficace sera la
   recherche. Contrairement à des recherches basées sur les B-tree, la chaîne
   de recherche ne doit pas avoir un signe de pourcentage sur le côté gauche.
  </para>

  <para>
   À partir de <productname>PostgreSQL</productname> 9.3, ces types d'index
   supportent aussi les recherches dans l'index pour les correspondances
   d'expressions rationnelles (opérateurs <literal>~</literal> et
   <literal>~*</literal>). Par exemple
   <programlisting>
SELECT * FROM test_trgm WHERE t ~ '(foo|bar)';
   </programlisting>
   La recherche dans l'index fonctionne en extrayant les trigrammes de
   l'expression rationnelles et en les recherchant dans l'index. Plus il est
   possible d'extraire de trigrammes de l'expression rationnelle, plus la
   recherche dans l'index sera efficace. Contrairement aux recherches dans un
   B-tree, la chaîne de recherche n'a pas besoin d'être fixe à gauche.
  </para>

  <para>
   Pour les recherches <literal>LIKE</literal> ainsi que les recherches dans des
   expressions rationnelles, gardez en tête qu'un motif sans trigramme extractible
   sera la cause d'un parcours complet de l'index.
  </para>

  <para>
   Le choix d'un indexage GiST ou GIN dépend des caractéristiques relatives
   de performance qui sont discutées ailleurs.
  </para>
 </sect2>

 <sect2>
  <title>Intégration à la recherche plein texte</title>

  <para>
   La correspondance de trigramme est un outil très utile lorsqu'il est
   utilisé en conjonction avec un index plein texte. En particulier, il peut
   aider à la reconnaissance des mots mal orthographiés (ou tout simplement
   mal saisis), mots pour lesquels le mécanisme de recherche plein texte ne
   pourra pas faire une reconnaissance.
  </para>

  <para>
   La première étape est la génération d'une table auxiliaire contenant tous
   les mots uniques dans les documents&nbsp;:
  </para>

  <programlisting>
CREATE TABLE words AS SELECT word FROM
        ts_stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');
  </programlisting>

  <para>
   où <structname>documents</structname> est une table qui a un champ texte
   <structfield>bodytext</structfield> où nous voulons faire nos recherches.
   La raison de l'utilisation de la configuration <literal>simple</literal>
   avec la fonction <function>to_tsvector</function>, au lieu d'une
   configuration spécifique à la langue, est que nous voulons une liste des
   mots originaux.
  </para>

  <para>
   Ensuite, nous créons un index trigramme sur la colonne word&nbsp;:
  </para>

  <programlisting>
CREATE INDEX words_idx ON words USING GIN(word gin_trgm_ops);
  </programlisting>

  <para>
   Maintenant, une requête <command>SELECT</command> similaire à l'exemple
   précédent peut être utilisée pour suggérer des mots dans les termes de la
   recherche de l'utilisateur. Un test utile supplémentaire vient à demander
   que les mots sélectionnés soient aussi d'une longueur similaire au mot
   mal orthographié.
  </para>

  <note>
   <para>
    Comme la table <structname>words</structname> a été générée comme une table
    statique, séparée, il sera nécessaire de la regénérer périodiquement
    pour qu'elle reste raisonnablement à jour avec la collection des
    documents. Qu'elle soit exactement identique en permanence n'est
    habituellement pas nécessaire.
   </para>
  </note>
 </sect2>

 <sect2>
  <title>Références</title>

  <para>
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/">Site de
    développement de GiST</ulink>
  </para>
  <para>
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/">Site de
    développement de TSearch2</ulink>
  </para>
 </sect2>

 <sect2>
  <title>Auteurs</title>

  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscou, Université de Moscou,
   Russie
  </para>
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscou, Delta-Soft Ltd.,
   Russie
  </para>
  <para>
   Alexander Korotkov <email>a.korotkov@postgrespro.ru</email>, Moscou, Postgres Professional, Russie
  </para>
  <para>
   Documentation&nbsp;: Christopher Kings-Lynne
  </para>
  <para>
   Ce module est sponsorisé par Delta-Soft Ltd., Moscou, Russie.
  </para>
 </sect2>

</sect1>
